/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ReceivingProcess;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReceivingProcessApi {
    private ApiClient apiClient;

    public ReceivingProcessApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReceivingProcessApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addReceivingProcessAudit
     * @param receivingProcessId Id of the receivingProcess to add an audit to (required)
     * @param receivingProcessAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addReceivingProcessAuditCall(Integer receivingProcessId, String receivingProcessAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/receivingProcess/{receivingProcessId}/audit/{receivingProcessAudit}"
            .replaceAll("\\{" + "receivingProcessId" + "\\}", apiClient.escapeString(receivingProcessId.toString()))
            .replaceAll("\\{" + "receivingProcessAudit" + "\\}", apiClient.escapeString(receivingProcessAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addReceivingProcessAuditValidateBeforeCall(Integer receivingProcessId, String receivingProcessAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'receivingProcessId' is set
        if (receivingProcessId == null) {
            throw new ApiException("Missing the required parameter 'receivingProcessId' when calling addReceivingProcessAudit(Async)");
        }
        
        // verify the required parameter 'receivingProcessAudit' is set
        if (receivingProcessAudit == null) {
            throw new ApiException("Missing the required parameter 'receivingProcessAudit' when calling addReceivingProcessAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addReceivingProcessAuditCall(receivingProcessId, receivingProcessAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a receivingProcess
     * Adds an audit to an existing receivingProcess.
     * @param receivingProcessId Id of the receivingProcess to add an audit to (required)
     * @param receivingProcessAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addReceivingProcessAudit(Integer receivingProcessId, String receivingProcessAudit) throws ApiException {
        addReceivingProcessAuditWithHttpInfo(receivingProcessId, receivingProcessAudit);
    }

    /**
     * Add new audit for a receivingProcess
     * Adds an audit to an existing receivingProcess.
     * @param receivingProcessId Id of the receivingProcess to add an audit to (required)
     * @param receivingProcessAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addReceivingProcessAuditWithHttpInfo(Integer receivingProcessId, String receivingProcessAudit) throws ApiException {
        com.squareup.okhttp.Call call = addReceivingProcessAuditValidateBeforeCall(receivingProcessId, receivingProcessAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a receivingProcess (asynchronously)
     * Adds an audit to an existing receivingProcess.
     * @param receivingProcessId Id of the receivingProcess to add an audit to (required)
     * @param receivingProcessAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addReceivingProcessAuditAsync(Integer receivingProcessId, String receivingProcessAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addReceivingProcessAuditValidateBeforeCall(receivingProcessId, receivingProcessAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addReceivingProcessFile
     * @param receivingProcessId Id of the receivingProcess to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addReceivingProcessFileCall(Integer receivingProcessId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/receivingProcess/{receivingProcessId}/file/{fileName}"
            .replaceAll("\\{" + "receivingProcessId" + "\\}", apiClient.escapeString(receivingProcessId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addReceivingProcessFileValidateBeforeCall(Integer receivingProcessId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'receivingProcessId' is set
        if (receivingProcessId == null) {
            throw new ApiException("Missing the required parameter 'receivingProcessId' when calling addReceivingProcessFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addReceivingProcessFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addReceivingProcessFileCall(receivingProcessId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a receivingProcess
     * Adds a file to an existing receivingProcess.
     * @param receivingProcessId Id of the receivingProcess to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addReceivingProcessFile(Integer receivingProcessId, String fileName) throws ApiException {
        addReceivingProcessFileWithHttpInfo(receivingProcessId, fileName);
    }

    /**
     * Attach a file to a receivingProcess
     * Adds a file to an existing receivingProcess.
     * @param receivingProcessId Id of the receivingProcess to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addReceivingProcessFileWithHttpInfo(Integer receivingProcessId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addReceivingProcessFileValidateBeforeCall(receivingProcessId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a receivingProcess (asynchronously)
     * Adds a file to an existing receivingProcess.
     * @param receivingProcessId Id of the receivingProcess to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addReceivingProcessFileAsync(Integer receivingProcessId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addReceivingProcessFileValidateBeforeCall(receivingProcessId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addReceivingProcessFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param receivingProcessId Id of the receivingProcess to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addReceivingProcessFileByURLCall(RecordFile body, Integer receivingProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/receivingProcess/{receivingProcessId}/file"
            .replaceAll("\\{" + "receivingProcessId" + "\\}", apiClient.escapeString(receivingProcessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addReceivingProcessFileByURLValidateBeforeCall(RecordFile body, Integer receivingProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addReceivingProcessFileByURL(Async)");
        }
        
        // verify the required parameter 'receivingProcessId' is set
        if (receivingProcessId == null) {
            throw new ApiException("Missing the required parameter 'receivingProcessId' when calling addReceivingProcessFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addReceivingProcessFileByURLCall(body, receivingProcessId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a receivingProcess by URL.
     * Adds a file to an existing receivingProcess by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param receivingProcessId Id of the receivingProcess to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addReceivingProcessFileByURL(RecordFile body, Integer receivingProcessId) throws ApiException {
        addReceivingProcessFileByURLWithHttpInfo(body, receivingProcessId);
    }

    /**
     * Attach a file to a receivingProcess by URL.
     * Adds a file to an existing receivingProcess by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param receivingProcessId Id of the receivingProcess to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addReceivingProcessFileByURLWithHttpInfo(RecordFile body, Integer receivingProcessId) throws ApiException {
        com.squareup.okhttp.Call call = addReceivingProcessFileByURLValidateBeforeCall(body, receivingProcessId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a receivingProcess by URL. (asynchronously)
     * Adds a file to an existing receivingProcess by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param receivingProcessId Id of the receivingProcess to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addReceivingProcessFileByURLAsync(RecordFile body, Integer receivingProcessId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addReceivingProcessFileByURLValidateBeforeCall(body, receivingProcessId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addReceivingProcessTag
     * @param receivingProcessId Id of the receivingProcess to add a tag to (required)
     * @param receivingProcessTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addReceivingProcessTagCall(Integer receivingProcessId, String receivingProcessTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/receivingProcess/{receivingProcessId}/tag/{receivingProcessTag}"
            .replaceAll("\\{" + "receivingProcessId" + "\\}", apiClient.escapeString(receivingProcessId.toString()))
            .replaceAll("\\{" + "receivingProcessTag" + "\\}", apiClient.escapeString(receivingProcessTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addReceivingProcessTagValidateBeforeCall(Integer receivingProcessId, String receivingProcessTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'receivingProcessId' is set
        if (receivingProcessId == null) {
            throw new ApiException("Missing the required parameter 'receivingProcessId' when calling addReceivingProcessTag(Async)");
        }
        
        // verify the required parameter 'receivingProcessTag' is set
        if (receivingProcessTag == null) {
            throw new ApiException("Missing the required parameter 'receivingProcessTag' when calling addReceivingProcessTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addReceivingProcessTagCall(receivingProcessId, receivingProcessTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a receivingProcess.
     * Adds a tag to an existing receivingProcess.
     * @param receivingProcessId Id of the receivingProcess to add a tag to (required)
     * @param receivingProcessTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addReceivingProcessTag(Integer receivingProcessId, String receivingProcessTag) throws ApiException {
        addReceivingProcessTagWithHttpInfo(receivingProcessId, receivingProcessTag);
    }

    /**
     * Add new tags for a receivingProcess.
     * Adds a tag to an existing receivingProcess.
     * @param receivingProcessId Id of the receivingProcess to add a tag to (required)
     * @param receivingProcessTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addReceivingProcessTagWithHttpInfo(Integer receivingProcessId, String receivingProcessTag) throws ApiException {
        com.squareup.okhttp.Call call = addReceivingProcessTagValidateBeforeCall(receivingProcessId, receivingProcessTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a receivingProcess. (asynchronously)
     * Adds a tag to an existing receivingProcess.
     * @param receivingProcessId Id of the receivingProcess to add a tag to (required)
     * @param receivingProcessTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addReceivingProcessTagAsync(Integer receivingProcessId, String receivingProcessTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addReceivingProcessTagValidateBeforeCall(receivingProcessId, receivingProcessTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteReceivingProcessFile
     * @param receivingProcessId Id of the receivingProcess to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteReceivingProcessFileCall(Integer receivingProcessId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/receivingProcess/{receivingProcessId}/file/{fileId}"
            .replaceAll("\\{" + "receivingProcessId" + "\\}", apiClient.escapeString(receivingProcessId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteReceivingProcessFileValidateBeforeCall(Integer receivingProcessId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'receivingProcessId' is set
        if (receivingProcessId == null) {
            throw new ApiException("Missing the required parameter 'receivingProcessId' when calling deleteReceivingProcessFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteReceivingProcessFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteReceivingProcessFileCall(receivingProcessId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a receivingProcess.
     * Deletes an existing receivingProcess file using the specified data.
     * @param receivingProcessId Id of the receivingProcess to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteReceivingProcessFile(Integer receivingProcessId, Integer fileId) throws ApiException {
        deleteReceivingProcessFileWithHttpInfo(receivingProcessId, fileId);
    }

    /**
     * Delete a file for a receivingProcess.
     * Deletes an existing receivingProcess file using the specified data.
     * @param receivingProcessId Id of the receivingProcess to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteReceivingProcessFileWithHttpInfo(Integer receivingProcessId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteReceivingProcessFileValidateBeforeCall(receivingProcessId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a receivingProcess. (asynchronously)
     * Deletes an existing receivingProcess file using the specified data.
     * @param receivingProcessId Id of the receivingProcess to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteReceivingProcessFileAsync(Integer receivingProcessId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteReceivingProcessFileValidateBeforeCall(receivingProcessId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteReceivingProcessTag
     * @param receivingProcessId Id of the receivingProcess to remove tag from (required)
     * @param receivingProcessTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteReceivingProcessTagCall(Integer receivingProcessId, String receivingProcessTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/receivingProcess/{receivingProcessId}/tag/{receivingProcessTag}"
            .replaceAll("\\{" + "receivingProcessId" + "\\}", apiClient.escapeString(receivingProcessId.toString()))
            .replaceAll("\\{" + "receivingProcessTag" + "\\}", apiClient.escapeString(receivingProcessTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteReceivingProcessTagValidateBeforeCall(Integer receivingProcessId, String receivingProcessTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'receivingProcessId' is set
        if (receivingProcessId == null) {
            throw new ApiException("Missing the required parameter 'receivingProcessId' when calling deleteReceivingProcessTag(Async)");
        }
        
        // verify the required parameter 'receivingProcessTag' is set
        if (receivingProcessTag == null) {
            throw new ApiException("Missing the required parameter 'receivingProcessTag' when calling deleteReceivingProcessTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteReceivingProcessTagCall(receivingProcessId, receivingProcessTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a receivingProcess.
     * Deletes an existing receivingProcess tag using the specified data.
     * @param receivingProcessId Id of the receivingProcess to remove tag from (required)
     * @param receivingProcessTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteReceivingProcessTag(Integer receivingProcessId, String receivingProcessTag) throws ApiException {
        deleteReceivingProcessTagWithHttpInfo(receivingProcessId, receivingProcessTag);
    }

    /**
     * Delete a tag for a receivingProcess.
     * Deletes an existing receivingProcess tag using the specified data.
     * @param receivingProcessId Id of the receivingProcess to remove tag from (required)
     * @param receivingProcessTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteReceivingProcessTagWithHttpInfo(Integer receivingProcessId, String receivingProcessTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteReceivingProcessTagValidateBeforeCall(receivingProcessId, receivingProcessTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a receivingProcess. (asynchronously)
     * Deletes an existing receivingProcess tag using the specified data.
     * @param receivingProcessId Id of the receivingProcess to remove tag from (required)
     * @param receivingProcessTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteReceivingProcessTagAsync(Integer receivingProcessId, String receivingProcessTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteReceivingProcessTagValidateBeforeCall(receivingProcessId, receivingProcessTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateReceivingProcessById
     * @param receivingProcessId Id of the receivingProcess to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateReceivingProcessByIdCall(Integer receivingProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/receivingProcess/duplicate/{receivingProcessId}"
            .replaceAll("\\{" + "receivingProcessId" + "\\}", apiClient.escapeString(receivingProcessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateReceivingProcessByIdValidateBeforeCall(Integer receivingProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'receivingProcessId' is set
        if (receivingProcessId == null) {
            throw new ApiException("Missing the required parameter 'receivingProcessId' when calling getDuplicateReceivingProcessById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateReceivingProcessByIdCall(receivingProcessId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a receivingProcess by id
     * Returns a duplicated receivingProcess identified by the specified id.
     * @param receivingProcessId Id of the receivingProcess to be duplicated. (required)
     * @return ReceivingProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReceivingProcess getDuplicateReceivingProcessById(Integer receivingProcessId) throws ApiException {
        ApiResponse<ReceivingProcess> resp = getDuplicateReceivingProcessByIdWithHttpInfo(receivingProcessId);
        return resp.getData();
    }

    /**
     * Get a duplicated a receivingProcess by id
     * Returns a duplicated receivingProcess identified by the specified id.
     * @param receivingProcessId Id of the receivingProcess to be duplicated. (required)
     * @return ApiResponse&lt;ReceivingProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReceivingProcess> getDuplicateReceivingProcessByIdWithHttpInfo(Integer receivingProcessId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateReceivingProcessByIdValidateBeforeCall(receivingProcessId, null, null);
        Type localVarReturnType = new TypeToken<ReceivingProcess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a receivingProcess by id (asynchronously)
     * Returns a duplicated receivingProcess identified by the specified id.
     * @param receivingProcessId Id of the receivingProcess to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateReceivingProcessByIdAsync(Integer receivingProcessId, final ApiCallback<ReceivingProcess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateReceivingProcessByIdValidateBeforeCall(receivingProcessId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReceivingProcess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReceivingProcessByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReceivingProcessByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/receivingProcess/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReceivingProcessByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getReceivingProcessByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search receivingProcesses by filter
     * Returns the list of receivingProcesses that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;ReceivingProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ReceivingProcess> getReceivingProcessByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<ReceivingProcess>> resp = getReceivingProcessByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search receivingProcesses by filter
     * Returns the list of receivingProcesses that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;ReceivingProcess&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ReceivingProcess>> getReceivingProcessByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getReceivingProcessByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<ReceivingProcess>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search receivingProcesses by filter (asynchronously)
     * Returns the list of receivingProcesses that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReceivingProcessByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<ReceivingProcess>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReceivingProcessByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ReceivingProcess>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReceivingProcessById
     * @param receivingProcessId Id of the receivingProcess to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReceivingProcessByIdCall(Integer receivingProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/receivingProcess/{receivingProcessId}"
            .replaceAll("\\{" + "receivingProcessId" + "\\}", apiClient.escapeString(receivingProcessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReceivingProcessByIdValidateBeforeCall(Integer receivingProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'receivingProcessId' is set
        if (receivingProcessId == null) {
            throw new ApiException("Missing the required parameter 'receivingProcessId' when calling getReceivingProcessById(Async)");
        }
        

        com.squareup.okhttp.Call call = getReceivingProcessByIdCall(receivingProcessId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a receivingProcess by id
     * Returns the receivingProcess identified by the specified id.
     * @param receivingProcessId Id of the receivingProcess to be returned. (required)
     * @return ReceivingProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReceivingProcess getReceivingProcessById(Integer receivingProcessId) throws ApiException {
        ApiResponse<ReceivingProcess> resp = getReceivingProcessByIdWithHttpInfo(receivingProcessId);
        return resp.getData();
    }

    /**
     * Get a receivingProcess by id
     * Returns the receivingProcess identified by the specified id.
     * @param receivingProcessId Id of the receivingProcess to be returned. (required)
     * @return ApiResponse&lt;ReceivingProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReceivingProcess> getReceivingProcessByIdWithHttpInfo(Integer receivingProcessId) throws ApiException {
        com.squareup.okhttp.Call call = getReceivingProcessByIdValidateBeforeCall(receivingProcessId, null, null);
        Type localVarReturnType = new TypeToken<ReceivingProcess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a receivingProcess by id (asynchronously)
     * Returns the receivingProcess identified by the specified id.
     * @param receivingProcessId Id of the receivingProcess to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReceivingProcessByIdAsync(Integer receivingProcessId, final ApiCallback<ReceivingProcess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReceivingProcessByIdValidateBeforeCall(receivingProcessId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReceivingProcess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReceivingProcessFiles
     * @param receivingProcessId Id of the receivingProcess to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReceivingProcessFilesCall(Integer receivingProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/receivingProcess/{receivingProcessId}/file"
            .replaceAll("\\{" + "receivingProcessId" + "\\}", apiClient.escapeString(receivingProcessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReceivingProcessFilesValidateBeforeCall(Integer receivingProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'receivingProcessId' is set
        if (receivingProcessId == null) {
            throw new ApiException("Missing the required parameter 'receivingProcessId' when calling getReceivingProcessFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getReceivingProcessFilesCall(receivingProcessId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a receivingProcess.
     * Get all existing receivingProcess files.
     * @param receivingProcessId Id of the receivingProcess to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getReceivingProcessFiles(Integer receivingProcessId) throws ApiException {
        getReceivingProcessFilesWithHttpInfo(receivingProcessId);
    }

    /**
     * Get the files for a receivingProcess.
     * Get all existing receivingProcess files.
     * @param receivingProcessId Id of the receivingProcess to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getReceivingProcessFilesWithHttpInfo(Integer receivingProcessId) throws ApiException {
        com.squareup.okhttp.Call call = getReceivingProcessFilesValidateBeforeCall(receivingProcessId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a receivingProcess. (asynchronously)
     * Get all existing receivingProcess files.
     * @param receivingProcessId Id of the receivingProcess to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReceivingProcessFilesAsync(Integer receivingProcessId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReceivingProcessFilesValidateBeforeCall(receivingProcessId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getReceivingProcessTags
     * @param receivingProcessId Id of the receivingProcess to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReceivingProcessTagsCall(Integer receivingProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/receivingProcess/{receivingProcessId}/tag"
            .replaceAll("\\{" + "receivingProcessId" + "\\}", apiClient.escapeString(receivingProcessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReceivingProcessTagsValidateBeforeCall(Integer receivingProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'receivingProcessId' is set
        if (receivingProcessId == null) {
            throw new ApiException("Missing the required parameter 'receivingProcessId' when calling getReceivingProcessTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getReceivingProcessTagsCall(receivingProcessId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a receivingProcess.
     * Get all existing receivingProcess tags.
     * @param receivingProcessId Id of the receivingProcess to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getReceivingProcessTags(Integer receivingProcessId) throws ApiException {
        getReceivingProcessTagsWithHttpInfo(receivingProcessId);
    }

    /**
     * Get the tags for a receivingProcess.
     * Get all existing receivingProcess tags.
     * @param receivingProcessId Id of the receivingProcess to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getReceivingProcessTagsWithHttpInfo(Integer receivingProcessId) throws ApiException {
        com.squareup.okhttp.Call call = getReceivingProcessTagsValidateBeforeCall(receivingProcessId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a receivingProcess. (asynchronously)
     * Get all existing receivingProcess tags.
     * @param receivingProcessId Id of the receivingProcess to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReceivingProcessTagsAsync(Integer receivingProcessId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReceivingProcessTagsValidateBeforeCall(receivingProcessId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateReceivingProcessCustomFields
     * @param body ReceivingProcess to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateReceivingProcessCustomFieldsCall(ReceivingProcess body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/receivingProcess/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateReceivingProcessCustomFieldsValidateBeforeCall(ReceivingProcess body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateReceivingProcessCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateReceivingProcessCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a receivingProcess custom fields
     * Updates an existing receivingProcess custom fields using the specified data.
     * @param body ReceivingProcess to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateReceivingProcessCustomFields(ReceivingProcess body) throws ApiException {
        updateReceivingProcessCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a receivingProcess custom fields
     * Updates an existing receivingProcess custom fields using the specified data.
     * @param body ReceivingProcess to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateReceivingProcessCustomFieldsWithHttpInfo(ReceivingProcess body) throws ApiException {
        com.squareup.okhttp.Call call = updateReceivingProcessCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a receivingProcess custom fields (asynchronously)
     * Updates an existing receivingProcess custom fields using the specified data.
     * @param body ReceivingProcess to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateReceivingProcessCustomFieldsAsync(ReceivingProcess body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateReceivingProcessCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
