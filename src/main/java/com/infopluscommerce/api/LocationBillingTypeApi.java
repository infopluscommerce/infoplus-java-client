/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.LocationBillingType;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LocationBillingTypeApi {
    private ApiClient apiClient;

    public LocationBillingTypeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LocationBillingTypeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addLocationBillingType
     * @param body LocationBillingType to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLocationBillingTypeCall(LocationBillingType body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/locationBillingType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLocationBillingTypeValidateBeforeCall(LocationBillingType body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addLocationBillingType(Async)");
        }
        

        com.squareup.okhttp.Call call = addLocationBillingTypeCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a locationBillingType
     * Inserts a new locationBillingType using the specified data.
     * @param body LocationBillingType to be inserted. (required)
     * @return LocationBillingType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LocationBillingType addLocationBillingType(LocationBillingType body) throws ApiException {
        ApiResponse<LocationBillingType> resp = addLocationBillingTypeWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a locationBillingType
     * Inserts a new locationBillingType using the specified data.
     * @param body LocationBillingType to be inserted. (required)
     * @return ApiResponse&lt;LocationBillingType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LocationBillingType> addLocationBillingTypeWithHttpInfo(LocationBillingType body) throws ApiException {
        com.squareup.okhttp.Call call = addLocationBillingTypeValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<LocationBillingType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a locationBillingType (asynchronously)
     * Inserts a new locationBillingType using the specified data.
     * @param body LocationBillingType to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLocationBillingTypeAsync(LocationBillingType body, final ApiCallback<LocationBillingType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLocationBillingTypeValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LocationBillingType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addLocationBillingTypeAudit
     * @param locationBillingTypeId Id of the locationBillingType to add an audit to (required)
     * @param locationBillingTypeAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLocationBillingTypeAuditCall(Integer locationBillingTypeId, String locationBillingTypeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationBillingType/{locationBillingTypeId}/audit/{locationBillingTypeAudit}"
            .replaceAll("\\{" + "locationBillingTypeId" + "\\}", apiClient.escapeString(locationBillingTypeId.toString()))
            .replaceAll("\\{" + "locationBillingTypeAudit" + "\\}", apiClient.escapeString(locationBillingTypeAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLocationBillingTypeAuditValidateBeforeCall(Integer locationBillingTypeId, String locationBillingTypeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationBillingTypeId' is set
        if (locationBillingTypeId == null) {
            throw new ApiException("Missing the required parameter 'locationBillingTypeId' when calling addLocationBillingTypeAudit(Async)");
        }
        
        // verify the required parameter 'locationBillingTypeAudit' is set
        if (locationBillingTypeAudit == null) {
            throw new ApiException("Missing the required parameter 'locationBillingTypeAudit' when calling addLocationBillingTypeAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addLocationBillingTypeAuditCall(locationBillingTypeId, locationBillingTypeAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a locationBillingType
     * Adds an audit to an existing locationBillingType.
     * @param locationBillingTypeId Id of the locationBillingType to add an audit to (required)
     * @param locationBillingTypeAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addLocationBillingTypeAudit(Integer locationBillingTypeId, String locationBillingTypeAudit) throws ApiException {
        addLocationBillingTypeAuditWithHttpInfo(locationBillingTypeId, locationBillingTypeAudit);
    }

    /**
     * Add new audit for a locationBillingType
     * Adds an audit to an existing locationBillingType.
     * @param locationBillingTypeId Id of the locationBillingType to add an audit to (required)
     * @param locationBillingTypeAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addLocationBillingTypeAuditWithHttpInfo(Integer locationBillingTypeId, String locationBillingTypeAudit) throws ApiException {
        com.squareup.okhttp.Call call = addLocationBillingTypeAuditValidateBeforeCall(locationBillingTypeId, locationBillingTypeAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a locationBillingType (asynchronously)
     * Adds an audit to an existing locationBillingType.
     * @param locationBillingTypeId Id of the locationBillingType to add an audit to (required)
     * @param locationBillingTypeAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLocationBillingTypeAuditAsync(Integer locationBillingTypeId, String locationBillingTypeAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLocationBillingTypeAuditValidateBeforeCall(locationBillingTypeId, locationBillingTypeAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addLocationBillingTypeFile
     * @param locationBillingTypeId Id of the locationBillingType to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLocationBillingTypeFileCall(Integer locationBillingTypeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationBillingType/{locationBillingTypeId}/file/{fileName}"
            .replaceAll("\\{" + "locationBillingTypeId" + "\\}", apiClient.escapeString(locationBillingTypeId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLocationBillingTypeFileValidateBeforeCall(Integer locationBillingTypeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationBillingTypeId' is set
        if (locationBillingTypeId == null) {
            throw new ApiException("Missing the required parameter 'locationBillingTypeId' when calling addLocationBillingTypeFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addLocationBillingTypeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addLocationBillingTypeFileCall(locationBillingTypeId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a locationBillingType
     * Adds a file to an existing locationBillingType.
     * @param locationBillingTypeId Id of the locationBillingType to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addLocationBillingTypeFile(Integer locationBillingTypeId, String fileName) throws ApiException {
        addLocationBillingTypeFileWithHttpInfo(locationBillingTypeId, fileName);
    }

    /**
     * Attach a file to a locationBillingType
     * Adds a file to an existing locationBillingType.
     * @param locationBillingTypeId Id of the locationBillingType to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addLocationBillingTypeFileWithHttpInfo(Integer locationBillingTypeId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addLocationBillingTypeFileValidateBeforeCall(locationBillingTypeId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a locationBillingType (asynchronously)
     * Adds a file to an existing locationBillingType.
     * @param locationBillingTypeId Id of the locationBillingType to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLocationBillingTypeFileAsync(Integer locationBillingTypeId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLocationBillingTypeFileValidateBeforeCall(locationBillingTypeId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addLocationBillingTypeFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param locationBillingTypeId Id of the locationBillingType to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLocationBillingTypeFileByURLCall(RecordFile body, Integer locationBillingTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/locationBillingType/{locationBillingTypeId}/file"
            .replaceAll("\\{" + "locationBillingTypeId" + "\\}", apiClient.escapeString(locationBillingTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLocationBillingTypeFileByURLValidateBeforeCall(RecordFile body, Integer locationBillingTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addLocationBillingTypeFileByURL(Async)");
        }
        
        // verify the required parameter 'locationBillingTypeId' is set
        if (locationBillingTypeId == null) {
            throw new ApiException("Missing the required parameter 'locationBillingTypeId' when calling addLocationBillingTypeFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addLocationBillingTypeFileByURLCall(body, locationBillingTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a locationBillingType by URL.
     * Adds a file to an existing locationBillingType by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param locationBillingTypeId Id of the locationBillingType to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addLocationBillingTypeFileByURL(RecordFile body, Integer locationBillingTypeId) throws ApiException {
        addLocationBillingTypeFileByURLWithHttpInfo(body, locationBillingTypeId);
    }

    /**
     * Attach a file to a locationBillingType by URL.
     * Adds a file to an existing locationBillingType by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param locationBillingTypeId Id of the locationBillingType to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addLocationBillingTypeFileByURLWithHttpInfo(RecordFile body, Integer locationBillingTypeId) throws ApiException {
        com.squareup.okhttp.Call call = addLocationBillingTypeFileByURLValidateBeforeCall(body, locationBillingTypeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a locationBillingType by URL. (asynchronously)
     * Adds a file to an existing locationBillingType by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param locationBillingTypeId Id of the locationBillingType to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLocationBillingTypeFileByURLAsync(RecordFile body, Integer locationBillingTypeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLocationBillingTypeFileByURLValidateBeforeCall(body, locationBillingTypeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addLocationBillingTypeTag
     * @param locationBillingTypeId Id of the locationBillingType to add a tag to (required)
     * @param locationBillingTypeTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLocationBillingTypeTagCall(Integer locationBillingTypeId, String locationBillingTypeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationBillingType/{locationBillingTypeId}/tag/{locationBillingTypeTag}"
            .replaceAll("\\{" + "locationBillingTypeId" + "\\}", apiClient.escapeString(locationBillingTypeId.toString()))
            .replaceAll("\\{" + "locationBillingTypeTag" + "\\}", apiClient.escapeString(locationBillingTypeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLocationBillingTypeTagValidateBeforeCall(Integer locationBillingTypeId, String locationBillingTypeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationBillingTypeId' is set
        if (locationBillingTypeId == null) {
            throw new ApiException("Missing the required parameter 'locationBillingTypeId' when calling addLocationBillingTypeTag(Async)");
        }
        
        // verify the required parameter 'locationBillingTypeTag' is set
        if (locationBillingTypeTag == null) {
            throw new ApiException("Missing the required parameter 'locationBillingTypeTag' when calling addLocationBillingTypeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addLocationBillingTypeTagCall(locationBillingTypeId, locationBillingTypeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a locationBillingType.
     * Adds a tag to an existing locationBillingType.
     * @param locationBillingTypeId Id of the locationBillingType to add a tag to (required)
     * @param locationBillingTypeTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addLocationBillingTypeTag(Integer locationBillingTypeId, String locationBillingTypeTag) throws ApiException {
        addLocationBillingTypeTagWithHttpInfo(locationBillingTypeId, locationBillingTypeTag);
    }

    /**
     * Add new tags for a locationBillingType.
     * Adds a tag to an existing locationBillingType.
     * @param locationBillingTypeId Id of the locationBillingType to add a tag to (required)
     * @param locationBillingTypeTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addLocationBillingTypeTagWithHttpInfo(Integer locationBillingTypeId, String locationBillingTypeTag) throws ApiException {
        com.squareup.okhttp.Call call = addLocationBillingTypeTagValidateBeforeCall(locationBillingTypeId, locationBillingTypeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a locationBillingType. (asynchronously)
     * Adds a tag to an existing locationBillingType.
     * @param locationBillingTypeId Id of the locationBillingType to add a tag to (required)
     * @param locationBillingTypeTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLocationBillingTypeTagAsync(Integer locationBillingTypeId, String locationBillingTypeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLocationBillingTypeTagValidateBeforeCall(locationBillingTypeId, locationBillingTypeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLocationBillingType
     * @param locationBillingTypeId Id of the locationBillingType to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLocationBillingTypeCall(Integer locationBillingTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationBillingType/{locationBillingTypeId}"
            .replaceAll("\\{" + "locationBillingTypeId" + "\\}", apiClient.escapeString(locationBillingTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLocationBillingTypeValidateBeforeCall(Integer locationBillingTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationBillingTypeId' is set
        if (locationBillingTypeId == null) {
            throw new ApiException("Missing the required parameter 'locationBillingTypeId' when calling deleteLocationBillingType(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteLocationBillingTypeCall(locationBillingTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a locationBillingType
     * Deletes the locationBillingType identified by the specified id.
     * @param locationBillingTypeId Id of the locationBillingType to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLocationBillingType(Integer locationBillingTypeId) throws ApiException {
        deleteLocationBillingTypeWithHttpInfo(locationBillingTypeId);
    }

    /**
     * Delete a locationBillingType
     * Deletes the locationBillingType identified by the specified id.
     * @param locationBillingTypeId Id of the locationBillingType to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLocationBillingTypeWithHttpInfo(Integer locationBillingTypeId) throws ApiException {
        com.squareup.okhttp.Call call = deleteLocationBillingTypeValidateBeforeCall(locationBillingTypeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a locationBillingType (asynchronously)
     * Deletes the locationBillingType identified by the specified id.
     * @param locationBillingTypeId Id of the locationBillingType to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLocationBillingTypeAsync(Integer locationBillingTypeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLocationBillingTypeValidateBeforeCall(locationBillingTypeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLocationBillingTypeFile
     * @param locationBillingTypeId Id of the locationBillingType to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLocationBillingTypeFileCall(Integer locationBillingTypeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationBillingType/{locationBillingTypeId}/file/{fileId}"
            .replaceAll("\\{" + "locationBillingTypeId" + "\\}", apiClient.escapeString(locationBillingTypeId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLocationBillingTypeFileValidateBeforeCall(Integer locationBillingTypeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationBillingTypeId' is set
        if (locationBillingTypeId == null) {
            throw new ApiException("Missing the required parameter 'locationBillingTypeId' when calling deleteLocationBillingTypeFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteLocationBillingTypeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteLocationBillingTypeFileCall(locationBillingTypeId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a locationBillingType.
     * Deletes an existing locationBillingType file using the specified data.
     * @param locationBillingTypeId Id of the locationBillingType to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLocationBillingTypeFile(Integer locationBillingTypeId, Integer fileId) throws ApiException {
        deleteLocationBillingTypeFileWithHttpInfo(locationBillingTypeId, fileId);
    }

    /**
     * Delete a file for a locationBillingType.
     * Deletes an existing locationBillingType file using the specified data.
     * @param locationBillingTypeId Id of the locationBillingType to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLocationBillingTypeFileWithHttpInfo(Integer locationBillingTypeId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteLocationBillingTypeFileValidateBeforeCall(locationBillingTypeId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a locationBillingType. (asynchronously)
     * Deletes an existing locationBillingType file using the specified data.
     * @param locationBillingTypeId Id of the locationBillingType to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLocationBillingTypeFileAsync(Integer locationBillingTypeId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLocationBillingTypeFileValidateBeforeCall(locationBillingTypeId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLocationBillingTypeTag
     * @param locationBillingTypeId Id of the locationBillingType to remove tag from (required)
     * @param locationBillingTypeTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLocationBillingTypeTagCall(Integer locationBillingTypeId, String locationBillingTypeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationBillingType/{locationBillingTypeId}/tag/{locationBillingTypeTag}"
            .replaceAll("\\{" + "locationBillingTypeId" + "\\}", apiClient.escapeString(locationBillingTypeId.toString()))
            .replaceAll("\\{" + "locationBillingTypeTag" + "\\}", apiClient.escapeString(locationBillingTypeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLocationBillingTypeTagValidateBeforeCall(Integer locationBillingTypeId, String locationBillingTypeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationBillingTypeId' is set
        if (locationBillingTypeId == null) {
            throw new ApiException("Missing the required parameter 'locationBillingTypeId' when calling deleteLocationBillingTypeTag(Async)");
        }
        
        // verify the required parameter 'locationBillingTypeTag' is set
        if (locationBillingTypeTag == null) {
            throw new ApiException("Missing the required parameter 'locationBillingTypeTag' when calling deleteLocationBillingTypeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteLocationBillingTypeTagCall(locationBillingTypeId, locationBillingTypeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a locationBillingType.
     * Deletes an existing locationBillingType tag using the specified data.
     * @param locationBillingTypeId Id of the locationBillingType to remove tag from (required)
     * @param locationBillingTypeTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLocationBillingTypeTag(Integer locationBillingTypeId, String locationBillingTypeTag) throws ApiException {
        deleteLocationBillingTypeTagWithHttpInfo(locationBillingTypeId, locationBillingTypeTag);
    }

    /**
     * Delete a tag for a locationBillingType.
     * Deletes an existing locationBillingType tag using the specified data.
     * @param locationBillingTypeId Id of the locationBillingType to remove tag from (required)
     * @param locationBillingTypeTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLocationBillingTypeTagWithHttpInfo(Integer locationBillingTypeId, String locationBillingTypeTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteLocationBillingTypeTagValidateBeforeCall(locationBillingTypeId, locationBillingTypeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a locationBillingType. (asynchronously)
     * Deletes an existing locationBillingType tag using the specified data.
     * @param locationBillingTypeId Id of the locationBillingType to remove tag from (required)
     * @param locationBillingTypeTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLocationBillingTypeTagAsync(Integer locationBillingTypeId, String locationBillingTypeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLocationBillingTypeTagValidateBeforeCall(locationBillingTypeId, locationBillingTypeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateLocationBillingTypeById
     * @param locationBillingTypeId Id of the locationBillingType to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateLocationBillingTypeByIdCall(Integer locationBillingTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationBillingType/duplicate/{locationBillingTypeId}"
            .replaceAll("\\{" + "locationBillingTypeId" + "\\}", apiClient.escapeString(locationBillingTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateLocationBillingTypeByIdValidateBeforeCall(Integer locationBillingTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationBillingTypeId' is set
        if (locationBillingTypeId == null) {
            throw new ApiException("Missing the required parameter 'locationBillingTypeId' when calling getDuplicateLocationBillingTypeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateLocationBillingTypeByIdCall(locationBillingTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a locationBillingType by id
     * Returns a duplicated locationBillingType identified by the specified id.
     * @param locationBillingTypeId Id of the locationBillingType to be duplicated. (required)
     * @return LocationBillingType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LocationBillingType getDuplicateLocationBillingTypeById(Integer locationBillingTypeId) throws ApiException {
        ApiResponse<LocationBillingType> resp = getDuplicateLocationBillingTypeByIdWithHttpInfo(locationBillingTypeId);
        return resp.getData();
    }

    /**
     * Get a duplicated a locationBillingType by id
     * Returns a duplicated locationBillingType identified by the specified id.
     * @param locationBillingTypeId Id of the locationBillingType to be duplicated. (required)
     * @return ApiResponse&lt;LocationBillingType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LocationBillingType> getDuplicateLocationBillingTypeByIdWithHttpInfo(Integer locationBillingTypeId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateLocationBillingTypeByIdValidateBeforeCall(locationBillingTypeId, null, null);
        Type localVarReturnType = new TypeToken<LocationBillingType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a locationBillingType by id (asynchronously)
     * Returns a duplicated locationBillingType identified by the specified id.
     * @param locationBillingTypeId Id of the locationBillingType to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateLocationBillingTypeByIdAsync(Integer locationBillingTypeId, final ApiCallback<LocationBillingType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateLocationBillingTypeByIdValidateBeforeCall(locationBillingTypeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LocationBillingType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLocationBillingTypeByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLocationBillingTypeByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationBillingType/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLocationBillingTypeByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getLocationBillingTypeByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search locationBillingTypes by filter
     * Returns the list of locationBillingTypes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;LocationBillingType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LocationBillingType> getLocationBillingTypeByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<LocationBillingType>> resp = getLocationBillingTypeByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search locationBillingTypes by filter
     * Returns the list of locationBillingTypes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;LocationBillingType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LocationBillingType>> getLocationBillingTypeByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getLocationBillingTypeByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<LocationBillingType>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search locationBillingTypes by filter (asynchronously)
     * Returns the list of locationBillingTypes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLocationBillingTypeByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<LocationBillingType>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLocationBillingTypeByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LocationBillingType>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLocationBillingTypeById
     * @param locationBillingTypeId Id of the locationBillingType to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLocationBillingTypeByIdCall(Integer locationBillingTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationBillingType/{locationBillingTypeId}"
            .replaceAll("\\{" + "locationBillingTypeId" + "\\}", apiClient.escapeString(locationBillingTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLocationBillingTypeByIdValidateBeforeCall(Integer locationBillingTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationBillingTypeId' is set
        if (locationBillingTypeId == null) {
            throw new ApiException("Missing the required parameter 'locationBillingTypeId' when calling getLocationBillingTypeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getLocationBillingTypeByIdCall(locationBillingTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a locationBillingType by id
     * Returns the locationBillingType identified by the specified id.
     * @param locationBillingTypeId Id of the locationBillingType to be returned. (required)
     * @return LocationBillingType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LocationBillingType getLocationBillingTypeById(Integer locationBillingTypeId) throws ApiException {
        ApiResponse<LocationBillingType> resp = getLocationBillingTypeByIdWithHttpInfo(locationBillingTypeId);
        return resp.getData();
    }

    /**
     * Get a locationBillingType by id
     * Returns the locationBillingType identified by the specified id.
     * @param locationBillingTypeId Id of the locationBillingType to be returned. (required)
     * @return ApiResponse&lt;LocationBillingType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LocationBillingType> getLocationBillingTypeByIdWithHttpInfo(Integer locationBillingTypeId) throws ApiException {
        com.squareup.okhttp.Call call = getLocationBillingTypeByIdValidateBeforeCall(locationBillingTypeId, null, null);
        Type localVarReturnType = new TypeToken<LocationBillingType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a locationBillingType by id (asynchronously)
     * Returns the locationBillingType identified by the specified id.
     * @param locationBillingTypeId Id of the locationBillingType to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLocationBillingTypeByIdAsync(Integer locationBillingTypeId, final ApiCallback<LocationBillingType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLocationBillingTypeByIdValidateBeforeCall(locationBillingTypeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LocationBillingType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLocationBillingTypeFiles
     * @param locationBillingTypeId Id of the locationBillingType to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLocationBillingTypeFilesCall(Integer locationBillingTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationBillingType/{locationBillingTypeId}/file"
            .replaceAll("\\{" + "locationBillingTypeId" + "\\}", apiClient.escapeString(locationBillingTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLocationBillingTypeFilesValidateBeforeCall(Integer locationBillingTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationBillingTypeId' is set
        if (locationBillingTypeId == null) {
            throw new ApiException("Missing the required parameter 'locationBillingTypeId' when calling getLocationBillingTypeFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getLocationBillingTypeFilesCall(locationBillingTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a locationBillingType.
     * Get all existing locationBillingType files.
     * @param locationBillingTypeId Id of the locationBillingType to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getLocationBillingTypeFiles(Integer locationBillingTypeId) throws ApiException {
        getLocationBillingTypeFilesWithHttpInfo(locationBillingTypeId);
    }

    /**
     * Get the files for a locationBillingType.
     * Get all existing locationBillingType files.
     * @param locationBillingTypeId Id of the locationBillingType to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getLocationBillingTypeFilesWithHttpInfo(Integer locationBillingTypeId) throws ApiException {
        com.squareup.okhttp.Call call = getLocationBillingTypeFilesValidateBeforeCall(locationBillingTypeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a locationBillingType. (asynchronously)
     * Get all existing locationBillingType files.
     * @param locationBillingTypeId Id of the locationBillingType to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLocationBillingTypeFilesAsync(Integer locationBillingTypeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLocationBillingTypeFilesValidateBeforeCall(locationBillingTypeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getLocationBillingTypeTags
     * @param locationBillingTypeId Id of the locationBillingType to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLocationBillingTypeTagsCall(Integer locationBillingTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationBillingType/{locationBillingTypeId}/tag"
            .replaceAll("\\{" + "locationBillingTypeId" + "\\}", apiClient.escapeString(locationBillingTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLocationBillingTypeTagsValidateBeforeCall(Integer locationBillingTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationBillingTypeId' is set
        if (locationBillingTypeId == null) {
            throw new ApiException("Missing the required parameter 'locationBillingTypeId' when calling getLocationBillingTypeTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getLocationBillingTypeTagsCall(locationBillingTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a locationBillingType.
     * Get all existing locationBillingType tags.
     * @param locationBillingTypeId Id of the locationBillingType to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getLocationBillingTypeTags(Integer locationBillingTypeId) throws ApiException {
        getLocationBillingTypeTagsWithHttpInfo(locationBillingTypeId);
    }

    /**
     * Get the tags for a locationBillingType.
     * Get all existing locationBillingType tags.
     * @param locationBillingTypeId Id of the locationBillingType to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getLocationBillingTypeTagsWithHttpInfo(Integer locationBillingTypeId) throws ApiException {
        com.squareup.okhttp.Call call = getLocationBillingTypeTagsValidateBeforeCall(locationBillingTypeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a locationBillingType. (asynchronously)
     * Get all existing locationBillingType tags.
     * @param locationBillingTypeId Id of the locationBillingType to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLocationBillingTypeTagsAsync(Integer locationBillingTypeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLocationBillingTypeTagsValidateBeforeCall(locationBillingTypeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateLocationBillingType
     * @param body LocationBillingType to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLocationBillingTypeCall(LocationBillingType body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/locationBillingType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLocationBillingTypeValidateBeforeCall(LocationBillingType body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLocationBillingType(Async)");
        }
        

        com.squareup.okhttp.Call call = updateLocationBillingTypeCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a locationBillingType
     * Updates an existing locationBillingType using the specified data.
     * @param body LocationBillingType to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateLocationBillingType(LocationBillingType body) throws ApiException {
        updateLocationBillingTypeWithHttpInfo(body);
    }

    /**
     * Update a locationBillingType
     * Updates an existing locationBillingType using the specified data.
     * @param body LocationBillingType to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateLocationBillingTypeWithHttpInfo(LocationBillingType body) throws ApiException {
        com.squareup.okhttp.Call call = updateLocationBillingTypeValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a locationBillingType (asynchronously)
     * Updates an existing locationBillingType using the specified data.
     * @param body LocationBillingType to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLocationBillingTypeAsync(LocationBillingType body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLocationBillingTypeValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateLocationBillingTypeCustomFields
     * @param body LocationBillingType to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLocationBillingTypeCustomFieldsCall(LocationBillingType body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/locationBillingType/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLocationBillingTypeCustomFieldsValidateBeforeCall(LocationBillingType body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLocationBillingTypeCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateLocationBillingTypeCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a locationBillingType custom fields
     * Updates an existing locationBillingType custom fields using the specified data.
     * @param body LocationBillingType to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateLocationBillingTypeCustomFields(LocationBillingType body) throws ApiException {
        updateLocationBillingTypeCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a locationBillingType custom fields
     * Updates an existing locationBillingType custom fields using the specified data.
     * @param body LocationBillingType to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateLocationBillingTypeCustomFieldsWithHttpInfo(LocationBillingType body) throws ApiException {
        com.squareup.okhttp.Call call = updateLocationBillingTypeCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a locationBillingType custom fields (asynchronously)
     * Updates an existing locationBillingType custom fields using the specified data.
     * @param body LocationBillingType to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLocationBillingTypeCustomFieldsAsync(LocationBillingType body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLocationBillingTypeCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
