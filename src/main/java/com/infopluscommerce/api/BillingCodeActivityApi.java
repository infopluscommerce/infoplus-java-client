/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.BillingCodeActivity;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BillingCodeActivityApi {
    private ApiClient apiClient;

    public BillingCodeActivityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BillingCodeActivityApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addBillingCodeActivity
     * @param body BillingCodeActivity to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addBillingCodeActivityCall(BillingCodeActivity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/billingCodeActivity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addBillingCodeActivityValidateBeforeCall(BillingCodeActivity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addBillingCodeActivity(Async)");
        }
        

        com.squareup.okhttp.Call call = addBillingCodeActivityCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a billingCodeActivity
     * Inserts a new billingCodeActivity using the specified data.
     * @param body BillingCodeActivity to be inserted. (required)
     * @return BillingCodeActivity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BillingCodeActivity addBillingCodeActivity(BillingCodeActivity body) throws ApiException {
        ApiResponse<BillingCodeActivity> resp = addBillingCodeActivityWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a billingCodeActivity
     * Inserts a new billingCodeActivity using the specified data.
     * @param body BillingCodeActivity to be inserted. (required)
     * @return ApiResponse&lt;BillingCodeActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BillingCodeActivity> addBillingCodeActivityWithHttpInfo(BillingCodeActivity body) throws ApiException {
        com.squareup.okhttp.Call call = addBillingCodeActivityValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<BillingCodeActivity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a billingCodeActivity (asynchronously)
     * Inserts a new billingCodeActivity using the specified data.
     * @param body BillingCodeActivity to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBillingCodeActivityAsync(BillingCodeActivity body, final ApiCallback<BillingCodeActivity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBillingCodeActivityValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BillingCodeActivity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addBillingCodeActivityAudit
     * @param billingCodeActivityId Id of the billingCodeActivity to add an audit to (required)
     * @param billingCodeActivityAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addBillingCodeActivityAuditCall(Integer billingCodeActivityId, String billingCodeActivityAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}/audit/{billingCodeActivityAudit}"
            .replaceAll("\\{" + "billingCodeActivityId" + "\\}", apiClient.escapeString(billingCodeActivityId.toString()))
            .replaceAll("\\{" + "billingCodeActivityAudit" + "\\}", apiClient.escapeString(billingCodeActivityAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addBillingCodeActivityAuditValidateBeforeCall(Integer billingCodeActivityId, String billingCodeActivityAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingCodeActivityId' is set
        if (billingCodeActivityId == null) {
            throw new ApiException("Missing the required parameter 'billingCodeActivityId' when calling addBillingCodeActivityAudit(Async)");
        }
        
        // verify the required parameter 'billingCodeActivityAudit' is set
        if (billingCodeActivityAudit == null) {
            throw new ApiException("Missing the required parameter 'billingCodeActivityAudit' when calling addBillingCodeActivityAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addBillingCodeActivityAuditCall(billingCodeActivityId, billingCodeActivityAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a billingCodeActivity
     * Adds an audit to an existing billingCodeActivity.
     * @param billingCodeActivityId Id of the billingCodeActivity to add an audit to (required)
     * @param billingCodeActivityAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addBillingCodeActivityAudit(Integer billingCodeActivityId, String billingCodeActivityAudit) throws ApiException {
        addBillingCodeActivityAuditWithHttpInfo(billingCodeActivityId, billingCodeActivityAudit);
    }

    /**
     * Add new audit for a billingCodeActivity
     * Adds an audit to an existing billingCodeActivity.
     * @param billingCodeActivityId Id of the billingCodeActivity to add an audit to (required)
     * @param billingCodeActivityAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addBillingCodeActivityAuditWithHttpInfo(Integer billingCodeActivityId, String billingCodeActivityAudit) throws ApiException {
        com.squareup.okhttp.Call call = addBillingCodeActivityAuditValidateBeforeCall(billingCodeActivityId, billingCodeActivityAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a billingCodeActivity (asynchronously)
     * Adds an audit to an existing billingCodeActivity.
     * @param billingCodeActivityId Id of the billingCodeActivity to add an audit to (required)
     * @param billingCodeActivityAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBillingCodeActivityAuditAsync(Integer billingCodeActivityId, String billingCodeActivityAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBillingCodeActivityAuditValidateBeforeCall(billingCodeActivityId, billingCodeActivityAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addBillingCodeActivityFile
     * @param billingCodeActivityId Id of the billingCodeActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addBillingCodeActivityFileCall(Integer billingCodeActivityId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}/file/{fileName}"
            .replaceAll("\\{" + "billingCodeActivityId" + "\\}", apiClient.escapeString(billingCodeActivityId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addBillingCodeActivityFileValidateBeforeCall(Integer billingCodeActivityId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingCodeActivityId' is set
        if (billingCodeActivityId == null) {
            throw new ApiException("Missing the required parameter 'billingCodeActivityId' when calling addBillingCodeActivityFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addBillingCodeActivityFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addBillingCodeActivityFileCall(billingCodeActivityId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a billingCodeActivity
     * Adds a file to an existing billingCodeActivity.
     * @param billingCodeActivityId Id of the billingCodeActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addBillingCodeActivityFile(Integer billingCodeActivityId, String fileName) throws ApiException {
        addBillingCodeActivityFileWithHttpInfo(billingCodeActivityId, fileName);
    }

    /**
     * Attach a file to a billingCodeActivity
     * Adds a file to an existing billingCodeActivity.
     * @param billingCodeActivityId Id of the billingCodeActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addBillingCodeActivityFileWithHttpInfo(Integer billingCodeActivityId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addBillingCodeActivityFileValidateBeforeCall(billingCodeActivityId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a billingCodeActivity (asynchronously)
     * Adds a file to an existing billingCodeActivity.
     * @param billingCodeActivityId Id of the billingCodeActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBillingCodeActivityFileAsync(Integer billingCodeActivityId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBillingCodeActivityFileValidateBeforeCall(billingCodeActivityId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addBillingCodeActivityFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param billingCodeActivityId Id of the billingCodeActivity to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addBillingCodeActivityFileByURLCall(RecordFile body, Integer billingCodeActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}/file"
            .replaceAll("\\{" + "billingCodeActivityId" + "\\}", apiClient.escapeString(billingCodeActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addBillingCodeActivityFileByURLValidateBeforeCall(RecordFile body, Integer billingCodeActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addBillingCodeActivityFileByURL(Async)");
        }
        
        // verify the required parameter 'billingCodeActivityId' is set
        if (billingCodeActivityId == null) {
            throw new ApiException("Missing the required parameter 'billingCodeActivityId' when calling addBillingCodeActivityFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addBillingCodeActivityFileByURLCall(body, billingCodeActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a billingCodeActivity by URL.
     * Adds a file to an existing billingCodeActivity by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param billingCodeActivityId Id of the billingCodeActivity to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addBillingCodeActivityFileByURL(RecordFile body, Integer billingCodeActivityId) throws ApiException {
        addBillingCodeActivityFileByURLWithHttpInfo(body, billingCodeActivityId);
    }

    /**
     * Attach a file to a billingCodeActivity by URL.
     * Adds a file to an existing billingCodeActivity by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param billingCodeActivityId Id of the billingCodeActivity to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addBillingCodeActivityFileByURLWithHttpInfo(RecordFile body, Integer billingCodeActivityId) throws ApiException {
        com.squareup.okhttp.Call call = addBillingCodeActivityFileByURLValidateBeforeCall(body, billingCodeActivityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a billingCodeActivity by URL. (asynchronously)
     * Adds a file to an existing billingCodeActivity by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param billingCodeActivityId Id of the billingCodeActivity to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBillingCodeActivityFileByURLAsync(RecordFile body, Integer billingCodeActivityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBillingCodeActivityFileByURLValidateBeforeCall(body, billingCodeActivityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addBillingCodeActivityTag
     * @param billingCodeActivityId Id of the billingCodeActivity to add a tag to (required)
     * @param billingCodeActivityTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addBillingCodeActivityTagCall(Integer billingCodeActivityId, String billingCodeActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}/tag/{billingCodeActivityTag}"
            .replaceAll("\\{" + "billingCodeActivityId" + "\\}", apiClient.escapeString(billingCodeActivityId.toString()))
            .replaceAll("\\{" + "billingCodeActivityTag" + "\\}", apiClient.escapeString(billingCodeActivityTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addBillingCodeActivityTagValidateBeforeCall(Integer billingCodeActivityId, String billingCodeActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingCodeActivityId' is set
        if (billingCodeActivityId == null) {
            throw new ApiException("Missing the required parameter 'billingCodeActivityId' when calling addBillingCodeActivityTag(Async)");
        }
        
        // verify the required parameter 'billingCodeActivityTag' is set
        if (billingCodeActivityTag == null) {
            throw new ApiException("Missing the required parameter 'billingCodeActivityTag' when calling addBillingCodeActivityTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addBillingCodeActivityTagCall(billingCodeActivityId, billingCodeActivityTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a billingCodeActivity.
     * Adds a tag to an existing billingCodeActivity.
     * @param billingCodeActivityId Id of the billingCodeActivity to add a tag to (required)
     * @param billingCodeActivityTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addBillingCodeActivityTag(Integer billingCodeActivityId, String billingCodeActivityTag) throws ApiException {
        addBillingCodeActivityTagWithHttpInfo(billingCodeActivityId, billingCodeActivityTag);
    }

    /**
     * Add new tags for a billingCodeActivity.
     * Adds a tag to an existing billingCodeActivity.
     * @param billingCodeActivityId Id of the billingCodeActivity to add a tag to (required)
     * @param billingCodeActivityTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addBillingCodeActivityTagWithHttpInfo(Integer billingCodeActivityId, String billingCodeActivityTag) throws ApiException {
        com.squareup.okhttp.Call call = addBillingCodeActivityTagValidateBeforeCall(billingCodeActivityId, billingCodeActivityTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a billingCodeActivity. (asynchronously)
     * Adds a tag to an existing billingCodeActivity.
     * @param billingCodeActivityId Id of the billingCodeActivity to add a tag to (required)
     * @param billingCodeActivityTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBillingCodeActivityTagAsync(Integer billingCodeActivityId, String billingCodeActivityTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBillingCodeActivityTagValidateBeforeCall(billingCodeActivityId, billingCodeActivityTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteBillingCodeActivity
     * @param billingCodeActivityId Id of the billingCodeActivity to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBillingCodeActivityCall(Integer billingCodeActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}"
            .replaceAll("\\{" + "billingCodeActivityId" + "\\}", apiClient.escapeString(billingCodeActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBillingCodeActivityValidateBeforeCall(Integer billingCodeActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingCodeActivityId' is set
        if (billingCodeActivityId == null) {
            throw new ApiException("Missing the required parameter 'billingCodeActivityId' when calling deleteBillingCodeActivity(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBillingCodeActivityCall(billingCodeActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a billingCodeActivity
     * Deletes the billingCodeActivity identified by the specified id.
     * @param billingCodeActivityId Id of the billingCodeActivity to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBillingCodeActivity(Integer billingCodeActivityId) throws ApiException {
        deleteBillingCodeActivityWithHttpInfo(billingCodeActivityId);
    }

    /**
     * Delete a billingCodeActivity
     * Deletes the billingCodeActivity identified by the specified id.
     * @param billingCodeActivityId Id of the billingCodeActivity to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBillingCodeActivityWithHttpInfo(Integer billingCodeActivityId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBillingCodeActivityValidateBeforeCall(billingCodeActivityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a billingCodeActivity (asynchronously)
     * Deletes the billingCodeActivity identified by the specified id.
     * @param billingCodeActivityId Id of the billingCodeActivity to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBillingCodeActivityAsync(Integer billingCodeActivityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBillingCodeActivityValidateBeforeCall(billingCodeActivityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteBillingCodeActivityFile
     * @param billingCodeActivityId Id of the billingCodeActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBillingCodeActivityFileCall(Integer billingCodeActivityId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}/file/{fileId}"
            .replaceAll("\\{" + "billingCodeActivityId" + "\\}", apiClient.escapeString(billingCodeActivityId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBillingCodeActivityFileValidateBeforeCall(Integer billingCodeActivityId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingCodeActivityId' is set
        if (billingCodeActivityId == null) {
            throw new ApiException("Missing the required parameter 'billingCodeActivityId' when calling deleteBillingCodeActivityFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteBillingCodeActivityFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBillingCodeActivityFileCall(billingCodeActivityId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a billingCodeActivity.
     * Deletes an existing billingCodeActivity file using the specified data.
     * @param billingCodeActivityId Id of the billingCodeActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBillingCodeActivityFile(Integer billingCodeActivityId, Integer fileId) throws ApiException {
        deleteBillingCodeActivityFileWithHttpInfo(billingCodeActivityId, fileId);
    }

    /**
     * Delete a file for a billingCodeActivity.
     * Deletes an existing billingCodeActivity file using the specified data.
     * @param billingCodeActivityId Id of the billingCodeActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBillingCodeActivityFileWithHttpInfo(Integer billingCodeActivityId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBillingCodeActivityFileValidateBeforeCall(billingCodeActivityId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a billingCodeActivity. (asynchronously)
     * Deletes an existing billingCodeActivity file using the specified data.
     * @param billingCodeActivityId Id of the billingCodeActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBillingCodeActivityFileAsync(Integer billingCodeActivityId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBillingCodeActivityFileValidateBeforeCall(billingCodeActivityId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteBillingCodeActivityTag
     * @param billingCodeActivityId Id of the billingCodeActivity to remove tag from (required)
     * @param billingCodeActivityTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBillingCodeActivityTagCall(Integer billingCodeActivityId, String billingCodeActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}/tag/{billingCodeActivityTag}"
            .replaceAll("\\{" + "billingCodeActivityId" + "\\}", apiClient.escapeString(billingCodeActivityId.toString()))
            .replaceAll("\\{" + "billingCodeActivityTag" + "\\}", apiClient.escapeString(billingCodeActivityTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBillingCodeActivityTagValidateBeforeCall(Integer billingCodeActivityId, String billingCodeActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingCodeActivityId' is set
        if (billingCodeActivityId == null) {
            throw new ApiException("Missing the required parameter 'billingCodeActivityId' when calling deleteBillingCodeActivityTag(Async)");
        }
        
        // verify the required parameter 'billingCodeActivityTag' is set
        if (billingCodeActivityTag == null) {
            throw new ApiException("Missing the required parameter 'billingCodeActivityTag' when calling deleteBillingCodeActivityTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBillingCodeActivityTagCall(billingCodeActivityId, billingCodeActivityTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a billingCodeActivity.
     * Deletes an existing billingCodeActivity tag using the specified data.
     * @param billingCodeActivityId Id of the billingCodeActivity to remove tag from (required)
     * @param billingCodeActivityTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBillingCodeActivityTag(Integer billingCodeActivityId, String billingCodeActivityTag) throws ApiException {
        deleteBillingCodeActivityTagWithHttpInfo(billingCodeActivityId, billingCodeActivityTag);
    }

    /**
     * Delete a tag for a billingCodeActivity.
     * Deletes an existing billingCodeActivity tag using the specified data.
     * @param billingCodeActivityId Id of the billingCodeActivity to remove tag from (required)
     * @param billingCodeActivityTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBillingCodeActivityTagWithHttpInfo(Integer billingCodeActivityId, String billingCodeActivityTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteBillingCodeActivityTagValidateBeforeCall(billingCodeActivityId, billingCodeActivityTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a billingCodeActivity. (asynchronously)
     * Deletes an existing billingCodeActivity tag using the specified data.
     * @param billingCodeActivityId Id of the billingCodeActivity to remove tag from (required)
     * @param billingCodeActivityTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBillingCodeActivityTagAsync(Integer billingCodeActivityId, String billingCodeActivityTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBillingCodeActivityTagValidateBeforeCall(billingCodeActivityId, billingCodeActivityTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getBillingCodeActivityByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBillingCodeActivityByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billingCodeActivity/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBillingCodeActivityByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getBillingCodeActivityByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search billingCodeActivitys by filter
     * Returns the list of billingCodeActivitys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;BillingCodeActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BillingCodeActivity> getBillingCodeActivityByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<BillingCodeActivity>> resp = getBillingCodeActivityByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search billingCodeActivitys by filter
     * Returns the list of billingCodeActivitys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;BillingCodeActivity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BillingCodeActivity>> getBillingCodeActivityByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getBillingCodeActivityByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<BillingCodeActivity>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search billingCodeActivitys by filter (asynchronously)
     * Returns the list of billingCodeActivitys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBillingCodeActivityByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<BillingCodeActivity>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBillingCodeActivityByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BillingCodeActivity>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBillingCodeActivityById
     * @param billingCodeActivityId Id of the billingCodeActivity to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBillingCodeActivityByIdCall(Integer billingCodeActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}"
            .replaceAll("\\{" + "billingCodeActivityId" + "\\}", apiClient.escapeString(billingCodeActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBillingCodeActivityByIdValidateBeforeCall(Integer billingCodeActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingCodeActivityId' is set
        if (billingCodeActivityId == null) {
            throw new ApiException("Missing the required parameter 'billingCodeActivityId' when calling getBillingCodeActivityById(Async)");
        }
        

        com.squareup.okhttp.Call call = getBillingCodeActivityByIdCall(billingCodeActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a billingCodeActivity by id
     * Returns the billingCodeActivity identified by the specified id.
     * @param billingCodeActivityId Id of the billingCodeActivity to be returned. (required)
     * @return BillingCodeActivity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BillingCodeActivity getBillingCodeActivityById(Integer billingCodeActivityId) throws ApiException {
        ApiResponse<BillingCodeActivity> resp = getBillingCodeActivityByIdWithHttpInfo(billingCodeActivityId);
        return resp.getData();
    }

    /**
     * Get a billingCodeActivity by id
     * Returns the billingCodeActivity identified by the specified id.
     * @param billingCodeActivityId Id of the billingCodeActivity to be returned. (required)
     * @return ApiResponse&lt;BillingCodeActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BillingCodeActivity> getBillingCodeActivityByIdWithHttpInfo(Integer billingCodeActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getBillingCodeActivityByIdValidateBeforeCall(billingCodeActivityId, null, null);
        Type localVarReturnType = new TypeToken<BillingCodeActivity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a billingCodeActivity by id (asynchronously)
     * Returns the billingCodeActivity identified by the specified id.
     * @param billingCodeActivityId Id of the billingCodeActivity to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBillingCodeActivityByIdAsync(Integer billingCodeActivityId, final ApiCallback<BillingCodeActivity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBillingCodeActivityByIdValidateBeforeCall(billingCodeActivityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BillingCodeActivity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBillingCodeActivityFiles
     * @param billingCodeActivityId Id of the billingCodeActivity to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBillingCodeActivityFilesCall(Integer billingCodeActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}/file"
            .replaceAll("\\{" + "billingCodeActivityId" + "\\}", apiClient.escapeString(billingCodeActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBillingCodeActivityFilesValidateBeforeCall(Integer billingCodeActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingCodeActivityId' is set
        if (billingCodeActivityId == null) {
            throw new ApiException("Missing the required parameter 'billingCodeActivityId' when calling getBillingCodeActivityFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getBillingCodeActivityFilesCall(billingCodeActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a billingCodeActivity.
     * Get all existing billingCodeActivity files.
     * @param billingCodeActivityId Id of the billingCodeActivity to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getBillingCodeActivityFiles(Integer billingCodeActivityId) throws ApiException {
        getBillingCodeActivityFilesWithHttpInfo(billingCodeActivityId);
    }

    /**
     * Get the files for a billingCodeActivity.
     * Get all existing billingCodeActivity files.
     * @param billingCodeActivityId Id of the billingCodeActivity to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getBillingCodeActivityFilesWithHttpInfo(Integer billingCodeActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getBillingCodeActivityFilesValidateBeforeCall(billingCodeActivityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a billingCodeActivity. (asynchronously)
     * Get all existing billingCodeActivity files.
     * @param billingCodeActivityId Id of the billingCodeActivity to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBillingCodeActivityFilesAsync(Integer billingCodeActivityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBillingCodeActivityFilesValidateBeforeCall(billingCodeActivityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getBillingCodeActivityTags
     * @param billingCodeActivityId Id of the billingCodeActivity to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBillingCodeActivityTagsCall(Integer billingCodeActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billingCodeActivity/{billingCodeActivityId}/tag"
            .replaceAll("\\{" + "billingCodeActivityId" + "\\}", apiClient.escapeString(billingCodeActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBillingCodeActivityTagsValidateBeforeCall(Integer billingCodeActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingCodeActivityId' is set
        if (billingCodeActivityId == null) {
            throw new ApiException("Missing the required parameter 'billingCodeActivityId' when calling getBillingCodeActivityTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getBillingCodeActivityTagsCall(billingCodeActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a billingCodeActivity.
     * Get all existing billingCodeActivity tags.
     * @param billingCodeActivityId Id of the billingCodeActivity to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getBillingCodeActivityTags(Integer billingCodeActivityId) throws ApiException {
        getBillingCodeActivityTagsWithHttpInfo(billingCodeActivityId);
    }

    /**
     * Get the tags for a billingCodeActivity.
     * Get all existing billingCodeActivity tags.
     * @param billingCodeActivityId Id of the billingCodeActivity to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getBillingCodeActivityTagsWithHttpInfo(Integer billingCodeActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getBillingCodeActivityTagsValidateBeforeCall(billingCodeActivityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a billingCodeActivity. (asynchronously)
     * Get all existing billingCodeActivity tags.
     * @param billingCodeActivityId Id of the billingCodeActivity to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBillingCodeActivityTagsAsync(Integer billingCodeActivityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBillingCodeActivityTagsValidateBeforeCall(billingCodeActivityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateBillingCodeActivityById
     * @param billingCodeActivityId Id of the billingCodeActivity to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateBillingCodeActivityByIdCall(Integer billingCodeActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billingCodeActivity/duplicate/{billingCodeActivityId}"
            .replaceAll("\\{" + "billingCodeActivityId" + "\\}", apiClient.escapeString(billingCodeActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateBillingCodeActivityByIdValidateBeforeCall(Integer billingCodeActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingCodeActivityId' is set
        if (billingCodeActivityId == null) {
            throw new ApiException("Missing the required parameter 'billingCodeActivityId' when calling getDuplicateBillingCodeActivityById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateBillingCodeActivityByIdCall(billingCodeActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a billingCodeActivity by id
     * Returns a duplicated billingCodeActivity identified by the specified id.
     * @param billingCodeActivityId Id of the billingCodeActivity to be duplicated. (required)
     * @return BillingCodeActivity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BillingCodeActivity getDuplicateBillingCodeActivityById(Integer billingCodeActivityId) throws ApiException {
        ApiResponse<BillingCodeActivity> resp = getDuplicateBillingCodeActivityByIdWithHttpInfo(billingCodeActivityId);
        return resp.getData();
    }

    /**
     * Get a duplicated a billingCodeActivity by id
     * Returns a duplicated billingCodeActivity identified by the specified id.
     * @param billingCodeActivityId Id of the billingCodeActivity to be duplicated. (required)
     * @return ApiResponse&lt;BillingCodeActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BillingCodeActivity> getDuplicateBillingCodeActivityByIdWithHttpInfo(Integer billingCodeActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateBillingCodeActivityByIdValidateBeforeCall(billingCodeActivityId, null, null);
        Type localVarReturnType = new TypeToken<BillingCodeActivity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a billingCodeActivity by id (asynchronously)
     * Returns a duplicated billingCodeActivity identified by the specified id.
     * @param billingCodeActivityId Id of the billingCodeActivity to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateBillingCodeActivityByIdAsync(Integer billingCodeActivityId, final ApiCallback<BillingCodeActivity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateBillingCodeActivityByIdValidateBeforeCall(billingCodeActivityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BillingCodeActivity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBillingCodeActivity
     * @param body BillingCodeActivity to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBillingCodeActivityCall(BillingCodeActivity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/billingCodeActivity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBillingCodeActivityValidateBeforeCall(BillingCodeActivity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateBillingCodeActivity(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBillingCodeActivityCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a billingCodeActivity
     * Updates an existing billingCodeActivity using the specified data.
     * @param body BillingCodeActivity to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateBillingCodeActivity(BillingCodeActivity body) throws ApiException {
        updateBillingCodeActivityWithHttpInfo(body);
    }

    /**
     * Update a billingCodeActivity
     * Updates an existing billingCodeActivity using the specified data.
     * @param body BillingCodeActivity to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateBillingCodeActivityWithHttpInfo(BillingCodeActivity body) throws ApiException {
        com.squareup.okhttp.Call call = updateBillingCodeActivityValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a billingCodeActivity (asynchronously)
     * Updates an existing billingCodeActivity using the specified data.
     * @param body BillingCodeActivity to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBillingCodeActivityAsync(BillingCodeActivity body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBillingCodeActivityValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
