/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;
import com.infopluscommerce.model.ThirdPartyParcelAccount;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ThirdPartyParcelAccountApi {
    private ApiClient apiClient;

    public ThirdPartyParcelAccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ThirdPartyParcelAccountApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addThirdPartyParcelAccount
     * @param body ThirdPartyParcelAccount to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addThirdPartyParcelAccountCall(ThirdPartyParcelAccount body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/thirdPartyParcelAccount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addThirdPartyParcelAccountValidateBeforeCall(ThirdPartyParcelAccount body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addThirdPartyParcelAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = addThirdPartyParcelAccountCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a thirdPartyParcelAccount
     * Inserts a new thirdPartyParcelAccount using the specified data.
     * @param body ThirdPartyParcelAccount to be inserted. (required)
     * @return ThirdPartyParcelAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ThirdPartyParcelAccount addThirdPartyParcelAccount(ThirdPartyParcelAccount body) throws ApiException {
        ApiResponse<ThirdPartyParcelAccount> resp = addThirdPartyParcelAccountWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a thirdPartyParcelAccount
     * Inserts a new thirdPartyParcelAccount using the specified data.
     * @param body ThirdPartyParcelAccount to be inserted. (required)
     * @return ApiResponse&lt;ThirdPartyParcelAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ThirdPartyParcelAccount> addThirdPartyParcelAccountWithHttpInfo(ThirdPartyParcelAccount body) throws ApiException {
        com.squareup.okhttp.Call call = addThirdPartyParcelAccountValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ThirdPartyParcelAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a thirdPartyParcelAccount (asynchronously)
     * Inserts a new thirdPartyParcelAccount using the specified data.
     * @param body ThirdPartyParcelAccount to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addThirdPartyParcelAccountAsync(ThirdPartyParcelAccount body, final ApiCallback<ThirdPartyParcelAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addThirdPartyParcelAccountValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ThirdPartyParcelAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addThirdPartyParcelAccountAudit
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to add an audit to (required)
     * @param thirdPartyParcelAccountAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addThirdPartyParcelAccountAuditCall(Integer thirdPartyParcelAccountId, String thirdPartyParcelAccountAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/audit/{thirdPartyParcelAccountAudit}"
            .replaceAll("\\{" + "thirdPartyParcelAccountId" + "\\}", apiClient.escapeString(thirdPartyParcelAccountId.toString()))
            .replaceAll("\\{" + "thirdPartyParcelAccountAudit" + "\\}", apiClient.escapeString(thirdPartyParcelAccountAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addThirdPartyParcelAccountAuditValidateBeforeCall(Integer thirdPartyParcelAccountId, String thirdPartyParcelAccountAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'thirdPartyParcelAccountId' is set
        if (thirdPartyParcelAccountId == null) {
            throw new ApiException("Missing the required parameter 'thirdPartyParcelAccountId' when calling addThirdPartyParcelAccountAudit(Async)");
        }
        
        // verify the required parameter 'thirdPartyParcelAccountAudit' is set
        if (thirdPartyParcelAccountAudit == null) {
            throw new ApiException("Missing the required parameter 'thirdPartyParcelAccountAudit' when calling addThirdPartyParcelAccountAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addThirdPartyParcelAccountAuditCall(thirdPartyParcelAccountId, thirdPartyParcelAccountAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a thirdPartyParcelAccount
     * Adds an audit to an existing thirdPartyParcelAccount.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to add an audit to (required)
     * @param thirdPartyParcelAccountAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addThirdPartyParcelAccountAudit(Integer thirdPartyParcelAccountId, String thirdPartyParcelAccountAudit) throws ApiException {
        addThirdPartyParcelAccountAuditWithHttpInfo(thirdPartyParcelAccountId, thirdPartyParcelAccountAudit);
    }

    /**
     * Add new audit for a thirdPartyParcelAccount
     * Adds an audit to an existing thirdPartyParcelAccount.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to add an audit to (required)
     * @param thirdPartyParcelAccountAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addThirdPartyParcelAccountAuditWithHttpInfo(Integer thirdPartyParcelAccountId, String thirdPartyParcelAccountAudit) throws ApiException {
        com.squareup.okhttp.Call call = addThirdPartyParcelAccountAuditValidateBeforeCall(thirdPartyParcelAccountId, thirdPartyParcelAccountAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a thirdPartyParcelAccount (asynchronously)
     * Adds an audit to an existing thirdPartyParcelAccount.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to add an audit to (required)
     * @param thirdPartyParcelAccountAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addThirdPartyParcelAccountAuditAsync(Integer thirdPartyParcelAccountId, String thirdPartyParcelAccountAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addThirdPartyParcelAccountAuditValidateBeforeCall(thirdPartyParcelAccountId, thirdPartyParcelAccountAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addThirdPartyParcelAccountFile
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addThirdPartyParcelAccountFileCall(Integer thirdPartyParcelAccountId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/file/{fileName}"
            .replaceAll("\\{" + "thirdPartyParcelAccountId" + "\\}", apiClient.escapeString(thirdPartyParcelAccountId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addThirdPartyParcelAccountFileValidateBeforeCall(Integer thirdPartyParcelAccountId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'thirdPartyParcelAccountId' is set
        if (thirdPartyParcelAccountId == null) {
            throw new ApiException("Missing the required parameter 'thirdPartyParcelAccountId' when calling addThirdPartyParcelAccountFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addThirdPartyParcelAccountFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addThirdPartyParcelAccountFileCall(thirdPartyParcelAccountId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a thirdPartyParcelAccount
     * Adds a file to an existing thirdPartyParcelAccount.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addThirdPartyParcelAccountFile(Integer thirdPartyParcelAccountId, String fileName) throws ApiException {
        addThirdPartyParcelAccountFileWithHttpInfo(thirdPartyParcelAccountId, fileName);
    }

    /**
     * Attach a file to a thirdPartyParcelAccount
     * Adds a file to an existing thirdPartyParcelAccount.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addThirdPartyParcelAccountFileWithHttpInfo(Integer thirdPartyParcelAccountId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addThirdPartyParcelAccountFileValidateBeforeCall(thirdPartyParcelAccountId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a thirdPartyParcelAccount (asynchronously)
     * Adds a file to an existing thirdPartyParcelAccount.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addThirdPartyParcelAccountFileAsync(Integer thirdPartyParcelAccountId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addThirdPartyParcelAccountFileValidateBeforeCall(thirdPartyParcelAccountId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addThirdPartyParcelAccountFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addThirdPartyParcelAccountFileByURLCall(RecordFile body, Integer thirdPartyParcelAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/file"
            .replaceAll("\\{" + "thirdPartyParcelAccountId" + "\\}", apiClient.escapeString(thirdPartyParcelAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addThirdPartyParcelAccountFileByURLValidateBeforeCall(RecordFile body, Integer thirdPartyParcelAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addThirdPartyParcelAccountFileByURL(Async)");
        }
        
        // verify the required parameter 'thirdPartyParcelAccountId' is set
        if (thirdPartyParcelAccountId == null) {
            throw new ApiException("Missing the required parameter 'thirdPartyParcelAccountId' when calling addThirdPartyParcelAccountFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addThirdPartyParcelAccountFileByURLCall(body, thirdPartyParcelAccountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a thirdPartyParcelAccount by URL.
     * Adds a file to an existing thirdPartyParcelAccount by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addThirdPartyParcelAccountFileByURL(RecordFile body, Integer thirdPartyParcelAccountId) throws ApiException {
        addThirdPartyParcelAccountFileByURLWithHttpInfo(body, thirdPartyParcelAccountId);
    }

    /**
     * Attach a file to a thirdPartyParcelAccount by URL.
     * Adds a file to an existing thirdPartyParcelAccount by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addThirdPartyParcelAccountFileByURLWithHttpInfo(RecordFile body, Integer thirdPartyParcelAccountId) throws ApiException {
        com.squareup.okhttp.Call call = addThirdPartyParcelAccountFileByURLValidateBeforeCall(body, thirdPartyParcelAccountId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a thirdPartyParcelAccount by URL. (asynchronously)
     * Adds a file to an existing thirdPartyParcelAccount by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addThirdPartyParcelAccountFileByURLAsync(RecordFile body, Integer thirdPartyParcelAccountId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addThirdPartyParcelAccountFileByURLValidateBeforeCall(body, thirdPartyParcelAccountId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addThirdPartyParcelAccountTag
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to add a tag to (required)
     * @param thirdPartyParcelAccountTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addThirdPartyParcelAccountTagCall(Integer thirdPartyParcelAccountId, String thirdPartyParcelAccountTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/tag/{thirdPartyParcelAccountTag}"
            .replaceAll("\\{" + "thirdPartyParcelAccountId" + "\\}", apiClient.escapeString(thirdPartyParcelAccountId.toString()))
            .replaceAll("\\{" + "thirdPartyParcelAccountTag" + "\\}", apiClient.escapeString(thirdPartyParcelAccountTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addThirdPartyParcelAccountTagValidateBeforeCall(Integer thirdPartyParcelAccountId, String thirdPartyParcelAccountTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'thirdPartyParcelAccountId' is set
        if (thirdPartyParcelAccountId == null) {
            throw new ApiException("Missing the required parameter 'thirdPartyParcelAccountId' when calling addThirdPartyParcelAccountTag(Async)");
        }
        
        // verify the required parameter 'thirdPartyParcelAccountTag' is set
        if (thirdPartyParcelAccountTag == null) {
            throw new ApiException("Missing the required parameter 'thirdPartyParcelAccountTag' when calling addThirdPartyParcelAccountTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addThirdPartyParcelAccountTagCall(thirdPartyParcelAccountId, thirdPartyParcelAccountTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a thirdPartyParcelAccount.
     * Adds a tag to an existing thirdPartyParcelAccount.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to add a tag to (required)
     * @param thirdPartyParcelAccountTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addThirdPartyParcelAccountTag(Integer thirdPartyParcelAccountId, String thirdPartyParcelAccountTag) throws ApiException {
        addThirdPartyParcelAccountTagWithHttpInfo(thirdPartyParcelAccountId, thirdPartyParcelAccountTag);
    }

    /**
     * Add new tags for a thirdPartyParcelAccount.
     * Adds a tag to an existing thirdPartyParcelAccount.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to add a tag to (required)
     * @param thirdPartyParcelAccountTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addThirdPartyParcelAccountTagWithHttpInfo(Integer thirdPartyParcelAccountId, String thirdPartyParcelAccountTag) throws ApiException {
        com.squareup.okhttp.Call call = addThirdPartyParcelAccountTagValidateBeforeCall(thirdPartyParcelAccountId, thirdPartyParcelAccountTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a thirdPartyParcelAccount. (asynchronously)
     * Adds a tag to an existing thirdPartyParcelAccount.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to add a tag to (required)
     * @param thirdPartyParcelAccountTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addThirdPartyParcelAccountTagAsync(Integer thirdPartyParcelAccountId, String thirdPartyParcelAccountTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addThirdPartyParcelAccountTagValidateBeforeCall(thirdPartyParcelAccountId, thirdPartyParcelAccountTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteThirdPartyParcelAccount
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteThirdPartyParcelAccountCall(Integer thirdPartyParcelAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}"
            .replaceAll("\\{" + "thirdPartyParcelAccountId" + "\\}", apiClient.escapeString(thirdPartyParcelAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteThirdPartyParcelAccountValidateBeforeCall(Integer thirdPartyParcelAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'thirdPartyParcelAccountId' is set
        if (thirdPartyParcelAccountId == null) {
            throw new ApiException("Missing the required parameter 'thirdPartyParcelAccountId' when calling deleteThirdPartyParcelAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteThirdPartyParcelAccountCall(thirdPartyParcelAccountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a thirdPartyParcelAccount
     * Deletes the thirdPartyParcelAccount identified by the specified id.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteThirdPartyParcelAccount(Integer thirdPartyParcelAccountId) throws ApiException {
        deleteThirdPartyParcelAccountWithHttpInfo(thirdPartyParcelAccountId);
    }

    /**
     * Delete a thirdPartyParcelAccount
     * Deletes the thirdPartyParcelAccount identified by the specified id.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteThirdPartyParcelAccountWithHttpInfo(Integer thirdPartyParcelAccountId) throws ApiException {
        com.squareup.okhttp.Call call = deleteThirdPartyParcelAccountValidateBeforeCall(thirdPartyParcelAccountId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a thirdPartyParcelAccount (asynchronously)
     * Deletes the thirdPartyParcelAccount identified by the specified id.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteThirdPartyParcelAccountAsync(Integer thirdPartyParcelAccountId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteThirdPartyParcelAccountValidateBeforeCall(thirdPartyParcelAccountId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteThirdPartyParcelAccountFile
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteThirdPartyParcelAccountFileCall(Integer thirdPartyParcelAccountId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/file/{fileId}"
            .replaceAll("\\{" + "thirdPartyParcelAccountId" + "\\}", apiClient.escapeString(thirdPartyParcelAccountId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteThirdPartyParcelAccountFileValidateBeforeCall(Integer thirdPartyParcelAccountId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'thirdPartyParcelAccountId' is set
        if (thirdPartyParcelAccountId == null) {
            throw new ApiException("Missing the required parameter 'thirdPartyParcelAccountId' when calling deleteThirdPartyParcelAccountFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteThirdPartyParcelAccountFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteThirdPartyParcelAccountFileCall(thirdPartyParcelAccountId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a thirdPartyParcelAccount.
     * Deletes an existing thirdPartyParcelAccount file using the specified data.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteThirdPartyParcelAccountFile(Integer thirdPartyParcelAccountId, Integer fileId) throws ApiException {
        deleteThirdPartyParcelAccountFileWithHttpInfo(thirdPartyParcelAccountId, fileId);
    }

    /**
     * Delete a file for a thirdPartyParcelAccount.
     * Deletes an existing thirdPartyParcelAccount file using the specified data.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteThirdPartyParcelAccountFileWithHttpInfo(Integer thirdPartyParcelAccountId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteThirdPartyParcelAccountFileValidateBeforeCall(thirdPartyParcelAccountId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a thirdPartyParcelAccount. (asynchronously)
     * Deletes an existing thirdPartyParcelAccount file using the specified data.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteThirdPartyParcelAccountFileAsync(Integer thirdPartyParcelAccountId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteThirdPartyParcelAccountFileValidateBeforeCall(thirdPartyParcelAccountId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteThirdPartyParcelAccountTag
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to remove tag from (required)
     * @param thirdPartyParcelAccountTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteThirdPartyParcelAccountTagCall(Integer thirdPartyParcelAccountId, String thirdPartyParcelAccountTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/tag/{thirdPartyParcelAccountTag}"
            .replaceAll("\\{" + "thirdPartyParcelAccountId" + "\\}", apiClient.escapeString(thirdPartyParcelAccountId.toString()))
            .replaceAll("\\{" + "thirdPartyParcelAccountTag" + "\\}", apiClient.escapeString(thirdPartyParcelAccountTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteThirdPartyParcelAccountTagValidateBeforeCall(Integer thirdPartyParcelAccountId, String thirdPartyParcelAccountTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'thirdPartyParcelAccountId' is set
        if (thirdPartyParcelAccountId == null) {
            throw new ApiException("Missing the required parameter 'thirdPartyParcelAccountId' when calling deleteThirdPartyParcelAccountTag(Async)");
        }
        
        // verify the required parameter 'thirdPartyParcelAccountTag' is set
        if (thirdPartyParcelAccountTag == null) {
            throw new ApiException("Missing the required parameter 'thirdPartyParcelAccountTag' when calling deleteThirdPartyParcelAccountTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteThirdPartyParcelAccountTagCall(thirdPartyParcelAccountId, thirdPartyParcelAccountTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a thirdPartyParcelAccount.
     * Deletes an existing thirdPartyParcelAccount tag using the specified data.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to remove tag from (required)
     * @param thirdPartyParcelAccountTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteThirdPartyParcelAccountTag(Integer thirdPartyParcelAccountId, String thirdPartyParcelAccountTag) throws ApiException {
        deleteThirdPartyParcelAccountTagWithHttpInfo(thirdPartyParcelAccountId, thirdPartyParcelAccountTag);
    }

    /**
     * Delete a tag for a thirdPartyParcelAccount.
     * Deletes an existing thirdPartyParcelAccount tag using the specified data.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to remove tag from (required)
     * @param thirdPartyParcelAccountTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteThirdPartyParcelAccountTagWithHttpInfo(Integer thirdPartyParcelAccountId, String thirdPartyParcelAccountTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteThirdPartyParcelAccountTagValidateBeforeCall(thirdPartyParcelAccountId, thirdPartyParcelAccountTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a thirdPartyParcelAccount. (asynchronously)
     * Deletes an existing thirdPartyParcelAccount tag using the specified data.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to remove tag from (required)
     * @param thirdPartyParcelAccountTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteThirdPartyParcelAccountTagAsync(Integer thirdPartyParcelAccountId, String thirdPartyParcelAccountTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteThirdPartyParcelAccountTagValidateBeforeCall(thirdPartyParcelAccountId, thirdPartyParcelAccountTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateThirdPartyParcelAccountById
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateThirdPartyParcelAccountByIdCall(Integer thirdPartyParcelAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/thirdPartyParcelAccount/duplicate/{thirdPartyParcelAccountId}"
            .replaceAll("\\{" + "thirdPartyParcelAccountId" + "\\}", apiClient.escapeString(thirdPartyParcelAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateThirdPartyParcelAccountByIdValidateBeforeCall(Integer thirdPartyParcelAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'thirdPartyParcelAccountId' is set
        if (thirdPartyParcelAccountId == null) {
            throw new ApiException("Missing the required parameter 'thirdPartyParcelAccountId' when calling getDuplicateThirdPartyParcelAccountById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateThirdPartyParcelAccountByIdCall(thirdPartyParcelAccountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a thirdPartyParcelAccount by id
     * Returns a duplicated thirdPartyParcelAccount identified by the specified id.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to be duplicated. (required)
     * @return ThirdPartyParcelAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ThirdPartyParcelAccount getDuplicateThirdPartyParcelAccountById(Integer thirdPartyParcelAccountId) throws ApiException {
        ApiResponse<ThirdPartyParcelAccount> resp = getDuplicateThirdPartyParcelAccountByIdWithHttpInfo(thirdPartyParcelAccountId);
        return resp.getData();
    }

    /**
     * Get a duplicated a thirdPartyParcelAccount by id
     * Returns a duplicated thirdPartyParcelAccount identified by the specified id.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to be duplicated. (required)
     * @return ApiResponse&lt;ThirdPartyParcelAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ThirdPartyParcelAccount> getDuplicateThirdPartyParcelAccountByIdWithHttpInfo(Integer thirdPartyParcelAccountId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateThirdPartyParcelAccountByIdValidateBeforeCall(thirdPartyParcelAccountId, null, null);
        Type localVarReturnType = new TypeToken<ThirdPartyParcelAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a thirdPartyParcelAccount by id (asynchronously)
     * Returns a duplicated thirdPartyParcelAccount identified by the specified id.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateThirdPartyParcelAccountByIdAsync(Integer thirdPartyParcelAccountId, final ApiCallback<ThirdPartyParcelAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateThirdPartyParcelAccountByIdValidateBeforeCall(thirdPartyParcelAccountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ThirdPartyParcelAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getThirdPartyParcelAccountByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getThirdPartyParcelAccountByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/thirdPartyParcelAccount/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getThirdPartyParcelAccountByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getThirdPartyParcelAccountByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search thirdPartyParcelAccounts by filter
     * Returns the list of thirdPartyParcelAccounts that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;ThirdPartyParcelAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ThirdPartyParcelAccount> getThirdPartyParcelAccountByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<ThirdPartyParcelAccount>> resp = getThirdPartyParcelAccountByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search thirdPartyParcelAccounts by filter
     * Returns the list of thirdPartyParcelAccounts that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;ThirdPartyParcelAccount&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ThirdPartyParcelAccount>> getThirdPartyParcelAccountByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getThirdPartyParcelAccountByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<ThirdPartyParcelAccount>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search thirdPartyParcelAccounts by filter (asynchronously)
     * Returns the list of thirdPartyParcelAccounts that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getThirdPartyParcelAccountByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<ThirdPartyParcelAccount>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getThirdPartyParcelAccountByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ThirdPartyParcelAccount>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getThirdPartyParcelAccountById
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getThirdPartyParcelAccountByIdCall(Integer thirdPartyParcelAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}"
            .replaceAll("\\{" + "thirdPartyParcelAccountId" + "\\}", apiClient.escapeString(thirdPartyParcelAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getThirdPartyParcelAccountByIdValidateBeforeCall(Integer thirdPartyParcelAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'thirdPartyParcelAccountId' is set
        if (thirdPartyParcelAccountId == null) {
            throw new ApiException("Missing the required parameter 'thirdPartyParcelAccountId' when calling getThirdPartyParcelAccountById(Async)");
        }
        

        com.squareup.okhttp.Call call = getThirdPartyParcelAccountByIdCall(thirdPartyParcelAccountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a thirdPartyParcelAccount by id
     * Returns the thirdPartyParcelAccount identified by the specified id.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to be returned. (required)
     * @return ThirdPartyParcelAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ThirdPartyParcelAccount getThirdPartyParcelAccountById(Integer thirdPartyParcelAccountId) throws ApiException {
        ApiResponse<ThirdPartyParcelAccount> resp = getThirdPartyParcelAccountByIdWithHttpInfo(thirdPartyParcelAccountId);
        return resp.getData();
    }

    /**
     * Get a thirdPartyParcelAccount by id
     * Returns the thirdPartyParcelAccount identified by the specified id.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to be returned. (required)
     * @return ApiResponse&lt;ThirdPartyParcelAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ThirdPartyParcelAccount> getThirdPartyParcelAccountByIdWithHttpInfo(Integer thirdPartyParcelAccountId) throws ApiException {
        com.squareup.okhttp.Call call = getThirdPartyParcelAccountByIdValidateBeforeCall(thirdPartyParcelAccountId, null, null);
        Type localVarReturnType = new TypeToken<ThirdPartyParcelAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a thirdPartyParcelAccount by id (asynchronously)
     * Returns the thirdPartyParcelAccount identified by the specified id.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getThirdPartyParcelAccountByIdAsync(Integer thirdPartyParcelAccountId, final ApiCallback<ThirdPartyParcelAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getThirdPartyParcelAccountByIdValidateBeforeCall(thirdPartyParcelAccountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ThirdPartyParcelAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getThirdPartyParcelAccountFiles
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getThirdPartyParcelAccountFilesCall(Integer thirdPartyParcelAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/file"
            .replaceAll("\\{" + "thirdPartyParcelAccountId" + "\\}", apiClient.escapeString(thirdPartyParcelAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getThirdPartyParcelAccountFilesValidateBeforeCall(Integer thirdPartyParcelAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'thirdPartyParcelAccountId' is set
        if (thirdPartyParcelAccountId == null) {
            throw new ApiException("Missing the required parameter 'thirdPartyParcelAccountId' when calling getThirdPartyParcelAccountFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getThirdPartyParcelAccountFilesCall(thirdPartyParcelAccountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a thirdPartyParcelAccount.
     * Get all existing thirdPartyParcelAccount files.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getThirdPartyParcelAccountFiles(Integer thirdPartyParcelAccountId) throws ApiException {
        getThirdPartyParcelAccountFilesWithHttpInfo(thirdPartyParcelAccountId);
    }

    /**
     * Get the files for a thirdPartyParcelAccount.
     * Get all existing thirdPartyParcelAccount files.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getThirdPartyParcelAccountFilesWithHttpInfo(Integer thirdPartyParcelAccountId) throws ApiException {
        com.squareup.okhttp.Call call = getThirdPartyParcelAccountFilesValidateBeforeCall(thirdPartyParcelAccountId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a thirdPartyParcelAccount. (asynchronously)
     * Get all existing thirdPartyParcelAccount files.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getThirdPartyParcelAccountFilesAsync(Integer thirdPartyParcelAccountId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getThirdPartyParcelAccountFilesValidateBeforeCall(thirdPartyParcelAccountId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getThirdPartyParcelAccountTags
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getThirdPartyParcelAccountTagsCall(Integer thirdPartyParcelAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/tag"
            .replaceAll("\\{" + "thirdPartyParcelAccountId" + "\\}", apiClient.escapeString(thirdPartyParcelAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getThirdPartyParcelAccountTagsValidateBeforeCall(Integer thirdPartyParcelAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'thirdPartyParcelAccountId' is set
        if (thirdPartyParcelAccountId == null) {
            throw new ApiException("Missing the required parameter 'thirdPartyParcelAccountId' when calling getThirdPartyParcelAccountTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getThirdPartyParcelAccountTagsCall(thirdPartyParcelAccountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a thirdPartyParcelAccount.
     * Get all existing thirdPartyParcelAccount tags.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getThirdPartyParcelAccountTags(Integer thirdPartyParcelAccountId) throws ApiException {
        getThirdPartyParcelAccountTagsWithHttpInfo(thirdPartyParcelAccountId);
    }

    /**
     * Get the tags for a thirdPartyParcelAccount.
     * Get all existing thirdPartyParcelAccount tags.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getThirdPartyParcelAccountTagsWithHttpInfo(Integer thirdPartyParcelAccountId) throws ApiException {
        com.squareup.okhttp.Call call = getThirdPartyParcelAccountTagsValidateBeforeCall(thirdPartyParcelAccountId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a thirdPartyParcelAccount. (asynchronously)
     * Get all existing thirdPartyParcelAccount tags.
     * @param thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getThirdPartyParcelAccountTagsAsync(Integer thirdPartyParcelAccountId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getThirdPartyParcelAccountTagsValidateBeforeCall(thirdPartyParcelAccountId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateThirdPartyParcelAccount
     * @param body ThirdPartyParcelAccount to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateThirdPartyParcelAccountCall(ThirdPartyParcelAccount body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/thirdPartyParcelAccount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateThirdPartyParcelAccountValidateBeforeCall(ThirdPartyParcelAccount body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateThirdPartyParcelAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = updateThirdPartyParcelAccountCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a thirdPartyParcelAccount
     * Updates an existing thirdPartyParcelAccount using the specified data.
     * @param body ThirdPartyParcelAccount to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateThirdPartyParcelAccount(ThirdPartyParcelAccount body) throws ApiException {
        updateThirdPartyParcelAccountWithHttpInfo(body);
    }

    /**
     * Update a thirdPartyParcelAccount
     * Updates an existing thirdPartyParcelAccount using the specified data.
     * @param body ThirdPartyParcelAccount to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateThirdPartyParcelAccountWithHttpInfo(ThirdPartyParcelAccount body) throws ApiException {
        com.squareup.okhttp.Call call = updateThirdPartyParcelAccountValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a thirdPartyParcelAccount (asynchronously)
     * Updates an existing thirdPartyParcelAccount using the specified data.
     * @param body ThirdPartyParcelAccount to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateThirdPartyParcelAccountAsync(ThirdPartyParcelAccount body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateThirdPartyParcelAccountValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateThirdPartyParcelAccountCustomFields
     * @param body ThirdPartyParcelAccount to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateThirdPartyParcelAccountCustomFieldsCall(ThirdPartyParcelAccount body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/thirdPartyParcelAccount/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateThirdPartyParcelAccountCustomFieldsValidateBeforeCall(ThirdPartyParcelAccount body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateThirdPartyParcelAccountCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateThirdPartyParcelAccountCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a thirdPartyParcelAccount custom fields
     * Updates an existing thirdPartyParcelAccount custom fields using the specified data.
     * @param body ThirdPartyParcelAccount to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateThirdPartyParcelAccountCustomFields(ThirdPartyParcelAccount body) throws ApiException {
        updateThirdPartyParcelAccountCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a thirdPartyParcelAccount custom fields
     * Updates an existing thirdPartyParcelAccount custom fields using the specified data.
     * @param body ThirdPartyParcelAccount to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateThirdPartyParcelAccountCustomFieldsWithHttpInfo(ThirdPartyParcelAccount body) throws ApiException {
        com.squareup.okhttp.Call call = updateThirdPartyParcelAccountCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a thirdPartyParcelAccount custom fields (asynchronously)
     * Updates an existing thirdPartyParcelAccount custom fields using the specified data.
     * @param body ThirdPartyParcelAccount to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateThirdPartyParcelAccountCustomFieldsAsync(ThirdPartyParcelAccount body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateThirdPartyParcelAccountCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
