/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.BusinessTransaction;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BusinessTransactionApi {
    private ApiClient apiClient;

    public BusinessTransactionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BusinessTransactionApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addBusinessTransaction
     * @param body BusinessTransaction to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addBusinessTransactionCall(BusinessTransaction body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/businessTransaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addBusinessTransactionValidateBeforeCall(BusinessTransaction body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addBusinessTransaction(Async)");
        }
        

        com.squareup.okhttp.Call call = addBusinessTransactionCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a businessTransaction
     * Inserts a new businessTransaction using the specified data.
     * @param body BusinessTransaction to be inserted. (required)
     * @return BusinessTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BusinessTransaction addBusinessTransaction(BusinessTransaction body) throws ApiException {
        ApiResponse<BusinessTransaction> resp = addBusinessTransactionWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a businessTransaction
     * Inserts a new businessTransaction using the specified data.
     * @param body BusinessTransaction to be inserted. (required)
     * @return ApiResponse&lt;BusinessTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BusinessTransaction> addBusinessTransactionWithHttpInfo(BusinessTransaction body) throws ApiException {
        com.squareup.okhttp.Call call = addBusinessTransactionValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<BusinessTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a businessTransaction (asynchronously)
     * Inserts a new businessTransaction using the specified data.
     * @param body BusinessTransaction to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBusinessTransactionAsync(BusinessTransaction body, final ApiCallback<BusinessTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBusinessTransactionValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BusinessTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addBusinessTransactionAudit
     * @param businessTransactionId Id of the businessTransaction to add an audit to (required)
     * @param businessTransactionAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addBusinessTransactionAuditCall(Integer businessTransactionId, String businessTransactionAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/businessTransaction/{businessTransactionId}/audit/{businessTransactionAudit}"
            .replaceAll("\\{" + "businessTransactionId" + "\\}", apiClient.escapeString(businessTransactionId.toString()))
            .replaceAll("\\{" + "businessTransactionAudit" + "\\}", apiClient.escapeString(businessTransactionAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addBusinessTransactionAuditValidateBeforeCall(Integer businessTransactionId, String businessTransactionAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'businessTransactionId' is set
        if (businessTransactionId == null) {
            throw new ApiException("Missing the required parameter 'businessTransactionId' when calling addBusinessTransactionAudit(Async)");
        }
        
        // verify the required parameter 'businessTransactionAudit' is set
        if (businessTransactionAudit == null) {
            throw new ApiException("Missing the required parameter 'businessTransactionAudit' when calling addBusinessTransactionAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addBusinessTransactionAuditCall(businessTransactionId, businessTransactionAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a businessTransaction
     * Adds an audit to an existing businessTransaction.
     * @param businessTransactionId Id of the businessTransaction to add an audit to (required)
     * @param businessTransactionAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addBusinessTransactionAudit(Integer businessTransactionId, String businessTransactionAudit) throws ApiException {
        addBusinessTransactionAuditWithHttpInfo(businessTransactionId, businessTransactionAudit);
    }

    /**
     * Add new audit for a businessTransaction
     * Adds an audit to an existing businessTransaction.
     * @param businessTransactionId Id of the businessTransaction to add an audit to (required)
     * @param businessTransactionAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addBusinessTransactionAuditWithHttpInfo(Integer businessTransactionId, String businessTransactionAudit) throws ApiException {
        com.squareup.okhttp.Call call = addBusinessTransactionAuditValidateBeforeCall(businessTransactionId, businessTransactionAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a businessTransaction (asynchronously)
     * Adds an audit to an existing businessTransaction.
     * @param businessTransactionId Id of the businessTransaction to add an audit to (required)
     * @param businessTransactionAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBusinessTransactionAuditAsync(Integer businessTransactionId, String businessTransactionAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBusinessTransactionAuditValidateBeforeCall(businessTransactionId, businessTransactionAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addBusinessTransactionFile
     * @param businessTransactionId Id of the businessTransaction to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addBusinessTransactionFileCall(Integer businessTransactionId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/businessTransaction/{businessTransactionId}/file/{fileName}"
            .replaceAll("\\{" + "businessTransactionId" + "\\}", apiClient.escapeString(businessTransactionId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addBusinessTransactionFileValidateBeforeCall(Integer businessTransactionId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'businessTransactionId' is set
        if (businessTransactionId == null) {
            throw new ApiException("Missing the required parameter 'businessTransactionId' when calling addBusinessTransactionFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addBusinessTransactionFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addBusinessTransactionFileCall(businessTransactionId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a businessTransaction
     * Adds a file to an existing businessTransaction.
     * @param businessTransactionId Id of the businessTransaction to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addBusinessTransactionFile(Integer businessTransactionId, String fileName) throws ApiException {
        addBusinessTransactionFileWithHttpInfo(businessTransactionId, fileName);
    }

    /**
     * Attach a file to a businessTransaction
     * Adds a file to an existing businessTransaction.
     * @param businessTransactionId Id of the businessTransaction to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addBusinessTransactionFileWithHttpInfo(Integer businessTransactionId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addBusinessTransactionFileValidateBeforeCall(businessTransactionId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a businessTransaction (asynchronously)
     * Adds a file to an existing businessTransaction.
     * @param businessTransactionId Id of the businessTransaction to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBusinessTransactionFileAsync(Integer businessTransactionId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBusinessTransactionFileValidateBeforeCall(businessTransactionId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addBusinessTransactionFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param businessTransactionId Id of the businessTransaction to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addBusinessTransactionFileByURLCall(RecordFile body, Integer businessTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/businessTransaction/{businessTransactionId}/file"
            .replaceAll("\\{" + "businessTransactionId" + "\\}", apiClient.escapeString(businessTransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addBusinessTransactionFileByURLValidateBeforeCall(RecordFile body, Integer businessTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addBusinessTransactionFileByURL(Async)");
        }
        
        // verify the required parameter 'businessTransactionId' is set
        if (businessTransactionId == null) {
            throw new ApiException("Missing the required parameter 'businessTransactionId' when calling addBusinessTransactionFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addBusinessTransactionFileByURLCall(body, businessTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a businessTransaction by URL.
     * Adds a file to an existing businessTransaction by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param businessTransactionId Id of the businessTransaction to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addBusinessTransactionFileByURL(RecordFile body, Integer businessTransactionId) throws ApiException {
        addBusinessTransactionFileByURLWithHttpInfo(body, businessTransactionId);
    }

    /**
     * Attach a file to a businessTransaction by URL.
     * Adds a file to an existing businessTransaction by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param businessTransactionId Id of the businessTransaction to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addBusinessTransactionFileByURLWithHttpInfo(RecordFile body, Integer businessTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = addBusinessTransactionFileByURLValidateBeforeCall(body, businessTransactionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a businessTransaction by URL. (asynchronously)
     * Adds a file to an existing businessTransaction by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param businessTransactionId Id of the businessTransaction to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBusinessTransactionFileByURLAsync(RecordFile body, Integer businessTransactionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBusinessTransactionFileByURLValidateBeforeCall(body, businessTransactionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addBusinessTransactionTag
     * @param businessTransactionId Id of the businessTransaction to add a tag to (required)
     * @param businessTransactionTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addBusinessTransactionTagCall(Integer businessTransactionId, String businessTransactionTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/businessTransaction/{businessTransactionId}/tag/{businessTransactionTag}"
            .replaceAll("\\{" + "businessTransactionId" + "\\}", apiClient.escapeString(businessTransactionId.toString()))
            .replaceAll("\\{" + "businessTransactionTag" + "\\}", apiClient.escapeString(businessTransactionTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addBusinessTransactionTagValidateBeforeCall(Integer businessTransactionId, String businessTransactionTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'businessTransactionId' is set
        if (businessTransactionId == null) {
            throw new ApiException("Missing the required parameter 'businessTransactionId' when calling addBusinessTransactionTag(Async)");
        }
        
        // verify the required parameter 'businessTransactionTag' is set
        if (businessTransactionTag == null) {
            throw new ApiException("Missing the required parameter 'businessTransactionTag' when calling addBusinessTransactionTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addBusinessTransactionTagCall(businessTransactionId, businessTransactionTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a businessTransaction.
     * Adds a tag to an existing businessTransaction.
     * @param businessTransactionId Id of the businessTransaction to add a tag to (required)
     * @param businessTransactionTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addBusinessTransactionTag(Integer businessTransactionId, String businessTransactionTag) throws ApiException {
        addBusinessTransactionTagWithHttpInfo(businessTransactionId, businessTransactionTag);
    }

    /**
     * Add new tags for a businessTransaction.
     * Adds a tag to an existing businessTransaction.
     * @param businessTransactionId Id of the businessTransaction to add a tag to (required)
     * @param businessTransactionTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addBusinessTransactionTagWithHttpInfo(Integer businessTransactionId, String businessTransactionTag) throws ApiException {
        com.squareup.okhttp.Call call = addBusinessTransactionTagValidateBeforeCall(businessTransactionId, businessTransactionTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a businessTransaction. (asynchronously)
     * Adds a tag to an existing businessTransaction.
     * @param businessTransactionId Id of the businessTransaction to add a tag to (required)
     * @param businessTransactionTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBusinessTransactionTagAsync(Integer businessTransactionId, String businessTransactionTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBusinessTransactionTagValidateBeforeCall(businessTransactionId, businessTransactionTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteBusinessTransactionFile
     * @param businessTransactionId Id of the businessTransaction to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBusinessTransactionFileCall(Integer businessTransactionId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/businessTransaction/{businessTransactionId}/file/{fileId}"
            .replaceAll("\\{" + "businessTransactionId" + "\\}", apiClient.escapeString(businessTransactionId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBusinessTransactionFileValidateBeforeCall(Integer businessTransactionId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'businessTransactionId' is set
        if (businessTransactionId == null) {
            throw new ApiException("Missing the required parameter 'businessTransactionId' when calling deleteBusinessTransactionFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteBusinessTransactionFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBusinessTransactionFileCall(businessTransactionId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a businessTransaction.
     * Deletes an existing businessTransaction file using the specified data.
     * @param businessTransactionId Id of the businessTransaction to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBusinessTransactionFile(Integer businessTransactionId, Integer fileId) throws ApiException {
        deleteBusinessTransactionFileWithHttpInfo(businessTransactionId, fileId);
    }

    /**
     * Delete a file for a businessTransaction.
     * Deletes an existing businessTransaction file using the specified data.
     * @param businessTransactionId Id of the businessTransaction to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBusinessTransactionFileWithHttpInfo(Integer businessTransactionId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBusinessTransactionFileValidateBeforeCall(businessTransactionId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a businessTransaction. (asynchronously)
     * Deletes an existing businessTransaction file using the specified data.
     * @param businessTransactionId Id of the businessTransaction to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBusinessTransactionFileAsync(Integer businessTransactionId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBusinessTransactionFileValidateBeforeCall(businessTransactionId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteBusinessTransactionTag
     * @param businessTransactionId Id of the businessTransaction to remove tag from (required)
     * @param businessTransactionTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBusinessTransactionTagCall(Integer businessTransactionId, String businessTransactionTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/businessTransaction/{businessTransactionId}/tag/{businessTransactionTag}"
            .replaceAll("\\{" + "businessTransactionId" + "\\}", apiClient.escapeString(businessTransactionId.toString()))
            .replaceAll("\\{" + "businessTransactionTag" + "\\}", apiClient.escapeString(businessTransactionTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBusinessTransactionTagValidateBeforeCall(Integer businessTransactionId, String businessTransactionTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'businessTransactionId' is set
        if (businessTransactionId == null) {
            throw new ApiException("Missing the required parameter 'businessTransactionId' when calling deleteBusinessTransactionTag(Async)");
        }
        
        // verify the required parameter 'businessTransactionTag' is set
        if (businessTransactionTag == null) {
            throw new ApiException("Missing the required parameter 'businessTransactionTag' when calling deleteBusinessTransactionTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBusinessTransactionTagCall(businessTransactionId, businessTransactionTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a businessTransaction.
     * Deletes an existing businessTransaction tag using the specified data.
     * @param businessTransactionId Id of the businessTransaction to remove tag from (required)
     * @param businessTransactionTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBusinessTransactionTag(Integer businessTransactionId, String businessTransactionTag) throws ApiException {
        deleteBusinessTransactionTagWithHttpInfo(businessTransactionId, businessTransactionTag);
    }

    /**
     * Delete a tag for a businessTransaction.
     * Deletes an existing businessTransaction tag using the specified data.
     * @param businessTransactionId Id of the businessTransaction to remove tag from (required)
     * @param businessTransactionTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBusinessTransactionTagWithHttpInfo(Integer businessTransactionId, String businessTransactionTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteBusinessTransactionTagValidateBeforeCall(businessTransactionId, businessTransactionTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a businessTransaction. (asynchronously)
     * Deletes an existing businessTransaction tag using the specified data.
     * @param businessTransactionId Id of the businessTransaction to remove tag from (required)
     * @param businessTransactionTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBusinessTransactionTagAsync(Integer businessTransactionId, String businessTransactionTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBusinessTransactionTagValidateBeforeCall(businessTransactionId, businessTransactionTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getBusinessTransactionByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBusinessTransactionByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/businessTransaction/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBusinessTransactionByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getBusinessTransactionByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search businessTransactions by filter
     * Returns the list of businessTransactions that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;BusinessTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BusinessTransaction> getBusinessTransactionByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<BusinessTransaction>> resp = getBusinessTransactionByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search businessTransactions by filter
     * Returns the list of businessTransactions that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;BusinessTransaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BusinessTransaction>> getBusinessTransactionByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getBusinessTransactionByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<BusinessTransaction>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search businessTransactions by filter (asynchronously)
     * Returns the list of businessTransactions that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBusinessTransactionByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<BusinessTransaction>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBusinessTransactionByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BusinessTransaction>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBusinessTransactionById
     * @param businessTransactionId Id of the businessTransaction to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBusinessTransactionByIdCall(Integer businessTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/businessTransaction/{businessTransactionId}"
            .replaceAll("\\{" + "businessTransactionId" + "\\}", apiClient.escapeString(businessTransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBusinessTransactionByIdValidateBeforeCall(Integer businessTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'businessTransactionId' is set
        if (businessTransactionId == null) {
            throw new ApiException("Missing the required parameter 'businessTransactionId' when calling getBusinessTransactionById(Async)");
        }
        

        com.squareup.okhttp.Call call = getBusinessTransactionByIdCall(businessTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a businessTransaction by id
     * Returns the businessTransaction identified by the specified id.
     * @param businessTransactionId Id of the businessTransaction to be returned. (required)
     * @return BusinessTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BusinessTransaction getBusinessTransactionById(Integer businessTransactionId) throws ApiException {
        ApiResponse<BusinessTransaction> resp = getBusinessTransactionByIdWithHttpInfo(businessTransactionId);
        return resp.getData();
    }

    /**
     * Get a businessTransaction by id
     * Returns the businessTransaction identified by the specified id.
     * @param businessTransactionId Id of the businessTransaction to be returned. (required)
     * @return ApiResponse&lt;BusinessTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BusinessTransaction> getBusinessTransactionByIdWithHttpInfo(Integer businessTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = getBusinessTransactionByIdValidateBeforeCall(businessTransactionId, null, null);
        Type localVarReturnType = new TypeToken<BusinessTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a businessTransaction by id (asynchronously)
     * Returns the businessTransaction identified by the specified id.
     * @param businessTransactionId Id of the businessTransaction to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBusinessTransactionByIdAsync(Integer businessTransactionId, final ApiCallback<BusinessTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBusinessTransactionByIdValidateBeforeCall(businessTransactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BusinessTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBusinessTransactionFiles
     * @param businessTransactionId Id of the businessTransaction to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBusinessTransactionFilesCall(Integer businessTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/businessTransaction/{businessTransactionId}/file"
            .replaceAll("\\{" + "businessTransactionId" + "\\}", apiClient.escapeString(businessTransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBusinessTransactionFilesValidateBeforeCall(Integer businessTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'businessTransactionId' is set
        if (businessTransactionId == null) {
            throw new ApiException("Missing the required parameter 'businessTransactionId' when calling getBusinessTransactionFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getBusinessTransactionFilesCall(businessTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a businessTransaction.
     * Get all existing businessTransaction files.
     * @param businessTransactionId Id of the businessTransaction to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getBusinessTransactionFiles(Integer businessTransactionId) throws ApiException {
        getBusinessTransactionFilesWithHttpInfo(businessTransactionId);
    }

    /**
     * Get the files for a businessTransaction.
     * Get all existing businessTransaction files.
     * @param businessTransactionId Id of the businessTransaction to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getBusinessTransactionFilesWithHttpInfo(Integer businessTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = getBusinessTransactionFilesValidateBeforeCall(businessTransactionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a businessTransaction. (asynchronously)
     * Get all existing businessTransaction files.
     * @param businessTransactionId Id of the businessTransaction to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBusinessTransactionFilesAsync(Integer businessTransactionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBusinessTransactionFilesValidateBeforeCall(businessTransactionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getBusinessTransactionTags
     * @param businessTransactionId Id of the businessTransaction to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBusinessTransactionTagsCall(Integer businessTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/businessTransaction/{businessTransactionId}/tag"
            .replaceAll("\\{" + "businessTransactionId" + "\\}", apiClient.escapeString(businessTransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBusinessTransactionTagsValidateBeforeCall(Integer businessTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'businessTransactionId' is set
        if (businessTransactionId == null) {
            throw new ApiException("Missing the required parameter 'businessTransactionId' when calling getBusinessTransactionTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getBusinessTransactionTagsCall(businessTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a businessTransaction.
     * Get all existing businessTransaction tags.
     * @param businessTransactionId Id of the businessTransaction to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getBusinessTransactionTags(Integer businessTransactionId) throws ApiException {
        getBusinessTransactionTagsWithHttpInfo(businessTransactionId);
    }

    /**
     * Get the tags for a businessTransaction.
     * Get all existing businessTransaction tags.
     * @param businessTransactionId Id of the businessTransaction to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getBusinessTransactionTagsWithHttpInfo(Integer businessTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = getBusinessTransactionTagsValidateBeforeCall(businessTransactionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a businessTransaction. (asynchronously)
     * Get all existing businessTransaction tags.
     * @param businessTransactionId Id of the businessTransaction to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBusinessTransactionTagsAsync(Integer businessTransactionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBusinessTransactionTagsValidateBeforeCall(businessTransactionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateBusinessTransactionById
     * @param businessTransactionId Id of the businessTransaction to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateBusinessTransactionByIdCall(Integer businessTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/businessTransaction/duplicate/{businessTransactionId}"
            .replaceAll("\\{" + "businessTransactionId" + "\\}", apiClient.escapeString(businessTransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateBusinessTransactionByIdValidateBeforeCall(Integer businessTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'businessTransactionId' is set
        if (businessTransactionId == null) {
            throw new ApiException("Missing the required parameter 'businessTransactionId' when calling getDuplicateBusinessTransactionById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateBusinessTransactionByIdCall(businessTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a businessTransaction by id
     * Returns a duplicated businessTransaction identified by the specified id.
     * @param businessTransactionId Id of the businessTransaction to be duplicated. (required)
     * @return BusinessTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BusinessTransaction getDuplicateBusinessTransactionById(Integer businessTransactionId) throws ApiException {
        ApiResponse<BusinessTransaction> resp = getDuplicateBusinessTransactionByIdWithHttpInfo(businessTransactionId);
        return resp.getData();
    }

    /**
     * Get a duplicated a businessTransaction by id
     * Returns a duplicated businessTransaction identified by the specified id.
     * @param businessTransactionId Id of the businessTransaction to be duplicated. (required)
     * @return ApiResponse&lt;BusinessTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BusinessTransaction> getDuplicateBusinessTransactionByIdWithHttpInfo(Integer businessTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateBusinessTransactionByIdValidateBeforeCall(businessTransactionId, null, null);
        Type localVarReturnType = new TypeToken<BusinessTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a businessTransaction by id (asynchronously)
     * Returns a duplicated businessTransaction identified by the specified id.
     * @param businessTransactionId Id of the businessTransaction to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateBusinessTransactionByIdAsync(Integer businessTransactionId, final ApiCallback<BusinessTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateBusinessTransactionByIdValidateBeforeCall(businessTransactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BusinessTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBusinessTransaction
     * @param body BusinessTransaction to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBusinessTransactionCall(BusinessTransaction body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/businessTransaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBusinessTransactionValidateBeforeCall(BusinessTransaction body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateBusinessTransaction(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBusinessTransactionCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a businessTransaction
     * Updates an existing businessTransaction using the specified data.
     * @param body BusinessTransaction to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateBusinessTransaction(BusinessTransaction body) throws ApiException {
        updateBusinessTransactionWithHttpInfo(body);
    }

    /**
     * Update a businessTransaction
     * Updates an existing businessTransaction using the specified data.
     * @param body BusinessTransaction to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateBusinessTransactionWithHttpInfo(BusinessTransaction body) throws ApiException {
        com.squareup.okhttp.Call call = updateBusinessTransactionValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a businessTransaction (asynchronously)
     * Updates an existing businessTransaction using the specified data.
     * @param body BusinessTransaction to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBusinessTransactionAsync(BusinessTransaction body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBusinessTransactionValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateBusinessTransactionCustomFields
     * @param body BusinessTransaction to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBusinessTransactionCustomFieldsCall(BusinessTransaction body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/businessTransaction/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBusinessTransactionCustomFieldsValidateBeforeCall(BusinessTransaction body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateBusinessTransactionCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBusinessTransactionCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a businessTransaction custom fields
     * Updates an existing businessTransaction custom fields using the specified data.
     * @param body BusinessTransaction to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateBusinessTransactionCustomFields(BusinessTransaction body) throws ApiException {
        updateBusinessTransactionCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a businessTransaction custom fields
     * Updates an existing businessTransaction custom fields using the specified data.
     * @param body BusinessTransaction to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateBusinessTransactionCustomFieldsWithHttpInfo(BusinessTransaction body) throws ApiException {
        com.squareup.okhttp.Call call = updateBusinessTransactionCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a businessTransaction custom fields (asynchronously)
     * Updates an existing businessTransaction custom fields using the specified data.
     * @param body BusinessTransaction to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBusinessTransactionCustomFieldsAsync(BusinessTransaction body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBusinessTransactionCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
