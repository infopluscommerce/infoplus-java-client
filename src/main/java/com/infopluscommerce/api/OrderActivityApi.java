/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.OrderActivity;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrderActivityApi {
    private ApiClient apiClient;

    public OrderActivityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrderActivityApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addOrderActivity
     * @param body OrderActivity to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrderActivityCall(OrderActivity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/orderActivity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOrderActivityValidateBeforeCall(OrderActivity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addOrderActivity(Async)");
        }
        

        com.squareup.okhttp.Call call = addOrderActivityCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an orderActivity
     * Inserts a new orderActivity using the specified data.
     * @param body OrderActivity to be inserted. (required)
     * @return OrderActivity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderActivity addOrderActivity(OrderActivity body) throws ApiException {
        ApiResponse<OrderActivity> resp = addOrderActivityWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create an orderActivity
     * Inserts a new orderActivity using the specified data.
     * @param body OrderActivity to be inserted. (required)
     * @return ApiResponse&lt;OrderActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderActivity> addOrderActivityWithHttpInfo(OrderActivity body) throws ApiException {
        com.squareup.okhttp.Call call = addOrderActivityValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<OrderActivity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an orderActivity (asynchronously)
     * Inserts a new orderActivity using the specified data.
     * @param body OrderActivity to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrderActivityAsync(OrderActivity body, final ApiCallback<OrderActivity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrderActivityValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderActivity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addOrderActivityAudit
     * @param orderActivityId Id of the orderActivity to add an audit to (required)
     * @param orderActivityAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrderActivityAuditCall(BigDecimal orderActivityId, String orderActivityAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderActivity/{orderActivityId}/audit/{orderActivityAudit}"
            .replaceAll("\\{" + "orderActivityId" + "\\}", apiClient.escapeString(orderActivityId.toString()))
            .replaceAll("\\{" + "orderActivityAudit" + "\\}", apiClient.escapeString(orderActivityAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOrderActivityAuditValidateBeforeCall(BigDecimal orderActivityId, String orderActivityAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderActivityId' is set
        if (orderActivityId == null) {
            throw new ApiException("Missing the required parameter 'orderActivityId' when calling addOrderActivityAudit(Async)");
        }
        
        // verify the required parameter 'orderActivityAudit' is set
        if (orderActivityAudit == null) {
            throw new ApiException("Missing the required parameter 'orderActivityAudit' when calling addOrderActivityAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addOrderActivityAuditCall(orderActivityId, orderActivityAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for an orderActivity
     * Adds an audit to an existing orderActivity.
     * @param orderActivityId Id of the orderActivity to add an audit to (required)
     * @param orderActivityAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOrderActivityAudit(BigDecimal orderActivityId, String orderActivityAudit) throws ApiException {
        addOrderActivityAuditWithHttpInfo(orderActivityId, orderActivityAudit);
    }

    /**
     * Add new audit for an orderActivity
     * Adds an audit to an existing orderActivity.
     * @param orderActivityId Id of the orderActivity to add an audit to (required)
     * @param orderActivityAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOrderActivityAuditWithHttpInfo(BigDecimal orderActivityId, String orderActivityAudit) throws ApiException {
        com.squareup.okhttp.Call call = addOrderActivityAuditValidateBeforeCall(orderActivityId, orderActivityAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for an orderActivity (asynchronously)
     * Adds an audit to an existing orderActivity.
     * @param orderActivityId Id of the orderActivity to add an audit to (required)
     * @param orderActivityAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrderActivityAuditAsync(BigDecimal orderActivityId, String orderActivityAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrderActivityAuditValidateBeforeCall(orderActivityId, orderActivityAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addOrderActivityFile
     * @param orderActivityId Id of the orderActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrderActivityFileCall(BigDecimal orderActivityId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderActivity/{orderActivityId}/file/{fileName}"
            .replaceAll("\\{" + "orderActivityId" + "\\}", apiClient.escapeString(orderActivityId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOrderActivityFileValidateBeforeCall(BigDecimal orderActivityId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderActivityId' is set
        if (orderActivityId == null) {
            throw new ApiException("Missing the required parameter 'orderActivityId' when calling addOrderActivityFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addOrderActivityFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addOrderActivityFileCall(orderActivityId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an orderActivity
     * Adds a file to an existing orderActivity.
     * @param orderActivityId Id of the orderActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOrderActivityFile(BigDecimal orderActivityId, String fileName) throws ApiException {
        addOrderActivityFileWithHttpInfo(orderActivityId, fileName);
    }

    /**
     * Attach a file to an orderActivity
     * Adds a file to an existing orderActivity.
     * @param orderActivityId Id of the orderActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOrderActivityFileWithHttpInfo(BigDecimal orderActivityId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addOrderActivityFileValidateBeforeCall(orderActivityId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an orderActivity (asynchronously)
     * Adds a file to an existing orderActivity.
     * @param orderActivityId Id of the orderActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrderActivityFileAsync(BigDecimal orderActivityId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrderActivityFileValidateBeforeCall(orderActivityId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addOrderActivityFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param orderActivityId Id of the orderActivity to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrderActivityFileByURLCall(RecordFile body, BigDecimal orderActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/orderActivity/{orderActivityId}/file"
            .replaceAll("\\{" + "orderActivityId" + "\\}", apiClient.escapeString(orderActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOrderActivityFileByURLValidateBeforeCall(RecordFile body, BigDecimal orderActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addOrderActivityFileByURL(Async)");
        }
        
        // verify the required parameter 'orderActivityId' is set
        if (orderActivityId == null) {
            throw new ApiException("Missing the required parameter 'orderActivityId' when calling addOrderActivityFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addOrderActivityFileByURLCall(body, orderActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an orderActivity by URL.
     * Adds a file to an existing orderActivity by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param orderActivityId Id of the orderActivity to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOrderActivityFileByURL(RecordFile body, BigDecimal orderActivityId) throws ApiException {
        addOrderActivityFileByURLWithHttpInfo(body, orderActivityId);
    }

    /**
     * Attach a file to an orderActivity by URL.
     * Adds a file to an existing orderActivity by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param orderActivityId Id of the orderActivity to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOrderActivityFileByURLWithHttpInfo(RecordFile body, BigDecimal orderActivityId) throws ApiException {
        com.squareup.okhttp.Call call = addOrderActivityFileByURLValidateBeforeCall(body, orderActivityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an orderActivity by URL. (asynchronously)
     * Adds a file to an existing orderActivity by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param orderActivityId Id of the orderActivity to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrderActivityFileByURLAsync(RecordFile body, BigDecimal orderActivityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrderActivityFileByURLValidateBeforeCall(body, orderActivityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addOrderActivityTag
     * @param orderActivityId Id of the orderActivity to add a tag to (required)
     * @param orderActivityTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrderActivityTagCall(BigDecimal orderActivityId, String orderActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderActivity/{orderActivityId}/tag/{orderActivityTag}"
            .replaceAll("\\{" + "orderActivityId" + "\\}", apiClient.escapeString(orderActivityId.toString()))
            .replaceAll("\\{" + "orderActivityTag" + "\\}", apiClient.escapeString(orderActivityTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOrderActivityTagValidateBeforeCall(BigDecimal orderActivityId, String orderActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderActivityId' is set
        if (orderActivityId == null) {
            throw new ApiException("Missing the required parameter 'orderActivityId' when calling addOrderActivityTag(Async)");
        }
        
        // verify the required parameter 'orderActivityTag' is set
        if (orderActivityTag == null) {
            throw new ApiException("Missing the required parameter 'orderActivityTag' when calling addOrderActivityTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addOrderActivityTagCall(orderActivityId, orderActivityTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for an orderActivity.
     * Adds a tag to an existing orderActivity.
     * @param orderActivityId Id of the orderActivity to add a tag to (required)
     * @param orderActivityTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOrderActivityTag(BigDecimal orderActivityId, String orderActivityTag) throws ApiException {
        addOrderActivityTagWithHttpInfo(orderActivityId, orderActivityTag);
    }

    /**
     * Add new tags for an orderActivity.
     * Adds a tag to an existing orderActivity.
     * @param orderActivityId Id of the orderActivity to add a tag to (required)
     * @param orderActivityTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOrderActivityTagWithHttpInfo(BigDecimal orderActivityId, String orderActivityTag) throws ApiException {
        com.squareup.okhttp.Call call = addOrderActivityTagValidateBeforeCall(orderActivityId, orderActivityTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for an orderActivity. (asynchronously)
     * Adds a tag to an existing orderActivity.
     * @param orderActivityId Id of the orderActivity to add a tag to (required)
     * @param orderActivityTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrderActivityTagAsync(BigDecimal orderActivityId, String orderActivityTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrderActivityTagValidateBeforeCall(orderActivityId, orderActivityTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteOrderActivity
     * @param orderActivityId Id of the orderActivity to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOrderActivityCall(BigDecimal orderActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderActivity/{orderActivityId}"
            .replaceAll("\\{" + "orderActivityId" + "\\}", apiClient.escapeString(orderActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOrderActivityValidateBeforeCall(BigDecimal orderActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderActivityId' is set
        if (orderActivityId == null) {
            throw new ApiException("Missing the required parameter 'orderActivityId' when calling deleteOrderActivity(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOrderActivityCall(orderActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an orderActivity
     * Deletes the orderActivity identified by the specified id.
     * @param orderActivityId Id of the orderActivity to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteOrderActivity(BigDecimal orderActivityId) throws ApiException {
        deleteOrderActivityWithHttpInfo(orderActivityId);
    }

    /**
     * Delete an orderActivity
     * Deletes the orderActivity identified by the specified id.
     * @param orderActivityId Id of the orderActivity to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteOrderActivityWithHttpInfo(BigDecimal orderActivityId) throws ApiException {
        com.squareup.okhttp.Call call = deleteOrderActivityValidateBeforeCall(orderActivityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an orderActivity (asynchronously)
     * Deletes the orderActivity identified by the specified id.
     * @param orderActivityId Id of the orderActivity to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOrderActivityAsync(BigDecimal orderActivityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOrderActivityValidateBeforeCall(orderActivityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteOrderActivityFile
     * @param orderActivityId Id of the orderActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOrderActivityFileCall(BigDecimal orderActivityId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderActivity/{orderActivityId}/file/{fileId}"
            .replaceAll("\\{" + "orderActivityId" + "\\}", apiClient.escapeString(orderActivityId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOrderActivityFileValidateBeforeCall(BigDecimal orderActivityId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderActivityId' is set
        if (orderActivityId == null) {
            throw new ApiException("Missing the required parameter 'orderActivityId' when calling deleteOrderActivityFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteOrderActivityFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOrderActivityFileCall(orderActivityId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for an orderActivity.
     * Deletes an existing orderActivity file using the specified data.
     * @param orderActivityId Id of the orderActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteOrderActivityFile(BigDecimal orderActivityId, Integer fileId) throws ApiException {
        deleteOrderActivityFileWithHttpInfo(orderActivityId, fileId);
    }

    /**
     * Delete a file for an orderActivity.
     * Deletes an existing orderActivity file using the specified data.
     * @param orderActivityId Id of the orderActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteOrderActivityFileWithHttpInfo(BigDecimal orderActivityId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteOrderActivityFileValidateBeforeCall(orderActivityId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for an orderActivity. (asynchronously)
     * Deletes an existing orderActivity file using the specified data.
     * @param orderActivityId Id of the orderActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOrderActivityFileAsync(BigDecimal orderActivityId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOrderActivityFileValidateBeforeCall(orderActivityId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteOrderActivityTag
     * @param orderActivityId Id of the orderActivity to remove tag from (required)
     * @param orderActivityTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOrderActivityTagCall(BigDecimal orderActivityId, String orderActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderActivity/{orderActivityId}/tag/{orderActivityTag}"
            .replaceAll("\\{" + "orderActivityId" + "\\}", apiClient.escapeString(orderActivityId.toString()))
            .replaceAll("\\{" + "orderActivityTag" + "\\}", apiClient.escapeString(orderActivityTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOrderActivityTagValidateBeforeCall(BigDecimal orderActivityId, String orderActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderActivityId' is set
        if (orderActivityId == null) {
            throw new ApiException("Missing the required parameter 'orderActivityId' when calling deleteOrderActivityTag(Async)");
        }
        
        // verify the required parameter 'orderActivityTag' is set
        if (orderActivityTag == null) {
            throw new ApiException("Missing the required parameter 'orderActivityTag' when calling deleteOrderActivityTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOrderActivityTagCall(orderActivityId, orderActivityTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for an orderActivity.
     * Deletes an existing orderActivity tag using the specified data.
     * @param orderActivityId Id of the orderActivity to remove tag from (required)
     * @param orderActivityTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteOrderActivityTag(BigDecimal orderActivityId, String orderActivityTag) throws ApiException {
        deleteOrderActivityTagWithHttpInfo(orderActivityId, orderActivityTag);
    }

    /**
     * Delete a tag for an orderActivity.
     * Deletes an existing orderActivity tag using the specified data.
     * @param orderActivityId Id of the orderActivity to remove tag from (required)
     * @param orderActivityTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteOrderActivityTagWithHttpInfo(BigDecimal orderActivityId, String orderActivityTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteOrderActivityTagValidateBeforeCall(orderActivityId, orderActivityTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for an orderActivity. (asynchronously)
     * Deletes an existing orderActivity tag using the specified data.
     * @param orderActivityId Id of the orderActivity to remove tag from (required)
     * @param orderActivityTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOrderActivityTagAsync(BigDecimal orderActivityId, String orderActivityTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOrderActivityTagValidateBeforeCall(orderActivityId, orderActivityTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateOrderActivityById
     * @param orderActivityId Id of the orderActivity to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateOrderActivityByIdCall(BigDecimal orderActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderActivity/duplicate/{orderActivityId}"
            .replaceAll("\\{" + "orderActivityId" + "\\}", apiClient.escapeString(orderActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateOrderActivityByIdValidateBeforeCall(BigDecimal orderActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderActivityId' is set
        if (orderActivityId == null) {
            throw new ApiException("Missing the required parameter 'orderActivityId' when calling getDuplicateOrderActivityById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateOrderActivityByIdCall(orderActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated an orderActivity by id
     * Returns a duplicated orderActivity identified by the specified id.
     * @param orderActivityId Id of the orderActivity to be duplicated. (required)
     * @return OrderActivity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderActivity getDuplicateOrderActivityById(BigDecimal orderActivityId) throws ApiException {
        ApiResponse<OrderActivity> resp = getDuplicateOrderActivityByIdWithHttpInfo(orderActivityId);
        return resp.getData();
    }

    /**
     * Get a duplicated an orderActivity by id
     * Returns a duplicated orderActivity identified by the specified id.
     * @param orderActivityId Id of the orderActivity to be duplicated. (required)
     * @return ApiResponse&lt;OrderActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderActivity> getDuplicateOrderActivityByIdWithHttpInfo(BigDecimal orderActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateOrderActivityByIdValidateBeforeCall(orderActivityId, null, null);
        Type localVarReturnType = new TypeToken<OrderActivity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated an orderActivity by id (asynchronously)
     * Returns a duplicated orderActivity identified by the specified id.
     * @param orderActivityId Id of the orderActivity to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateOrderActivityByIdAsync(BigDecimal orderActivityId, final ApiCallback<OrderActivity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateOrderActivityByIdValidateBeforeCall(orderActivityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderActivity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderActivityByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderActivityByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderActivity/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderActivityByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getOrderActivityByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search orderActivitys by filter
     * Returns the list of orderActivitys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;OrderActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OrderActivity> getOrderActivityByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<OrderActivity>> resp = getOrderActivityByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search orderActivitys by filter
     * Returns the list of orderActivitys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;OrderActivity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OrderActivity>> getOrderActivityByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getOrderActivityByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<OrderActivity>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search orderActivitys by filter (asynchronously)
     * Returns the list of orderActivitys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderActivityByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<OrderActivity>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderActivityByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OrderActivity>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderActivityById
     * @param orderActivityId Id of the orderActivity to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderActivityByIdCall(BigDecimal orderActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderActivity/{orderActivityId}"
            .replaceAll("\\{" + "orderActivityId" + "\\}", apiClient.escapeString(orderActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderActivityByIdValidateBeforeCall(BigDecimal orderActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderActivityId' is set
        if (orderActivityId == null) {
            throw new ApiException("Missing the required parameter 'orderActivityId' when calling getOrderActivityById(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderActivityByIdCall(orderActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an orderActivity by id
     * Returns the orderActivity identified by the specified id.
     * @param orderActivityId Id of the orderActivity to be returned. (required)
     * @return OrderActivity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderActivity getOrderActivityById(BigDecimal orderActivityId) throws ApiException {
        ApiResponse<OrderActivity> resp = getOrderActivityByIdWithHttpInfo(orderActivityId);
        return resp.getData();
    }

    /**
     * Get an orderActivity by id
     * Returns the orderActivity identified by the specified id.
     * @param orderActivityId Id of the orderActivity to be returned. (required)
     * @return ApiResponse&lt;OrderActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderActivity> getOrderActivityByIdWithHttpInfo(BigDecimal orderActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderActivityByIdValidateBeforeCall(orderActivityId, null, null);
        Type localVarReturnType = new TypeToken<OrderActivity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an orderActivity by id (asynchronously)
     * Returns the orderActivity identified by the specified id.
     * @param orderActivityId Id of the orderActivity to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderActivityByIdAsync(BigDecimal orderActivityId, final ApiCallback<OrderActivity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderActivityByIdValidateBeforeCall(orderActivityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderActivity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderActivityFiles
     * @param orderActivityId Id of the orderActivity to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderActivityFilesCall(BigDecimal orderActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderActivity/{orderActivityId}/file"
            .replaceAll("\\{" + "orderActivityId" + "\\}", apiClient.escapeString(orderActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderActivityFilesValidateBeforeCall(BigDecimal orderActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderActivityId' is set
        if (orderActivityId == null) {
            throw new ApiException("Missing the required parameter 'orderActivityId' when calling getOrderActivityFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderActivityFilesCall(orderActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for an orderActivity.
     * Get all existing orderActivity files.
     * @param orderActivityId Id of the orderActivity to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getOrderActivityFiles(BigDecimal orderActivityId) throws ApiException {
        getOrderActivityFilesWithHttpInfo(orderActivityId);
    }

    /**
     * Get the files for an orderActivity.
     * Get all existing orderActivity files.
     * @param orderActivityId Id of the orderActivity to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getOrderActivityFilesWithHttpInfo(BigDecimal orderActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderActivityFilesValidateBeforeCall(orderActivityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for an orderActivity. (asynchronously)
     * Get all existing orderActivity files.
     * @param orderActivityId Id of the orderActivity to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderActivityFilesAsync(BigDecimal orderActivityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderActivityFilesValidateBeforeCall(orderActivityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getOrderActivityTags
     * @param orderActivityId Id of the orderActivity to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderActivityTagsCall(BigDecimal orderActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderActivity/{orderActivityId}/tag"
            .replaceAll("\\{" + "orderActivityId" + "\\}", apiClient.escapeString(orderActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderActivityTagsValidateBeforeCall(BigDecimal orderActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderActivityId' is set
        if (orderActivityId == null) {
            throw new ApiException("Missing the required parameter 'orderActivityId' when calling getOrderActivityTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderActivityTagsCall(orderActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for an orderActivity.
     * Get all existing orderActivity tags.
     * @param orderActivityId Id of the orderActivity to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getOrderActivityTags(BigDecimal orderActivityId) throws ApiException {
        getOrderActivityTagsWithHttpInfo(orderActivityId);
    }

    /**
     * Get the tags for an orderActivity.
     * Get all existing orderActivity tags.
     * @param orderActivityId Id of the orderActivity to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getOrderActivityTagsWithHttpInfo(BigDecimal orderActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderActivityTagsValidateBeforeCall(orderActivityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for an orderActivity. (asynchronously)
     * Get all existing orderActivity tags.
     * @param orderActivityId Id of the orderActivity to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderActivityTagsAsync(BigDecimal orderActivityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderActivityTagsValidateBeforeCall(orderActivityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateOrderActivity
     * @param body OrderActivity to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateOrderActivityCall(OrderActivity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/orderActivity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOrderActivityValidateBeforeCall(OrderActivity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateOrderActivity(Async)");
        }
        

        com.squareup.okhttp.Call call = updateOrderActivityCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an orderActivity
     * Updates an existing orderActivity using the specified data.
     * @param body OrderActivity to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateOrderActivity(OrderActivity body) throws ApiException {
        updateOrderActivityWithHttpInfo(body);
    }

    /**
     * Update an orderActivity
     * Updates an existing orderActivity using the specified data.
     * @param body OrderActivity to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateOrderActivityWithHttpInfo(OrderActivity body) throws ApiException {
        com.squareup.okhttp.Call call = updateOrderActivityValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an orderActivity (asynchronously)
     * Updates an existing orderActivity using the specified data.
     * @param body OrderActivity to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOrderActivityAsync(OrderActivity body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOrderActivityValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
