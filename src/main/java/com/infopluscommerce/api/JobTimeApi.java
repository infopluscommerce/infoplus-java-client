/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.JobTime;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JobTimeApi {
    private ApiClient apiClient;

    public JobTimeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JobTimeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addJobTime
     * @param body JobTime to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addJobTimeCall(JobTime body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/jobTime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addJobTimeValidateBeforeCall(JobTime body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addJobTime(Async)");
        }
        

        com.squareup.okhttp.Call call = addJobTimeCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a jobTime
     * Inserts a new jobTime using the specified data.
     * @param body JobTime to be inserted. (required)
     * @return JobTime
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobTime addJobTime(JobTime body) throws ApiException {
        ApiResponse<JobTime> resp = addJobTimeWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a jobTime
     * Inserts a new jobTime using the specified data.
     * @param body JobTime to be inserted. (required)
     * @return ApiResponse&lt;JobTime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobTime> addJobTimeWithHttpInfo(JobTime body) throws ApiException {
        com.squareup.okhttp.Call call = addJobTimeValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<JobTime>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a jobTime (asynchronously)
     * Inserts a new jobTime using the specified data.
     * @param body JobTime to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addJobTimeAsync(JobTime body, final ApiCallback<JobTime> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addJobTimeValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobTime>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addJobTimeAudit
     * @param jobTimeId Id of the jobTime to add an audit to (required)
     * @param jobTimeAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addJobTimeAuditCall(Integer jobTimeId, String jobTimeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobTime/{jobTimeId}/audit/{jobTimeAudit}"
            .replaceAll("\\{" + "jobTimeId" + "\\}", apiClient.escapeString(jobTimeId.toString()))
            .replaceAll("\\{" + "jobTimeAudit" + "\\}", apiClient.escapeString(jobTimeAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addJobTimeAuditValidateBeforeCall(Integer jobTimeId, String jobTimeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobTimeId' is set
        if (jobTimeId == null) {
            throw new ApiException("Missing the required parameter 'jobTimeId' when calling addJobTimeAudit(Async)");
        }
        
        // verify the required parameter 'jobTimeAudit' is set
        if (jobTimeAudit == null) {
            throw new ApiException("Missing the required parameter 'jobTimeAudit' when calling addJobTimeAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addJobTimeAuditCall(jobTimeId, jobTimeAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a jobTime
     * Adds an audit to an existing jobTime.
     * @param jobTimeId Id of the jobTime to add an audit to (required)
     * @param jobTimeAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addJobTimeAudit(Integer jobTimeId, String jobTimeAudit) throws ApiException {
        addJobTimeAuditWithHttpInfo(jobTimeId, jobTimeAudit);
    }

    /**
     * Add new audit for a jobTime
     * Adds an audit to an existing jobTime.
     * @param jobTimeId Id of the jobTime to add an audit to (required)
     * @param jobTimeAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addJobTimeAuditWithHttpInfo(Integer jobTimeId, String jobTimeAudit) throws ApiException {
        com.squareup.okhttp.Call call = addJobTimeAuditValidateBeforeCall(jobTimeId, jobTimeAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a jobTime (asynchronously)
     * Adds an audit to an existing jobTime.
     * @param jobTimeId Id of the jobTime to add an audit to (required)
     * @param jobTimeAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addJobTimeAuditAsync(Integer jobTimeId, String jobTimeAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addJobTimeAuditValidateBeforeCall(jobTimeId, jobTimeAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addJobTimeFile
     * @param jobTimeId Id of the jobTime to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addJobTimeFileCall(Integer jobTimeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobTime/{jobTimeId}/file/{fileName}"
            .replaceAll("\\{" + "jobTimeId" + "\\}", apiClient.escapeString(jobTimeId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addJobTimeFileValidateBeforeCall(Integer jobTimeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobTimeId' is set
        if (jobTimeId == null) {
            throw new ApiException("Missing the required parameter 'jobTimeId' when calling addJobTimeFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addJobTimeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addJobTimeFileCall(jobTimeId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a jobTime
     * Adds a file to an existing jobTime.
     * @param jobTimeId Id of the jobTime to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addJobTimeFile(Integer jobTimeId, String fileName) throws ApiException {
        addJobTimeFileWithHttpInfo(jobTimeId, fileName);
    }

    /**
     * Attach a file to a jobTime
     * Adds a file to an existing jobTime.
     * @param jobTimeId Id of the jobTime to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addJobTimeFileWithHttpInfo(Integer jobTimeId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addJobTimeFileValidateBeforeCall(jobTimeId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a jobTime (asynchronously)
     * Adds a file to an existing jobTime.
     * @param jobTimeId Id of the jobTime to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addJobTimeFileAsync(Integer jobTimeId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addJobTimeFileValidateBeforeCall(jobTimeId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addJobTimeFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param jobTimeId Id of the jobTime to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addJobTimeFileByURLCall(RecordFile body, Integer jobTimeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/jobTime/{jobTimeId}/file"
            .replaceAll("\\{" + "jobTimeId" + "\\}", apiClient.escapeString(jobTimeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addJobTimeFileByURLValidateBeforeCall(RecordFile body, Integer jobTimeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addJobTimeFileByURL(Async)");
        }
        
        // verify the required parameter 'jobTimeId' is set
        if (jobTimeId == null) {
            throw new ApiException("Missing the required parameter 'jobTimeId' when calling addJobTimeFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addJobTimeFileByURLCall(body, jobTimeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a jobTime by URL.
     * Adds a file to an existing jobTime by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param jobTimeId Id of the jobTime to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addJobTimeFileByURL(RecordFile body, Integer jobTimeId) throws ApiException {
        addJobTimeFileByURLWithHttpInfo(body, jobTimeId);
    }

    /**
     * Attach a file to a jobTime by URL.
     * Adds a file to an existing jobTime by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param jobTimeId Id of the jobTime to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addJobTimeFileByURLWithHttpInfo(RecordFile body, Integer jobTimeId) throws ApiException {
        com.squareup.okhttp.Call call = addJobTimeFileByURLValidateBeforeCall(body, jobTimeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a jobTime by URL. (asynchronously)
     * Adds a file to an existing jobTime by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param jobTimeId Id of the jobTime to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addJobTimeFileByURLAsync(RecordFile body, Integer jobTimeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addJobTimeFileByURLValidateBeforeCall(body, jobTimeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addJobTimeTag
     * @param jobTimeId Id of the jobTime to add a tag to (required)
     * @param jobTimeTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addJobTimeTagCall(Integer jobTimeId, String jobTimeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobTime/{jobTimeId}/tag/{jobTimeTag}"
            .replaceAll("\\{" + "jobTimeId" + "\\}", apiClient.escapeString(jobTimeId.toString()))
            .replaceAll("\\{" + "jobTimeTag" + "\\}", apiClient.escapeString(jobTimeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addJobTimeTagValidateBeforeCall(Integer jobTimeId, String jobTimeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobTimeId' is set
        if (jobTimeId == null) {
            throw new ApiException("Missing the required parameter 'jobTimeId' when calling addJobTimeTag(Async)");
        }
        
        // verify the required parameter 'jobTimeTag' is set
        if (jobTimeTag == null) {
            throw new ApiException("Missing the required parameter 'jobTimeTag' when calling addJobTimeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addJobTimeTagCall(jobTimeId, jobTimeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a jobTime.
     * Adds a tag to an existing jobTime.
     * @param jobTimeId Id of the jobTime to add a tag to (required)
     * @param jobTimeTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addJobTimeTag(Integer jobTimeId, String jobTimeTag) throws ApiException {
        addJobTimeTagWithHttpInfo(jobTimeId, jobTimeTag);
    }

    /**
     * Add new tags for a jobTime.
     * Adds a tag to an existing jobTime.
     * @param jobTimeId Id of the jobTime to add a tag to (required)
     * @param jobTimeTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addJobTimeTagWithHttpInfo(Integer jobTimeId, String jobTimeTag) throws ApiException {
        com.squareup.okhttp.Call call = addJobTimeTagValidateBeforeCall(jobTimeId, jobTimeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a jobTime. (asynchronously)
     * Adds a tag to an existing jobTime.
     * @param jobTimeId Id of the jobTime to add a tag to (required)
     * @param jobTimeTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addJobTimeTagAsync(Integer jobTimeId, String jobTimeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addJobTimeTagValidateBeforeCall(jobTimeId, jobTimeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteJobTime
     * @param jobTimeId Id of the jobTime to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteJobTimeCall(Integer jobTimeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobTime/{jobTimeId}"
            .replaceAll("\\{" + "jobTimeId" + "\\}", apiClient.escapeString(jobTimeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteJobTimeValidateBeforeCall(Integer jobTimeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobTimeId' is set
        if (jobTimeId == null) {
            throw new ApiException("Missing the required parameter 'jobTimeId' when calling deleteJobTime(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteJobTimeCall(jobTimeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a jobTime
     * Deletes the jobTime identified by the specified id.
     * @param jobTimeId Id of the jobTime to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteJobTime(Integer jobTimeId) throws ApiException {
        deleteJobTimeWithHttpInfo(jobTimeId);
    }

    /**
     * Delete a jobTime
     * Deletes the jobTime identified by the specified id.
     * @param jobTimeId Id of the jobTime to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteJobTimeWithHttpInfo(Integer jobTimeId) throws ApiException {
        com.squareup.okhttp.Call call = deleteJobTimeValidateBeforeCall(jobTimeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a jobTime (asynchronously)
     * Deletes the jobTime identified by the specified id.
     * @param jobTimeId Id of the jobTime to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteJobTimeAsync(Integer jobTimeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteJobTimeValidateBeforeCall(jobTimeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteJobTimeFile
     * @param jobTimeId Id of the jobTime to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteJobTimeFileCall(Integer jobTimeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobTime/{jobTimeId}/file/{fileId}"
            .replaceAll("\\{" + "jobTimeId" + "\\}", apiClient.escapeString(jobTimeId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteJobTimeFileValidateBeforeCall(Integer jobTimeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobTimeId' is set
        if (jobTimeId == null) {
            throw new ApiException("Missing the required parameter 'jobTimeId' when calling deleteJobTimeFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteJobTimeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteJobTimeFileCall(jobTimeId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a jobTime.
     * Deletes an existing jobTime file using the specified data.
     * @param jobTimeId Id of the jobTime to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteJobTimeFile(Integer jobTimeId, Integer fileId) throws ApiException {
        deleteJobTimeFileWithHttpInfo(jobTimeId, fileId);
    }

    /**
     * Delete a file for a jobTime.
     * Deletes an existing jobTime file using the specified data.
     * @param jobTimeId Id of the jobTime to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteJobTimeFileWithHttpInfo(Integer jobTimeId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteJobTimeFileValidateBeforeCall(jobTimeId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a jobTime. (asynchronously)
     * Deletes an existing jobTime file using the specified data.
     * @param jobTimeId Id of the jobTime to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteJobTimeFileAsync(Integer jobTimeId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteJobTimeFileValidateBeforeCall(jobTimeId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteJobTimeTag
     * @param jobTimeId Id of the jobTime to remove tag from (required)
     * @param jobTimeTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteJobTimeTagCall(Integer jobTimeId, String jobTimeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobTime/{jobTimeId}/tag/{jobTimeTag}"
            .replaceAll("\\{" + "jobTimeId" + "\\}", apiClient.escapeString(jobTimeId.toString()))
            .replaceAll("\\{" + "jobTimeTag" + "\\}", apiClient.escapeString(jobTimeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteJobTimeTagValidateBeforeCall(Integer jobTimeId, String jobTimeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobTimeId' is set
        if (jobTimeId == null) {
            throw new ApiException("Missing the required parameter 'jobTimeId' when calling deleteJobTimeTag(Async)");
        }
        
        // verify the required parameter 'jobTimeTag' is set
        if (jobTimeTag == null) {
            throw new ApiException("Missing the required parameter 'jobTimeTag' when calling deleteJobTimeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteJobTimeTagCall(jobTimeId, jobTimeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a jobTime.
     * Deletes an existing jobTime tag using the specified data.
     * @param jobTimeId Id of the jobTime to remove tag from (required)
     * @param jobTimeTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteJobTimeTag(Integer jobTimeId, String jobTimeTag) throws ApiException {
        deleteJobTimeTagWithHttpInfo(jobTimeId, jobTimeTag);
    }

    /**
     * Delete a tag for a jobTime.
     * Deletes an existing jobTime tag using the specified data.
     * @param jobTimeId Id of the jobTime to remove tag from (required)
     * @param jobTimeTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteJobTimeTagWithHttpInfo(Integer jobTimeId, String jobTimeTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteJobTimeTagValidateBeforeCall(jobTimeId, jobTimeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a jobTime. (asynchronously)
     * Deletes an existing jobTime tag using the specified data.
     * @param jobTimeId Id of the jobTime to remove tag from (required)
     * @param jobTimeTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteJobTimeTagAsync(Integer jobTimeId, String jobTimeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteJobTimeTagValidateBeforeCall(jobTimeId, jobTimeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateJobTimeById
     * @param jobTimeId Id of the jobTime to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateJobTimeByIdCall(Integer jobTimeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobTime/duplicate/{jobTimeId}"
            .replaceAll("\\{" + "jobTimeId" + "\\}", apiClient.escapeString(jobTimeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateJobTimeByIdValidateBeforeCall(Integer jobTimeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobTimeId' is set
        if (jobTimeId == null) {
            throw new ApiException("Missing the required parameter 'jobTimeId' when calling getDuplicateJobTimeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateJobTimeByIdCall(jobTimeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a jobTime by id
     * Returns a duplicated jobTime identified by the specified id.
     * @param jobTimeId Id of the jobTime to be duplicated. (required)
     * @return JobTime
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobTime getDuplicateJobTimeById(Integer jobTimeId) throws ApiException {
        ApiResponse<JobTime> resp = getDuplicateJobTimeByIdWithHttpInfo(jobTimeId);
        return resp.getData();
    }

    /**
     * Get a duplicated a jobTime by id
     * Returns a duplicated jobTime identified by the specified id.
     * @param jobTimeId Id of the jobTime to be duplicated. (required)
     * @return ApiResponse&lt;JobTime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobTime> getDuplicateJobTimeByIdWithHttpInfo(Integer jobTimeId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateJobTimeByIdValidateBeforeCall(jobTimeId, null, null);
        Type localVarReturnType = new TypeToken<JobTime>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a jobTime by id (asynchronously)
     * Returns a duplicated jobTime identified by the specified id.
     * @param jobTimeId Id of the jobTime to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateJobTimeByIdAsync(Integer jobTimeId, final ApiCallback<JobTime> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateJobTimeByIdValidateBeforeCall(jobTimeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobTime>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJobTimeByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJobTimeByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobTime/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJobTimeByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getJobTimeByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search jobTimes by filter
     * Returns the list of jobTimes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;JobTime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<JobTime> getJobTimeByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<JobTime>> resp = getJobTimeByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search jobTimes by filter
     * Returns the list of jobTimes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;JobTime&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<JobTime>> getJobTimeByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getJobTimeByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<JobTime>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search jobTimes by filter (asynchronously)
     * Returns the list of jobTimes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJobTimeByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<JobTime>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJobTimeByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<JobTime>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJobTimeById
     * @param jobTimeId Id of the jobTime to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJobTimeByIdCall(Integer jobTimeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobTime/{jobTimeId}"
            .replaceAll("\\{" + "jobTimeId" + "\\}", apiClient.escapeString(jobTimeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJobTimeByIdValidateBeforeCall(Integer jobTimeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobTimeId' is set
        if (jobTimeId == null) {
            throw new ApiException("Missing the required parameter 'jobTimeId' when calling getJobTimeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getJobTimeByIdCall(jobTimeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a jobTime by id
     * Returns the jobTime identified by the specified id.
     * @param jobTimeId Id of the jobTime to be returned. (required)
     * @return JobTime
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobTime getJobTimeById(Integer jobTimeId) throws ApiException {
        ApiResponse<JobTime> resp = getJobTimeByIdWithHttpInfo(jobTimeId);
        return resp.getData();
    }

    /**
     * Get a jobTime by id
     * Returns the jobTime identified by the specified id.
     * @param jobTimeId Id of the jobTime to be returned. (required)
     * @return ApiResponse&lt;JobTime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobTime> getJobTimeByIdWithHttpInfo(Integer jobTimeId) throws ApiException {
        com.squareup.okhttp.Call call = getJobTimeByIdValidateBeforeCall(jobTimeId, null, null);
        Type localVarReturnType = new TypeToken<JobTime>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a jobTime by id (asynchronously)
     * Returns the jobTime identified by the specified id.
     * @param jobTimeId Id of the jobTime to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJobTimeByIdAsync(Integer jobTimeId, final ApiCallback<JobTime> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJobTimeByIdValidateBeforeCall(jobTimeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobTime>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJobTimeFiles
     * @param jobTimeId Id of the jobTime to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJobTimeFilesCall(Integer jobTimeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobTime/{jobTimeId}/file"
            .replaceAll("\\{" + "jobTimeId" + "\\}", apiClient.escapeString(jobTimeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJobTimeFilesValidateBeforeCall(Integer jobTimeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobTimeId' is set
        if (jobTimeId == null) {
            throw new ApiException("Missing the required parameter 'jobTimeId' when calling getJobTimeFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getJobTimeFilesCall(jobTimeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a jobTime.
     * Get all existing jobTime files.
     * @param jobTimeId Id of the jobTime to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getJobTimeFiles(Integer jobTimeId) throws ApiException {
        getJobTimeFilesWithHttpInfo(jobTimeId);
    }

    /**
     * Get the files for a jobTime.
     * Get all existing jobTime files.
     * @param jobTimeId Id of the jobTime to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getJobTimeFilesWithHttpInfo(Integer jobTimeId) throws ApiException {
        com.squareup.okhttp.Call call = getJobTimeFilesValidateBeforeCall(jobTimeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a jobTime. (asynchronously)
     * Get all existing jobTime files.
     * @param jobTimeId Id of the jobTime to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJobTimeFilesAsync(Integer jobTimeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJobTimeFilesValidateBeforeCall(jobTimeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getJobTimeTags
     * @param jobTimeId Id of the jobTime to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJobTimeTagsCall(Integer jobTimeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobTime/{jobTimeId}/tag"
            .replaceAll("\\{" + "jobTimeId" + "\\}", apiClient.escapeString(jobTimeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJobTimeTagsValidateBeforeCall(Integer jobTimeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobTimeId' is set
        if (jobTimeId == null) {
            throw new ApiException("Missing the required parameter 'jobTimeId' when calling getJobTimeTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getJobTimeTagsCall(jobTimeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a jobTime.
     * Get all existing jobTime tags.
     * @param jobTimeId Id of the jobTime to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getJobTimeTags(Integer jobTimeId) throws ApiException {
        getJobTimeTagsWithHttpInfo(jobTimeId);
    }

    /**
     * Get the tags for a jobTime.
     * Get all existing jobTime tags.
     * @param jobTimeId Id of the jobTime to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getJobTimeTagsWithHttpInfo(Integer jobTimeId) throws ApiException {
        com.squareup.okhttp.Call call = getJobTimeTagsValidateBeforeCall(jobTimeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a jobTime. (asynchronously)
     * Get all existing jobTime tags.
     * @param jobTimeId Id of the jobTime to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJobTimeTagsAsync(Integer jobTimeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJobTimeTagsValidateBeforeCall(jobTimeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateJobTime
     * @param body JobTime to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateJobTimeCall(JobTime body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/jobTime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateJobTimeValidateBeforeCall(JobTime body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateJobTime(Async)");
        }
        

        com.squareup.okhttp.Call call = updateJobTimeCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a jobTime
     * Updates an existing jobTime using the specified data.
     * @param body JobTime to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateJobTime(JobTime body) throws ApiException {
        updateJobTimeWithHttpInfo(body);
    }

    /**
     * Update a jobTime
     * Updates an existing jobTime using the specified data.
     * @param body JobTime to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateJobTimeWithHttpInfo(JobTime body) throws ApiException {
        com.squareup.okhttp.Call call = updateJobTimeValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a jobTime (asynchronously)
     * Updates an existing jobTime using the specified data.
     * @param body JobTime to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateJobTimeAsync(JobTime body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateJobTimeValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateJobTimeCustomFields
     * @param body JobTime to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateJobTimeCustomFieldsCall(JobTime body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/jobTime/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateJobTimeCustomFieldsValidateBeforeCall(JobTime body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateJobTimeCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateJobTimeCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a jobTime custom fields
     * Updates an existing jobTime custom fields using the specified data.
     * @param body JobTime to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateJobTimeCustomFields(JobTime body) throws ApiException {
        updateJobTimeCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a jobTime custom fields
     * Updates an existing jobTime custom fields using the specified data.
     * @param body JobTime to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateJobTimeCustomFieldsWithHttpInfo(JobTime body) throws ApiException {
        com.squareup.okhttp.Call call = updateJobTimeCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a jobTime custom fields (asynchronously)
     * Updates an existing jobTime custom fields using the specified data.
     * @param body JobTime to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateJobTimeCustomFieldsAsync(JobTime body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateJobTimeCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
