/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ItemLowstockCode;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ItemLowstockCodeApi {
    private ApiClient apiClient;

    public ItemLowstockCodeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ItemLowstockCodeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addItemLowstockCode
     * @param body ItemLowstockCode to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemLowstockCodeCall(ItemLowstockCode body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/itemLowstockCode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemLowstockCodeValidateBeforeCall(ItemLowstockCode body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addItemLowstockCode(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemLowstockCodeCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an itemLowstockCode
     * Inserts a new itemLowstockCode using the specified data.
     * @param body ItemLowstockCode to be inserted. (required)
     * @return ItemLowstockCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemLowstockCode addItemLowstockCode(ItemLowstockCode body) throws ApiException {
        ApiResponse<ItemLowstockCode> resp = addItemLowstockCodeWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create an itemLowstockCode
     * Inserts a new itemLowstockCode using the specified data.
     * @param body ItemLowstockCode to be inserted. (required)
     * @return ApiResponse&lt;ItemLowstockCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemLowstockCode> addItemLowstockCodeWithHttpInfo(ItemLowstockCode body) throws ApiException {
        com.squareup.okhttp.Call call = addItemLowstockCodeValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ItemLowstockCode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an itemLowstockCode (asynchronously)
     * Inserts a new itemLowstockCode using the specified data.
     * @param body ItemLowstockCode to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemLowstockCodeAsync(ItemLowstockCode body, final ApiCallback<ItemLowstockCode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemLowstockCodeValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemLowstockCode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addItemLowstockCodeAudit
     * @param itemLowstockCodeId Id of the itemLowstockCode to add an audit to (required)
     * @param itemLowstockCodeAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemLowstockCodeAuditCall(Integer itemLowstockCodeId, String itemLowstockCodeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}/audit/{itemLowstockCodeAudit}"
            .replaceAll("\\{" + "itemLowstockCodeId" + "\\}", apiClient.escapeString(itemLowstockCodeId.toString()))
            .replaceAll("\\{" + "itemLowstockCodeAudit" + "\\}", apiClient.escapeString(itemLowstockCodeAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemLowstockCodeAuditValidateBeforeCall(Integer itemLowstockCodeId, String itemLowstockCodeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemLowstockCodeId' is set
        if (itemLowstockCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemLowstockCodeId' when calling addItemLowstockCodeAudit(Async)");
        }
        
        // verify the required parameter 'itemLowstockCodeAudit' is set
        if (itemLowstockCodeAudit == null) {
            throw new ApiException("Missing the required parameter 'itemLowstockCodeAudit' when calling addItemLowstockCodeAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemLowstockCodeAuditCall(itemLowstockCodeId, itemLowstockCodeAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for an itemLowstockCode
     * Adds an audit to an existing itemLowstockCode.
     * @param itemLowstockCodeId Id of the itemLowstockCode to add an audit to (required)
     * @param itemLowstockCodeAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemLowstockCodeAudit(Integer itemLowstockCodeId, String itemLowstockCodeAudit) throws ApiException {
        addItemLowstockCodeAuditWithHttpInfo(itemLowstockCodeId, itemLowstockCodeAudit);
    }

    /**
     * Add new audit for an itemLowstockCode
     * Adds an audit to an existing itemLowstockCode.
     * @param itemLowstockCodeId Id of the itemLowstockCode to add an audit to (required)
     * @param itemLowstockCodeAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemLowstockCodeAuditWithHttpInfo(Integer itemLowstockCodeId, String itemLowstockCodeAudit) throws ApiException {
        com.squareup.okhttp.Call call = addItemLowstockCodeAuditValidateBeforeCall(itemLowstockCodeId, itemLowstockCodeAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for an itemLowstockCode (asynchronously)
     * Adds an audit to an existing itemLowstockCode.
     * @param itemLowstockCodeId Id of the itemLowstockCode to add an audit to (required)
     * @param itemLowstockCodeAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemLowstockCodeAuditAsync(Integer itemLowstockCodeId, String itemLowstockCodeAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemLowstockCodeAuditValidateBeforeCall(itemLowstockCodeId, itemLowstockCodeAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemLowstockCodeFile
     * @param itemLowstockCodeId Id of the itemLowstockCode to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemLowstockCodeFileCall(Integer itemLowstockCodeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}/file/{fileName}"
            .replaceAll("\\{" + "itemLowstockCodeId" + "\\}", apiClient.escapeString(itemLowstockCodeId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemLowstockCodeFileValidateBeforeCall(Integer itemLowstockCodeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemLowstockCodeId' is set
        if (itemLowstockCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemLowstockCodeId' when calling addItemLowstockCodeFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addItemLowstockCodeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemLowstockCodeFileCall(itemLowstockCodeId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an itemLowstockCode
     * Adds a file to an existing itemLowstockCode.
     * @param itemLowstockCodeId Id of the itemLowstockCode to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemLowstockCodeFile(Integer itemLowstockCodeId, String fileName) throws ApiException {
        addItemLowstockCodeFileWithHttpInfo(itemLowstockCodeId, fileName);
    }

    /**
     * Attach a file to an itemLowstockCode
     * Adds a file to an existing itemLowstockCode.
     * @param itemLowstockCodeId Id of the itemLowstockCode to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemLowstockCodeFileWithHttpInfo(Integer itemLowstockCodeId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addItemLowstockCodeFileValidateBeforeCall(itemLowstockCodeId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an itemLowstockCode (asynchronously)
     * Adds a file to an existing itemLowstockCode.
     * @param itemLowstockCodeId Id of the itemLowstockCode to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemLowstockCodeFileAsync(Integer itemLowstockCodeId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemLowstockCodeFileValidateBeforeCall(itemLowstockCodeId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemLowstockCodeFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param itemLowstockCodeId Id of the itemLowstockCode to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemLowstockCodeFileByURLCall(RecordFile body, Integer itemLowstockCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}/file"
            .replaceAll("\\{" + "itemLowstockCodeId" + "\\}", apiClient.escapeString(itemLowstockCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemLowstockCodeFileByURLValidateBeforeCall(RecordFile body, Integer itemLowstockCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addItemLowstockCodeFileByURL(Async)");
        }
        
        // verify the required parameter 'itemLowstockCodeId' is set
        if (itemLowstockCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemLowstockCodeId' when calling addItemLowstockCodeFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemLowstockCodeFileByURLCall(body, itemLowstockCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an itemLowstockCode by URL.
     * Adds a file to an existing itemLowstockCode by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param itemLowstockCodeId Id of the itemLowstockCode to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemLowstockCodeFileByURL(RecordFile body, Integer itemLowstockCodeId) throws ApiException {
        addItemLowstockCodeFileByURLWithHttpInfo(body, itemLowstockCodeId);
    }

    /**
     * Attach a file to an itemLowstockCode by URL.
     * Adds a file to an existing itemLowstockCode by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param itemLowstockCodeId Id of the itemLowstockCode to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemLowstockCodeFileByURLWithHttpInfo(RecordFile body, Integer itemLowstockCodeId) throws ApiException {
        com.squareup.okhttp.Call call = addItemLowstockCodeFileByURLValidateBeforeCall(body, itemLowstockCodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an itemLowstockCode by URL. (asynchronously)
     * Adds a file to an existing itemLowstockCode by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param itemLowstockCodeId Id of the itemLowstockCode to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemLowstockCodeFileByURLAsync(RecordFile body, Integer itemLowstockCodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemLowstockCodeFileByURLValidateBeforeCall(body, itemLowstockCodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemLowstockCodeTag
     * @param itemLowstockCodeId Id of the itemLowstockCode to add a tag to (required)
     * @param itemLowstockCodeTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemLowstockCodeTagCall(Integer itemLowstockCodeId, String itemLowstockCodeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}/tag/{itemLowstockCodeTag}"
            .replaceAll("\\{" + "itemLowstockCodeId" + "\\}", apiClient.escapeString(itemLowstockCodeId.toString()))
            .replaceAll("\\{" + "itemLowstockCodeTag" + "\\}", apiClient.escapeString(itemLowstockCodeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemLowstockCodeTagValidateBeforeCall(Integer itemLowstockCodeId, String itemLowstockCodeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemLowstockCodeId' is set
        if (itemLowstockCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemLowstockCodeId' when calling addItemLowstockCodeTag(Async)");
        }
        
        // verify the required parameter 'itemLowstockCodeTag' is set
        if (itemLowstockCodeTag == null) {
            throw new ApiException("Missing the required parameter 'itemLowstockCodeTag' when calling addItemLowstockCodeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemLowstockCodeTagCall(itemLowstockCodeId, itemLowstockCodeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for an itemLowstockCode.
     * Adds a tag to an existing itemLowstockCode.
     * @param itemLowstockCodeId Id of the itemLowstockCode to add a tag to (required)
     * @param itemLowstockCodeTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemLowstockCodeTag(Integer itemLowstockCodeId, String itemLowstockCodeTag) throws ApiException {
        addItemLowstockCodeTagWithHttpInfo(itemLowstockCodeId, itemLowstockCodeTag);
    }

    /**
     * Add new tags for an itemLowstockCode.
     * Adds a tag to an existing itemLowstockCode.
     * @param itemLowstockCodeId Id of the itemLowstockCode to add a tag to (required)
     * @param itemLowstockCodeTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemLowstockCodeTagWithHttpInfo(Integer itemLowstockCodeId, String itemLowstockCodeTag) throws ApiException {
        com.squareup.okhttp.Call call = addItemLowstockCodeTagValidateBeforeCall(itemLowstockCodeId, itemLowstockCodeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for an itemLowstockCode. (asynchronously)
     * Adds a tag to an existing itemLowstockCode.
     * @param itemLowstockCodeId Id of the itemLowstockCode to add a tag to (required)
     * @param itemLowstockCodeTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemLowstockCodeTagAsync(Integer itemLowstockCodeId, String itemLowstockCodeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemLowstockCodeTagValidateBeforeCall(itemLowstockCodeId, itemLowstockCodeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemLowstockCode
     * @param itemLowstockCodeId Id of the itemLowstockCode to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemLowstockCodeCall(Integer itemLowstockCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}"
            .replaceAll("\\{" + "itemLowstockCodeId" + "\\}", apiClient.escapeString(itemLowstockCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemLowstockCodeValidateBeforeCall(Integer itemLowstockCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemLowstockCodeId' is set
        if (itemLowstockCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemLowstockCodeId' when calling deleteItemLowstockCode(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemLowstockCodeCall(itemLowstockCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an itemLowstockCode
     * Deletes the itemLowstockCode identified by the specified id.
     * @param itemLowstockCodeId Id of the itemLowstockCode to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemLowstockCode(Integer itemLowstockCodeId) throws ApiException {
        deleteItemLowstockCodeWithHttpInfo(itemLowstockCodeId);
    }

    /**
     * Delete an itemLowstockCode
     * Deletes the itemLowstockCode identified by the specified id.
     * @param itemLowstockCodeId Id of the itemLowstockCode to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemLowstockCodeWithHttpInfo(Integer itemLowstockCodeId) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemLowstockCodeValidateBeforeCall(itemLowstockCodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an itemLowstockCode (asynchronously)
     * Deletes the itemLowstockCode identified by the specified id.
     * @param itemLowstockCodeId Id of the itemLowstockCode to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemLowstockCodeAsync(Integer itemLowstockCodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemLowstockCodeValidateBeforeCall(itemLowstockCodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemLowstockCodeFile
     * @param itemLowstockCodeId Id of the itemLowstockCode to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemLowstockCodeFileCall(Integer itemLowstockCodeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}/file/{fileId}"
            .replaceAll("\\{" + "itemLowstockCodeId" + "\\}", apiClient.escapeString(itemLowstockCodeId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemLowstockCodeFileValidateBeforeCall(Integer itemLowstockCodeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemLowstockCodeId' is set
        if (itemLowstockCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemLowstockCodeId' when calling deleteItemLowstockCodeFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteItemLowstockCodeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemLowstockCodeFileCall(itemLowstockCodeId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for an itemLowstockCode.
     * Deletes an existing itemLowstockCode file using the specified data.
     * @param itemLowstockCodeId Id of the itemLowstockCode to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemLowstockCodeFile(Integer itemLowstockCodeId, Integer fileId) throws ApiException {
        deleteItemLowstockCodeFileWithHttpInfo(itemLowstockCodeId, fileId);
    }

    /**
     * Delete a file for an itemLowstockCode.
     * Deletes an existing itemLowstockCode file using the specified data.
     * @param itemLowstockCodeId Id of the itemLowstockCode to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemLowstockCodeFileWithHttpInfo(Integer itemLowstockCodeId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemLowstockCodeFileValidateBeforeCall(itemLowstockCodeId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for an itemLowstockCode. (asynchronously)
     * Deletes an existing itemLowstockCode file using the specified data.
     * @param itemLowstockCodeId Id of the itemLowstockCode to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemLowstockCodeFileAsync(Integer itemLowstockCodeId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemLowstockCodeFileValidateBeforeCall(itemLowstockCodeId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemLowstockCodeTag
     * @param itemLowstockCodeId Id of the itemLowstockCode to remove tag from (required)
     * @param itemLowstockCodeTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemLowstockCodeTagCall(Integer itemLowstockCodeId, String itemLowstockCodeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}/tag/{itemLowstockCodeTag}"
            .replaceAll("\\{" + "itemLowstockCodeId" + "\\}", apiClient.escapeString(itemLowstockCodeId.toString()))
            .replaceAll("\\{" + "itemLowstockCodeTag" + "\\}", apiClient.escapeString(itemLowstockCodeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemLowstockCodeTagValidateBeforeCall(Integer itemLowstockCodeId, String itemLowstockCodeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemLowstockCodeId' is set
        if (itemLowstockCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemLowstockCodeId' when calling deleteItemLowstockCodeTag(Async)");
        }
        
        // verify the required parameter 'itemLowstockCodeTag' is set
        if (itemLowstockCodeTag == null) {
            throw new ApiException("Missing the required parameter 'itemLowstockCodeTag' when calling deleteItemLowstockCodeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemLowstockCodeTagCall(itemLowstockCodeId, itemLowstockCodeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for an itemLowstockCode.
     * Deletes an existing itemLowstockCode tag using the specified data.
     * @param itemLowstockCodeId Id of the itemLowstockCode to remove tag from (required)
     * @param itemLowstockCodeTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemLowstockCodeTag(Integer itemLowstockCodeId, String itemLowstockCodeTag) throws ApiException {
        deleteItemLowstockCodeTagWithHttpInfo(itemLowstockCodeId, itemLowstockCodeTag);
    }

    /**
     * Delete a tag for an itemLowstockCode.
     * Deletes an existing itemLowstockCode tag using the specified data.
     * @param itemLowstockCodeId Id of the itemLowstockCode to remove tag from (required)
     * @param itemLowstockCodeTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemLowstockCodeTagWithHttpInfo(Integer itemLowstockCodeId, String itemLowstockCodeTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemLowstockCodeTagValidateBeforeCall(itemLowstockCodeId, itemLowstockCodeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for an itemLowstockCode. (asynchronously)
     * Deletes an existing itemLowstockCode tag using the specified data.
     * @param itemLowstockCodeId Id of the itemLowstockCode to remove tag from (required)
     * @param itemLowstockCodeTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemLowstockCodeTagAsync(Integer itemLowstockCodeId, String itemLowstockCodeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemLowstockCodeTagValidateBeforeCall(itemLowstockCodeId, itemLowstockCodeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateItemLowstockCodeById
     * @param itemLowstockCodeId Id of the itemLowstockCode to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateItemLowstockCodeByIdCall(Integer itemLowstockCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemLowstockCode/duplicate/{itemLowstockCodeId}"
            .replaceAll("\\{" + "itemLowstockCodeId" + "\\}", apiClient.escapeString(itemLowstockCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateItemLowstockCodeByIdValidateBeforeCall(Integer itemLowstockCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemLowstockCodeId' is set
        if (itemLowstockCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemLowstockCodeId' when calling getDuplicateItemLowstockCodeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateItemLowstockCodeByIdCall(itemLowstockCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated an itemLowstockCode by id
     * Returns a duplicated itemLowstockCode identified by the specified id.
     * @param itemLowstockCodeId Id of the itemLowstockCode to be duplicated. (required)
     * @return ItemLowstockCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemLowstockCode getDuplicateItemLowstockCodeById(Integer itemLowstockCodeId) throws ApiException {
        ApiResponse<ItemLowstockCode> resp = getDuplicateItemLowstockCodeByIdWithHttpInfo(itemLowstockCodeId);
        return resp.getData();
    }

    /**
     * Get a duplicated an itemLowstockCode by id
     * Returns a duplicated itemLowstockCode identified by the specified id.
     * @param itemLowstockCodeId Id of the itemLowstockCode to be duplicated. (required)
     * @return ApiResponse&lt;ItemLowstockCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemLowstockCode> getDuplicateItemLowstockCodeByIdWithHttpInfo(Integer itemLowstockCodeId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateItemLowstockCodeByIdValidateBeforeCall(itemLowstockCodeId, null, null);
        Type localVarReturnType = new TypeToken<ItemLowstockCode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated an itemLowstockCode by id (asynchronously)
     * Returns a duplicated itemLowstockCode identified by the specified id.
     * @param itemLowstockCodeId Id of the itemLowstockCode to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateItemLowstockCodeByIdAsync(Integer itemLowstockCodeId, final ApiCallback<ItemLowstockCode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateItemLowstockCodeByIdValidateBeforeCall(itemLowstockCodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemLowstockCode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemLowstockCodeByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemLowstockCodeByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemLowstockCode/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemLowstockCodeByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getItemLowstockCodeByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search itemLowstockCodes by filter
     * Returns the list of itemLowstockCodes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;ItemLowstockCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ItemLowstockCode> getItemLowstockCodeByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<ItemLowstockCode>> resp = getItemLowstockCodeByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search itemLowstockCodes by filter
     * Returns the list of itemLowstockCodes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;ItemLowstockCode&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ItemLowstockCode>> getItemLowstockCodeByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getItemLowstockCodeByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<ItemLowstockCode>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search itemLowstockCodes by filter (asynchronously)
     * Returns the list of itemLowstockCodes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemLowstockCodeByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<ItemLowstockCode>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemLowstockCodeByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ItemLowstockCode>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemLowstockCodeById
     * @param itemLowstockCodeId Id of the itemLowstockCode to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemLowstockCodeByIdCall(Integer itemLowstockCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}"
            .replaceAll("\\{" + "itemLowstockCodeId" + "\\}", apiClient.escapeString(itemLowstockCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemLowstockCodeByIdValidateBeforeCall(Integer itemLowstockCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemLowstockCodeId' is set
        if (itemLowstockCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemLowstockCodeId' when calling getItemLowstockCodeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemLowstockCodeByIdCall(itemLowstockCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an itemLowstockCode by id
     * Returns the itemLowstockCode identified by the specified id.
     * @param itemLowstockCodeId Id of the itemLowstockCode to be returned. (required)
     * @return ItemLowstockCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemLowstockCode getItemLowstockCodeById(Integer itemLowstockCodeId) throws ApiException {
        ApiResponse<ItemLowstockCode> resp = getItemLowstockCodeByIdWithHttpInfo(itemLowstockCodeId);
        return resp.getData();
    }

    /**
     * Get an itemLowstockCode by id
     * Returns the itemLowstockCode identified by the specified id.
     * @param itemLowstockCodeId Id of the itemLowstockCode to be returned. (required)
     * @return ApiResponse&lt;ItemLowstockCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemLowstockCode> getItemLowstockCodeByIdWithHttpInfo(Integer itemLowstockCodeId) throws ApiException {
        com.squareup.okhttp.Call call = getItemLowstockCodeByIdValidateBeforeCall(itemLowstockCodeId, null, null);
        Type localVarReturnType = new TypeToken<ItemLowstockCode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an itemLowstockCode by id (asynchronously)
     * Returns the itemLowstockCode identified by the specified id.
     * @param itemLowstockCodeId Id of the itemLowstockCode to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemLowstockCodeByIdAsync(Integer itemLowstockCodeId, final ApiCallback<ItemLowstockCode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemLowstockCodeByIdValidateBeforeCall(itemLowstockCodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemLowstockCode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemLowstockCodeFiles
     * @param itemLowstockCodeId Id of the itemLowstockCode to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemLowstockCodeFilesCall(Integer itemLowstockCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}/file"
            .replaceAll("\\{" + "itemLowstockCodeId" + "\\}", apiClient.escapeString(itemLowstockCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemLowstockCodeFilesValidateBeforeCall(Integer itemLowstockCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemLowstockCodeId' is set
        if (itemLowstockCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemLowstockCodeId' when calling getItemLowstockCodeFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemLowstockCodeFilesCall(itemLowstockCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for an itemLowstockCode.
     * Get all existing itemLowstockCode files.
     * @param itemLowstockCodeId Id of the itemLowstockCode to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getItemLowstockCodeFiles(Integer itemLowstockCodeId) throws ApiException {
        getItemLowstockCodeFilesWithHttpInfo(itemLowstockCodeId);
    }

    /**
     * Get the files for an itemLowstockCode.
     * Get all existing itemLowstockCode files.
     * @param itemLowstockCodeId Id of the itemLowstockCode to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getItemLowstockCodeFilesWithHttpInfo(Integer itemLowstockCodeId) throws ApiException {
        com.squareup.okhttp.Call call = getItemLowstockCodeFilesValidateBeforeCall(itemLowstockCodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for an itemLowstockCode. (asynchronously)
     * Get all existing itemLowstockCode files.
     * @param itemLowstockCodeId Id of the itemLowstockCode to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemLowstockCodeFilesAsync(Integer itemLowstockCodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemLowstockCodeFilesValidateBeforeCall(itemLowstockCodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getItemLowstockCodeTags
     * @param itemLowstockCodeId Id of the itemLowstockCode to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemLowstockCodeTagsCall(Integer itemLowstockCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemLowstockCode/{itemLowstockCodeId}/tag"
            .replaceAll("\\{" + "itemLowstockCodeId" + "\\}", apiClient.escapeString(itemLowstockCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemLowstockCodeTagsValidateBeforeCall(Integer itemLowstockCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemLowstockCodeId' is set
        if (itemLowstockCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemLowstockCodeId' when calling getItemLowstockCodeTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemLowstockCodeTagsCall(itemLowstockCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for an itemLowstockCode.
     * Get all existing itemLowstockCode tags.
     * @param itemLowstockCodeId Id of the itemLowstockCode to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getItemLowstockCodeTags(Integer itemLowstockCodeId) throws ApiException {
        getItemLowstockCodeTagsWithHttpInfo(itemLowstockCodeId);
    }

    /**
     * Get the tags for an itemLowstockCode.
     * Get all existing itemLowstockCode tags.
     * @param itemLowstockCodeId Id of the itemLowstockCode to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getItemLowstockCodeTagsWithHttpInfo(Integer itemLowstockCodeId) throws ApiException {
        com.squareup.okhttp.Call call = getItemLowstockCodeTagsValidateBeforeCall(itemLowstockCodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for an itemLowstockCode. (asynchronously)
     * Get all existing itemLowstockCode tags.
     * @param itemLowstockCodeId Id of the itemLowstockCode to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemLowstockCodeTagsAsync(Integer itemLowstockCodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemLowstockCodeTagsValidateBeforeCall(itemLowstockCodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateItemLowstockCode
     * @param body ItemLowstockCode to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateItemLowstockCodeCall(ItemLowstockCode body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/itemLowstockCode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateItemLowstockCodeValidateBeforeCall(ItemLowstockCode body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateItemLowstockCode(Async)");
        }
        

        com.squareup.okhttp.Call call = updateItemLowstockCodeCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an itemLowstockCode
     * Updates an existing itemLowstockCode using the specified data.
     * @param body ItemLowstockCode to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateItemLowstockCode(ItemLowstockCode body) throws ApiException {
        updateItemLowstockCodeWithHttpInfo(body);
    }

    /**
     * Update an itemLowstockCode
     * Updates an existing itemLowstockCode using the specified data.
     * @param body ItemLowstockCode to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateItemLowstockCodeWithHttpInfo(ItemLowstockCode body) throws ApiException {
        com.squareup.okhttp.Call call = updateItemLowstockCodeValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an itemLowstockCode (asynchronously)
     * Updates an existing itemLowstockCode using the specified data.
     * @param body ItemLowstockCode to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateItemLowstockCodeAsync(ItemLowstockCode body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateItemLowstockCodeValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
