/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.RecordFile;
import com.infopluscommerce.model.ReturnShipment;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReturnShipmentApi {
    private ApiClient apiClient;

    public ReturnShipmentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReturnShipmentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addReturnShipmentAudit
     * @param returnShipmentId Id of the returnShipment to add an audit to (required)
     * @param returnShipmentAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addReturnShipmentAuditCall(Integer returnShipmentId, String returnShipmentAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/returnShipment/{returnShipmentId}/audit/{returnShipmentAudit}"
            .replaceAll("\\{" + "returnShipmentId" + "\\}", apiClient.escapeString(returnShipmentId.toString()))
            .replaceAll("\\{" + "returnShipmentAudit" + "\\}", apiClient.escapeString(returnShipmentAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addReturnShipmentAuditValidateBeforeCall(Integer returnShipmentId, String returnShipmentAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'returnShipmentId' is set
        if (returnShipmentId == null) {
            throw new ApiException("Missing the required parameter 'returnShipmentId' when calling addReturnShipmentAudit(Async)");
        }
        
        // verify the required parameter 'returnShipmentAudit' is set
        if (returnShipmentAudit == null) {
            throw new ApiException("Missing the required parameter 'returnShipmentAudit' when calling addReturnShipmentAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addReturnShipmentAuditCall(returnShipmentId, returnShipmentAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a returnShipment
     * Adds an audit to an existing returnShipment.
     * @param returnShipmentId Id of the returnShipment to add an audit to (required)
     * @param returnShipmentAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addReturnShipmentAudit(Integer returnShipmentId, String returnShipmentAudit) throws ApiException {
        addReturnShipmentAuditWithHttpInfo(returnShipmentId, returnShipmentAudit);
    }

    /**
     * Add new audit for a returnShipment
     * Adds an audit to an existing returnShipment.
     * @param returnShipmentId Id of the returnShipment to add an audit to (required)
     * @param returnShipmentAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addReturnShipmentAuditWithHttpInfo(Integer returnShipmentId, String returnShipmentAudit) throws ApiException {
        com.squareup.okhttp.Call call = addReturnShipmentAuditValidateBeforeCall(returnShipmentId, returnShipmentAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a returnShipment (asynchronously)
     * Adds an audit to an existing returnShipment.
     * @param returnShipmentId Id of the returnShipment to add an audit to (required)
     * @param returnShipmentAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addReturnShipmentAuditAsync(Integer returnShipmentId, String returnShipmentAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addReturnShipmentAuditValidateBeforeCall(returnShipmentId, returnShipmentAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addReturnShipmentFile
     * @param returnShipmentId Id of the returnShipment to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addReturnShipmentFileCall(Integer returnShipmentId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/returnShipment/{returnShipmentId}/file/{fileName}"
            .replaceAll("\\{" + "returnShipmentId" + "\\}", apiClient.escapeString(returnShipmentId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addReturnShipmentFileValidateBeforeCall(Integer returnShipmentId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'returnShipmentId' is set
        if (returnShipmentId == null) {
            throw new ApiException("Missing the required parameter 'returnShipmentId' when calling addReturnShipmentFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addReturnShipmentFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addReturnShipmentFileCall(returnShipmentId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a returnShipment
     * Adds a file to an existing returnShipment.
     * @param returnShipmentId Id of the returnShipment to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addReturnShipmentFile(Integer returnShipmentId, String fileName) throws ApiException {
        addReturnShipmentFileWithHttpInfo(returnShipmentId, fileName);
    }

    /**
     * Attach a file to a returnShipment
     * Adds a file to an existing returnShipment.
     * @param returnShipmentId Id of the returnShipment to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addReturnShipmentFileWithHttpInfo(Integer returnShipmentId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addReturnShipmentFileValidateBeforeCall(returnShipmentId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a returnShipment (asynchronously)
     * Adds a file to an existing returnShipment.
     * @param returnShipmentId Id of the returnShipment to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addReturnShipmentFileAsync(Integer returnShipmentId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addReturnShipmentFileValidateBeforeCall(returnShipmentId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addReturnShipmentFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param returnShipmentId Id of the returnShipment to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addReturnShipmentFileByURLCall(RecordFile body, Integer returnShipmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/returnShipment/{returnShipmentId}/file"
            .replaceAll("\\{" + "returnShipmentId" + "\\}", apiClient.escapeString(returnShipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addReturnShipmentFileByURLValidateBeforeCall(RecordFile body, Integer returnShipmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addReturnShipmentFileByURL(Async)");
        }
        
        // verify the required parameter 'returnShipmentId' is set
        if (returnShipmentId == null) {
            throw new ApiException("Missing the required parameter 'returnShipmentId' when calling addReturnShipmentFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addReturnShipmentFileByURLCall(body, returnShipmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a returnShipment by URL.
     * Adds a file to an existing returnShipment by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param returnShipmentId Id of the returnShipment to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addReturnShipmentFileByURL(RecordFile body, Integer returnShipmentId) throws ApiException {
        addReturnShipmentFileByURLWithHttpInfo(body, returnShipmentId);
    }

    /**
     * Attach a file to a returnShipment by URL.
     * Adds a file to an existing returnShipment by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param returnShipmentId Id of the returnShipment to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addReturnShipmentFileByURLWithHttpInfo(RecordFile body, Integer returnShipmentId) throws ApiException {
        com.squareup.okhttp.Call call = addReturnShipmentFileByURLValidateBeforeCall(body, returnShipmentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a returnShipment by URL. (asynchronously)
     * Adds a file to an existing returnShipment by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param returnShipmentId Id of the returnShipment to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addReturnShipmentFileByURLAsync(RecordFile body, Integer returnShipmentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addReturnShipmentFileByURLValidateBeforeCall(body, returnShipmentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addReturnShipmentTag
     * @param returnShipmentId Id of the returnShipment to add a tag to (required)
     * @param returnShipmentTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addReturnShipmentTagCall(Integer returnShipmentId, String returnShipmentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/returnShipment/{returnShipmentId}/tag/{returnShipmentTag}"
            .replaceAll("\\{" + "returnShipmentId" + "\\}", apiClient.escapeString(returnShipmentId.toString()))
            .replaceAll("\\{" + "returnShipmentTag" + "\\}", apiClient.escapeString(returnShipmentTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addReturnShipmentTagValidateBeforeCall(Integer returnShipmentId, String returnShipmentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'returnShipmentId' is set
        if (returnShipmentId == null) {
            throw new ApiException("Missing the required parameter 'returnShipmentId' when calling addReturnShipmentTag(Async)");
        }
        
        // verify the required parameter 'returnShipmentTag' is set
        if (returnShipmentTag == null) {
            throw new ApiException("Missing the required parameter 'returnShipmentTag' when calling addReturnShipmentTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addReturnShipmentTagCall(returnShipmentId, returnShipmentTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a returnShipment.
     * Adds a tag to an existing returnShipment.
     * @param returnShipmentId Id of the returnShipment to add a tag to (required)
     * @param returnShipmentTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addReturnShipmentTag(Integer returnShipmentId, String returnShipmentTag) throws ApiException {
        addReturnShipmentTagWithHttpInfo(returnShipmentId, returnShipmentTag);
    }

    /**
     * Add new tags for a returnShipment.
     * Adds a tag to an existing returnShipment.
     * @param returnShipmentId Id of the returnShipment to add a tag to (required)
     * @param returnShipmentTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addReturnShipmentTagWithHttpInfo(Integer returnShipmentId, String returnShipmentTag) throws ApiException {
        com.squareup.okhttp.Call call = addReturnShipmentTagValidateBeforeCall(returnShipmentId, returnShipmentTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a returnShipment. (asynchronously)
     * Adds a tag to an existing returnShipment.
     * @param returnShipmentId Id of the returnShipment to add a tag to (required)
     * @param returnShipmentTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addReturnShipmentTagAsync(Integer returnShipmentId, String returnShipmentTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addReturnShipmentTagValidateBeforeCall(returnShipmentId, returnShipmentTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteReturnShipmentFile
     * @param returnShipmentId Id of the returnShipment to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteReturnShipmentFileCall(Integer returnShipmentId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/returnShipment/{returnShipmentId}/file/{fileId}"
            .replaceAll("\\{" + "returnShipmentId" + "\\}", apiClient.escapeString(returnShipmentId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteReturnShipmentFileValidateBeforeCall(Integer returnShipmentId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'returnShipmentId' is set
        if (returnShipmentId == null) {
            throw new ApiException("Missing the required parameter 'returnShipmentId' when calling deleteReturnShipmentFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteReturnShipmentFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteReturnShipmentFileCall(returnShipmentId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a returnShipment.
     * Deletes an existing returnShipment file using the specified data.
     * @param returnShipmentId Id of the returnShipment to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteReturnShipmentFile(Integer returnShipmentId, Integer fileId) throws ApiException {
        deleteReturnShipmentFileWithHttpInfo(returnShipmentId, fileId);
    }

    /**
     * Delete a file for a returnShipment.
     * Deletes an existing returnShipment file using the specified data.
     * @param returnShipmentId Id of the returnShipment to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteReturnShipmentFileWithHttpInfo(Integer returnShipmentId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteReturnShipmentFileValidateBeforeCall(returnShipmentId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a returnShipment. (asynchronously)
     * Deletes an existing returnShipment file using the specified data.
     * @param returnShipmentId Id of the returnShipment to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteReturnShipmentFileAsync(Integer returnShipmentId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteReturnShipmentFileValidateBeforeCall(returnShipmentId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteReturnShipmentTag
     * @param returnShipmentId Id of the returnShipment to remove tag from (required)
     * @param returnShipmentTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteReturnShipmentTagCall(Integer returnShipmentId, String returnShipmentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/returnShipment/{returnShipmentId}/tag/{returnShipmentTag}"
            .replaceAll("\\{" + "returnShipmentId" + "\\}", apiClient.escapeString(returnShipmentId.toString()))
            .replaceAll("\\{" + "returnShipmentTag" + "\\}", apiClient.escapeString(returnShipmentTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteReturnShipmentTagValidateBeforeCall(Integer returnShipmentId, String returnShipmentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'returnShipmentId' is set
        if (returnShipmentId == null) {
            throw new ApiException("Missing the required parameter 'returnShipmentId' when calling deleteReturnShipmentTag(Async)");
        }
        
        // verify the required parameter 'returnShipmentTag' is set
        if (returnShipmentTag == null) {
            throw new ApiException("Missing the required parameter 'returnShipmentTag' when calling deleteReturnShipmentTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteReturnShipmentTagCall(returnShipmentId, returnShipmentTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a returnShipment.
     * Deletes an existing returnShipment tag using the specified data.
     * @param returnShipmentId Id of the returnShipment to remove tag from (required)
     * @param returnShipmentTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteReturnShipmentTag(Integer returnShipmentId, String returnShipmentTag) throws ApiException {
        deleteReturnShipmentTagWithHttpInfo(returnShipmentId, returnShipmentTag);
    }

    /**
     * Delete a tag for a returnShipment.
     * Deletes an existing returnShipment tag using the specified data.
     * @param returnShipmentId Id of the returnShipment to remove tag from (required)
     * @param returnShipmentTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteReturnShipmentTagWithHttpInfo(Integer returnShipmentId, String returnShipmentTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteReturnShipmentTagValidateBeforeCall(returnShipmentId, returnShipmentTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a returnShipment. (asynchronously)
     * Deletes an existing returnShipment tag using the specified data.
     * @param returnShipmentId Id of the returnShipment to remove tag from (required)
     * @param returnShipmentTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteReturnShipmentTagAsync(Integer returnShipmentId, String returnShipmentTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteReturnShipmentTagValidateBeforeCall(returnShipmentId, returnShipmentTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateReturnShipmentById
     * @param returnShipmentId Id of the returnShipment to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateReturnShipmentByIdCall(Integer returnShipmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/returnShipment/duplicate/{returnShipmentId}"
            .replaceAll("\\{" + "returnShipmentId" + "\\}", apiClient.escapeString(returnShipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateReturnShipmentByIdValidateBeforeCall(Integer returnShipmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'returnShipmentId' is set
        if (returnShipmentId == null) {
            throw new ApiException("Missing the required parameter 'returnShipmentId' when calling getDuplicateReturnShipmentById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateReturnShipmentByIdCall(returnShipmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a returnShipment by id
     * Returns a duplicated returnShipment identified by the specified id.
     * @param returnShipmentId Id of the returnShipment to be duplicated. (required)
     * @return ReturnShipment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReturnShipment getDuplicateReturnShipmentById(Integer returnShipmentId) throws ApiException {
        ApiResponse<ReturnShipment> resp = getDuplicateReturnShipmentByIdWithHttpInfo(returnShipmentId);
        return resp.getData();
    }

    /**
     * Get a duplicated a returnShipment by id
     * Returns a duplicated returnShipment identified by the specified id.
     * @param returnShipmentId Id of the returnShipment to be duplicated. (required)
     * @return ApiResponse&lt;ReturnShipment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReturnShipment> getDuplicateReturnShipmentByIdWithHttpInfo(Integer returnShipmentId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateReturnShipmentByIdValidateBeforeCall(returnShipmentId, null, null);
        Type localVarReturnType = new TypeToken<ReturnShipment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a returnShipment by id (asynchronously)
     * Returns a duplicated returnShipment identified by the specified id.
     * @param returnShipmentId Id of the returnShipment to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateReturnShipmentByIdAsync(Integer returnShipmentId, final ApiCallback<ReturnShipment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateReturnShipmentByIdValidateBeforeCall(returnShipmentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReturnShipment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReturnShipmentByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReturnShipmentByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/returnShipment/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReturnShipmentByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getReturnShipmentByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search returnShipments by filter
     * Returns the list of returnShipments that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;ReturnShipment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ReturnShipment> getReturnShipmentByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<ReturnShipment>> resp = getReturnShipmentByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search returnShipments by filter
     * Returns the list of returnShipments that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;ReturnShipment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ReturnShipment>> getReturnShipmentByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getReturnShipmentByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<ReturnShipment>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search returnShipments by filter (asynchronously)
     * Returns the list of returnShipments that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReturnShipmentByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<ReturnShipment>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReturnShipmentByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ReturnShipment>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReturnShipmentById
     * @param returnShipmentId Id of the returnShipment to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReturnShipmentByIdCall(Integer returnShipmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/returnShipment/{returnShipmentId}"
            .replaceAll("\\{" + "returnShipmentId" + "\\}", apiClient.escapeString(returnShipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReturnShipmentByIdValidateBeforeCall(Integer returnShipmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'returnShipmentId' is set
        if (returnShipmentId == null) {
            throw new ApiException("Missing the required parameter 'returnShipmentId' when calling getReturnShipmentById(Async)");
        }
        

        com.squareup.okhttp.Call call = getReturnShipmentByIdCall(returnShipmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a returnShipment by id
     * Returns the returnShipment identified by the specified id.
     * @param returnShipmentId Id of the returnShipment to be returned. (required)
     * @return ReturnShipment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReturnShipment getReturnShipmentById(Integer returnShipmentId) throws ApiException {
        ApiResponse<ReturnShipment> resp = getReturnShipmentByIdWithHttpInfo(returnShipmentId);
        return resp.getData();
    }

    /**
     * Get a returnShipment by id
     * Returns the returnShipment identified by the specified id.
     * @param returnShipmentId Id of the returnShipment to be returned. (required)
     * @return ApiResponse&lt;ReturnShipment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReturnShipment> getReturnShipmentByIdWithHttpInfo(Integer returnShipmentId) throws ApiException {
        com.squareup.okhttp.Call call = getReturnShipmentByIdValidateBeforeCall(returnShipmentId, null, null);
        Type localVarReturnType = new TypeToken<ReturnShipment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a returnShipment by id (asynchronously)
     * Returns the returnShipment identified by the specified id.
     * @param returnShipmentId Id of the returnShipment to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReturnShipmentByIdAsync(Integer returnShipmentId, final ApiCallback<ReturnShipment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReturnShipmentByIdValidateBeforeCall(returnShipmentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReturnShipment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReturnShipmentFiles
     * @param returnShipmentId Id of the returnShipment to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReturnShipmentFilesCall(Integer returnShipmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/returnShipment/{returnShipmentId}/file"
            .replaceAll("\\{" + "returnShipmentId" + "\\}", apiClient.escapeString(returnShipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReturnShipmentFilesValidateBeforeCall(Integer returnShipmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'returnShipmentId' is set
        if (returnShipmentId == null) {
            throw new ApiException("Missing the required parameter 'returnShipmentId' when calling getReturnShipmentFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getReturnShipmentFilesCall(returnShipmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a returnShipment.
     * Get all existing returnShipment files.
     * @param returnShipmentId Id of the returnShipment to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getReturnShipmentFiles(Integer returnShipmentId) throws ApiException {
        getReturnShipmentFilesWithHttpInfo(returnShipmentId);
    }

    /**
     * Get the files for a returnShipment.
     * Get all existing returnShipment files.
     * @param returnShipmentId Id of the returnShipment to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getReturnShipmentFilesWithHttpInfo(Integer returnShipmentId) throws ApiException {
        com.squareup.okhttp.Call call = getReturnShipmentFilesValidateBeforeCall(returnShipmentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a returnShipment. (asynchronously)
     * Get all existing returnShipment files.
     * @param returnShipmentId Id of the returnShipment to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReturnShipmentFilesAsync(Integer returnShipmentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReturnShipmentFilesValidateBeforeCall(returnShipmentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getReturnShipmentTags
     * @param returnShipmentId Id of the returnShipment to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReturnShipmentTagsCall(Integer returnShipmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/returnShipment/{returnShipmentId}/tag"
            .replaceAll("\\{" + "returnShipmentId" + "\\}", apiClient.escapeString(returnShipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReturnShipmentTagsValidateBeforeCall(Integer returnShipmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'returnShipmentId' is set
        if (returnShipmentId == null) {
            throw new ApiException("Missing the required parameter 'returnShipmentId' when calling getReturnShipmentTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getReturnShipmentTagsCall(returnShipmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a returnShipment.
     * Get all existing returnShipment tags.
     * @param returnShipmentId Id of the returnShipment to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getReturnShipmentTags(Integer returnShipmentId) throws ApiException {
        getReturnShipmentTagsWithHttpInfo(returnShipmentId);
    }

    /**
     * Get the tags for a returnShipment.
     * Get all existing returnShipment tags.
     * @param returnShipmentId Id of the returnShipment to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getReturnShipmentTagsWithHttpInfo(Integer returnShipmentId) throws ApiException {
        com.squareup.okhttp.Call call = getReturnShipmentTagsValidateBeforeCall(returnShipmentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a returnShipment. (asynchronously)
     * Get all existing returnShipment tags.
     * @param returnShipmentId Id of the returnShipment to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReturnShipmentTagsAsync(Integer returnShipmentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReturnShipmentTagsValidateBeforeCall(returnShipmentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateReturnShipmentCustomFields
     * @param body ReturnShipment to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateReturnShipmentCustomFieldsCall(ReturnShipment body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/returnShipment/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateReturnShipmentCustomFieldsValidateBeforeCall(ReturnShipment body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateReturnShipmentCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateReturnShipmentCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a returnShipment custom fields
     * Updates an existing returnShipment custom fields using the specified data.
     * @param body ReturnShipment to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateReturnShipmentCustomFields(ReturnShipment body) throws ApiException {
        updateReturnShipmentCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a returnShipment custom fields
     * Updates an existing returnShipment custom fields using the specified data.
     * @param body ReturnShipment to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateReturnShipmentCustomFieldsWithHttpInfo(ReturnShipment body) throws ApiException {
        com.squareup.okhttp.Call call = updateReturnShipmentCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a returnShipment custom fields (asynchronously)
     * Updates an existing returnShipment custom fields using the specified data.
     * @param body ReturnShipment to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateReturnShipmentCustomFieldsAsync(ReturnShipment body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateReturnShipmentCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
