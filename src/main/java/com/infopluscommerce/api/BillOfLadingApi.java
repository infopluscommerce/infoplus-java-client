/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.BillOfLading;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BillOfLadingApi {
    private ApiClient apiClient;

    public BillOfLadingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BillOfLadingApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addBillOfLading
     * @param body BillOfLading to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addBillOfLadingCall(BillOfLading body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/billOfLading";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addBillOfLadingValidateBeforeCall(BillOfLading body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addBillOfLading(Async)");
        }
        

        com.squareup.okhttp.Call call = addBillOfLadingCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a billOfLading
     * Inserts a new billOfLading using the specified data.
     * @param body BillOfLading to be inserted. (required)
     * @return BillOfLading
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BillOfLading addBillOfLading(BillOfLading body) throws ApiException {
        ApiResponse<BillOfLading> resp = addBillOfLadingWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a billOfLading
     * Inserts a new billOfLading using the specified data.
     * @param body BillOfLading to be inserted. (required)
     * @return ApiResponse&lt;BillOfLading&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BillOfLading> addBillOfLadingWithHttpInfo(BillOfLading body) throws ApiException {
        com.squareup.okhttp.Call call = addBillOfLadingValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<BillOfLading>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a billOfLading (asynchronously)
     * Inserts a new billOfLading using the specified data.
     * @param body BillOfLading to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBillOfLadingAsync(BillOfLading body, final ApiCallback<BillOfLading> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBillOfLadingValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BillOfLading>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addBillOfLadingAudit
     * @param billOfLadingId Id of the billOfLading to add an audit to (required)
     * @param billOfLadingAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addBillOfLadingAuditCall(Integer billOfLadingId, String billOfLadingAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billOfLading/{billOfLadingId}/audit/{billOfLadingAudit}"
            .replaceAll("\\{" + "billOfLadingId" + "\\}", apiClient.escapeString(billOfLadingId.toString()))
            .replaceAll("\\{" + "billOfLadingAudit" + "\\}", apiClient.escapeString(billOfLadingAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addBillOfLadingAuditValidateBeforeCall(Integer billOfLadingId, String billOfLadingAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billOfLadingId' is set
        if (billOfLadingId == null) {
            throw new ApiException("Missing the required parameter 'billOfLadingId' when calling addBillOfLadingAudit(Async)");
        }
        
        // verify the required parameter 'billOfLadingAudit' is set
        if (billOfLadingAudit == null) {
            throw new ApiException("Missing the required parameter 'billOfLadingAudit' when calling addBillOfLadingAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addBillOfLadingAuditCall(billOfLadingId, billOfLadingAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a billOfLading
     * Adds an audit to an existing billOfLading.
     * @param billOfLadingId Id of the billOfLading to add an audit to (required)
     * @param billOfLadingAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addBillOfLadingAudit(Integer billOfLadingId, String billOfLadingAudit) throws ApiException {
        addBillOfLadingAuditWithHttpInfo(billOfLadingId, billOfLadingAudit);
    }

    /**
     * Add new audit for a billOfLading
     * Adds an audit to an existing billOfLading.
     * @param billOfLadingId Id of the billOfLading to add an audit to (required)
     * @param billOfLadingAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addBillOfLadingAuditWithHttpInfo(Integer billOfLadingId, String billOfLadingAudit) throws ApiException {
        com.squareup.okhttp.Call call = addBillOfLadingAuditValidateBeforeCall(billOfLadingId, billOfLadingAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a billOfLading (asynchronously)
     * Adds an audit to an existing billOfLading.
     * @param billOfLadingId Id of the billOfLading to add an audit to (required)
     * @param billOfLadingAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBillOfLadingAuditAsync(Integer billOfLadingId, String billOfLadingAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBillOfLadingAuditValidateBeforeCall(billOfLadingId, billOfLadingAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addBillOfLadingFile
     * @param billOfLadingId Id of the billOfLading to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addBillOfLadingFileCall(Integer billOfLadingId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billOfLading/{billOfLadingId}/file/{fileName}"
            .replaceAll("\\{" + "billOfLadingId" + "\\}", apiClient.escapeString(billOfLadingId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addBillOfLadingFileValidateBeforeCall(Integer billOfLadingId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billOfLadingId' is set
        if (billOfLadingId == null) {
            throw new ApiException("Missing the required parameter 'billOfLadingId' when calling addBillOfLadingFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addBillOfLadingFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addBillOfLadingFileCall(billOfLadingId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a billOfLading
     * Adds a file to an existing billOfLading.
     * @param billOfLadingId Id of the billOfLading to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addBillOfLadingFile(Integer billOfLadingId, String fileName) throws ApiException {
        addBillOfLadingFileWithHttpInfo(billOfLadingId, fileName);
    }

    /**
     * Attach a file to a billOfLading
     * Adds a file to an existing billOfLading.
     * @param billOfLadingId Id of the billOfLading to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addBillOfLadingFileWithHttpInfo(Integer billOfLadingId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addBillOfLadingFileValidateBeforeCall(billOfLadingId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a billOfLading (asynchronously)
     * Adds a file to an existing billOfLading.
     * @param billOfLadingId Id of the billOfLading to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBillOfLadingFileAsync(Integer billOfLadingId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBillOfLadingFileValidateBeforeCall(billOfLadingId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addBillOfLadingFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param billOfLadingId Id of the billOfLading to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addBillOfLadingFileByURLCall(RecordFile body, Integer billOfLadingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/billOfLading/{billOfLadingId}/file"
            .replaceAll("\\{" + "billOfLadingId" + "\\}", apiClient.escapeString(billOfLadingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addBillOfLadingFileByURLValidateBeforeCall(RecordFile body, Integer billOfLadingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addBillOfLadingFileByURL(Async)");
        }
        
        // verify the required parameter 'billOfLadingId' is set
        if (billOfLadingId == null) {
            throw new ApiException("Missing the required parameter 'billOfLadingId' when calling addBillOfLadingFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addBillOfLadingFileByURLCall(body, billOfLadingId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a billOfLading by URL.
     * Adds a file to an existing billOfLading by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param billOfLadingId Id of the billOfLading to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addBillOfLadingFileByURL(RecordFile body, Integer billOfLadingId) throws ApiException {
        addBillOfLadingFileByURLWithHttpInfo(body, billOfLadingId);
    }

    /**
     * Attach a file to a billOfLading by URL.
     * Adds a file to an existing billOfLading by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param billOfLadingId Id of the billOfLading to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addBillOfLadingFileByURLWithHttpInfo(RecordFile body, Integer billOfLadingId) throws ApiException {
        com.squareup.okhttp.Call call = addBillOfLadingFileByURLValidateBeforeCall(body, billOfLadingId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a billOfLading by URL. (asynchronously)
     * Adds a file to an existing billOfLading by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param billOfLadingId Id of the billOfLading to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBillOfLadingFileByURLAsync(RecordFile body, Integer billOfLadingId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBillOfLadingFileByURLValidateBeforeCall(body, billOfLadingId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addBillOfLadingTag
     * @param billOfLadingId Id of the billOfLading to add a tag to (required)
     * @param billOfLadingTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addBillOfLadingTagCall(Integer billOfLadingId, String billOfLadingTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billOfLading/{billOfLadingId}/tag/{billOfLadingTag}"
            .replaceAll("\\{" + "billOfLadingId" + "\\}", apiClient.escapeString(billOfLadingId.toString()))
            .replaceAll("\\{" + "billOfLadingTag" + "\\}", apiClient.escapeString(billOfLadingTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addBillOfLadingTagValidateBeforeCall(Integer billOfLadingId, String billOfLadingTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billOfLadingId' is set
        if (billOfLadingId == null) {
            throw new ApiException("Missing the required parameter 'billOfLadingId' when calling addBillOfLadingTag(Async)");
        }
        
        // verify the required parameter 'billOfLadingTag' is set
        if (billOfLadingTag == null) {
            throw new ApiException("Missing the required parameter 'billOfLadingTag' when calling addBillOfLadingTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addBillOfLadingTagCall(billOfLadingId, billOfLadingTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a billOfLading.
     * Adds a tag to an existing billOfLading.
     * @param billOfLadingId Id of the billOfLading to add a tag to (required)
     * @param billOfLadingTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addBillOfLadingTag(Integer billOfLadingId, String billOfLadingTag) throws ApiException {
        addBillOfLadingTagWithHttpInfo(billOfLadingId, billOfLadingTag);
    }

    /**
     * Add new tags for a billOfLading.
     * Adds a tag to an existing billOfLading.
     * @param billOfLadingId Id of the billOfLading to add a tag to (required)
     * @param billOfLadingTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addBillOfLadingTagWithHttpInfo(Integer billOfLadingId, String billOfLadingTag) throws ApiException {
        com.squareup.okhttp.Call call = addBillOfLadingTagValidateBeforeCall(billOfLadingId, billOfLadingTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a billOfLading. (asynchronously)
     * Adds a tag to an existing billOfLading.
     * @param billOfLadingId Id of the billOfLading to add a tag to (required)
     * @param billOfLadingTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBillOfLadingTagAsync(Integer billOfLadingId, String billOfLadingTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBillOfLadingTagValidateBeforeCall(billOfLadingId, billOfLadingTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteBillOfLading
     * @param billOfLadingId Id of the billOfLading to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBillOfLadingCall(Integer billOfLadingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billOfLading/{billOfLadingId}"
            .replaceAll("\\{" + "billOfLadingId" + "\\}", apiClient.escapeString(billOfLadingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBillOfLadingValidateBeforeCall(Integer billOfLadingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billOfLadingId' is set
        if (billOfLadingId == null) {
            throw new ApiException("Missing the required parameter 'billOfLadingId' when calling deleteBillOfLading(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBillOfLadingCall(billOfLadingId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a billOfLading
     * Deletes the billOfLading identified by the specified id.
     * @param billOfLadingId Id of the billOfLading to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBillOfLading(Integer billOfLadingId) throws ApiException {
        deleteBillOfLadingWithHttpInfo(billOfLadingId);
    }

    /**
     * Delete a billOfLading
     * Deletes the billOfLading identified by the specified id.
     * @param billOfLadingId Id of the billOfLading to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBillOfLadingWithHttpInfo(Integer billOfLadingId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBillOfLadingValidateBeforeCall(billOfLadingId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a billOfLading (asynchronously)
     * Deletes the billOfLading identified by the specified id.
     * @param billOfLadingId Id of the billOfLading to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBillOfLadingAsync(Integer billOfLadingId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBillOfLadingValidateBeforeCall(billOfLadingId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteBillOfLadingFile
     * @param billOfLadingId Id of the billOfLading to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBillOfLadingFileCall(Integer billOfLadingId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billOfLading/{billOfLadingId}/file/{fileId}"
            .replaceAll("\\{" + "billOfLadingId" + "\\}", apiClient.escapeString(billOfLadingId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBillOfLadingFileValidateBeforeCall(Integer billOfLadingId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billOfLadingId' is set
        if (billOfLadingId == null) {
            throw new ApiException("Missing the required parameter 'billOfLadingId' when calling deleteBillOfLadingFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteBillOfLadingFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBillOfLadingFileCall(billOfLadingId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a billOfLading.
     * Deletes an existing billOfLading file using the specified data.
     * @param billOfLadingId Id of the billOfLading to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBillOfLadingFile(Integer billOfLadingId, Integer fileId) throws ApiException {
        deleteBillOfLadingFileWithHttpInfo(billOfLadingId, fileId);
    }

    /**
     * Delete a file for a billOfLading.
     * Deletes an existing billOfLading file using the specified data.
     * @param billOfLadingId Id of the billOfLading to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBillOfLadingFileWithHttpInfo(Integer billOfLadingId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBillOfLadingFileValidateBeforeCall(billOfLadingId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a billOfLading. (asynchronously)
     * Deletes an existing billOfLading file using the specified data.
     * @param billOfLadingId Id of the billOfLading to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBillOfLadingFileAsync(Integer billOfLadingId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBillOfLadingFileValidateBeforeCall(billOfLadingId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteBillOfLadingTag
     * @param billOfLadingId Id of the billOfLading to remove tag from (required)
     * @param billOfLadingTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBillOfLadingTagCall(Integer billOfLadingId, String billOfLadingTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billOfLading/{billOfLadingId}/tag/{billOfLadingTag}"
            .replaceAll("\\{" + "billOfLadingId" + "\\}", apiClient.escapeString(billOfLadingId.toString()))
            .replaceAll("\\{" + "billOfLadingTag" + "\\}", apiClient.escapeString(billOfLadingTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBillOfLadingTagValidateBeforeCall(Integer billOfLadingId, String billOfLadingTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billOfLadingId' is set
        if (billOfLadingId == null) {
            throw new ApiException("Missing the required parameter 'billOfLadingId' when calling deleteBillOfLadingTag(Async)");
        }
        
        // verify the required parameter 'billOfLadingTag' is set
        if (billOfLadingTag == null) {
            throw new ApiException("Missing the required parameter 'billOfLadingTag' when calling deleteBillOfLadingTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBillOfLadingTagCall(billOfLadingId, billOfLadingTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a billOfLading.
     * Deletes an existing billOfLading tag using the specified data.
     * @param billOfLadingId Id of the billOfLading to remove tag from (required)
     * @param billOfLadingTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBillOfLadingTag(Integer billOfLadingId, String billOfLadingTag) throws ApiException {
        deleteBillOfLadingTagWithHttpInfo(billOfLadingId, billOfLadingTag);
    }

    /**
     * Delete a tag for a billOfLading.
     * Deletes an existing billOfLading tag using the specified data.
     * @param billOfLadingId Id of the billOfLading to remove tag from (required)
     * @param billOfLadingTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBillOfLadingTagWithHttpInfo(Integer billOfLadingId, String billOfLadingTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteBillOfLadingTagValidateBeforeCall(billOfLadingId, billOfLadingTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a billOfLading. (asynchronously)
     * Deletes an existing billOfLading tag using the specified data.
     * @param billOfLadingId Id of the billOfLading to remove tag from (required)
     * @param billOfLadingTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBillOfLadingTagAsync(Integer billOfLadingId, String billOfLadingTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBillOfLadingTagValidateBeforeCall(billOfLadingId, billOfLadingTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getBillOfLadingByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBillOfLadingByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billOfLading/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBillOfLadingByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getBillOfLadingByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search billOfLadings by filter
     * Returns the list of billOfLadings that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;BillOfLading&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BillOfLading> getBillOfLadingByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<BillOfLading>> resp = getBillOfLadingByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search billOfLadings by filter
     * Returns the list of billOfLadings that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;BillOfLading&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BillOfLading>> getBillOfLadingByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getBillOfLadingByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<BillOfLading>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search billOfLadings by filter (asynchronously)
     * Returns the list of billOfLadings that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBillOfLadingByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<BillOfLading>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBillOfLadingByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BillOfLading>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBillOfLadingById
     * @param billOfLadingId Id of the billOfLading to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBillOfLadingByIdCall(Integer billOfLadingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billOfLading/{billOfLadingId}"
            .replaceAll("\\{" + "billOfLadingId" + "\\}", apiClient.escapeString(billOfLadingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBillOfLadingByIdValidateBeforeCall(Integer billOfLadingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billOfLadingId' is set
        if (billOfLadingId == null) {
            throw new ApiException("Missing the required parameter 'billOfLadingId' when calling getBillOfLadingById(Async)");
        }
        

        com.squareup.okhttp.Call call = getBillOfLadingByIdCall(billOfLadingId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a billOfLading by id
     * Returns the billOfLading identified by the specified id.
     * @param billOfLadingId Id of the billOfLading to be returned. (required)
     * @return BillOfLading
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BillOfLading getBillOfLadingById(Integer billOfLadingId) throws ApiException {
        ApiResponse<BillOfLading> resp = getBillOfLadingByIdWithHttpInfo(billOfLadingId);
        return resp.getData();
    }

    /**
     * Get a billOfLading by id
     * Returns the billOfLading identified by the specified id.
     * @param billOfLadingId Id of the billOfLading to be returned. (required)
     * @return ApiResponse&lt;BillOfLading&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BillOfLading> getBillOfLadingByIdWithHttpInfo(Integer billOfLadingId) throws ApiException {
        com.squareup.okhttp.Call call = getBillOfLadingByIdValidateBeforeCall(billOfLadingId, null, null);
        Type localVarReturnType = new TypeToken<BillOfLading>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a billOfLading by id (asynchronously)
     * Returns the billOfLading identified by the specified id.
     * @param billOfLadingId Id of the billOfLading to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBillOfLadingByIdAsync(Integer billOfLadingId, final ApiCallback<BillOfLading> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBillOfLadingByIdValidateBeforeCall(billOfLadingId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BillOfLading>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBillOfLadingFiles
     * @param billOfLadingId Id of the billOfLading to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBillOfLadingFilesCall(Integer billOfLadingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billOfLading/{billOfLadingId}/file"
            .replaceAll("\\{" + "billOfLadingId" + "\\}", apiClient.escapeString(billOfLadingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBillOfLadingFilesValidateBeforeCall(Integer billOfLadingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billOfLadingId' is set
        if (billOfLadingId == null) {
            throw new ApiException("Missing the required parameter 'billOfLadingId' when calling getBillOfLadingFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getBillOfLadingFilesCall(billOfLadingId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a billOfLading.
     * Get all existing billOfLading files.
     * @param billOfLadingId Id of the billOfLading to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getBillOfLadingFiles(Integer billOfLadingId) throws ApiException {
        getBillOfLadingFilesWithHttpInfo(billOfLadingId);
    }

    /**
     * Get the files for a billOfLading.
     * Get all existing billOfLading files.
     * @param billOfLadingId Id of the billOfLading to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getBillOfLadingFilesWithHttpInfo(Integer billOfLadingId) throws ApiException {
        com.squareup.okhttp.Call call = getBillOfLadingFilesValidateBeforeCall(billOfLadingId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a billOfLading. (asynchronously)
     * Get all existing billOfLading files.
     * @param billOfLadingId Id of the billOfLading to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBillOfLadingFilesAsync(Integer billOfLadingId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBillOfLadingFilesValidateBeforeCall(billOfLadingId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getBillOfLadingTags
     * @param billOfLadingId Id of the billOfLading to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBillOfLadingTagsCall(Integer billOfLadingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billOfLading/{billOfLadingId}/tag"
            .replaceAll("\\{" + "billOfLadingId" + "\\}", apiClient.escapeString(billOfLadingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBillOfLadingTagsValidateBeforeCall(Integer billOfLadingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billOfLadingId' is set
        if (billOfLadingId == null) {
            throw new ApiException("Missing the required parameter 'billOfLadingId' when calling getBillOfLadingTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getBillOfLadingTagsCall(billOfLadingId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a billOfLading.
     * Get all existing billOfLading tags.
     * @param billOfLadingId Id of the billOfLading to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getBillOfLadingTags(Integer billOfLadingId) throws ApiException {
        getBillOfLadingTagsWithHttpInfo(billOfLadingId);
    }

    /**
     * Get the tags for a billOfLading.
     * Get all existing billOfLading tags.
     * @param billOfLadingId Id of the billOfLading to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getBillOfLadingTagsWithHttpInfo(Integer billOfLadingId) throws ApiException {
        com.squareup.okhttp.Call call = getBillOfLadingTagsValidateBeforeCall(billOfLadingId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a billOfLading. (asynchronously)
     * Get all existing billOfLading tags.
     * @param billOfLadingId Id of the billOfLading to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBillOfLadingTagsAsync(Integer billOfLadingId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBillOfLadingTagsValidateBeforeCall(billOfLadingId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateBillOfLadingById
     * @param billOfLadingId Id of the billOfLading to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateBillOfLadingByIdCall(Integer billOfLadingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billOfLading/duplicate/{billOfLadingId}"
            .replaceAll("\\{" + "billOfLadingId" + "\\}", apiClient.escapeString(billOfLadingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateBillOfLadingByIdValidateBeforeCall(Integer billOfLadingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billOfLadingId' is set
        if (billOfLadingId == null) {
            throw new ApiException("Missing the required parameter 'billOfLadingId' when calling getDuplicateBillOfLadingById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateBillOfLadingByIdCall(billOfLadingId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a billOfLading by id
     * Returns a duplicated billOfLading identified by the specified id.
     * @param billOfLadingId Id of the billOfLading to be duplicated. (required)
     * @return BillOfLading
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BillOfLading getDuplicateBillOfLadingById(Integer billOfLadingId) throws ApiException {
        ApiResponse<BillOfLading> resp = getDuplicateBillOfLadingByIdWithHttpInfo(billOfLadingId);
        return resp.getData();
    }

    /**
     * Get a duplicated a billOfLading by id
     * Returns a duplicated billOfLading identified by the specified id.
     * @param billOfLadingId Id of the billOfLading to be duplicated. (required)
     * @return ApiResponse&lt;BillOfLading&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BillOfLading> getDuplicateBillOfLadingByIdWithHttpInfo(Integer billOfLadingId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateBillOfLadingByIdValidateBeforeCall(billOfLadingId, null, null);
        Type localVarReturnType = new TypeToken<BillOfLading>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a billOfLading by id (asynchronously)
     * Returns a duplicated billOfLading identified by the specified id.
     * @param billOfLadingId Id of the billOfLading to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateBillOfLadingByIdAsync(Integer billOfLadingId, final ApiCallback<BillOfLading> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateBillOfLadingByIdValidateBeforeCall(billOfLadingId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BillOfLading>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBillOfLading
     * @param body BillOfLading to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBillOfLadingCall(BillOfLading body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/billOfLading";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBillOfLadingValidateBeforeCall(BillOfLading body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateBillOfLading(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBillOfLadingCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a billOfLading
     * Updates an existing billOfLading using the specified data.
     * @param body BillOfLading to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateBillOfLading(BillOfLading body) throws ApiException {
        updateBillOfLadingWithHttpInfo(body);
    }

    /**
     * Update a billOfLading
     * Updates an existing billOfLading using the specified data.
     * @param body BillOfLading to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateBillOfLadingWithHttpInfo(BillOfLading body) throws ApiException {
        com.squareup.okhttp.Call call = updateBillOfLadingValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a billOfLading (asynchronously)
     * Updates an existing billOfLading using the specified data.
     * @param body BillOfLading to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBillOfLadingAsync(BillOfLading body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBillOfLadingValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateBillOfLadingCustomFields
     * @param body BillOfLading to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBillOfLadingCustomFieldsCall(BillOfLading body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/billOfLading/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBillOfLadingCustomFieldsValidateBeforeCall(BillOfLading body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateBillOfLadingCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBillOfLadingCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a billOfLading custom fields
     * Updates an existing billOfLading custom fields using the specified data.
     * @param body BillOfLading to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateBillOfLadingCustomFields(BillOfLading body) throws ApiException {
        updateBillOfLadingCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a billOfLading custom fields
     * Updates an existing billOfLading custom fields using the specified data.
     * @param body BillOfLading to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateBillOfLadingCustomFieldsWithHttpInfo(BillOfLading body) throws ApiException {
        com.squareup.okhttp.Call call = updateBillOfLadingCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a billOfLading custom fields (asynchronously)
     * Updates an existing billOfLading custom fields using the specified data.
     * @param body BillOfLading to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBillOfLadingCustomFieldsAsync(BillOfLading body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBillOfLadingCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
