/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.OrderSourceItemSetup;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrderSourceItemSetupApi {
    private ApiClient apiClient;

    public OrderSourceItemSetupApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrderSourceItemSetupApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addOrderSourceItemSetup
     * @param body OrderSourceItemSetup to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceItemSetupCall(OrderSourceItemSetup body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/orderSourceItemSetup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOrderSourceItemSetupValidateBeforeCall(OrderSourceItemSetup body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addOrderSourceItemSetup(Async)");
        }
        

        com.squareup.okhttp.Call call = addOrderSourceItemSetupCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an orderSourceItemSetup
     * Inserts a new orderSourceItemSetup using the specified data.
     * @param body OrderSourceItemSetup to be inserted. (required)
     * @return OrderSourceItemSetup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderSourceItemSetup addOrderSourceItemSetup(OrderSourceItemSetup body) throws ApiException {
        ApiResponse<OrderSourceItemSetup> resp = addOrderSourceItemSetupWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create an orderSourceItemSetup
     * Inserts a new orderSourceItemSetup using the specified data.
     * @param body OrderSourceItemSetup to be inserted. (required)
     * @return ApiResponse&lt;OrderSourceItemSetup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderSourceItemSetup> addOrderSourceItemSetupWithHttpInfo(OrderSourceItemSetup body) throws ApiException {
        com.squareup.okhttp.Call call = addOrderSourceItemSetupValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<OrderSourceItemSetup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an orderSourceItemSetup (asynchronously)
     * Inserts a new orderSourceItemSetup using the specified data.
     * @param body OrderSourceItemSetup to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceItemSetupAsync(OrderSourceItemSetup body, final ApiCallback<OrderSourceItemSetup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrderSourceItemSetupValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderSourceItemSetup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addOrderSourceItemSetupAudit
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to add an audit to (required)
     * @param orderSourceItemSetupAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceItemSetupAuditCall(Integer orderSourceItemSetupId, String orderSourceItemSetupAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}/audit/{orderSourceItemSetupAudit}"
            .replaceAll("\\{" + "orderSourceItemSetupId" + "\\}", apiClient.escapeString(orderSourceItemSetupId.toString()))
            .replaceAll("\\{" + "orderSourceItemSetupAudit" + "\\}", apiClient.escapeString(orderSourceItemSetupAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOrderSourceItemSetupAuditValidateBeforeCall(Integer orderSourceItemSetupId, String orderSourceItemSetupAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceItemSetupId' is set
        if (orderSourceItemSetupId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceItemSetupId' when calling addOrderSourceItemSetupAudit(Async)");
        }
        
        // verify the required parameter 'orderSourceItemSetupAudit' is set
        if (orderSourceItemSetupAudit == null) {
            throw new ApiException("Missing the required parameter 'orderSourceItemSetupAudit' when calling addOrderSourceItemSetupAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addOrderSourceItemSetupAuditCall(orderSourceItemSetupId, orderSourceItemSetupAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for an orderSourceItemSetup
     * Adds an audit to an existing orderSourceItemSetup.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to add an audit to (required)
     * @param orderSourceItemSetupAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOrderSourceItemSetupAudit(Integer orderSourceItemSetupId, String orderSourceItemSetupAudit) throws ApiException {
        addOrderSourceItemSetupAuditWithHttpInfo(orderSourceItemSetupId, orderSourceItemSetupAudit);
    }

    /**
     * Add new audit for an orderSourceItemSetup
     * Adds an audit to an existing orderSourceItemSetup.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to add an audit to (required)
     * @param orderSourceItemSetupAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOrderSourceItemSetupAuditWithHttpInfo(Integer orderSourceItemSetupId, String orderSourceItemSetupAudit) throws ApiException {
        com.squareup.okhttp.Call call = addOrderSourceItemSetupAuditValidateBeforeCall(orderSourceItemSetupId, orderSourceItemSetupAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for an orderSourceItemSetup (asynchronously)
     * Adds an audit to an existing orderSourceItemSetup.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to add an audit to (required)
     * @param orderSourceItemSetupAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceItemSetupAuditAsync(Integer orderSourceItemSetupId, String orderSourceItemSetupAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrderSourceItemSetupAuditValidateBeforeCall(orderSourceItemSetupId, orderSourceItemSetupAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addOrderSourceItemSetupFile
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceItemSetupFileCall(Integer orderSourceItemSetupId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}/file/{fileName}"
            .replaceAll("\\{" + "orderSourceItemSetupId" + "\\}", apiClient.escapeString(orderSourceItemSetupId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOrderSourceItemSetupFileValidateBeforeCall(Integer orderSourceItemSetupId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceItemSetupId' is set
        if (orderSourceItemSetupId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceItemSetupId' when calling addOrderSourceItemSetupFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addOrderSourceItemSetupFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addOrderSourceItemSetupFileCall(orderSourceItemSetupId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an orderSourceItemSetup
     * Adds a file to an existing orderSourceItemSetup.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOrderSourceItemSetupFile(Integer orderSourceItemSetupId, String fileName) throws ApiException {
        addOrderSourceItemSetupFileWithHttpInfo(orderSourceItemSetupId, fileName);
    }

    /**
     * Attach a file to an orderSourceItemSetup
     * Adds a file to an existing orderSourceItemSetup.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOrderSourceItemSetupFileWithHttpInfo(Integer orderSourceItemSetupId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addOrderSourceItemSetupFileValidateBeforeCall(orderSourceItemSetupId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an orderSourceItemSetup (asynchronously)
     * Adds a file to an existing orderSourceItemSetup.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceItemSetupFileAsync(Integer orderSourceItemSetupId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrderSourceItemSetupFileValidateBeforeCall(orderSourceItemSetupId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addOrderSourceItemSetupFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceItemSetupFileByURLCall(RecordFile body, Integer orderSourceItemSetupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}/file"
            .replaceAll("\\{" + "orderSourceItemSetupId" + "\\}", apiClient.escapeString(orderSourceItemSetupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOrderSourceItemSetupFileByURLValidateBeforeCall(RecordFile body, Integer orderSourceItemSetupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addOrderSourceItemSetupFileByURL(Async)");
        }
        
        // verify the required parameter 'orderSourceItemSetupId' is set
        if (orderSourceItemSetupId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceItemSetupId' when calling addOrderSourceItemSetupFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addOrderSourceItemSetupFileByURLCall(body, orderSourceItemSetupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an orderSourceItemSetup by URL.
     * Adds a file to an existing orderSourceItemSetup by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOrderSourceItemSetupFileByURL(RecordFile body, Integer orderSourceItemSetupId) throws ApiException {
        addOrderSourceItemSetupFileByURLWithHttpInfo(body, orderSourceItemSetupId);
    }

    /**
     * Attach a file to an orderSourceItemSetup by URL.
     * Adds a file to an existing orderSourceItemSetup by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOrderSourceItemSetupFileByURLWithHttpInfo(RecordFile body, Integer orderSourceItemSetupId) throws ApiException {
        com.squareup.okhttp.Call call = addOrderSourceItemSetupFileByURLValidateBeforeCall(body, orderSourceItemSetupId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an orderSourceItemSetup by URL. (asynchronously)
     * Adds a file to an existing orderSourceItemSetup by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceItemSetupFileByURLAsync(RecordFile body, Integer orderSourceItemSetupId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrderSourceItemSetupFileByURLValidateBeforeCall(body, orderSourceItemSetupId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addOrderSourceItemSetupTag
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to add a tag to (required)
     * @param orderSourceItemSetupTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceItemSetupTagCall(Integer orderSourceItemSetupId, String orderSourceItemSetupTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}/tag/{orderSourceItemSetupTag}"
            .replaceAll("\\{" + "orderSourceItemSetupId" + "\\}", apiClient.escapeString(orderSourceItemSetupId.toString()))
            .replaceAll("\\{" + "orderSourceItemSetupTag" + "\\}", apiClient.escapeString(orderSourceItemSetupTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOrderSourceItemSetupTagValidateBeforeCall(Integer orderSourceItemSetupId, String orderSourceItemSetupTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceItemSetupId' is set
        if (orderSourceItemSetupId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceItemSetupId' when calling addOrderSourceItemSetupTag(Async)");
        }
        
        // verify the required parameter 'orderSourceItemSetupTag' is set
        if (orderSourceItemSetupTag == null) {
            throw new ApiException("Missing the required parameter 'orderSourceItemSetupTag' when calling addOrderSourceItemSetupTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addOrderSourceItemSetupTagCall(orderSourceItemSetupId, orderSourceItemSetupTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for an orderSourceItemSetup.
     * Adds a tag to an existing orderSourceItemSetup.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to add a tag to (required)
     * @param orderSourceItemSetupTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOrderSourceItemSetupTag(Integer orderSourceItemSetupId, String orderSourceItemSetupTag) throws ApiException {
        addOrderSourceItemSetupTagWithHttpInfo(orderSourceItemSetupId, orderSourceItemSetupTag);
    }

    /**
     * Add new tags for an orderSourceItemSetup.
     * Adds a tag to an existing orderSourceItemSetup.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to add a tag to (required)
     * @param orderSourceItemSetupTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOrderSourceItemSetupTagWithHttpInfo(Integer orderSourceItemSetupId, String orderSourceItemSetupTag) throws ApiException {
        com.squareup.okhttp.Call call = addOrderSourceItemSetupTagValidateBeforeCall(orderSourceItemSetupId, orderSourceItemSetupTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for an orderSourceItemSetup. (asynchronously)
     * Adds a tag to an existing orderSourceItemSetup.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to add a tag to (required)
     * @param orderSourceItemSetupTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceItemSetupTagAsync(Integer orderSourceItemSetupId, String orderSourceItemSetupTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrderSourceItemSetupTagValidateBeforeCall(orderSourceItemSetupId, orderSourceItemSetupTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteOrderSourceItemSetup
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOrderSourceItemSetupCall(Integer orderSourceItemSetupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}"
            .replaceAll("\\{" + "orderSourceItemSetupId" + "\\}", apiClient.escapeString(orderSourceItemSetupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOrderSourceItemSetupValidateBeforeCall(Integer orderSourceItemSetupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceItemSetupId' is set
        if (orderSourceItemSetupId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceItemSetupId' when calling deleteOrderSourceItemSetup(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOrderSourceItemSetupCall(orderSourceItemSetupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an orderSourceItemSetup
     * Deletes the orderSourceItemSetup identified by the specified id.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteOrderSourceItemSetup(Integer orderSourceItemSetupId) throws ApiException {
        deleteOrderSourceItemSetupWithHttpInfo(orderSourceItemSetupId);
    }

    /**
     * Delete an orderSourceItemSetup
     * Deletes the orderSourceItemSetup identified by the specified id.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteOrderSourceItemSetupWithHttpInfo(Integer orderSourceItemSetupId) throws ApiException {
        com.squareup.okhttp.Call call = deleteOrderSourceItemSetupValidateBeforeCall(orderSourceItemSetupId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an orderSourceItemSetup (asynchronously)
     * Deletes the orderSourceItemSetup identified by the specified id.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOrderSourceItemSetupAsync(Integer orderSourceItemSetupId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOrderSourceItemSetupValidateBeforeCall(orderSourceItemSetupId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteOrderSourceItemSetupFile
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOrderSourceItemSetupFileCall(Integer orderSourceItemSetupId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}/file/{fileId}"
            .replaceAll("\\{" + "orderSourceItemSetupId" + "\\}", apiClient.escapeString(orderSourceItemSetupId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOrderSourceItemSetupFileValidateBeforeCall(Integer orderSourceItemSetupId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceItemSetupId' is set
        if (orderSourceItemSetupId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceItemSetupId' when calling deleteOrderSourceItemSetupFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteOrderSourceItemSetupFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOrderSourceItemSetupFileCall(orderSourceItemSetupId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for an orderSourceItemSetup.
     * Deletes an existing orderSourceItemSetup file using the specified data.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteOrderSourceItemSetupFile(Integer orderSourceItemSetupId, Integer fileId) throws ApiException {
        deleteOrderSourceItemSetupFileWithHttpInfo(orderSourceItemSetupId, fileId);
    }

    /**
     * Delete a file for an orderSourceItemSetup.
     * Deletes an existing orderSourceItemSetup file using the specified data.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteOrderSourceItemSetupFileWithHttpInfo(Integer orderSourceItemSetupId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteOrderSourceItemSetupFileValidateBeforeCall(orderSourceItemSetupId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for an orderSourceItemSetup. (asynchronously)
     * Deletes an existing orderSourceItemSetup file using the specified data.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOrderSourceItemSetupFileAsync(Integer orderSourceItemSetupId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOrderSourceItemSetupFileValidateBeforeCall(orderSourceItemSetupId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteOrderSourceItemSetupTag
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to remove tag from (required)
     * @param orderSourceItemSetupTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOrderSourceItemSetupTagCall(Integer orderSourceItemSetupId, String orderSourceItemSetupTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}/tag/{orderSourceItemSetupTag}"
            .replaceAll("\\{" + "orderSourceItemSetupId" + "\\}", apiClient.escapeString(orderSourceItemSetupId.toString()))
            .replaceAll("\\{" + "orderSourceItemSetupTag" + "\\}", apiClient.escapeString(orderSourceItemSetupTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOrderSourceItemSetupTagValidateBeforeCall(Integer orderSourceItemSetupId, String orderSourceItemSetupTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceItemSetupId' is set
        if (orderSourceItemSetupId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceItemSetupId' when calling deleteOrderSourceItemSetupTag(Async)");
        }
        
        // verify the required parameter 'orderSourceItemSetupTag' is set
        if (orderSourceItemSetupTag == null) {
            throw new ApiException("Missing the required parameter 'orderSourceItemSetupTag' when calling deleteOrderSourceItemSetupTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOrderSourceItemSetupTagCall(orderSourceItemSetupId, orderSourceItemSetupTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for an orderSourceItemSetup.
     * Deletes an existing orderSourceItemSetup tag using the specified data.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to remove tag from (required)
     * @param orderSourceItemSetupTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteOrderSourceItemSetupTag(Integer orderSourceItemSetupId, String orderSourceItemSetupTag) throws ApiException {
        deleteOrderSourceItemSetupTagWithHttpInfo(orderSourceItemSetupId, orderSourceItemSetupTag);
    }

    /**
     * Delete a tag for an orderSourceItemSetup.
     * Deletes an existing orderSourceItemSetup tag using the specified data.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to remove tag from (required)
     * @param orderSourceItemSetupTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteOrderSourceItemSetupTagWithHttpInfo(Integer orderSourceItemSetupId, String orderSourceItemSetupTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteOrderSourceItemSetupTagValidateBeforeCall(orderSourceItemSetupId, orderSourceItemSetupTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for an orderSourceItemSetup. (asynchronously)
     * Deletes an existing orderSourceItemSetup tag using the specified data.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to remove tag from (required)
     * @param orderSourceItemSetupTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOrderSourceItemSetupTagAsync(Integer orderSourceItemSetupId, String orderSourceItemSetupTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOrderSourceItemSetupTagValidateBeforeCall(orderSourceItemSetupId, orderSourceItemSetupTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateOrderSourceItemSetupById
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateOrderSourceItemSetupByIdCall(Integer orderSourceItemSetupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceItemSetup/duplicate/{orderSourceItemSetupId}"
            .replaceAll("\\{" + "orderSourceItemSetupId" + "\\}", apiClient.escapeString(orderSourceItemSetupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateOrderSourceItemSetupByIdValidateBeforeCall(Integer orderSourceItemSetupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceItemSetupId' is set
        if (orderSourceItemSetupId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceItemSetupId' when calling getDuplicateOrderSourceItemSetupById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateOrderSourceItemSetupByIdCall(orderSourceItemSetupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated an orderSourceItemSetup by id
     * Returns a duplicated orderSourceItemSetup identified by the specified id.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to be duplicated. (required)
     * @return OrderSourceItemSetup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderSourceItemSetup getDuplicateOrderSourceItemSetupById(Integer orderSourceItemSetupId) throws ApiException {
        ApiResponse<OrderSourceItemSetup> resp = getDuplicateOrderSourceItemSetupByIdWithHttpInfo(orderSourceItemSetupId);
        return resp.getData();
    }

    /**
     * Get a duplicated an orderSourceItemSetup by id
     * Returns a duplicated orderSourceItemSetup identified by the specified id.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to be duplicated. (required)
     * @return ApiResponse&lt;OrderSourceItemSetup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderSourceItemSetup> getDuplicateOrderSourceItemSetupByIdWithHttpInfo(Integer orderSourceItemSetupId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateOrderSourceItemSetupByIdValidateBeforeCall(orderSourceItemSetupId, null, null);
        Type localVarReturnType = new TypeToken<OrderSourceItemSetup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated an orderSourceItemSetup by id (asynchronously)
     * Returns a duplicated orderSourceItemSetup identified by the specified id.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateOrderSourceItemSetupByIdAsync(Integer orderSourceItemSetupId, final ApiCallback<OrderSourceItemSetup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateOrderSourceItemSetupByIdValidateBeforeCall(orderSourceItemSetupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderSourceItemSetup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderSourceItemSetupByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderSourceItemSetupByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceItemSetup/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderSourceItemSetupByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getOrderSourceItemSetupByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search orderSourceItemSetups by filter
     * Returns the list of orderSourceItemSetups that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;OrderSourceItemSetup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OrderSourceItemSetup> getOrderSourceItemSetupByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<OrderSourceItemSetup>> resp = getOrderSourceItemSetupByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search orderSourceItemSetups by filter
     * Returns the list of orderSourceItemSetups that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;OrderSourceItemSetup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OrderSourceItemSetup>> getOrderSourceItemSetupByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getOrderSourceItemSetupByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<OrderSourceItemSetup>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search orderSourceItemSetups by filter (asynchronously)
     * Returns the list of orderSourceItemSetups that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderSourceItemSetupByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<OrderSourceItemSetup>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderSourceItemSetupByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OrderSourceItemSetup>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderSourceItemSetupById
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderSourceItemSetupByIdCall(Integer orderSourceItemSetupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}"
            .replaceAll("\\{" + "orderSourceItemSetupId" + "\\}", apiClient.escapeString(orderSourceItemSetupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderSourceItemSetupByIdValidateBeforeCall(Integer orderSourceItemSetupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceItemSetupId' is set
        if (orderSourceItemSetupId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceItemSetupId' when calling getOrderSourceItemSetupById(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderSourceItemSetupByIdCall(orderSourceItemSetupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an orderSourceItemSetup by id
     * Returns the orderSourceItemSetup identified by the specified id.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to be returned. (required)
     * @return OrderSourceItemSetup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderSourceItemSetup getOrderSourceItemSetupById(Integer orderSourceItemSetupId) throws ApiException {
        ApiResponse<OrderSourceItemSetup> resp = getOrderSourceItemSetupByIdWithHttpInfo(orderSourceItemSetupId);
        return resp.getData();
    }

    /**
     * Get an orderSourceItemSetup by id
     * Returns the orderSourceItemSetup identified by the specified id.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to be returned. (required)
     * @return ApiResponse&lt;OrderSourceItemSetup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderSourceItemSetup> getOrderSourceItemSetupByIdWithHttpInfo(Integer orderSourceItemSetupId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderSourceItemSetupByIdValidateBeforeCall(orderSourceItemSetupId, null, null);
        Type localVarReturnType = new TypeToken<OrderSourceItemSetup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an orderSourceItemSetup by id (asynchronously)
     * Returns the orderSourceItemSetup identified by the specified id.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderSourceItemSetupByIdAsync(Integer orderSourceItemSetupId, final ApiCallback<OrderSourceItemSetup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderSourceItemSetupByIdValidateBeforeCall(orderSourceItemSetupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderSourceItemSetup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderSourceItemSetupFiles
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderSourceItemSetupFilesCall(Integer orderSourceItemSetupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}/file"
            .replaceAll("\\{" + "orderSourceItemSetupId" + "\\}", apiClient.escapeString(orderSourceItemSetupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderSourceItemSetupFilesValidateBeforeCall(Integer orderSourceItemSetupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceItemSetupId' is set
        if (orderSourceItemSetupId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceItemSetupId' when calling getOrderSourceItemSetupFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderSourceItemSetupFilesCall(orderSourceItemSetupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for an orderSourceItemSetup.
     * Get all existing orderSourceItemSetup files.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getOrderSourceItemSetupFiles(Integer orderSourceItemSetupId) throws ApiException {
        getOrderSourceItemSetupFilesWithHttpInfo(orderSourceItemSetupId);
    }

    /**
     * Get the files for an orderSourceItemSetup.
     * Get all existing orderSourceItemSetup files.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getOrderSourceItemSetupFilesWithHttpInfo(Integer orderSourceItemSetupId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderSourceItemSetupFilesValidateBeforeCall(orderSourceItemSetupId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for an orderSourceItemSetup. (asynchronously)
     * Get all existing orderSourceItemSetup files.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderSourceItemSetupFilesAsync(Integer orderSourceItemSetupId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderSourceItemSetupFilesValidateBeforeCall(orderSourceItemSetupId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getOrderSourceItemSetupTags
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderSourceItemSetupTagsCall(Integer orderSourceItemSetupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceItemSetup/{orderSourceItemSetupId}/tag"
            .replaceAll("\\{" + "orderSourceItemSetupId" + "\\}", apiClient.escapeString(orderSourceItemSetupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderSourceItemSetupTagsValidateBeforeCall(Integer orderSourceItemSetupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceItemSetupId' is set
        if (orderSourceItemSetupId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceItemSetupId' when calling getOrderSourceItemSetupTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderSourceItemSetupTagsCall(orderSourceItemSetupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for an orderSourceItemSetup.
     * Get all existing orderSourceItemSetup tags.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getOrderSourceItemSetupTags(Integer orderSourceItemSetupId) throws ApiException {
        getOrderSourceItemSetupTagsWithHttpInfo(orderSourceItemSetupId);
    }

    /**
     * Get the tags for an orderSourceItemSetup.
     * Get all existing orderSourceItemSetup tags.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getOrderSourceItemSetupTagsWithHttpInfo(Integer orderSourceItemSetupId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderSourceItemSetupTagsValidateBeforeCall(orderSourceItemSetupId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for an orderSourceItemSetup. (asynchronously)
     * Get all existing orderSourceItemSetup tags.
     * @param orderSourceItemSetupId Id of the orderSourceItemSetup to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderSourceItemSetupTagsAsync(Integer orderSourceItemSetupId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderSourceItemSetupTagsValidateBeforeCall(orderSourceItemSetupId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateOrderSourceItemSetup
     * @param body OrderSourceItemSetup to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateOrderSourceItemSetupCall(OrderSourceItemSetup body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/orderSourceItemSetup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOrderSourceItemSetupValidateBeforeCall(OrderSourceItemSetup body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateOrderSourceItemSetup(Async)");
        }
        

        com.squareup.okhttp.Call call = updateOrderSourceItemSetupCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an orderSourceItemSetup
     * Updates an existing orderSourceItemSetup using the specified data.
     * @param body OrderSourceItemSetup to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateOrderSourceItemSetup(OrderSourceItemSetup body) throws ApiException {
        updateOrderSourceItemSetupWithHttpInfo(body);
    }

    /**
     * Update an orderSourceItemSetup
     * Updates an existing orderSourceItemSetup using the specified data.
     * @param body OrderSourceItemSetup to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateOrderSourceItemSetupWithHttpInfo(OrderSourceItemSetup body) throws ApiException {
        com.squareup.okhttp.Call call = updateOrderSourceItemSetupValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an orderSourceItemSetup (asynchronously)
     * Updates an existing orderSourceItemSetup using the specified data.
     * @param body OrderSourceItemSetup to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOrderSourceItemSetupAsync(OrderSourceItemSetup body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOrderSourceItemSetupValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateOrderSourceItemSetupCustomFields
     * @param body OrderSourceItemSetup to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateOrderSourceItemSetupCustomFieldsCall(OrderSourceItemSetup body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/orderSourceItemSetup/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOrderSourceItemSetupCustomFieldsValidateBeforeCall(OrderSourceItemSetup body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateOrderSourceItemSetupCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateOrderSourceItemSetupCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an orderSourceItemSetup custom fields
     * Updates an existing orderSourceItemSetup custom fields using the specified data.
     * @param body OrderSourceItemSetup to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateOrderSourceItemSetupCustomFields(OrderSourceItemSetup body) throws ApiException {
        updateOrderSourceItemSetupCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update an orderSourceItemSetup custom fields
     * Updates an existing orderSourceItemSetup custom fields using the specified data.
     * @param body OrderSourceItemSetup to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateOrderSourceItemSetupCustomFieldsWithHttpInfo(OrderSourceItemSetup body) throws ApiException {
        com.squareup.okhttp.Call call = updateOrderSourceItemSetupCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an orderSourceItemSetup custom fields (asynchronously)
     * Updates an existing orderSourceItemSetup custom fields using the specified data.
     * @param body OrderSourceItemSetup to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOrderSourceItemSetupCustomFieldsAsync(OrderSourceItemSetup body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOrderSourceItemSetupCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
