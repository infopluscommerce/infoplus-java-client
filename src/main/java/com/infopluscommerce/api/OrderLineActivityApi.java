/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.OrderLineActivity;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrderLineActivityApi {
    private ApiClient apiClient;

    public OrderLineActivityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrderLineActivityApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addOrderLineActivity
     * @param body OrderLineActivity to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrderLineActivityCall(OrderLineActivity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/orderLineActivity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOrderLineActivityValidateBeforeCall(OrderLineActivity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addOrderLineActivity(Async)");
        }
        

        com.squareup.okhttp.Call call = addOrderLineActivityCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an orderLineActivity
     * Inserts a new orderLineActivity using the specified data.
     * @param body OrderLineActivity to be inserted. (required)
     * @return OrderLineActivity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderLineActivity addOrderLineActivity(OrderLineActivity body) throws ApiException {
        ApiResponse<OrderLineActivity> resp = addOrderLineActivityWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create an orderLineActivity
     * Inserts a new orderLineActivity using the specified data.
     * @param body OrderLineActivity to be inserted. (required)
     * @return ApiResponse&lt;OrderLineActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderLineActivity> addOrderLineActivityWithHttpInfo(OrderLineActivity body) throws ApiException {
        com.squareup.okhttp.Call call = addOrderLineActivityValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<OrderLineActivity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an orderLineActivity (asynchronously)
     * Inserts a new orderLineActivity using the specified data.
     * @param body OrderLineActivity to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrderLineActivityAsync(OrderLineActivity body, final ApiCallback<OrderLineActivity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrderLineActivityValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderLineActivity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addOrderLineActivityAudit
     * @param orderLineActivityId Id of the orderLineActivity to add an audit to (required)
     * @param orderLineActivityAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrderLineActivityAuditCall(Integer orderLineActivityId, String orderLineActivityAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderLineActivity/{orderLineActivityId}/audit/{orderLineActivityAudit}"
            .replaceAll("\\{" + "orderLineActivityId" + "\\}", apiClient.escapeString(orderLineActivityId.toString()))
            .replaceAll("\\{" + "orderLineActivityAudit" + "\\}", apiClient.escapeString(orderLineActivityAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOrderLineActivityAuditValidateBeforeCall(Integer orderLineActivityId, String orderLineActivityAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderLineActivityId' is set
        if (orderLineActivityId == null) {
            throw new ApiException("Missing the required parameter 'orderLineActivityId' when calling addOrderLineActivityAudit(Async)");
        }
        
        // verify the required parameter 'orderLineActivityAudit' is set
        if (orderLineActivityAudit == null) {
            throw new ApiException("Missing the required parameter 'orderLineActivityAudit' when calling addOrderLineActivityAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addOrderLineActivityAuditCall(orderLineActivityId, orderLineActivityAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for an orderLineActivity
     * Adds an audit to an existing orderLineActivity.
     * @param orderLineActivityId Id of the orderLineActivity to add an audit to (required)
     * @param orderLineActivityAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOrderLineActivityAudit(Integer orderLineActivityId, String orderLineActivityAudit) throws ApiException {
        addOrderLineActivityAuditWithHttpInfo(orderLineActivityId, orderLineActivityAudit);
    }

    /**
     * Add new audit for an orderLineActivity
     * Adds an audit to an existing orderLineActivity.
     * @param orderLineActivityId Id of the orderLineActivity to add an audit to (required)
     * @param orderLineActivityAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOrderLineActivityAuditWithHttpInfo(Integer orderLineActivityId, String orderLineActivityAudit) throws ApiException {
        com.squareup.okhttp.Call call = addOrderLineActivityAuditValidateBeforeCall(orderLineActivityId, orderLineActivityAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for an orderLineActivity (asynchronously)
     * Adds an audit to an existing orderLineActivity.
     * @param orderLineActivityId Id of the orderLineActivity to add an audit to (required)
     * @param orderLineActivityAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrderLineActivityAuditAsync(Integer orderLineActivityId, String orderLineActivityAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrderLineActivityAuditValidateBeforeCall(orderLineActivityId, orderLineActivityAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addOrderLineActivityFile
     * @param orderLineActivityId Id of the orderLineActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrderLineActivityFileCall(Integer orderLineActivityId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderLineActivity/{orderLineActivityId}/file/{fileName}"
            .replaceAll("\\{" + "orderLineActivityId" + "\\}", apiClient.escapeString(orderLineActivityId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOrderLineActivityFileValidateBeforeCall(Integer orderLineActivityId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderLineActivityId' is set
        if (orderLineActivityId == null) {
            throw new ApiException("Missing the required parameter 'orderLineActivityId' when calling addOrderLineActivityFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addOrderLineActivityFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addOrderLineActivityFileCall(orderLineActivityId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an orderLineActivity
     * Adds a file to an existing orderLineActivity.
     * @param orderLineActivityId Id of the orderLineActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOrderLineActivityFile(Integer orderLineActivityId, String fileName) throws ApiException {
        addOrderLineActivityFileWithHttpInfo(orderLineActivityId, fileName);
    }

    /**
     * Attach a file to an orderLineActivity
     * Adds a file to an existing orderLineActivity.
     * @param orderLineActivityId Id of the orderLineActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOrderLineActivityFileWithHttpInfo(Integer orderLineActivityId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addOrderLineActivityFileValidateBeforeCall(orderLineActivityId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an orderLineActivity (asynchronously)
     * Adds a file to an existing orderLineActivity.
     * @param orderLineActivityId Id of the orderLineActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrderLineActivityFileAsync(Integer orderLineActivityId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrderLineActivityFileValidateBeforeCall(orderLineActivityId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addOrderLineActivityFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param orderLineActivityId Id of the orderLineActivity to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrderLineActivityFileByURLCall(RecordFile body, Integer orderLineActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/orderLineActivity/{orderLineActivityId}/file"
            .replaceAll("\\{" + "orderLineActivityId" + "\\}", apiClient.escapeString(orderLineActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOrderLineActivityFileByURLValidateBeforeCall(RecordFile body, Integer orderLineActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addOrderLineActivityFileByURL(Async)");
        }
        
        // verify the required parameter 'orderLineActivityId' is set
        if (orderLineActivityId == null) {
            throw new ApiException("Missing the required parameter 'orderLineActivityId' when calling addOrderLineActivityFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addOrderLineActivityFileByURLCall(body, orderLineActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an orderLineActivity by URL.
     * Adds a file to an existing orderLineActivity by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param orderLineActivityId Id of the orderLineActivity to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOrderLineActivityFileByURL(RecordFile body, Integer orderLineActivityId) throws ApiException {
        addOrderLineActivityFileByURLWithHttpInfo(body, orderLineActivityId);
    }

    /**
     * Attach a file to an orderLineActivity by URL.
     * Adds a file to an existing orderLineActivity by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param orderLineActivityId Id of the orderLineActivity to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOrderLineActivityFileByURLWithHttpInfo(RecordFile body, Integer orderLineActivityId) throws ApiException {
        com.squareup.okhttp.Call call = addOrderLineActivityFileByURLValidateBeforeCall(body, orderLineActivityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an orderLineActivity by URL. (asynchronously)
     * Adds a file to an existing orderLineActivity by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param orderLineActivityId Id of the orderLineActivity to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrderLineActivityFileByURLAsync(RecordFile body, Integer orderLineActivityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrderLineActivityFileByURLValidateBeforeCall(body, orderLineActivityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addOrderLineActivityTag
     * @param orderLineActivityId Id of the orderLineActivity to add a tag to (required)
     * @param orderLineActivityTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrderLineActivityTagCall(Integer orderLineActivityId, String orderLineActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderLineActivity/{orderLineActivityId}/tag/{orderLineActivityTag}"
            .replaceAll("\\{" + "orderLineActivityId" + "\\}", apiClient.escapeString(orderLineActivityId.toString()))
            .replaceAll("\\{" + "orderLineActivityTag" + "\\}", apiClient.escapeString(orderLineActivityTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOrderLineActivityTagValidateBeforeCall(Integer orderLineActivityId, String orderLineActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderLineActivityId' is set
        if (orderLineActivityId == null) {
            throw new ApiException("Missing the required parameter 'orderLineActivityId' when calling addOrderLineActivityTag(Async)");
        }
        
        // verify the required parameter 'orderLineActivityTag' is set
        if (orderLineActivityTag == null) {
            throw new ApiException("Missing the required parameter 'orderLineActivityTag' when calling addOrderLineActivityTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addOrderLineActivityTagCall(orderLineActivityId, orderLineActivityTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for an orderLineActivity.
     * Adds a tag to an existing orderLineActivity.
     * @param orderLineActivityId Id of the orderLineActivity to add a tag to (required)
     * @param orderLineActivityTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOrderLineActivityTag(Integer orderLineActivityId, String orderLineActivityTag) throws ApiException {
        addOrderLineActivityTagWithHttpInfo(orderLineActivityId, orderLineActivityTag);
    }

    /**
     * Add new tags for an orderLineActivity.
     * Adds a tag to an existing orderLineActivity.
     * @param orderLineActivityId Id of the orderLineActivity to add a tag to (required)
     * @param orderLineActivityTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOrderLineActivityTagWithHttpInfo(Integer orderLineActivityId, String orderLineActivityTag) throws ApiException {
        com.squareup.okhttp.Call call = addOrderLineActivityTagValidateBeforeCall(orderLineActivityId, orderLineActivityTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for an orderLineActivity. (asynchronously)
     * Adds a tag to an existing orderLineActivity.
     * @param orderLineActivityId Id of the orderLineActivity to add a tag to (required)
     * @param orderLineActivityTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrderLineActivityTagAsync(Integer orderLineActivityId, String orderLineActivityTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrderLineActivityTagValidateBeforeCall(orderLineActivityId, orderLineActivityTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteOrderLineActivity
     * @param orderLineActivityId Id of the orderLineActivity to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOrderLineActivityCall(Integer orderLineActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderLineActivity/{orderLineActivityId}"
            .replaceAll("\\{" + "orderLineActivityId" + "\\}", apiClient.escapeString(orderLineActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOrderLineActivityValidateBeforeCall(Integer orderLineActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderLineActivityId' is set
        if (orderLineActivityId == null) {
            throw new ApiException("Missing the required parameter 'orderLineActivityId' when calling deleteOrderLineActivity(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOrderLineActivityCall(orderLineActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an orderLineActivity
     * Deletes the orderLineActivity identified by the specified id.
     * @param orderLineActivityId Id of the orderLineActivity to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteOrderLineActivity(Integer orderLineActivityId) throws ApiException {
        deleteOrderLineActivityWithHttpInfo(orderLineActivityId);
    }

    /**
     * Delete an orderLineActivity
     * Deletes the orderLineActivity identified by the specified id.
     * @param orderLineActivityId Id of the orderLineActivity to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteOrderLineActivityWithHttpInfo(Integer orderLineActivityId) throws ApiException {
        com.squareup.okhttp.Call call = deleteOrderLineActivityValidateBeforeCall(orderLineActivityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an orderLineActivity (asynchronously)
     * Deletes the orderLineActivity identified by the specified id.
     * @param orderLineActivityId Id of the orderLineActivity to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOrderLineActivityAsync(Integer orderLineActivityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOrderLineActivityValidateBeforeCall(orderLineActivityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteOrderLineActivityFile
     * @param orderLineActivityId Id of the orderLineActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOrderLineActivityFileCall(Integer orderLineActivityId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderLineActivity/{orderLineActivityId}/file/{fileId}"
            .replaceAll("\\{" + "orderLineActivityId" + "\\}", apiClient.escapeString(orderLineActivityId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOrderLineActivityFileValidateBeforeCall(Integer orderLineActivityId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderLineActivityId' is set
        if (orderLineActivityId == null) {
            throw new ApiException("Missing the required parameter 'orderLineActivityId' when calling deleteOrderLineActivityFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteOrderLineActivityFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOrderLineActivityFileCall(orderLineActivityId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for an orderLineActivity.
     * Deletes an existing orderLineActivity file using the specified data.
     * @param orderLineActivityId Id of the orderLineActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteOrderLineActivityFile(Integer orderLineActivityId, Integer fileId) throws ApiException {
        deleteOrderLineActivityFileWithHttpInfo(orderLineActivityId, fileId);
    }

    /**
     * Delete a file for an orderLineActivity.
     * Deletes an existing orderLineActivity file using the specified data.
     * @param orderLineActivityId Id of the orderLineActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteOrderLineActivityFileWithHttpInfo(Integer orderLineActivityId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteOrderLineActivityFileValidateBeforeCall(orderLineActivityId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for an orderLineActivity. (asynchronously)
     * Deletes an existing orderLineActivity file using the specified data.
     * @param orderLineActivityId Id of the orderLineActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOrderLineActivityFileAsync(Integer orderLineActivityId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOrderLineActivityFileValidateBeforeCall(orderLineActivityId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteOrderLineActivityTag
     * @param orderLineActivityId Id of the orderLineActivity to remove tag from (required)
     * @param orderLineActivityTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOrderLineActivityTagCall(Integer orderLineActivityId, String orderLineActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderLineActivity/{orderLineActivityId}/tag/{orderLineActivityTag}"
            .replaceAll("\\{" + "orderLineActivityId" + "\\}", apiClient.escapeString(orderLineActivityId.toString()))
            .replaceAll("\\{" + "orderLineActivityTag" + "\\}", apiClient.escapeString(orderLineActivityTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOrderLineActivityTagValidateBeforeCall(Integer orderLineActivityId, String orderLineActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderLineActivityId' is set
        if (orderLineActivityId == null) {
            throw new ApiException("Missing the required parameter 'orderLineActivityId' when calling deleteOrderLineActivityTag(Async)");
        }
        
        // verify the required parameter 'orderLineActivityTag' is set
        if (orderLineActivityTag == null) {
            throw new ApiException("Missing the required parameter 'orderLineActivityTag' when calling deleteOrderLineActivityTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOrderLineActivityTagCall(orderLineActivityId, orderLineActivityTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for an orderLineActivity.
     * Deletes an existing orderLineActivity tag using the specified data.
     * @param orderLineActivityId Id of the orderLineActivity to remove tag from (required)
     * @param orderLineActivityTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteOrderLineActivityTag(Integer orderLineActivityId, String orderLineActivityTag) throws ApiException {
        deleteOrderLineActivityTagWithHttpInfo(orderLineActivityId, orderLineActivityTag);
    }

    /**
     * Delete a tag for an orderLineActivity.
     * Deletes an existing orderLineActivity tag using the specified data.
     * @param orderLineActivityId Id of the orderLineActivity to remove tag from (required)
     * @param orderLineActivityTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteOrderLineActivityTagWithHttpInfo(Integer orderLineActivityId, String orderLineActivityTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteOrderLineActivityTagValidateBeforeCall(orderLineActivityId, orderLineActivityTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for an orderLineActivity. (asynchronously)
     * Deletes an existing orderLineActivity tag using the specified data.
     * @param orderLineActivityId Id of the orderLineActivity to remove tag from (required)
     * @param orderLineActivityTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOrderLineActivityTagAsync(Integer orderLineActivityId, String orderLineActivityTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOrderLineActivityTagValidateBeforeCall(orderLineActivityId, orderLineActivityTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateOrderLineActivityById
     * @param orderLineActivityId Id of the orderLineActivity to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateOrderLineActivityByIdCall(Integer orderLineActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderLineActivity/duplicate/{orderLineActivityId}"
            .replaceAll("\\{" + "orderLineActivityId" + "\\}", apiClient.escapeString(orderLineActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateOrderLineActivityByIdValidateBeforeCall(Integer orderLineActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderLineActivityId' is set
        if (orderLineActivityId == null) {
            throw new ApiException("Missing the required parameter 'orderLineActivityId' when calling getDuplicateOrderLineActivityById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateOrderLineActivityByIdCall(orderLineActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated an orderLineActivity by id
     * Returns a duplicated orderLineActivity identified by the specified id.
     * @param orderLineActivityId Id of the orderLineActivity to be duplicated. (required)
     * @return OrderLineActivity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderLineActivity getDuplicateOrderLineActivityById(Integer orderLineActivityId) throws ApiException {
        ApiResponse<OrderLineActivity> resp = getDuplicateOrderLineActivityByIdWithHttpInfo(orderLineActivityId);
        return resp.getData();
    }

    /**
     * Get a duplicated an orderLineActivity by id
     * Returns a duplicated orderLineActivity identified by the specified id.
     * @param orderLineActivityId Id of the orderLineActivity to be duplicated. (required)
     * @return ApiResponse&lt;OrderLineActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderLineActivity> getDuplicateOrderLineActivityByIdWithHttpInfo(Integer orderLineActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateOrderLineActivityByIdValidateBeforeCall(orderLineActivityId, null, null);
        Type localVarReturnType = new TypeToken<OrderLineActivity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated an orderLineActivity by id (asynchronously)
     * Returns a duplicated orderLineActivity identified by the specified id.
     * @param orderLineActivityId Id of the orderLineActivity to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateOrderLineActivityByIdAsync(Integer orderLineActivityId, final ApiCallback<OrderLineActivity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateOrderLineActivityByIdValidateBeforeCall(orderLineActivityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderLineActivity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderLineActivityByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderLineActivityByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderLineActivity/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderLineActivityByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getOrderLineActivityByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search orderLineActivitys by filter
     * Returns the list of orderLineActivitys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;OrderLineActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OrderLineActivity> getOrderLineActivityByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<OrderLineActivity>> resp = getOrderLineActivityByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search orderLineActivitys by filter
     * Returns the list of orderLineActivitys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;OrderLineActivity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OrderLineActivity>> getOrderLineActivityByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getOrderLineActivityByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<OrderLineActivity>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search orderLineActivitys by filter (asynchronously)
     * Returns the list of orderLineActivitys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderLineActivityByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<OrderLineActivity>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderLineActivityByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OrderLineActivity>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderLineActivityById
     * @param orderLineActivityId Id of the orderLineActivity to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderLineActivityByIdCall(Integer orderLineActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderLineActivity/{orderLineActivityId}"
            .replaceAll("\\{" + "orderLineActivityId" + "\\}", apiClient.escapeString(orderLineActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderLineActivityByIdValidateBeforeCall(Integer orderLineActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderLineActivityId' is set
        if (orderLineActivityId == null) {
            throw new ApiException("Missing the required parameter 'orderLineActivityId' when calling getOrderLineActivityById(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderLineActivityByIdCall(orderLineActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an orderLineActivity by id
     * Returns the orderLineActivity identified by the specified id.
     * @param orderLineActivityId Id of the orderLineActivity to be returned. (required)
     * @return OrderLineActivity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderLineActivity getOrderLineActivityById(Integer orderLineActivityId) throws ApiException {
        ApiResponse<OrderLineActivity> resp = getOrderLineActivityByIdWithHttpInfo(orderLineActivityId);
        return resp.getData();
    }

    /**
     * Get an orderLineActivity by id
     * Returns the orderLineActivity identified by the specified id.
     * @param orderLineActivityId Id of the orderLineActivity to be returned. (required)
     * @return ApiResponse&lt;OrderLineActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderLineActivity> getOrderLineActivityByIdWithHttpInfo(Integer orderLineActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderLineActivityByIdValidateBeforeCall(orderLineActivityId, null, null);
        Type localVarReturnType = new TypeToken<OrderLineActivity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an orderLineActivity by id (asynchronously)
     * Returns the orderLineActivity identified by the specified id.
     * @param orderLineActivityId Id of the orderLineActivity to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderLineActivityByIdAsync(Integer orderLineActivityId, final ApiCallback<OrderLineActivity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderLineActivityByIdValidateBeforeCall(orderLineActivityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderLineActivity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderLineActivityFiles
     * @param orderLineActivityId Id of the orderLineActivity to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderLineActivityFilesCall(Integer orderLineActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderLineActivity/{orderLineActivityId}/file"
            .replaceAll("\\{" + "orderLineActivityId" + "\\}", apiClient.escapeString(orderLineActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderLineActivityFilesValidateBeforeCall(Integer orderLineActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderLineActivityId' is set
        if (orderLineActivityId == null) {
            throw new ApiException("Missing the required parameter 'orderLineActivityId' when calling getOrderLineActivityFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderLineActivityFilesCall(orderLineActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for an orderLineActivity.
     * Get all existing orderLineActivity files.
     * @param orderLineActivityId Id of the orderLineActivity to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getOrderLineActivityFiles(Integer orderLineActivityId) throws ApiException {
        getOrderLineActivityFilesWithHttpInfo(orderLineActivityId);
    }

    /**
     * Get the files for an orderLineActivity.
     * Get all existing orderLineActivity files.
     * @param orderLineActivityId Id of the orderLineActivity to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getOrderLineActivityFilesWithHttpInfo(Integer orderLineActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderLineActivityFilesValidateBeforeCall(orderLineActivityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for an orderLineActivity. (asynchronously)
     * Get all existing orderLineActivity files.
     * @param orderLineActivityId Id of the orderLineActivity to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderLineActivityFilesAsync(Integer orderLineActivityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderLineActivityFilesValidateBeforeCall(orderLineActivityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getOrderLineActivityTags
     * @param orderLineActivityId Id of the orderLineActivity to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderLineActivityTagsCall(Integer orderLineActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderLineActivity/{orderLineActivityId}/tag"
            .replaceAll("\\{" + "orderLineActivityId" + "\\}", apiClient.escapeString(orderLineActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderLineActivityTagsValidateBeforeCall(Integer orderLineActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderLineActivityId' is set
        if (orderLineActivityId == null) {
            throw new ApiException("Missing the required parameter 'orderLineActivityId' when calling getOrderLineActivityTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderLineActivityTagsCall(orderLineActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for an orderLineActivity.
     * Get all existing orderLineActivity tags.
     * @param orderLineActivityId Id of the orderLineActivity to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getOrderLineActivityTags(Integer orderLineActivityId) throws ApiException {
        getOrderLineActivityTagsWithHttpInfo(orderLineActivityId);
    }

    /**
     * Get the tags for an orderLineActivity.
     * Get all existing orderLineActivity tags.
     * @param orderLineActivityId Id of the orderLineActivity to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getOrderLineActivityTagsWithHttpInfo(Integer orderLineActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderLineActivityTagsValidateBeforeCall(orderLineActivityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for an orderLineActivity. (asynchronously)
     * Get all existing orderLineActivity tags.
     * @param orderLineActivityId Id of the orderLineActivity to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderLineActivityTagsAsync(Integer orderLineActivityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderLineActivityTagsValidateBeforeCall(orderLineActivityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateOrderLineActivity
     * @param body OrderLineActivity to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateOrderLineActivityCall(OrderLineActivity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/orderLineActivity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOrderLineActivityValidateBeforeCall(OrderLineActivity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateOrderLineActivity(Async)");
        }
        

        com.squareup.okhttp.Call call = updateOrderLineActivityCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an orderLineActivity
     * Updates an existing orderLineActivity using the specified data.
     * @param body OrderLineActivity to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateOrderLineActivity(OrderLineActivity body) throws ApiException {
        updateOrderLineActivityWithHttpInfo(body);
    }

    /**
     * Update an orderLineActivity
     * Updates an existing orderLineActivity using the specified data.
     * @param body OrderLineActivity to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateOrderLineActivityWithHttpInfo(OrderLineActivity body) throws ApiException {
        com.squareup.okhttp.Call call = updateOrderLineActivityValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an orderLineActivity (asynchronously)
     * Updates an existing orderLineActivity using the specified data.
     * @param body OrderLineActivity to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOrderLineActivityAsync(OrderLineActivity body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOrderLineActivityValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
