/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.JobTimeActivity;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JobTimeActivityApi {
    private ApiClient apiClient;

    public JobTimeActivityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JobTimeActivityApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addJobTimeActivity
     * @param body JobTimeActivity to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addJobTimeActivityCall(JobTimeActivity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/jobTimeActivity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addJobTimeActivityValidateBeforeCall(JobTimeActivity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addJobTimeActivity(Async)");
        }
        

        com.squareup.okhttp.Call call = addJobTimeActivityCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a jobTimeActivity
     * Inserts a new jobTimeActivity using the specified data.
     * @param body JobTimeActivity to be inserted. (required)
     * @return JobTimeActivity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobTimeActivity addJobTimeActivity(JobTimeActivity body) throws ApiException {
        ApiResponse<JobTimeActivity> resp = addJobTimeActivityWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a jobTimeActivity
     * Inserts a new jobTimeActivity using the specified data.
     * @param body JobTimeActivity to be inserted. (required)
     * @return ApiResponse&lt;JobTimeActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobTimeActivity> addJobTimeActivityWithHttpInfo(JobTimeActivity body) throws ApiException {
        com.squareup.okhttp.Call call = addJobTimeActivityValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<JobTimeActivity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a jobTimeActivity (asynchronously)
     * Inserts a new jobTimeActivity using the specified data.
     * @param body JobTimeActivity to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addJobTimeActivityAsync(JobTimeActivity body, final ApiCallback<JobTimeActivity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addJobTimeActivityValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobTimeActivity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addJobTimeActivityAudit
     * @param jobTimeActivityId Id of the jobTimeActivity to add an audit to (required)
     * @param jobTimeActivityAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addJobTimeActivityAuditCall(Integer jobTimeActivityId, String jobTimeActivityAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobTimeActivity/{jobTimeActivityId}/audit/{jobTimeActivityAudit}"
            .replaceAll("\\{" + "jobTimeActivityId" + "\\}", apiClient.escapeString(jobTimeActivityId.toString()))
            .replaceAll("\\{" + "jobTimeActivityAudit" + "\\}", apiClient.escapeString(jobTimeActivityAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addJobTimeActivityAuditValidateBeforeCall(Integer jobTimeActivityId, String jobTimeActivityAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobTimeActivityId' is set
        if (jobTimeActivityId == null) {
            throw new ApiException("Missing the required parameter 'jobTimeActivityId' when calling addJobTimeActivityAudit(Async)");
        }
        
        // verify the required parameter 'jobTimeActivityAudit' is set
        if (jobTimeActivityAudit == null) {
            throw new ApiException("Missing the required parameter 'jobTimeActivityAudit' when calling addJobTimeActivityAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addJobTimeActivityAuditCall(jobTimeActivityId, jobTimeActivityAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a jobTimeActivity
     * Adds an audit to an existing jobTimeActivity.
     * @param jobTimeActivityId Id of the jobTimeActivity to add an audit to (required)
     * @param jobTimeActivityAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addJobTimeActivityAudit(Integer jobTimeActivityId, String jobTimeActivityAudit) throws ApiException {
        addJobTimeActivityAuditWithHttpInfo(jobTimeActivityId, jobTimeActivityAudit);
    }

    /**
     * Add new audit for a jobTimeActivity
     * Adds an audit to an existing jobTimeActivity.
     * @param jobTimeActivityId Id of the jobTimeActivity to add an audit to (required)
     * @param jobTimeActivityAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addJobTimeActivityAuditWithHttpInfo(Integer jobTimeActivityId, String jobTimeActivityAudit) throws ApiException {
        com.squareup.okhttp.Call call = addJobTimeActivityAuditValidateBeforeCall(jobTimeActivityId, jobTimeActivityAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a jobTimeActivity (asynchronously)
     * Adds an audit to an existing jobTimeActivity.
     * @param jobTimeActivityId Id of the jobTimeActivity to add an audit to (required)
     * @param jobTimeActivityAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addJobTimeActivityAuditAsync(Integer jobTimeActivityId, String jobTimeActivityAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addJobTimeActivityAuditValidateBeforeCall(jobTimeActivityId, jobTimeActivityAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addJobTimeActivityFile
     * @param jobTimeActivityId Id of the jobTimeActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addJobTimeActivityFileCall(Integer jobTimeActivityId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobTimeActivity/{jobTimeActivityId}/file/{fileName}"
            .replaceAll("\\{" + "jobTimeActivityId" + "\\}", apiClient.escapeString(jobTimeActivityId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addJobTimeActivityFileValidateBeforeCall(Integer jobTimeActivityId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobTimeActivityId' is set
        if (jobTimeActivityId == null) {
            throw new ApiException("Missing the required parameter 'jobTimeActivityId' when calling addJobTimeActivityFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addJobTimeActivityFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addJobTimeActivityFileCall(jobTimeActivityId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a jobTimeActivity
     * Adds a file to an existing jobTimeActivity.
     * @param jobTimeActivityId Id of the jobTimeActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addJobTimeActivityFile(Integer jobTimeActivityId, String fileName) throws ApiException {
        addJobTimeActivityFileWithHttpInfo(jobTimeActivityId, fileName);
    }

    /**
     * Attach a file to a jobTimeActivity
     * Adds a file to an existing jobTimeActivity.
     * @param jobTimeActivityId Id of the jobTimeActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addJobTimeActivityFileWithHttpInfo(Integer jobTimeActivityId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addJobTimeActivityFileValidateBeforeCall(jobTimeActivityId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a jobTimeActivity (asynchronously)
     * Adds a file to an existing jobTimeActivity.
     * @param jobTimeActivityId Id of the jobTimeActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addJobTimeActivityFileAsync(Integer jobTimeActivityId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addJobTimeActivityFileValidateBeforeCall(jobTimeActivityId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addJobTimeActivityFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param jobTimeActivityId Id of the jobTimeActivity to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addJobTimeActivityFileByURLCall(RecordFile body, Integer jobTimeActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/jobTimeActivity/{jobTimeActivityId}/file"
            .replaceAll("\\{" + "jobTimeActivityId" + "\\}", apiClient.escapeString(jobTimeActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addJobTimeActivityFileByURLValidateBeforeCall(RecordFile body, Integer jobTimeActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addJobTimeActivityFileByURL(Async)");
        }
        
        // verify the required parameter 'jobTimeActivityId' is set
        if (jobTimeActivityId == null) {
            throw new ApiException("Missing the required parameter 'jobTimeActivityId' when calling addJobTimeActivityFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addJobTimeActivityFileByURLCall(body, jobTimeActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a jobTimeActivity by URL.
     * Adds a file to an existing jobTimeActivity by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param jobTimeActivityId Id of the jobTimeActivity to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addJobTimeActivityFileByURL(RecordFile body, Integer jobTimeActivityId) throws ApiException {
        addJobTimeActivityFileByURLWithHttpInfo(body, jobTimeActivityId);
    }

    /**
     * Attach a file to a jobTimeActivity by URL.
     * Adds a file to an existing jobTimeActivity by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param jobTimeActivityId Id of the jobTimeActivity to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addJobTimeActivityFileByURLWithHttpInfo(RecordFile body, Integer jobTimeActivityId) throws ApiException {
        com.squareup.okhttp.Call call = addJobTimeActivityFileByURLValidateBeforeCall(body, jobTimeActivityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a jobTimeActivity by URL. (asynchronously)
     * Adds a file to an existing jobTimeActivity by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param jobTimeActivityId Id of the jobTimeActivity to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addJobTimeActivityFileByURLAsync(RecordFile body, Integer jobTimeActivityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addJobTimeActivityFileByURLValidateBeforeCall(body, jobTimeActivityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addJobTimeActivityTag
     * @param jobTimeActivityId Id of the jobTimeActivity to add a tag to (required)
     * @param jobTimeActivityTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addJobTimeActivityTagCall(Integer jobTimeActivityId, String jobTimeActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobTimeActivity/{jobTimeActivityId}/tag/{jobTimeActivityTag}"
            .replaceAll("\\{" + "jobTimeActivityId" + "\\}", apiClient.escapeString(jobTimeActivityId.toString()))
            .replaceAll("\\{" + "jobTimeActivityTag" + "\\}", apiClient.escapeString(jobTimeActivityTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addJobTimeActivityTagValidateBeforeCall(Integer jobTimeActivityId, String jobTimeActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobTimeActivityId' is set
        if (jobTimeActivityId == null) {
            throw new ApiException("Missing the required parameter 'jobTimeActivityId' when calling addJobTimeActivityTag(Async)");
        }
        
        // verify the required parameter 'jobTimeActivityTag' is set
        if (jobTimeActivityTag == null) {
            throw new ApiException("Missing the required parameter 'jobTimeActivityTag' when calling addJobTimeActivityTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addJobTimeActivityTagCall(jobTimeActivityId, jobTimeActivityTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a jobTimeActivity.
     * Adds a tag to an existing jobTimeActivity.
     * @param jobTimeActivityId Id of the jobTimeActivity to add a tag to (required)
     * @param jobTimeActivityTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addJobTimeActivityTag(Integer jobTimeActivityId, String jobTimeActivityTag) throws ApiException {
        addJobTimeActivityTagWithHttpInfo(jobTimeActivityId, jobTimeActivityTag);
    }

    /**
     * Add new tags for a jobTimeActivity.
     * Adds a tag to an existing jobTimeActivity.
     * @param jobTimeActivityId Id of the jobTimeActivity to add a tag to (required)
     * @param jobTimeActivityTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addJobTimeActivityTagWithHttpInfo(Integer jobTimeActivityId, String jobTimeActivityTag) throws ApiException {
        com.squareup.okhttp.Call call = addJobTimeActivityTagValidateBeforeCall(jobTimeActivityId, jobTimeActivityTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a jobTimeActivity. (asynchronously)
     * Adds a tag to an existing jobTimeActivity.
     * @param jobTimeActivityId Id of the jobTimeActivity to add a tag to (required)
     * @param jobTimeActivityTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addJobTimeActivityTagAsync(Integer jobTimeActivityId, String jobTimeActivityTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addJobTimeActivityTagValidateBeforeCall(jobTimeActivityId, jobTimeActivityTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteJobTimeActivity
     * @param jobTimeActivityId Id of the jobTimeActivity to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteJobTimeActivityCall(Integer jobTimeActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobTimeActivity/{jobTimeActivityId}"
            .replaceAll("\\{" + "jobTimeActivityId" + "\\}", apiClient.escapeString(jobTimeActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteJobTimeActivityValidateBeforeCall(Integer jobTimeActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobTimeActivityId' is set
        if (jobTimeActivityId == null) {
            throw new ApiException("Missing the required parameter 'jobTimeActivityId' when calling deleteJobTimeActivity(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteJobTimeActivityCall(jobTimeActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a jobTimeActivity
     * Deletes the jobTimeActivity identified by the specified id.
     * @param jobTimeActivityId Id of the jobTimeActivity to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteJobTimeActivity(Integer jobTimeActivityId) throws ApiException {
        deleteJobTimeActivityWithHttpInfo(jobTimeActivityId);
    }

    /**
     * Delete a jobTimeActivity
     * Deletes the jobTimeActivity identified by the specified id.
     * @param jobTimeActivityId Id of the jobTimeActivity to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteJobTimeActivityWithHttpInfo(Integer jobTimeActivityId) throws ApiException {
        com.squareup.okhttp.Call call = deleteJobTimeActivityValidateBeforeCall(jobTimeActivityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a jobTimeActivity (asynchronously)
     * Deletes the jobTimeActivity identified by the specified id.
     * @param jobTimeActivityId Id of the jobTimeActivity to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteJobTimeActivityAsync(Integer jobTimeActivityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteJobTimeActivityValidateBeforeCall(jobTimeActivityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteJobTimeActivityFile
     * @param jobTimeActivityId Id of the jobTimeActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteJobTimeActivityFileCall(Integer jobTimeActivityId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobTimeActivity/{jobTimeActivityId}/file/{fileId}"
            .replaceAll("\\{" + "jobTimeActivityId" + "\\}", apiClient.escapeString(jobTimeActivityId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteJobTimeActivityFileValidateBeforeCall(Integer jobTimeActivityId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobTimeActivityId' is set
        if (jobTimeActivityId == null) {
            throw new ApiException("Missing the required parameter 'jobTimeActivityId' when calling deleteJobTimeActivityFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteJobTimeActivityFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteJobTimeActivityFileCall(jobTimeActivityId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a jobTimeActivity.
     * Deletes an existing jobTimeActivity file using the specified data.
     * @param jobTimeActivityId Id of the jobTimeActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteJobTimeActivityFile(Integer jobTimeActivityId, Integer fileId) throws ApiException {
        deleteJobTimeActivityFileWithHttpInfo(jobTimeActivityId, fileId);
    }

    /**
     * Delete a file for a jobTimeActivity.
     * Deletes an existing jobTimeActivity file using the specified data.
     * @param jobTimeActivityId Id of the jobTimeActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteJobTimeActivityFileWithHttpInfo(Integer jobTimeActivityId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteJobTimeActivityFileValidateBeforeCall(jobTimeActivityId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a jobTimeActivity. (asynchronously)
     * Deletes an existing jobTimeActivity file using the specified data.
     * @param jobTimeActivityId Id of the jobTimeActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteJobTimeActivityFileAsync(Integer jobTimeActivityId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteJobTimeActivityFileValidateBeforeCall(jobTimeActivityId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteJobTimeActivityTag
     * @param jobTimeActivityId Id of the jobTimeActivity to remove tag from (required)
     * @param jobTimeActivityTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteJobTimeActivityTagCall(Integer jobTimeActivityId, String jobTimeActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobTimeActivity/{jobTimeActivityId}/tag/{jobTimeActivityTag}"
            .replaceAll("\\{" + "jobTimeActivityId" + "\\}", apiClient.escapeString(jobTimeActivityId.toString()))
            .replaceAll("\\{" + "jobTimeActivityTag" + "\\}", apiClient.escapeString(jobTimeActivityTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteJobTimeActivityTagValidateBeforeCall(Integer jobTimeActivityId, String jobTimeActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobTimeActivityId' is set
        if (jobTimeActivityId == null) {
            throw new ApiException("Missing the required parameter 'jobTimeActivityId' when calling deleteJobTimeActivityTag(Async)");
        }
        
        // verify the required parameter 'jobTimeActivityTag' is set
        if (jobTimeActivityTag == null) {
            throw new ApiException("Missing the required parameter 'jobTimeActivityTag' when calling deleteJobTimeActivityTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteJobTimeActivityTagCall(jobTimeActivityId, jobTimeActivityTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a jobTimeActivity.
     * Deletes an existing jobTimeActivity tag using the specified data.
     * @param jobTimeActivityId Id of the jobTimeActivity to remove tag from (required)
     * @param jobTimeActivityTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteJobTimeActivityTag(Integer jobTimeActivityId, String jobTimeActivityTag) throws ApiException {
        deleteJobTimeActivityTagWithHttpInfo(jobTimeActivityId, jobTimeActivityTag);
    }

    /**
     * Delete a tag for a jobTimeActivity.
     * Deletes an existing jobTimeActivity tag using the specified data.
     * @param jobTimeActivityId Id of the jobTimeActivity to remove tag from (required)
     * @param jobTimeActivityTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteJobTimeActivityTagWithHttpInfo(Integer jobTimeActivityId, String jobTimeActivityTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteJobTimeActivityTagValidateBeforeCall(jobTimeActivityId, jobTimeActivityTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a jobTimeActivity. (asynchronously)
     * Deletes an existing jobTimeActivity tag using the specified data.
     * @param jobTimeActivityId Id of the jobTimeActivity to remove tag from (required)
     * @param jobTimeActivityTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteJobTimeActivityTagAsync(Integer jobTimeActivityId, String jobTimeActivityTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteJobTimeActivityTagValidateBeforeCall(jobTimeActivityId, jobTimeActivityTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateJobTimeActivityById
     * @param jobTimeActivityId Id of the jobTimeActivity to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateJobTimeActivityByIdCall(Integer jobTimeActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobTimeActivity/duplicate/{jobTimeActivityId}"
            .replaceAll("\\{" + "jobTimeActivityId" + "\\}", apiClient.escapeString(jobTimeActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateJobTimeActivityByIdValidateBeforeCall(Integer jobTimeActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobTimeActivityId' is set
        if (jobTimeActivityId == null) {
            throw new ApiException("Missing the required parameter 'jobTimeActivityId' when calling getDuplicateJobTimeActivityById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateJobTimeActivityByIdCall(jobTimeActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a jobTimeActivity by id
     * Returns a duplicated jobTimeActivity identified by the specified id.
     * @param jobTimeActivityId Id of the jobTimeActivity to be duplicated. (required)
     * @return JobTimeActivity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobTimeActivity getDuplicateJobTimeActivityById(Integer jobTimeActivityId) throws ApiException {
        ApiResponse<JobTimeActivity> resp = getDuplicateJobTimeActivityByIdWithHttpInfo(jobTimeActivityId);
        return resp.getData();
    }

    /**
     * Get a duplicated a jobTimeActivity by id
     * Returns a duplicated jobTimeActivity identified by the specified id.
     * @param jobTimeActivityId Id of the jobTimeActivity to be duplicated. (required)
     * @return ApiResponse&lt;JobTimeActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobTimeActivity> getDuplicateJobTimeActivityByIdWithHttpInfo(Integer jobTimeActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateJobTimeActivityByIdValidateBeforeCall(jobTimeActivityId, null, null);
        Type localVarReturnType = new TypeToken<JobTimeActivity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a jobTimeActivity by id (asynchronously)
     * Returns a duplicated jobTimeActivity identified by the specified id.
     * @param jobTimeActivityId Id of the jobTimeActivity to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateJobTimeActivityByIdAsync(Integer jobTimeActivityId, final ApiCallback<JobTimeActivity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateJobTimeActivityByIdValidateBeforeCall(jobTimeActivityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobTimeActivity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJobTimeActivityByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJobTimeActivityByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobTimeActivity/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJobTimeActivityByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getJobTimeActivityByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search jobTimeActivitys by filter
     * Returns the list of jobTimeActivitys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;JobTimeActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<JobTimeActivity> getJobTimeActivityByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<JobTimeActivity>> resp = getJobTimeActivityByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search jobTimeActivitys by filter
     * Returns the list of jobTimeActivitys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;JobTimeActivity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<JobTimeActivity>> getJobTimeActivityByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getJobTimeActivityByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<JobTimeActivity>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search jobTimeActivitys by filter (asynchronously)
     * Returns the list of jobTimeActivitys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJobTimeActivityByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<JobTimeActivity>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJobTimeActivityByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<JobTimeActivity>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJobTimeActivityById
     * @param jobTimeActivityId Id of the jobTimeActivity to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJobTimeActivityByIdCall(Integer jobTimeActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobTimeActivity/{jobTimeActivityId}"
            .replaceAll("\\{" + "jobTimeActivityId" + "\\}", apiClient.escapeString(jobTimeActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJobTimeActivityByIdValidateBeforeCall(Integer jobTimeActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobTimeActivityId' is set
        if (jobTimeActivityId == null) {
            throw new ApiException("Missing the required parameter 'jobTimeActivityId' when calling getJobTimeActivityById(Async)");
        }
        

        com.squareup.okhttp.Call call = getJobTimeActivityByIdCall(jobTimeActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a jobTimeActivity by id
     * Returns the jobTimeActivity identified by the specified id.
     * @param jobTimeActivityId Id of the jobTimeActivity to be returned. (required)
     * @return JobTimeActivity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobTimeActivity getJobTimeActivityById(Integer jobTimeActivityId) throws ApiException {
        ApiResponse<JobTimeActivity> resp = getJobTimeActivityByIdWithHttpInfo(jobTimeActivityId);
        return resp.getData();
    }

    /**
     * Get a jobTimeActivity by id
     * Returns the jobTimeActivity identified by the specified id.
     * @param jobTimeActivityId Id of the jobTimeActivity to be returned. (required)
     * @return ApiResponse&lt;JobTimeActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobTimeActivity> getJobTimeActivityByIdWithHttpInfo(Integer jobTimeActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getJobTimeActivityByIdValidateBeforeCall(jobTimeActivityId, null, null);
        Type localVarReturnType = new TypeToken<JobTimeActivity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a jobTimeActivity by id (asynchronously)
     * Returns the jobTimeActivity identified by the specified id.
     * @param jobTimeActivityId Id of the jobTimeActivity to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJobTimeActivityByIdAsync(Integer jobTimeActivityId, final ApiCallback<JobTimeActivity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJobTimeActivityByIdValidateBeforeCall(jobTimeActivityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobTimeActivity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJobTimeActivityFiles
     * @param jobTimeActivityId Id of the jobTimeActivity to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJobTimeActivityFilesCall(Integer jobTimeActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobTimeActivity/{jobTimeActivityId}/file"
            .replaceAll("\\{" + "jobTimeActivityId" + "\\}", apiClient.escapeString(jobTimeActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJobTimeActivityFilesValidateBeforeCall(Integer jobTimeActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobTimeActivityId' is set
        if (jobTimeActivityId == null) {
            throw new ApiException("Missing the required parameter 'jobTimeActivityId' when calling getJobTimeActivityFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getJobTimeActivityFilesCall(jobTimeActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a jobTimeActivity.
     * Get all existing jobTimeActivity files.
     * @param jobTimeActivityId Id of the jobTimeActivity to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getJobTimeActivityFiles(Integer jobTimeActivityId) throws ApiException {
        getJobTimeActivityFilesWithHttpInfo(jobTimeActivityId);
    }

    /**
     * Get the files for a jobTimeActivity.
     * Get all existing jobTimeActivity files.
     * @param jobTimeActivityId Id of the jobTimeActivity to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getJobTimeActivityFilesWithHttpInfo(Integer jobTimeActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getJobTimeActivityFilesValidateBeforeCall(jobTimeActivityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a jobTimeActivity. (asynchronously)
     * Get all existing jobTimeActivity files.
     * @param jobTimeActivityId Id of the jobTimeActivity to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJobTimeActivityFilesAsync(Integer jobTimeActivityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJobTimeActivityFilesValidateBeforeCall(jobTimeActivityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getJobTimeActivityTags
     * @param jobTimeActivityId Id of the jobTimeActivity to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJobTimeActivityTagsCall(Integer jobTimeActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobTimeActivity/{jobTimeActivityId}/tag"
            .replaceAll("\\{" + "jobTimeActivityId" + "\\}", apiClient.escapeString(jobTimeActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJobTimeActivityTagsValidateBeforeCall(Integer jobTimeActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobTimeActivityId' is set
        if (jobTimeActivityId == null) {
            throw new ApiException("Missing the required parameter 'jobTimeActivityId' when calling getJobTimeActivityTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getJobTimeActivityTagsCall(jobTimeActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a jobTimeActivity.
     * Get all existing jobTimeActivity tags.
     * @param jobTimeActivityId Id of the jobTimeActivity to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getJobTimeActivityTags(Integer jobTimeActivityId) throws ApiException {
        getJobTimeActivityTagsWithHttpInfo(jobTimeActivityId);
    }

    /**
     * Get the tags for a jobTimeActivity.
     * Get all existing jobTimeActivity tags.
     * @param jobTimeActivityId Id of the jobTimeActivity to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getJobTimeActivityTagsWithHttpInfo(Integer jobTimeActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getJobTimeActivityTagsValidateBeforeCall(jobTimeActivityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a jobTimeActivity. (asynchronously)
     * Get all existing jobTimeActivity tags.
     * @param jobTimeActivityId Id of the jobTimeActivity to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJobTimeActivityTagsAsync(Integer jobTimeActivityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJobTimeActivityTagsValidateBeforeCall(jobTimeActivityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateJobTimeActivity
     * @param body JobTimeActivity to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateJobTimeActivityCall(JobTimeActivity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/jobTimeActivity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateJobTimeActivityValidateBeforeCall(JobTimeActivity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateJobTimeActivity(Async)");
        }
        

        com.squareup.okhttp.Call call = updateJobTimeActivityCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a jobTimeActivity
     * Updates an existing jobTimeActivity using the specified data.
     * @param body JobTimeActivity to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateJobTimeActivity(JobTimeActivity body) throws ApiException {
        updateJobTimeActivityWithHttpInfo(body);
    }

    /**
     * Update a jobTimeActivity
     * Updates an existing jobTimeActivity using the specified data.
     * @param body JobTimeActivity to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateJobTimeActivityWithHttpInfo(JobTimeActivity body) throws ApiException {
        com.squareup.okhttp.Call call = updateJobTimeActivityValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a jobTimeActivity (asynchronously)
     * Updates an existing jobTimeActivity using the specified data.
     * @param body JobTimeActivity to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateJobTimeActivityAsync(JobTimeActivity body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateJobTimeActivityValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
