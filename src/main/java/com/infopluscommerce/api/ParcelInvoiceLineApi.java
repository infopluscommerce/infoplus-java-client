/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ParcelInvoiceLine;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ParcelInvoiceLineApi {
    private ApiClient apiClient;

    public ParcelInvoiceLineApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ParcelInvoiceLineApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addParcelInvoiceLineAudit
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to add an audit to (required)
     * @param parcelInvoiceLineAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addParcelInvoiceLineAuditCall(Integer parcelInvoiceLineId, String parcelInvoiceLineAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/parcelInvoiceLine/{parcelInvoiceLineId}/audit/{parcelInvoiceLineAudit}"
            .replaceAll("\\{" + "parcelInvoiceLineId" + "\\}", apiClient.escapeString(parcelInvoiceLineId.toString()))
            .replaceAll("\\{" + "parcelInvoiceLineAudit" + "\\}", apiClient.escapeString(parcelInvoiceLineAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addParcelInvoiceLineAuditValidateBeforeCall(Integer parcelInvoiceLineId, String parcelInvoiceLineAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parcelInvoiceLineId' is set
        if (parcelInvoiceLineId == null) {
            throw new ApiException("Missing the required parameter 'parcelInvoiceLineId' when calling addParcelInvoiceLineAudit(Async)");
        }
        
        // verify the required parameter 'parcelInvoiceLineAudit' is set
        if (parcelInvoiceLineAudit == null) {
            throw new ApiException("Missing the required parameter 'parcelInvoiceLineAudit' when calling addParcelInvoiceLineAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addParcelInvoiceLineAuditCall(parcelInvoiceLineId, parcelInvoiceLineAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a parcelInvoiceLine
     * Adds an audit to an existing parcelInvoiceLine.
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to add an audit to (required)
     * @param parcelInvoiceLineAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addParcelInvoiceLineAudit(Integer parcelInvoiceLineId, String parcelInvoiceLineAudit) throws ApiException {
        addParcelInvoiceLineAuditWithHttpInfo(parcelInvoiceLineId, parcelInvoiceLineAudit);
    }

    /**
     * Add new audit for a parcelInvoiceLine
     * Adds an audit to an existing parcelInvoiceLine.
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to add an audit to (required)
     * @param parcelInvoiceLineAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addParcelInvoiceLineAuditWithHttpInfo(Integer parcelInvoiceLineId, String parcelInvoiceLineAudit) throws ApiException {
        com.squareup.okhttp.Call call = addParcelInvoiceLineAuditValidateBeforeCall(parcelInvoiceLineId, parcelInvoiceLineAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a parcelInvoiceLine (asynchronously)
     * Adds an audit to an existing parcelInvoiceLine.
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to add an audit to (required)
     * @param parcelInvoiceLineAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addParcelInvoiceLineAuditAsync(Integer parcelInvoiceLineId, String parcelInvoiceLineAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addParcelInvoiceLineAuditValidateBeforeCall(parcelInvoiceLineId, parcelInvoiceLineAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addParcelInvoiceLineFile
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addParcelInvoiceLineFileCall(Integer parcelInvoiceLineId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/parcelInvoiceLine/{parcelInvoiceLineId}/file/{fileName}"
            .replaceAll("\\{" + "parcelInvoiceLineId" + "\\}", apiClient.escapeString(parcelInvoiceLineId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addParcelInvoiceLineFileValidateBeforeCall(Integer parcelInvoiceLineId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parcelInvoiceLineId' is set
        if (parcelInvoiceLineId == null) {
            throw new ApiException("Missing the required parameter 'parcelInvoiceLineId' when calling addParcelInvoiceLineFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addParcelInvoiceLineFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addParcelInvoiceLineFileCall(parcelInvoiceLineId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a parcelInvoiceLine
     * Adds a file to an existing parcelInvoiceLine.
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addParcelInvoiceLineFile(Integer parcelInvoiceLineId, String fileName) throws ApiException {
        addParcelInvoiceLineFileWithHttpInfo(parcelInvoiceLineId, fileName);
    }

    /**
     * Attach a file to a parcelInvoiceLine
     * Adds a file to an existing parcelInvoiceLine.
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addParcelInvoiceLineFileWithHttpInfo(Integer parcelInvoiceLineId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addParcelInvoiceLineFileValidateBeforeCall(parcelInvoiceLineId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a parcelInvoiceLine (asynchronously)
     * Adds a file to an existing parcelInvoiceLine.
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addParcelInvoiceLineFileAsync(Integer parcelInvoiceLineId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addParcelInvoiceLineFileValidateBeforeCall(parcelInvoiceLineId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addParcelInvoiceLineFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addParcelInvoiceLineFileByURLCall(RecordFile body, Integer parcelInvoiceLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/parcelInvoiceLine/{parcelInvoiceLineId}/file"
            .replaceAll("\\{" + "parcelInvoiceLineId" + "\\}", apiClient.escapeString(parcelInvoiceLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addParcelInvoiceLineFileByURLValidateBeforeCall(RecordFile body, Integer parcelInvoiceLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addParcelInvoiceLineFileByURL(Async)");
        }
        
        // verify the required parameter 'parcelInvoiceLineId' is set
        if (parcelInvoiceLineId == null) {
            throw new ApiException("Missing the required parameter 'parcelInvoiceLineId' when calling addParcelInvoiceLineFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addParcelInvoiceLineFileByURLCall(body, parcelInvoiceLineId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a parcelInvoiceLine by URL.
     * Adds a file to an existing parcelInvoiceLine by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addParcelInvoiceLineFileByURL(RecordFile body, Integer parcelInvoiceLineId) throws ApiException {
        addParcelInvoiceLineFileByURLWithHttpInfo(body, parcelInvoiceLineId);
    }

    /**
     * Attach a file to a parcelInvoiceLine by URL.
     * Adds a file to an existing parcelInvoiceLine by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addParcelInvoiceLineFileByURLWithHttpInfo(RecordFile body, Integer parcelInvoiceLineId) throws ApiException {
        com.squareup.okhttp.Call call = addParcelInvoiceLineFileByURLValidateBeforeCall(body, parcelInvoiceLineId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a parcelInvoiceLine by URL. (asynchronously)
     * Adds a file to an existing parcelInvoiceLine by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addParcelInvoiceLineFileByURLAsync(RecordFile body, Integer parcelInvoiceLineId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addParcelInvoiceLineFileByURLValidateBeforeCall(body, parcelInvoiceLineId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addParcelInvoiceLineTag
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to add a tag to (required)
     * @param parcelInvoiceLineTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addParcelInvoiceLineTagCall(Integer parcelInvoiceLineId, String parcelInvoiceLineTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/parcelInvoiceLine/{parcelInvoiceLineId}/tag/{parcelInvoiceLineTag}"
            .replaceAll("\\{" + "parcelInvoiceLineId" + "\\}", apiClient.escapeString(parcelInvoiceLineId.toString()))
            .replaceAll("\\{" + "parcelInvoiceLineTag" + "\\}", apiClient.escapeString(parcelInvoiceLineTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addParcelInvoiceLineTagValidateBeforeCall(Integer parcelInvoiceLineId, String parcelInvoiceLineTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parcelInvoiceLineId' is set
        if (parcelInvoiceLineId == null) {
            throw new ApiException("Missing the required parameter 'parcelInvoiceLineId' when calling addParcelInvoiceLineTag(Async)");
        }
        
        // verify the required parameter 'parcelInvoiceLineTag' is set
        if (parcelInvoiceLineTag == null) {
            throw new ApiException("Missing the required parameter 'parcelInvoiceLineTag' when calling addParcelInvoiceLineTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addParcelInvoiceLineTagCall(parcelInvoiceLineId, parcelInvoiceLineTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a parcelInvoiceLine.
     * Adds a tag to an existing parcelInvoiceLine.
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to add a tag to (required)
     * @param parcelInvoiceLineTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addParcelInvoiceLineTag(Integer parcelInvoiceLineId, String parcelInvoiceLineTag) throws ApiException {
        addParcelInvoiceLineTagWithHttpInfo(parcelInvoiceLineId, parcelInvoiceLineTag);
    }

    /**
     * Add new tags for a parcelInvoiceLine.
     * Adds a tag to an existing parcelInvoiceLine.
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to add a tag to (required)
     * @param parcelInvoiceLineTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addParcelInvoiceLineTagWithHttpInfo(Integer parcelInvoiceLineId, String parcelInvoiceLineTag) throws ApiException {
        com.squareup.okhttp.Call call = addParcelInvoiceLineTagValidateBeforeCall(parcelInvoiceLineId, parcelInvoiceLineTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a parcelInvoiceLine. (asynchronously)
     * Adds a tag to an existing parcelInvoiceLine.
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to add a tag to (required)
     * @param parcelInvoiceLineTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addParcelInvoiceLineTagAsync(Integer parcelInvoiceLineId, String parcelInvoiceLineTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addParcelInvoiceLineTagValidateBeforeCall(parcelInvoiceLineId, parcelInvoiceLineTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteParcelInvoiceLineFile
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteParcelInvoiceLineFileCall(Integer parcelInvoiceLineId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/parcelInvoiceLine/{parcelInvoiceLineId}/file/{fileId}"
            .replaceAll("\\{" + "parcelInvoiceLineId" + "\\}", apiClient.escapeString(parcelInvoiceLineId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteParcelInvoiceLineFileValidateBeforeCall(Integer parcelInvoiceLineId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parcelInvoiceLineId' is set
        if (parcelInvoiceLineId == null) {
            throw new ApiException("Missing the required parameter 'parcelInvoiceLineId' when calling deleteParcelInvoiceLineFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteParcelInvoiceLineFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteParcelInvoiceLineFileCall(parcelInvoiceLineId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a parcelInvoiceLine.
     * Deletes an existing parcelInvoiceLine file using the specified data.
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteParcelInvoiceLineFile(Integer parcelInvoiceLineId, Integer fileId) throws ApiException {
        deleteParcelInvoiceLineFileWithHttpInfo(parcelInvoiceLineId, fileId);
    }

    /**
     * Delete a file for a parcelInvoiceLine.
     * Deletes an existing parcelInvoiceLine file using the specified data.
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteParcelInvoiceLineFileWithHttpInfo(Integer parcelInvoiceLineId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteParcelInvoiceLineFileValidateBeforeCall(parcelInvoiceLineId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a parcelInvoiceLine. (asynchronously)
     * Deletes an existing parcelInvoiceLine file using the specified data.
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteParcelInvoiceLineFileAsync(Integer parcelInvoiceLineId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteParcelInvoiceLineFileValidateBeforeCall(parcelInvoiceLineId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteParcelInvoiceLineTag
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to remove tag from (required)
     * @param parcelInvoiceLineTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteParcelInvoiceLineTagCall(Integer parcelInvoiceLineId, String parcelInvoiceLineTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/parcelInvoiceLine/{parcelInvoiceLineId}/tag/{parcelInvoiceLineTag}"
            .replaceAll("\\{" + "parcelInvoiceLineId" + "\\}", apiClient.escapeString(parcelInvoiceLineId.toString()))
            .replaceAll("\\{" + "parcelInvoiceLineTag" + "\\}", apiClient.escapeString(parcelInvoiceLineTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteParcelInvoiceLineTagValidateBeforeCall(Integer parcelInvoiceLineId, String parcelInvoiceLineTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parcelInvoiceLineId' is set
        if (parcelInvoiceLineId == null) {
            throw new ApiException("Missing the required parameter 'parcelInvoiceLineId' when calling deleteParcelInvoiceLineTag(Async)");
        }
        
        // verify the required parameter 'parcelInvoiceLineTag' is set
        if (parcelInvoiceLineTag == null) {
            throw new ApiException("Missing the required parameter 'parcelInvoiceLineTag' when calling deleteParcelInvoiceLineTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteParcelInvoiceLineTagCall(parcelInvoiceLineId, parcelInvoiceLineTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a parcelInvoiceLine.
     * Deletes an existing parcelInvoiceLine tag using the specified data.
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to remove tag from (required)
     * @param parcelInvoiceLineTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteParcelInvoiceLineTag(Integer parcelInvoiceLineId, String parcelInvoiceLineTag) throws ApiException {
        deleteParcelInvoiceLineTagWithHttpInfo(parcelInvoiceLineId, parcelInvoiceLineTag);
    }

    /**
     * Delete a tag for a parcelInvoiceLine.
     * Deletes an existing parcelInvoiceLine tag using the specified data.
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to remove tag from (required)
     * @param parcelInvoiceLineTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteParcelInvoiceLineTagWithHttpInfo(Integer parcelInvoiceLineId, String parcelInvoiceLineTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteParcelInvoiceLineTagValidateBeforeCall(parcelInvoiceLineId, parcelInvoiceLineTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a parcelInvoiceLine. (asynchronously)
     * Deletes an existing parcelInvoiceLine tag using the specified data.
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to remove tag from (required)
     * @param parcelInvoiceLineTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteParcelInvoiceLineTagAsync(Integer parcelInvoiceLineId, String parcelInvoiceLineTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteParcelInvoiceLineTagValidateBeforeCall(parcelInvoiceLineId, parcelInvoiceLineTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateParcelInvoiceLineById
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateParcelInvoiceLineByIdCall(Integer parcelInvoiceLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/parcelInvoiceLine/duplicate/{parcelInvoiceLineId}"
            .replaceAll("\\{" + "parcelInvoiceLineId" + "\\}", apiClient.escapeString(parcelInvoiceLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateParcelInvoiceLineByIdValidateBeforeCall(Integer parcelInvoiceLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parcelInvoiceLineId' is set
        if (parcelInvoiceLineId == null) {
            throw new ApiException("Missing the required parameter 'parcelInvoiceLineId' when calling getDuplicateParcelInvoiceLineById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateParcelInvoiceLineByIdCall(parcelInvoiceLineId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a parcelInvoiceLine by id
     * Returns a duplicated parcelInvoiceLine identified by the specified id.
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to be duplicated. (required)
     * @return ParcelInvoiceLine
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ParcelInvoiceLine getDuplicateParcelInvoiceLineById(Integer parcelInvoiceLineId) throws ApiException {
        ApiResponse<ParcelInvoiceLine> resp = getDuplicateParcelInvoiceLineByIdWithHttpInfo(parcelInvoiceLineId);
        return resp.getData();
    }

    /**
     * Get a duplicated a parcelInvoiceLine by id
     * Returns a duplicated parcelInvoiceLine identified by the specified id.
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to be duplicated. (required)
     * @return ApiResponse&lt;ParcelInvoiceLine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ParcelInvoiceLine> getDuplicateParcelInvoiceLineByIdWithHttpInfo(Integer parcelInvoiceLineId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateParcelInvoiceLineByIdValidateBeforeCall(parcelInvoiceLineId, null, null);
        Type localVarReturnType = new TypeToken<ParcelInvoiceLine>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a parcelInvoiceLine by id (asynchronously)
     * Returns a duplicated parcelInvoiceLine identified by the specified id.
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateParcelInvoiceLineByIdAsync(Integer parcelInvoiceLineId, final ApiCallback<ParcelInvoiceLine> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateParcelInvoiceLineByIdValidateBeforeCall(parcelInvoiceLineId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ParcelInvoiceLine>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getParcelInvoiceLineByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParcelInvoiceLineByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/parcelInvoiceLine/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getParcelInvoiceLineByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getParcelInvoiceLineByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search parcelInvoiceLines by filter
     * Returns the list of parcelInvoiceLines that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;ParcelInvoiceLine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ParcelInvoiceLine> getParcelInvoiceLineByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<ParcelInvoiceLine>> resp = getParcelInvoiceLineByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search parcelInvoiceLines by filter
     * Returns the list of parcelInvoiceLines that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;ParcelInvoiceLine&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ParcelInvoiceLine>> getParcelInvoiceLineByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getParcelInvoiceLineByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<ParcelInvoiceLine>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search parcelInvoiceLines by filter (asynchronously)
     * Returns the list of parcelInvoiceLines that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getParcelInvoiceLineByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<ParcelInvoiceLine>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParcelInvoiceLineByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ParcelInvoiceLine>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getParcelInvoiceLineById
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParcelInvoiceLineByIdCall(Integer parcelInvoiceLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/parcelInvoiceLine/{parcelInvoiceLineId}"
            .replaceAll("\\{" + "parcelInvoiceLineId" + "\\}", apiClient.escapeString(parcelInvoiceLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getParcelInvoiceLineByIdValidateBeforeCall(Integer parcelInvoiceLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parcelInvoiceLineId' is set
        if (parcelInvoiceLineId == null) {
            throw new ApiException("Missing the required parameter 'parcelInvoiceLineId' when calling getParcelInvoiceLineById(Async)");
        }
        

        com.squareup.okhttp.Call call = getParcelInvoiceLineByIdCall(parcelInvoiceLineId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a parcelInvoiceLine by id
     * Returns the parcelInvoiceLine identified by the specified id.
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to be returned. (required)
     * @return ParcelInvoiceLine
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ParcelInvoiceLine getParcelInvoiceLineById(Integer parcelInvoiceLineId) throws ApiException {
        ApiResponse<ParcelInvoiceLine> resp = getParcelInvoiceLineByIdWithHttpInfo(parcelInvoiceLineId);
        return resp.getData();
    }

    /**
     * Get a parcelInvoiceLine by id
     * Returns the parcelInvoiceLine identified by the specified id.
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to be returned. (required)
     * @return ApiResponse&lt;ParcelInvoiceLine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ParcelInvoiceLine> getParcelInvoiceLineByIdWithHttpInfo(Integer parcelInvoiceLineId) throws ApiException {
        com.squareup.okhttp.Call call = getParcelInvoiceLineByIdValidateBeforeCall(parcelInvoiceLineId, null, null);
        Type localVarReturnType = new TypeToken<ParcelInvoiceLine>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a parcelInvoiceLine by id (asynchronously)
     * Returns the parcelInvoiceLine identified by the specified id.
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getParcelInvoiceLineByIdAsync(Integer parcelInvoiceLineId, final ApiCallback<ParcelInvoiceLine> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParcelInvoiceLineByIdValidateBeforeCall(parcelInvoiceLineId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ParcelInvoiceLine>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getParcelInvoiceLineFiles
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParcelInvoiceLineFilesCall(Integer parcelInvoiceLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/parcelInvoiceLine/{parcelInvoiceLineId}/file"
            .replaceAll("\\{" + "parcelInvoiceLineId" + "\\}", apiClient.escapeString(parcelInvoiceLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getParcelInvoiceLineFilesValidateBeforeCall(Integer parcelInvoiceLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parcelInvoiceLineId' is set
        if (parcelInvoiceLineId == null) {
            throw new ApiException("Missing the required parameter 'parcelInvoiceLineId' when calling getParcelInvoiceLineFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getParcelInvoiceLineFilesCall(parcelInvoiceLineId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a parcelInvoiceLine.
     * Get all existing parcelInvoiceLine files.
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getParcelInvoiceLineFiles(Integer parcelInvoiceLineId) throws ApiException {
        getParcelInvoiceLineFilesWithHttpInfo(parcelInvoiceLineId);
    }

    /**
     * Get the files for a parcelInvoiceLine.
     * Get all existing parcelInvoiceLine files.
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getParcelInvoiceLineFilesWithHttpInfo(Integer parcelInvoiceLineId) throws ApiException {
        com.squareup.okhttp.Call call = getParcelInvoiceLineFilesValidateBeforeCall(parcelInvoiceLineId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a parcelInvoiceLine. (asynchronously)
     * Get all existing parcelInvoiceLine files.
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getParcelInvoiceLineFilesAsync(Integer parcelInvoiceLineId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParcelInvoiceLineFilesValidateBeforeCall(parcelInvoiceLineId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getParcelInvoiceLineTags
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParcelInvoiceLineTagsCall(Integer parcelInvoiceLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/parcelInvoiceLine/{parcelInvoiceLineId}/tag"
            .replaceAll("\\{" + "parcelInvoiceLineId" + "\\}", apiClient.escapeString(parcelInvoiceLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getParcelInvoiceLineTagsValidateBeforeCall(Integer parcelInvoiceLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parcelInvoiceLineId' is set
        if (parcelInvoiceLineId == null) {
            throw new ApiException("Missing the required parameter 'parcelInvoiceLineId' when calling getParcelInvoiceLineTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getParcelInvoiceLineTagsCall(parcelInvoiceLineId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a parcelInvoiceLine.
     * Get all existing parcelInvoiceLine tags.
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getParcelInvoiceLineTags(Integer parcelInvoiceLineId) throws ApiException {
        getParcelInvoiceLineTagsWithHttpInfo(parcelInvoiceLineId);
    }

    /**
     * Get the tags for a parcelInvoiceLine.
     * Get all existing parcelInvoiceLine tags.
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getParcelInvoiceLineTagsWithHttpInfo(Integer parcelInvoiceLineId) throws ApiException {
        com.squareup.okhttp.Call call = getParcelInvoiceLineTagsValidateBeforeCall(parcelInvoiceLineId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a parcelInvoiceLine. (asynchronously)
     * Get all existing parcelInvoiceLine tags.
     * @param parcelInvoiceLineId Id of the parcelInvoiceLine to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getParcelInvoiceLineTagsAsync(Integer parcelInvoiceLineId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParcelInvoiceLineTagsValidateBeforeCall(parcelInvoiceLineId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateParcelInvoiceLine
     * @param body ParcelInvoiceLine to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateParcelInvoiceLineCall(ParcelInvoiceLine body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/parcelInvoiceLine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateParcelInvoiceLineValidateBeforeCall(ParcelInvoiceLine body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateParcelInvoiceLine(Async)");
        }
        

        com.squareup.okhttp.Call call = updateParcelInvoiceLineCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a parcelInvoiceLine
     * Updates an existing parcelInvoiceLine using the specified data.
     * @param body ParcelInvoiceLine to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateParcelInvoiceLine(ParcelInvoiceLine body) throws ApiException {
        updateParcelInvoiceLineWithHttpInfo(body);
    }

    /**
     * Update a parcelInvoiceLine
     * Updates an existing parcelInvoiceLine using the specified data.
     * @param body ParcelInvoiceLine to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateParcelInvoiceLineWithHttpInfo(ParcelInvoiceLine body) throws ApiException {
        com.squareup.okhttp.Call call = updateParcelInvoiceLineValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a parcelInvoiceLine (asynchronously)
     * Updates an existing parcelInvoiceLine using the specified data.
     * @param body ParcelInvoiceLine to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateParcelInvoiceLineAsync(ParcelInvoiceLine body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateParcelInvoiceLineValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
