/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.JobRecipe;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JobRecipeApi {
    private ApiClient apiClient;

    public JobRecipeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JobRecipeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addJobRecipe
     * @param body JobRecipe to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addJobRecipeCall(JobRecipe body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/jobRecipe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addJobRecipeValidateBeforeCall(JobRecipe body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addJobRecipe(Async)");
        }
        

        com.squareup.okhttp.Call call = addJobRecipeCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a jobRecipe
     * Inserts a new jobRecipe using the specified data.
     * @param body JobRecipe to be inserted. (required)
     * @return JobRecipe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobRecipe addJobRecipe(JobRecipe body) throws ApiException {
        ApiResponse<JobRecipe> resp = addJobRecipeWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a jobRecipe
     * Inserts a new jobRecipe using the specified data.
     * @param body JobRecipe to be inserted. (required)
     * @return ApiResponse&lt;JobRecipe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobRecipe> addJobRecipeWithHttpInfo(JobRecipe body) throws ApiException {
        com.squareup.okhttp.Call call = addJobRecipeValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<JobRecipe>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a jobRecipe (asynchronously)
     * Inserts a new jobRecipe using the specified data.
     * @param body JobRecipe to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addJobRecipeAsync(JobRecipe body, final ApiCallback<JobRecipe> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addJobRecipeValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobRecipe>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addJobRecipeAudit
     * @param jobRecipeId Id of the jobRecipe to add an audit to (required)
     * @param jobRecipeAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addJobRecipeAuditCall(Integer jobRecipeId, String jobRecipeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobRecipe/{jobRecipeId}/audit/{jobRecipeAudit}"
            .replaceAll("\\{" + "jobRecipeId" + "\\}", apiClient.escapeString(jobRecipeId.toString()))
            .replaceAll("\\{" + "jobRecipeAudit" + "\\}", apiClient.escapeString(jobRecipeAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addJobRecipeAuditValidateBeforeCall(Integer jobRecipeId, String jobRecipeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobRecipeId' is set
        if (jobRecipeId == null) {
            throw new ApiException("Missing the required parameter 'jobRecipeId' when calling addJobRecipeAudit(Async)");
        }
        
        // verify the required parameter 'jobRecipeAudit' is set
        if (jobRecipeAudit == null) {
            throw new ApiException("Missing the required parameter 'jobRecipeAudit' when calling addJobRecipeAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addJobRecipeAuditCall(jobRecipeId, jobRecipeAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a jobRecipe
     * Adds an audit to an existing jobRecipe.
     * @param jobRecipeId Id of the jobRecipe to add an audit to (required)
     * @param jobRecipeAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addJobRecipeAudit(Integer jobRecipeId, String jobRecipeAudit) throws ApiException {
        addJobRecipeAuditWithHttpInfo(jobRecipeId, jobRecipeAudit);
    }

    /**
     * Add new audit for a jobRecipe
     * Adds an audit to an existing jobRecipe.
     * @param jobRecipeId Id of the jobRecipe to add an audit to (required)
     * @param jobRecipeAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addJobRecipeAuditWithHttpInfo(Integer jobRecipeId, String jobRecipeAudit) throws ApiException {
        com.squareup.okhttp.Call call = addJobRecipeAuditValidateBeforeCall(jobRecipeId, jobRecipeAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a jobRecipe (asynchronously)
     * Adds an audit to an existing jobRecipe.
     * @param jobRecipeId Id of the jobRecipe to add an audit to (required)
     * @param jobRecipeAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addJobRecipeAuditAsync(Integer jobRecipeId, String jobRecipeAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addJobRecipeAuditValidateBeforeCall(jobRecipeId, jobRecipeAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addJobRecipeFile
     * @param jobRecipeId Id of the jobRecipe to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addJobRecipeFileCall(Integer jobRecipeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobRecipe/{jobRecipeId}/file/{fileName}"
            .replaceAll("\\{" + "jobRecipeId" + "\\}", apiClient.escapeString(jobRecipeId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addJobRecipeFileValidateBeforeCall(Integer jobRecipeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobRecipeId' is set
        if (jobRecipeId == null) {
            throw new ApiException("Missing the required parameter 'jobRecipeId' when calling addJobRecipeFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addJobRecipeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addJobRecipeFileCall(jobRecipeId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a jobRecipe
     * Adds a file to an existing jobRecipe.
     * @param jobRecipeId Id of the jobRecipe to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addJobRecipeFile(Integer jobRecipeId, String fileName) throws ApiException {
        addJobRecipeFileWithHttpInfo(jobRecipeId, fileName);
    }

    /**
     * Attach a file to a jobRecipe
     * Adds a file to an existing jobRecipe.
     * @param jobRecipeId Id of the jobRecipe to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addJobRecipeFileWithHttpInfo(Integer jobRecipeId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addJobRecipeFileValidateBeforeCall(jobRecipeId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a jobRecipe (asynchronously)
     * Adds a file to an existing jobRecipe.
     * @param jobRecipeId Id of the jobRecipe to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addJobRecipeFileAsync(Integer jobRecipeId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addJobRecipeFileValidateBeforeCall(jobRecipeId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addJobRecipeFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param jobRecipeId Id of the jobRecipe to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addJobRecipeFileByURLCall(RecordFile body, Integer jobRecipeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/jobRecipe/{jobRecipeId}/file"
            .replaceAll("\\{" + "jobRecipeId" + "\\}", apiClient.escapeString(jobRecipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addJobRecipeFileByURLValidateBeforeCall(RecordFile body, Integer jobRecipeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addJobRecipeFileByURL(Async)");
        }
        
        // verify the required parameter 'jobRecipeId' is set
        if (jobRecipeId == null) {
            throw new ApiException("Missing the required parameter 'jobRecipeId' when calling addJobRecipeFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addJobRecipeFileByURLCall(body, jobRecipeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a jobRecipe by URL.
     * Adds a file to an existing jobRecipe by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param jobRecipeId Id of the jobRecipe to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addJobRecipeFileByURL(RecordFile body, Integer jobRecipeId) throws ApiException {
        addJobRecipeFileByURLWithHttpInfo(body, jobRecipeId);
    }

    /**
     * Attach a file to a jobRecipe by URL.
     * Adds a file to an existing jobRecipe by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param jobRecipeId Id of the jobRecipe to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addJobRecipeFileByURLWithHttpInfo(RecordFile body, Integer jobRecipeId) throws ApiException {
        com.squareup.okhttp.Call call = addJobRecipeFileByURLValidateBeforeCall(body, jobRecipeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a jobRecipe by URL. (asynchronously)
     * Adds a file to an existing jobRecipe by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param jobRecipeId Id of the jobRecipe to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addJobRecipeFileByURLAsync(RecordFile body, Integer jobRecipeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addJobRecipeFileByURLValidateBeforeCall(body, jobRecipeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addJobRecipeTag
     * @param jobRecipeId Id of the jobRecipe to add a tag to (required)
     * @param jobRecipeTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addJobRecipeTagCall(Integer jobRecipeId, String jobRecipeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobRecipe/{jobRecipeId}/tag/{jobRecipeTag}"
            .replaceAll("\\{" + "jobRecipeId" + "\\}", apiClient.escapeString(jobRecipeId.toString()))
            .replaceAll("\\{" + "jobRecipeTag" + "\\}", apiClient.escapeString(jobRecipeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addJobRecipeTagValidateBeforeCall(Integer jobRecipeId, String jobRecipeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobRecipeId' is set
        if (jobRecipeId == null) {
            throw new ApiException("Missing the required parameter 'jobRecipeId' when calling addJobRecipeTag(Async)");
        }
        
        // verify the required parameter 'jobRecipeTag' is set
        if (jobRecipeTag == null) {
            throw new ApiException("Missing the required parameter 'jobRecipeTag' when calling addJobRecipeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addJobRecipeTagCall(jobRecipeId, jobRecipeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a jobRecipe.
     * Adds a tag to an existing jobRecipe.
     * @param jobRecipeId Id of the jobRecipe to add a tag to (required)
     * @param jobRecipeTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addJobRecipeTag(Integer jobRecipeId, String jobRecipeTag) throws ApiException {
        addJobRecipeTagWithHttpInfo(jobRecipeId, jobRecipeTag);
    }

    /**
     * Add new tags for a jobRecipe.
     * Adds a tag to an existing jobRecipe.
     * @param jobRecipeId Id of the jobRecipe to add a tag to (required)
     * @param jobRecipeTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addJobRecipeTagWithHttpInfo(Integer jobRecipeId, String jobRecipeTag) throws ApiException {
        com.squareup.okhttp.Call call = addJobRecipeTagValidateBeforeCall(jobRecipeId, jobRecipeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a jobRecipe. (asynchronously)
     * Adds a tag to an existing jobRecipe.
     * @param jobRecipeId Id of the jobRecipe to add a tag to (required)
     * @param jobRecipeTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addJobRecipeTagAsync(Integer jobRecipeId, String jobRecipeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addJobRecipeTagValidateBeforeCall(jobRecipeId, jobRecipeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteJobRecipe
     * @param jobRecipeId Id of the jobRecipe to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteJobRecipeCall(Integer jobRecipeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobRecipe/{jobRecipeId}"
            .replaceAll("\\{" + "jobRecipeId" + "\\}", apiClient.escapeString(jobRecipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteJobRecipeValidateBeforeCall(Integer jobRecipeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobRecipeId' is set
        if (jobRecipeId == null) {
            throw new ApiException("Missing the required parameter 'jobRecipeId' when calling deleteJobRecipe(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteJobRecipeCall(jobRecipeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a jobRecipe
     * Deletes the jobRecipe identified by the specified id.
     * @param jobRecipeId Id of the jobRecipe to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteJobRecipe(Integer jobRecipeId) throws ApiException {
        deleteJobRecipeWithHttpInfo(jobRecipeId);
    }

    /**
     * Delete a jobRecipe
     * Deletes the jobRecipe identified by the specified id.
     * @param jobRecipeId Id of the jobRecipe to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteJobRecipeWithHttpInfo(Integer jobRecipeId) throws ApiException {
        com.squareup.okhttp.Call call = deleteJobRecipeValidateBeforeCall(jobRecipeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a jobRecipe (asynchronously)
     * Deletes the jobRecipe identified by the specified id.
     * @param jobRecipeId Id of the jobRecipe to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteJobRecipeAsync(Integer jobRecipeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteJobRecipeValidateBeforeCall(jobRecipeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteJobRecipeFile
     * @param jobRecipeId Id of the jobRecipe to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteJobRecipeFileCall(Integer jobRecipeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobRecipe/{jobRecipeId}/file/{fileId}"
            .replaceAll("\\{" + "jobRecipeId" + "\\}", apiClient.escapeString(jobRecipeId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteJobRecipeFileValidateBeforeCall(Integer jobRecipeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobRecipeId' is set
        if (jobRecipeId == null) {
            throw new ApiException("Missing the required parameter 'jobRecipeId' when calling deleteJobRecipeFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteJobRecipeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteJobRecipeFileCall(jobRecipeId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a jobRecipe.
     * Deletes an existing jobRecipe file using the specified data.
     * @param jobRecipeId Id of the jobRecipe to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteJobRecipeFile(Integer jobRecipeId, Integer fileId) throws ApiException {
        deleteJobRecipeFileWithHttpInfo(jobRecipeId, fileId);
    }

    /**
     * Delete a file for a jobRecipe.
     * Deletes an existing jobRecipe file using the specified data.
     * @param jobRecipeId Id of the jobRecipe to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteJobRecipeFileWithHttpInfo(Integer jobRecipeId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteJobRecipeFileValidateBeforeCall(jobRecipeId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a jobRecipe. (asynchronously)
     * Deletes an existing jobRecipe file using the specified data.
     * @param jobRecipeId Id of the jobRecipe to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteJobRecipeFileAsync(Integer jobRecipeId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteJobRecipeFileValidateBeforeCall(jobRecipeId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteJobRecipeTag
     * @param jobRecipeId Id of the jobRecipe to remove tag from (required)
     * @param jobRecipeTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteJobRecipeTagCall(Integer jobRecipeId, String jobRecipeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobRecipe/{jobRecipeId}/tag/{jobRecipeTag}"
            .replaceAll("\\{" + "jobRecipeId" + "\\}", apiClient.escapeString(jobRecipeId.toString()))
            .replaceAll("\\{" + "jobRecipeTag" + "\\}", apiClient.escapeString(jobRecipeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteJobRecipeTagValidateBeforeCall(Integer jobRecipeId, String jobRecipeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobRecipeId' is set
        if (jobRecipeId == null) {
            throw new ApiException("Missing the required parameter 'jobRecipeId' when calling deleteJobRecipeTag(Async)");
        }
        
        // verify the required parameter 'jobRecipeTag' is set
        if (jobRecipeTag == null) {
            throw new ApiException("Missing the required parameter 'jobRecipeTag' when calling deleteJobRecipeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteJobRecipeTagCall(jobRecipeId, jobRecipeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a jobRecipe.
     * Deletes an existing jobRecipe tag using the specified data.
     * @param jobRecipeId Id of the jobRecipe to remove tag from (required)
     * @param jobRecipeTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteJobRecipeTag(Integer jobRecipeId, String jobRecipeTag) throws ApiException {
        deleteJobRecipeTagWithHttpInfo(jobRecipeId, jobRecipeTag);
    }

    /**
     * Delete a tag for a jobRecipe.
     * Deletes an existing jobRecipe tag using the specified data.
     * @param jobRecipeId Id of the jobRecipe to remove tag from (required)
     * @param jobRecipeTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteJobRecipeTagWithHttpInfo(Integer jobRecipeId, String jobRecipeTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteJobRecipeTagValidateBeforeCall(jobRecipeId, jobRecipeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a jobRecipe. (asynchronously)
     * Deletes an existing jobRecipe tag using the specified data.
     * @param jobRecipeId Id of the jobRecipe to remove tag from (required)
     * @param jobRecipeTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteJobRecipeTagAsync(Integer jobRecipeId, String jobRecipeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteJobRecipeTagValidateBeforeCall(jobRecipeId, jobRecipeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateJobRecipeById
     * @param jobRecipeId Id of the jobRecipe to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateJobRecipeByIdCall(Integer jobRecipeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobRecipe/duplicate/{jobRecipeId}"
            .replaceAll("\\{" + "jobRecipeId" + "\\}", apiClient.escapeString(jobRecipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateJobRecipeByIdValidateBeforeCall(Integer jobRecipeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobRecipeId' is set
        if (jobRecipeId == null) {
            throw new ApiException("Missing the required parameter 'jobRecipeId' when calling getDuplicateJobRecipeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateJobRecipeByIdCall(jobRecipeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a jobRecipe by id
     * Returns a duplicated jobRecipe identified by the specified id.
     * @param jobRecipeId Id of the jobRecipe to be duplicated. (required)
     * @return JobRecipe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobRecipe getDuplicateJobRecipeById(Integer jobRecipeId) throws ApiException {
        ApiResponse<JobRecipe> resp = getDuplicateJobRecipeByIdWithHttpInfo(jobRecipeId);
        return resp.getData();
    }

    /**
     * Get a duplicated a jobRecipe by id
     * Returns a duplicated jobRecipe identified by the specified id.
     * @param jobRecipeId Id of the jobRecipe to be duplicated. (required)
     * @return ApiResponse&lt;JobRecipe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobRecipe> getDuplicateJobRecipeByIdWithHttpInfo(Integer jobRecipeId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateJobRecipeByIdValidateBeforeCall(jobRecipeId, null, null);
        Type localVarReturnType = new TypeToken<JobRecipe>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a jobRecipe by id (asynchronously)
     * Returns a duplicated jobRecipe identified by the specified id.
     * @param jobRecipeId Id of the jobRecipe to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateJobRecipeByIdAsync(Integer jobRecipeId, final ApiCallback<JobRecipe> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateJobRecipeByIdValidateBeforeCall(jobRecipeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobRecipe>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJobRecipeByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJobRecipeByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobRecipe/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJobRecipeByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getJobRecipeByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search jobRecipes by filter
     * Returns the list of jobRecipes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;JobRecipe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<JobRecipe> getJobRecipeByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<JobRecipe>> resp = getJobRecipeByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search jobRecipes by filter
     * Returns the list of jobRecipes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;JobRecipe&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<JobRecipe>> getJobRecipeByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getJobRecipeByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<JobRecipe>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search jobRecipes by filter (asynchronously)
     * Returns the list of jobRecipes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJobRecipeByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<JobRecipe>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJobRecipeByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<JobRecipe>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJobRecipeById
     * @param jobRecipeId Id of the jobRecipe to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJobRecipeByIdCall(Integer jobRecipeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobRecipe/{jobRecipeId}"
            .replaceAll("\\{" + "jobRecipeId" + "\\}", apiClient.escapeString(jobRecipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJobRecipeByIdValidateBeforeCall(Integer jobRecipeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobRecipeId' is set
        if (jobRecipeId == null) {
            throw new ApiException("Missing the required parameter 'jobRecipeId' when calling getJobRecipeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getJobRecipeByIdCall(jobRecipeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a jobRecipe by id
     * Returns the jobRecipe identified by the specified id.
     * @param jobRecipeId Id of the jobRecipe to be returned. (required)
     * @return JobRecipe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobRecipe getJobRecipeById(Integer jobRecipeId) throws ApiException {
        ApiResponse<JobRecipe> resp = getJobRecipeByIdWithHttpInfo(jobRecipeId);
        return resp.getData();
    }

    /**
     * Get a jobRecipe by id
     * Returns the jobRecipe identified by the specified id.
     * @param jobRecipeId Id of the jobRecipe to be returned. (required)
     * @return ApiResponse&lt;JobRecipe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobRecipe> getJobRecipeByIdWithHttpInfo(Integer jobRecipeId) throws ApiException {
        com.squareup.okhttp.Call call = getJobRecipeByIdValidateBeforeCall(jobRecipeId, null, null);
        Type localVarReturnType = new TypeToken<JobRecipe>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a jobRecipe by id (asynchronously)
     * Returns the jobRecipe identified by the specified id.
     * @param jobRecipeId Id of the jobRecipe to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJobRecipeByIdAsync(Integer jobRecipeId, final ApiCallback<JobRecipe> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJobRecipeByIdValidateBeforeCall(jobRecipeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobRecipe>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJobRecipeFiles
     * @param jobRecipeId Id of the jobRecipe to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJobRecipeFilesCall(Integer jobRecipeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobRecipe/{jobRecipeId}/file"
            .replaceAll("\\{" + "jobRecipeId" + "\\}", apiClient.escapeString(jobRecipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJobRecipeFilesValidateBeforeCall(Integer jobRecipeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobRecipeId' is set
        if (jobRecipeId == null) {
            throw new ApiException("Missing the required parameter 'jobRecipeId' when calling getJobRecipeFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getJobRecipeFilesCall(jobRecipeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a jobRecipe.
     * Get all existing jobRecipe files.
     * @param jobRecipeId Id of the jobRecipe to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getJobRecipeFiles(Integer jobRecipeId) throws ApiException {
        getJobRecipeFilesWithHttpInfo(jobRecipeId);
    }

    /**
     * Get the files for a jobRecipe.
     * Get all existing jobRecipe files.
     * @param jobRecipeId Id of the jobRecipe to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getJobRecipeFilesWithHttpInfo(Integer jobRecipeId) throws ApiException {
        com.squareup.okhttp.Call call = getJobRecipeFilesValidateBeforeCall(jobRecipeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a jobRecipe. (asynchronously)
     * Get all existing jobRecipe files.
     * @param jobRecipeId Id of the jobRecipe to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJobRecipeFilesAsync(Integer jobRecipeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJobRecipeFilesValidateBeforeCall(jobRecipeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getJobRecipeTags
     * @param jobRecipeId Id of the jobRecipe to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJobRecipeTagsCall(Integer jobRecipeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/jobRecipe/{jobRecipeId}/tag"
            .replaceAll("\\{" + "jobRecipeId" + "\\}", apiClient.escapeString(jobRecipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJobRecipeTagsValidateBeforeCall(Integer jobRecipeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobRecipeId' is set
        if (jobRecipeId == null) {
            throw new ApiException("Missing the required parameter 'jobRecipeId' when calling getJobRecipeTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getJobRecipeTagsCall(jobRecipeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a jobRecipe.
     * Get all existing jobRecipe tags.
     * @param jobRecipeId Id of the jobRecipe to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getJobRecipeTags(Integer jobRecipeId) throws ApiException {
        getJobRecipeTagsWithHttpInfo(jobRecipeId);
    }

    /**
     * Get the tags for a jobRecipe.
     * Get all existing jobRecipe tags.
     * @param jobRecipeId Id of the jobRecipe to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getJobRecipeTagsWithHttpInfo(Integer jobRecipeId) throws ApiException {
        com.squareup.okhttp.Call call = getJobRecipeTagsValidateBeforeCall(jobRecipeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a jobRecipe. (asynchronously)
     * Get all existing jobRecipe tags.
     * @param jobRecipeId Id of the jobRecipe to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJobRecipeTagsAsync(Integer jobRecipeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJobRecipeTagsValidateBeforeCall(jobRecipeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateJobRecipe
     * @param body JobRecipe to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateJobRecipeCall(JobRecipe body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/jobRecipe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateJobRecipeValidateBeforeCall(JobRecipe body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateJobRecipe(Async)");
        }
        

        com.squareup.okhttp.Call call = updateJobRecipeCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a jobRecipe
     * Updates an existing jobRecipe using the specified data.
     * @param body JobRecipe to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateJobRecipe(JobRecipe body) throws ApiException {
        updateJobRecipeWithHttpInfo(body);
    }

    /**
     * Update a jobRecipe
     * Updates an existing jobRecipe using the specified data.
     * @param body JobRecipe to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateJobRecipeWithHttpInfo(JobRecipe body) throws ApiException {
        com.squareup.okhttp.Call call = updateJobRecipeValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a jobRecipe (asynchronously)
     * Updates an existing jobRecipe using the specified data.
     * @param body JobRecipe to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateJobRecipeAsync(JobRecipe body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateJobRecipeValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateJobRecipeCustomFields
     * @param body JobRecipe to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateJobRecipeCustomFieldsCall(JobRecipe body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/jobRecipe/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateJobRecipeCustomFieldsValidateBeforeCall(JobRecipe body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateJobRecipeCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateJobRecipeCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a jobRecipe custom fields
     * Updates an existing jobRecipe custom fields using the specified data.
     * @param body JobRecipe to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateJobRecipeCustomFields(JobRecipe body) throws ApiException {
        updateJobRecipeCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a jobRecipe custom fields
     * Updates an existing jobRecipe custom fields using the specified data.
     * @param body JobRecipe to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateJobRecipeCustomFieldsWithHttpInfo(JobRecipe body) throws ApiException {
        com.squareup.okhttp.Call call = updateJobRecipeCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a jobRecipe custom fields (asynchronously)
     * Updates an existing jobRecipe custom fields using the specified data.
     * @param body JobRecipe to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateJobRecipeCustomFieldsAsync(JobRecipe body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateJobRecipeCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
