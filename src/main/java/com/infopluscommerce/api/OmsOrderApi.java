/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.OmsOrder;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OmsOrderApi {
    private ApiClient apiClient;

    public OmsOrderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OmsOrderApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addOmsOrder
     * @param body OmsOrder to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOmsOrderCall(OmsOrder body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/omsOrder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOmsOrderValidateBeforeCall(OmsOrder body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addOmsOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = addOmsOrderCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an omsOrder
     * Inserts a new omsOrder using the specified data.
     * @param body OmsOrder to be inserted. (required)
     * @return OmsOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OmsOrder addOmsOrder(OmsOrder body) throws ApiException {
        ApiResponse<OmsOrder> resp = addOmsOrderWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create an omsOrder
     * Inserts a new omsOrder using the specified data.
     * @param body OmsOrder to be inserted. (required)
     * @return ApiResponse&lt;OmsOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OmsOrder> addOmsOrderWithHttpInfo(OmsOrder body) throws ApiException {
        com.squareup.okhttp.Call call = addOmsOrderValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<OmsOrder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an omsOrder (asynchronously)
     * Inserts a new omsOrder using the specified data.
     * @param body OmsOrder to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOmsOrderAsync(OmsOrder body, final ApiCallback<OmsOrder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOmsOrderValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OmsOrder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addOmsOrderAudit
     * @param omsOrderId Id of the omsOrder to add an audit to (required)
     * @param omsOrderAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOmsOrderAuditCall(Integer omsOrderId, String omsOrderAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/omsOrder/{omsOrderId}/audit/{omsOrderAudit}"
            .replaceAll("\\{" + "omsOrderId" + "\\}", apiClient.escapeString(omsOrderId.toString()))
            .replaceAll("\\{" + "omsOrderAudit" + "\\}", apiClient.escapeString(omsOrderAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOmsOrderAuditValidateBeforeCall(Integer omsOrderId, String omsOrderAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'omsOrderId' is set
        if (omsOrderId == null) {
            throw new ApiException("Missing the required parameter 'omsOrderId' when calling addOmsOrderAudit(Async)");
        }
        
        // verify the required parameter 'omsOrderAudit' is set
        if (omsOrderAudit == null) {
            throw new ApiException("Missing the required parameter 'omsOrderAudit' when calling addOmsOrderAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addOmsOrderAuditCall(omsOrderId, omsOrderAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for an omsOrder
     * Adds an audit to an existing omsOrder.
     * @param omsOrderId Id of the omsOrder to add an audit to (required)
     * @param omsOrderAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOmsOrderAudit(Integer omsOrderId, String omsOrderAudit) throws ApiException {
        addOmsOrderAuditWithHttpInfo(omsOrderId, omsOrderAudit);
    }

    /**
     * Add new audit for an omsOrder
     * Adds an audit to an existing omsOrder.
     * @param omsOrderId Id of the omsOrder to add an audit to (required)
     * @param omsOrderAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOmsOrderAuditWithHttpInfo(Integer omsOrderId, String omsOrderAudit) throws ApiException {
        com.squareup.okhttp.Call call = addOmsOrderAuditValidateBeforeCall(omsOrderId, omsOrderAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for an omsOrder (asynchronously)
     * Adds an audit to an existing omsOrder.
     * @param omsOrderId Id of the omsOrder to add an audit to (required)
     * @param omsOrderAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOmsOrderAuditAsync(Integer omsOrderId, String omsOrderAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOmsOrderAuditValidateBeforeCall(omsOrderId, omsOrderAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addOmsOrderFile
     * @param omsOrderId Id of the omsOrder to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOmsOrderFileCall(Integer omsOrderId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/omsOrder/{omsOrderId}/file/{fileName}"
            .replaceAll("\\{" + "omsOrderId" + "\\}", apiClient.escapeString(omsOrderId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOmsOrderFileValidateBeforeCall(Integer omsOrderId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'omsOrderId' is set
        if (omsOrderId == null) {
            throw new ApiException("Missing the required parameter 'omsOrderId' when calling addOmsOrderFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addOmsOrderFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addOmsOrderFileCall(omsOrderId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an omsOrder
     * Adds a file to an existing omsOrder.
     * @param omsOrderId Id of the omsOrder to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOmsOrderFile(Integer omsOrderId, String fileName) throws ApiException {
        addOmsOrderFileWithHttpInfo(omsOrderId, fileName);
    }

    /**
     * Attach a file to an omsOrder
     * Adds a file to an existing omsOrder.
     * @param omsOrderId Id of the omsOrder to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOmsOrderFileWithHttpInfo(Integer omsOrderId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addOmsOrderFileValidateBeforeCall(omsOrderId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an omsOrder (asynchronously)
     * Adds a file to an existing omsOrder.
     * @param omsOrderId Id of the omsOrder to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOmsOrderFileAsync(Integer omsOrderId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOmsOrderFileValidateBeforeCall(omsOrderId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addOmsOrderFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param omsOrderId Id of the omsOrder to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOmsOrderFileByURLCall(RecordFile body, Integer omsOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/omsOrder/{omsOrderId}/file"
            .replaceAll("\\{" + "omsOrderId" + "\\}", apiClient.escapeString(omsOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOmsOrderFileByURLValidateBeforeCall(RecordFile body, Integer omsOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addOmsOrderFileByURL(Async)");
        }
        
        // verify the required parameter 'omsOrderId' is set
        if (omsOrderId == null) {
            throw new ApiException("Missing the required parameter 'omsOrderId' when calling addOmsOrderFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addOmsOrderFileByURLCall(body, omsOrderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an omsOrder by URL.
     * Adds a file to an existing omsOrder by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param omsOrderId Id of the omsOrder to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOmsOrderFileByURL(RecordFile body, Integer omsOrderId) throws ApiException {
        addOmsOrderFileByURLWithHttpInfo(body, omsOrderId);
    }

    /**
     * Attach a file to an omsOrder by URL.
     * Adds a file to an existing omsOrder by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param omsOrderId Id of the omsOrder to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOmsOrderFileByURLWithHttpInfo(RecordFile body, Integer omsOrderId) throws ApiException {
        com.squareup.okhttp.Call call = addOmsOrderFileByURLValidateBeforeCall(body, omsOrderId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an omsOrder by URL. (asynchronously)
     * Adds a file to an existing omsOrder by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param omsOrderId Id of the omsOrder to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOmsOrderFileByURLAsync(RecordFile body, Integer omsOrderId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOmsOrderFileByURLValidateBeforeCall(body, omsOrderId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addOmsOrderTag
     * @param omsOrderId Id of the omsOrder to add a tag to (required)
     * @param omsOrderTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOmsOrderTagCall(Integer omsOrderId, String omsOrderTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/omsOrder/{omsOrderId}/tag/{omsOrderTag}"
            .replaceAll("\\{" + "omsOrderId" + "\\}", apiClient.escapeString(omsOrderId.toString()))
            .replaceAll("\\{" + "omsOrderTag" + "\\}", apiClient.escapeString(omsOrderTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOmsOrderTagValidateBeforeCall(Integer omsOrderId, String omsOrderTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'omsOrderId' is set
        if (omsOrderId == null) {
            throw new ApiException("Missing the required parameter 'omsOrderId' when calling addOmsOrderTag(Async)");
        }
        
        // verify the required parameter 'omsOrderTag' is set
        if (omsOrderTag == null) {
            throw new ApiException("Missing the required parameter 'omsOrderTag' when calling addOmsOrderTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addOmsOrderTagCall(omsOrderId, omsOrderTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for an omsOrder.
     * Adds a tag to an existing omsOrder.
     * @param omsOrderId Id of the omsOrder to add a tag to (required)
     * @param omsOrderTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOmsOrderTag(Integer omsOrderId, String omsOrderTag) throws ApiException {
        addOmsOrderTagWithHttpInfo(omsOrderId, omsOrderTag);
    }

    /**
     * Add new tags for an omsOrder.
     * Adds a tag to an existing omsOrder.
     * @param omsOrderId Id of the omsOrder to add a tag to (required)
     * @param omsOrderTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOmsOrderTagWithHttpInfo(Integer omsOrderId, String omsOrderTag) throws ApiException {
        com.squareup.okhttp.Call call = addOmsOrderTagValidateBeforeCall(omsOrderId, omsOrderTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for an omsOrder. (asynchronously)
     * Adds a tag to an existing omsOrder.
     * @param omsOrderId Id of the omsOrder to add a tag to (required)
     * @param omsOrderTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOmsOrderTagAsync(Integer omsOrderId, String omsOrderTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOmsOrderTagValidateBeforeCall(omsOrderId, omsOrderTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteOmsOrderFile
     * @param omsOrderId Id of the omsOrder to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOmsOrderFileCall(Integer omsOrderId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/omsOrder/{omsOrderId}/file/{fileId}"
            .replaceAll("\\{" + "omsOrderId" + "\\}", apiClient.escapeString(omsOrderId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOmsOrderFileValidateBeforeCall(Integer omsOrderId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'omsOrderId' is set
        if (omsOrderId == null) {
            throw new ApiException("Missing the required parameter 'omsOrderId' when calling deleteOmsOrderFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteOmsOrderFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOmsOrderFileCall(omsOrderId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for an omsOrder.
     * Deletes an existing omsOrder file using the specified data.
     * @param omsOrderId Id of the omsOrder to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteOmsOrderFile(Integer omsOrderId, Integer fileId) throws ApiException {
        deleteOmsOrderFileWithHttpInfo(omsOrderId, fileId);
    }

    /**
     * Delete a file for an omsOrder.
     * Deletes an existing omsOrder file using the specified data.
     * @param omsOrderId Id of the omsOrder to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteOmsOrderFileWithHttpInfo(Integer omsOrderId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteOmsOrderFileValidateBeforeCall(omsOrderId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for an omsOrder. (asynchronously)
     * Deletes an existing omsOrder file using the specified data.
     * @param omsOrderId Id of the omsOrder to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOmsOrderFileAsync(Integer omsOrderId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOmsOrderFileValidateBeforeCall(omsOrderId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteOmsOrderTag
     * @param omsOrderId Id of the omsOrder to remove tag from (required)
     * @param omsOrderTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOmsOrderTagCall(Integer omsOrderId, String omsOrderTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/omsOrder/{omsOrderId}/tag/{omsOrderTag}"
            .replaceAll("\\{" + "omsOrderId" + "\\}", apiClient.escapeString(omsOrderId.toString()))
            .replaceAll("\\{" + "omsOrderTag" + "\\}", apiClient.escapeString(omsOrderTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOmsOrderTagValidateBeforeCall(Integer omsOrderId, String omsOrderTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'omsOrderId' is set
        if (omsOrderId == null) {
            throw new ApiException("Missing the required parameter 'omsOrderId' when calling deleteOmsOrderTag(Async)");
        }
        
        // verify the required parameter 'omsOrderTag' is set
        if (omsOrderTag == null) {
            throw new ApiException("Missing the required parameter 'omsOrderTag' when calling deleteOmsOrderTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOmsOrderTagCall(omsOrderId, omsOrderTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for an omsOrder.
     * Deletes an existing omsOrder tag using the specified data.
     * @param omsOrderId Id of the omsOrder to remove tag from (required)
     * @param omsOrderTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteOmsOrderTag(Integer omsOrderId, String omsOrderTag) throws ApiException {
        deleteOmsOrderTagWithHttpInfo(omsOrderId, omsOrderTag);
    }

    /**
     * Delete a tag for an omsOrder.
     * Deletes an existing omsOrder tag using the specified data.
     * @param omsOrderId Id of the omsOrder to remove tag from (required)
     * @param omsOrderTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteOmsOrderTagWithHttpInfo(Integer omsOrderId, String omsOrderTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteOmsOrderTagValidateBeforeCall(omsOrderId, omsOrderTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for an omsOrder. (asynchronously)
     * Deletes an existing omsOrder tag using the specified data.
     * @param omsOrderId Id of the omsOrder to remove tag from (required)
     * @param omsOrderTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOmsOrderTagAsync(Integer omsOrderId, String omsOrderTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOmsOrderTagValidateBeforeCall(omsOrderId, omsOrderTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateOmsOrderById
     * @param omsOrderId Id of the omsOrder to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateOmsOrderByIdCall(Integer omsOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/omsOrder/duplicate/{omsOrderId}"
            .replaceAll("\\{" + "omsOrderId" + "\\}", apiClient.escapeString(omsOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateOmsOrderByIdValidateBeforeCall(Integer omsOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'omsOrderId' is set
        if (omsOrderId == null) {
            throw new ApiException("Missing the required parameter 'omsOrderId' when calling getDuplicateOmsOrderById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateOmsOrderByIdCall(omsOrderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated an omsOrder by id
     * Returns a duplicated omsOrder identified by the specified id.
     * @param omsOrderId Id of the omsOrder to be duplicated. (required)
     * @return OmsOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OmsOrder getDuplicateOmsOrderById(Integer omsOrderId) throws ApiException {
        ApiResponse<OmsOrder> resp = getDuplicateOmsOrderByIdWithHttpInfo(omsOrderId);
        return resp.getData();
    }

    /**
     * Get a duplicated an omsOrder by id
     * Returns a duplicated omsOrder identified by the specified id.
     * @param omsOrderId Id of the omsOrder to be duplicated. (required)
     * @return ApiResponse&lt;OmsOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OmsOrder> getDuplicateOmsOrderByIdWithHttpInfo(Integer omsOrderId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateOmsOrderByIdValidateBeforeCall(omsOrderId, null, null);
        Type localVarReturnType = new TypeToken<OmsOrder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated an omsOrder by id (asynchronously)
     * Returns a duplicated omsOrder identified by the specified id.
     * @param omsOrderId Id of the omsOrder to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateOmsOrderByIdAsync(Integer omsOrderId, final ApiCallback<OmsOrder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateOmsOrderByIdValidateBeforeCall(omsOrderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OmsOrder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOmsOrderByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOmsOrderByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/omsOrder/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOmsOrderByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getOmsOrderByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search omsOrders by filter
     * Returns the list of omsOrders that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;OmsOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OmsOrder> getOmsOrderByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<OmsOrder>> resp = getOmsOrderByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search omsOrders by filter
     * Returns the list of omsOrders that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;OmsOrder&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OmsOrder>> getOmsOrderByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getOmsOrderByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<OmsOrder>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search omsOrders by filter (asynchronously)
     * Returns the list of omsOrders that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOmsOrderByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<OmsOrder>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOmsOrderByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OmsOrder>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOmsOrderById
     * @param omsOrderId Id of the omsOrder to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOmsOrderByIdCall(Integer omsOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/omsOrder/{omsOrderId}"
            .replaceAll("\\{" + "omsOrderId" + "\\}", apiClient.escapeString(omsOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOmsOrderByIdValidateBeforeCall(Integer omsOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'omsOrderId' is set
        if (omsOrderId == null) {
            throw new ApiException("Missing the required parameter 'omsOrderId' when calling getOmsOrderById(Async)");
        }
        

        com.squareup.okhttp.Call call = getOmsOrderByIdCall(omsOrderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an omsOrder by id
     * Returns the omsOrder identified by the specified id.
     * @param omsOrderId Id of the omsOrder to be returned. (required)
     * @return OmsOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OmsOrder getOmsOrderById(Integer omsOrderId) throws ApiException {
        ApiResponse<OmsOrder> resp = getOmsOrderByIdWithHttpInfo(omsOrderId);
        return resp.getData();
    }

    /**
     * Get an omsOrder by id
     * Returns the omsOrder identified by the specified id.
     * @param omsOrderId Id of the omsOrder to be returned. (required)
     * @return ApiResponse&lt;OmsOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OmsOrder> getOmsOrderByIdWithHttpInfo(Integer omsOrderId) throws ApiException {
        com.squareup.okhttp.Call call = getOmsOrderByIdValidateBeforeCall(omsOrderId, null, null);
        Type localVarReturnType = new TypeToken<OmsOrder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an omsOrder by id (asynchronously)
     * Returns the omsOrder identified by the specified id.
     * @param omsOrderId Id of the omsOrder to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOmsOrderByIdAsync(Integer omsOrderId, final ApiCallback<OmsOrder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOmsOrderByIdValidateBeforeCall(omsOrderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OmsOrder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOmsOrderFiles
     * @param omsOrderId Id of the omsOrder to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOmsOrderFilesCall(Integer omsOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/omsOrder/{omsOrderId}/file"
            .replaceAll("\\{" + "omsOrderId" + "\\}", apiClient.escapeString(omsOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOmsOrderFilesValidateBeforeCall(Integer omsOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'omsOrderId' is set
        if (omsOrderId == null) {
            throw new ApiException("Missing the required parameter 'omsOrderId' when calling getOmsOrderFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getOmsOrderFilesCall(omsOrderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for an omsOrder.
     * Get all existing omsOrder files.
     * @param omsOrderId Id of the omsOrder to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getOmsOrderFiles(Integer omsOrderId) throws ApiException {
        getOmsOrderFilesWithHttpInfo(omsOrderId);
    }

    /**
     * Get the files for an omsOrder.
     * Get all existing omsOrder files.
     * @param omsOrderId Id of the omsOrder to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getOmsOrderFilesWithHttpInfo(Integer omsOrderId) throws ApiException {
        com.squareup.okhttp.Call call = getOmsOrderFilesValidateBeforeCall(omsOrderId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for an omsOrder. (asynchronously)
     * Get all existing omsOrder files.
     * @param omsOrderId Id of the omsOrder to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOmsOrderFilesAsync(Integer omsOrderId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOmsOrderFilesValidateBeforeCall(omsOrderId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getOmsOrderTags
     * @param omsOrderId Id of the omsOrder to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOmsOrderTagsCall(Integer omsOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/omsOrder/{omsOrderId}/tag"
            .replaceAll("\\{" + "omsOrderId" + "\\}", apiClient.escapeString(omsOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOmsOrderTagsValidateBeforeCall(Integer omsOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'omsOrderId' is set
        if (omsOrderId == null) {
            throw new ApiException("Missing the required parameter 'omsOrderId' when calling getOmsOrderTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getOmsOrderTagsCall(omsOrderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for an omsOrder.
     * Get all existing omsOrder tags.
     * @param omsOrderId Id of the omsOrder to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getOmsOrderTags(Integer omsOrderId) throws ApiException {
        getOmsOrderTagsWithHttpInfo(omsOrderId);
    }

    /**
     * Get the tags for an omsOrder.
     * Get all existing omsOrder tags.
     * @param omsOrderId Id of the omsOrder to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getOmsOrderTagsWithHttpInfo(Integer omsOrderId) throws ApiException {
        com.squareup.okhttp.Call call = getOmsOrderTagsValidateBeforeCall(omsOrderId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for an omsOrder. (asynchronously)
     * Get all existing omsOrder tags.
     * @param omsOrderId Id of the omsOrder to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOmsOrderTagsAsync(Integer omsOrderId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOmsOrderTagsValidateBeforeCall(omsOrderId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateOmsOrder
     * @param body OmsOrder to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateOmsOrderCall(OmsOrder body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/omsOrder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOmsOrderValidateBeforeCall(OmsOrder body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateOmsOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = updateOmsOrderCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an omsOrder
     * Updates an existing omsOrder using the specified data.
     * @param body OmsOrder to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateOmsOrder(OmsOrder body) throws ApiException {
        updateOmsOrderWithHttpInfo(body);
    }

    /**
     * Update an omsOrder
     * Updates an existing omsOrder using the specified data.
     * @param body OmsOrder to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateOmsOrderWithHttpInfo(OmsOrder body) throws ApiException {
        com.squareup.okhttp.Call call = updateOmsOrderValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an omsOrder (asynchronously)
     * Updates an existing omsOrder using the specified data.
     * @param body OmsOrder to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOmsOrderAsync(OmsOrder body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOmsOrderValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateOmsOrderCustomFields
     * @param body OmsOrder to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateOmsOrderCustomFieldsCall(OmsOrder body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/omsOrder/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOmsOrderCustomFieldsValidateBeforeCall(OmsOrder body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateOmsOrderCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateOmsOrderCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an omsOrder custom fields
     * Updates an existing omsOrder custom fields using the specified data.
     * @param body OmsOrder to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateOmsOrderCustomFields(OmsOrder body) throws ApiException {
        updateOmsOrderCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update an omsOrder custom fields
     * Updates an existing omsOrder custom fields using the specified data.
     * @param body OmsOrder to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateOmsOrderCustomFieldsWithHttpInfo(OmsOrder body) throws ApiException {
        com.squareup.okhttp.Call call = updateOmsOrderCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an omsOrder custom fields (asynchronously)
     * Updates an existing omsOrder custom fields using the specified data.
     * @param body OmsOrder to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOmsOrderCustomFieldsAsync(OmsOrder body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOmsOrderCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
