/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.LoggedTime;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LoggedTimeApi {
    private ApiClient apiClient;

    public LoggedTimeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LoggedTimeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addLoggedTimeAudit
     * @param loggedTimeId Id of the loggedTime to add an audit to (required)
     * @param loggedTimeAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLoggedTimeAuditCall(Integer loggedTimeId, String loggedTimeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/loggedTime/{loggedTimeId}/audit/{loggedTimeAudit}"
            .replaceAll("\\{" + "loggedTimeId" + "\\}", apiClient.escapeString(loggedTimeId.toString()))
            .replaceAll("\\{" + "loggedTimeAudit" + "\\}", apiClient.escapeString(loggedTimeAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLoggedTimeAuditValidateBeforeCall(Integer loggedTimeId, String loggedTimeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loggedTimeId' is set
        if (loggedTimeId == null) {
            throw new ApiException("Missing the required parameter 'loggedTimeId' when calling addLoggedTimeAudit(Async)");
        }
        
        // verify the required parameter 'loggedTimeAudit' is set
        if (loggedTimeAudit == null) {
            throw new ApiException("Missing the required parameter 'loggedTimeAudit' when calling addLoggedTimeAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addLoggedTimeAuditCall(loggedTimeId, loggedTimeAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a loggedTime
     * Adds an audit to an existing loggedTime.
     * @param loggedTimeId Id of the loggedTime to add an audit to (required)
     * @param loggedTimeAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addLoggedTimeAudit(Integer loggedTimeId, String loggedTimeAudit) throws ApiException {
        addLoggedTimeAuditWithHttpInfo(loggedTimeId, loggedTimeAudit);
    }

    /**
     * Add new audit for a loggedTime
     * Adds an audit to an existing loggedTime.
     * @param loggedTimeId Id of the loggedTime to add an audit to (required)
     * @param loggedTimeAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addLoggedTimeAuditWithHttpInfo(Integer loggedTimeId, String loggedTimeAudit) throws ApiException {
        com.squareup.okhttp.Call call = addLoggedTimeAuditValidateBeforeCall(loggedTimeId, loggedTimeAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a loggedTime (asynchronously)
     * Adds an audit to an existing loggedTime.
     * @param loggedTimeId Id of the loggedTime to add an audit to (required)
     * @param loggedTimeAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLoggedTimeAuditAsync(Integer loggedTimeId, String loggedTimeAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLoggedTimeAuditValidateBeforeCall(loggedTimeId, loggedTimeAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addLoggedTimeFile
     * @param loggedTimeId Id of the loggedTime to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLoggedTimeFileCall(Integer loggedTimeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/loggedTime/{loggedTimeId}/file/{fileName}"
            .replaceAll("\\{" + "loggedTimeId" + "\\}", apiClient.escapeString(loggedTimeId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLoggedTimeFileValidateBeforeCall(Integer loggedTimeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loggedTimeId' is set
        if (loggedTimeId == null) {
            throw new ApiException("Missing the required parameter 'loggedTimeId' when calling addLoggedTimeFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addLoggedTimeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addLoggedTimeFileCall(loggedTimeId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a loggedTime
     * Adds a file to an existing loggedTime.
     * @param loggedTimeId Id of the loggedTime to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addLoggedTimeFile(Integer loggedTimeId, String fileName) throws ApiException {
        addLoggedTimeFileWithHttpInfo(loggedTimeId, fileName);
    }

    /**
     * Attach a file to a loggedTime
     * Adds a file to an existing loggedTime.
     * @param loggedTimeId Id of the loggedTime to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addLoggedTimeFileWithHttpInfo(Integer loggedTimeId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addLoggedTimeFileValidateBeforeCall(loggedTimeId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a loggedTime (asynchronously)
     * Adds a file to an existing loggedTime.
     * @param loggedTimeId Id of the loggedTime to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLoggedTimeFileAsync(Integer loggedTimeId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLoggedTimeFileValidateBeforeCall(loggedTimeId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addLoggedTimeFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param loggedTimeId Id of the loggedTime to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLoggedTimeFileByURLCall(RecordFile body, Integer loggedTimeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/loggedTime/{loggedTimeId}/file"
            .replaceAll("\\{" + "loggedTimeId" + "\\}", apiClient.escapeString(loggedTimeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLoggedTimeFileByURLValidateBeforeCall(RecordFile body, Integer loggedTimeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addLoggedTimeFileByURL(Async)");
        }
        
        // verify the required parameter 'loggedTimeId' is set
        if (loggedTimeId == null) {
            throw new ApiException("Missing the required parameter 'loggedTimeId' when calling addLoggedTimeFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addLoggedTimeFileByURLCall(body, loggedTimeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a loggedTime by URL.
     * Adds a file to an existing loggedTime by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param loggedTimeId Id of the loggedTime to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addLoggedTimeFileByURL(RecordFile body, Integer loggedTimeId) throws ApiException {
        addLoggedTimeFileByURLWithHttpInfo(body, loggedTimeId);
    }

    /**
     * Attach a file to a loggedTime by URL.
     * Adds a file to an existing loggedTime by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param loggedTimeId Id of the loggedTime to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addLoggedTimeFileByURLWithHttpInfo(RecordFile body, Integer loggedTimeId) throws ApiException {
        com.squareup.okhttp.Call call = addLoggedTimeFileByURLValidateBeforeCall(body, loggedTimeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a loggedTime by URL. (asynchronously)
     * Adds a file to an existing loggedTime by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param loggedTimeId Id of the loggedTime to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLoggedTimeFileByURLAsync(RecordFile body, Integer loggedTimeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLoggedTimeFileByURLValidateBeforeCall(body, loggedTimeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addLoggedTimeTag
     * @param loggedTimeId Id of the loggedTime to add a tag to (required)
     * @param loggedTimeTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLoggedTimeTagCall(Integer loggedTimeId, String loggedTimeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/loggedTime/{loggedTimeId}/tag/{loggedTimeTag}"
            .replaceAll("\\{" + "loggedTimeId" + "\\}", apiClient.escapeString(loggedTimeId.toString()))
            .replaceAll("\\{" + "loggedTimeTag" + "\\}", apiClient.escapeString(loggedTimeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLoggedTimeTagValidateBeforeCall(Integer loggedTimeId, String loggedTimeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loggedTimeId' is set
        if (loggedTimeId == null) {
            throw new ApiException("Missing the required parameter 'loggedTimeId' when calling addLoggedTimeTag(Async)");
        }
        
        // verify the required parameter 'loggedTimeTag' is set
        if (loggedTimeTag == null) {
            throw new ApiException("Missing the required parameter 'loggedTimeTag' when calling addLoggedTimeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addLoggedTimeTagCall(loggedTimeId, loggedTimeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a loggedTime.
     * Adds a tag to an existing loggedTime.
     * @param loggedTimeId Id of the loggedTime to add a tag to (required)
     * @param loggedTimeTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addLoggedTimeTag(Integer loggedTimeId, String loggedTimeTag) throws ApiException {
        addLoggedTimeTagWithHttpInfo(loggedTimeId, loggedTimeTag);
    }

    /**
     * Add new tags for a loggedTime.
     * Adds a tag to an existing loggedTime.
     * @param loggedTimeId Id of the loggedTime to add a tag to (required)
     * @param loggedTimeTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addLoggedTimeTagWithHttpInfo(Integer loggedTimeId, String loggedTimeTag) throws ApiException {
        com.squareup.okhttp.Call call = addLoggedTimeTagValidateBeforeCall(loggedTimeId, loggedTimeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a loggedTime. (asynchronously)
     * Adds a tag to an existing loggedTime.
     * @param loggedTimeId Id of the loggedTime to add a tag to (required)
     * @param loggedTimeTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLoggedTimeTagAsync(Integer loggedTimeId, String loggedTimeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLoggedTimeTagValidateBeforeCall(loggedTimeId, loggedTimeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLoggedTimeFile
     * @param loggedTimeId Id of the loggedTime to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLoggedTimeFileCall(Integer loggedTimeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/loggedTime/{loggedTimeId}/file/{fileId}"
            .replaceAll("\\{" + "loggedTimeId" + "\\}", apiClient.escapeString(loggedTimeId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLoggedTimeFileValidateBeforeCall(Integer loggedTimeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loggedTimeId' is set
        if (loggedTimeId == null) {
            throw new ApiException("Missing the required parameter 'loggedTimeId' when calling deleteLoggedTimeFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteLoggedTimeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteLoggedTimeFileCall(loggedTimeId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a loggedTime.
     * Deletes an existing loggedTime file using the specified data.
     * @param loggedTimeId Id of the loggedTime to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLoggedTimeFile(Integer loggedTimeId, Integer fileId) throws ApiException {
        deleteLoggedTimeFileWithHttpInfo(loggedTimeId, fileId);
    }

    /**
     * Delete a file for a loggedTime.
     * Deletes an existing loggedTime file using the specified data.
     * @param loggedTimeId Id of the loggedTime to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLoggedTimeFileWithHttpInfo(Integer loggedTimeId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteLoggedTimeFileValidateBeforeCall(loggedTimeId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a loggedTime. (asynchronously)
     * Deletes an existing loggedTime file using the specified data.
     * @param loggedTimeId Id of the loggedTime to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLoggedTimeFileAsync(Integer loggedTimeId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLoggedTimeFileValidateBeforeCall(loggedTimeId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLoggedTimeTag
     * @param loggedTimeId Id of the loggedTime to remove tag from (required)
     * @param loggedTimeTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLoggedTimeTagCall(Integer loggedTimeId, String loggedTimeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/loggedTime/{loggedTimeId}/tag/{loggedTimeTag}"
            .replaceAll("\\{" + "loggedTimeId" + "\\}", apiClient.escapeString(loggedTimeId.toString()))
            .replaceAll("\\{" + "loggedTimeTag" + "\\}", apiClient.escapeString(loggedTimeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLoggedTimeTagValidateBeforeCall(Integer loggedTimeId, String loggedTimeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loggedTimeId' is set
        if (loggedTimeId == null) {
            throw new ApiException("Missing the required parameter 'loggedTimeId' when calling deleteLoggedTimeTag(Async)");
        }
        
        // verify the required parameter 'loggedTimeTag' is set
        if (loggedTimeTag == null) {
            throw new ApiException("Missing the required parameter 'loggedTimeTag' when calling deleteLoggedTimeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteLoggedTimeTagCall(loggedTimeId, loggedTimeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a loggedTime.
     * Deletes an existing loggedTime tag using the specified data.
     * @param loggedTimeId Id of the loggedTime to remove tag from (required)
     * @param loggedTimeTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLoggedTimeTag(Integer loggedTimeId, String loggedTimeTag) throws ApiException {
        deleteLoggedTimeTagWithHttpInfo(loggedTimeId, loggedTimeTag);
    }

    /**
     * Delete a tag for a loggedTime.
     * Deletes an existing loggedTime tag using the specified data.
     * @param loggedTimeId Id of the loggedTime to remove tag from (required)
     * @param loggedTimeTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLoggedTimeTagWithHttpInfo(Integer loggedTimeId, String loggedTimeTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteLoggedTimeTagValidateBeforeCall(loggedTimeId, loggedTimeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a loggedTime. (asynchronously)
     * Deletes an existing loggedTime tag using the specified data.
     * @param loggedTimeId Id of the loggedTime to remove tag from (required)
     * @param loggedTimeTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLoggedTimeTagAsync(Integer loggedTimeId, String loggedTimeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLoggedTimeTagValidateBeforeCall(loggedTimeId, loggedTimeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateLoggedTimeById
     * @param loggedTimeId Id of the loggedTime to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateLoggedTimeByIdCall(Integer loggedTimeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/loggedTime/duplicate/{loggedTimeId}"
            .replaceAll("\\{" + "loggedTimeId" + "\\}", apiClient.escapeString(loggedTimeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateLoggedTimeByIdValidateBeforeCall(Integer loggedTimeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loggedTimeId' is set
        if (loggedTimeId == null) {
            throw new ApiException("Missing the required parameter 'loggedTimeId' when calling getDuplicateLoggedTimeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateLoggedTimeByIdCall(loggedTimeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a loggedTime by id
     * Returns a duplicated loggedTime identified by the specified id.
     * @param loggedTimeId Id of the loggedTime to be duplicated. (required)
     * @return LoggedTime
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoggedTime getDuplicateLoggedTimeById(Integer loggedTimeId) throws ApiException {
        ApiResponse<LoggedTime> resp = getDuplicateLoggedTimeByIdWithHttpInfo(loggedTimeId);
        return resp.getData();
    }

    /**
     * Get a duplicated a loggedTime by id
     * Returns a duplicated loggedTime identified by the specified id.
     * @param loggedTimeId Id of the loggedTime to be duplicated. (required)
     * @return ApiResponse&lt;LoggedTime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoggedTime> getDuplicateLoggedTimeByIdWithHttpInfo(Integer loggedTimeId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateLoggedTimeByIdValidateBeforeCall(loggedTimeId, null, null);
        Type localVarReturnType = new TypeToken<LoggedTime>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a loggedTime by id (asynchronously)
     * Returns a duplicated loggedTime identified by the specified id.
     * @param loggedTimeId Id of the loggedTime to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateLoggedTimeByIdAsync(Integer loggedTimeId, final ApiCallback<LoggedTime> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateLoggedTimeByIdValidateBeforeCall(loggedTimeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LoggedTime>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLoggedTimeByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLoggedTimeByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/loggedTime/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLoggedTimeByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getLoggedTimeByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search loggedTimes by filter
     * Returns the list of loggedTimes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;LoggedTime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LoggedTime> getLoggedTimeByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<LoggedTime>> resp = getLoggedTimeByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search loggedTimes by filter
     * Returns the list of loggedTimes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;LoggedTime&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LoggedTime>> getLoggedTimeByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getLoggedTimeByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<LoggedTime>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search loggedTimes by filter (asynchronously)
     * Returns the list of loggedTimes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLoggedTimeByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<LoggedTime>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLoggedTimeByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LoggedTime>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLoggedTimeById
     * @param loggedTimeId Id of the loggedTime to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLoggedTimeByIdCall(Integer loggedTimeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/loggedTime/{loggedTimeId}"
            .replaceAll("\\{" + "loggedTimeId" + "\\}", apiClient.escapeString(loggedTimeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLoggedTimeByIdValidateBeforeCall(Integer loggedTimeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loggedTimeId' is set
        if (loggedTimeId == null) {
            throw new ApiException("Missing the required parameter 'loggedTimeId' when calling getLoggedTimeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getLoggedTimeByIdCall(loggedTimeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a loggedTime by id
     * Returns the loggedTime identified by the specified id.
     * @param loggedTimeId Id of the loggedTime to be returned. (required)
     * @return LoggedTime
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoggedTime getLoggedTimeById(Integer loggedTimeId) throws ApiException {
        ApiResponse<LoggedTime> resp = getLoggedTimeByIdWithHttpInfo(loggedTimeId);
        return resp.getData();
    }

    /**
     * Get a loggedTime by id
     * Returns the loggedTime identified by the specified id.
     * @param loggedTimeId Id of the loggedTime to be returned. (required)
     * @return ApiResponse&lt;LoggedTime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoggedTime> getLoggedTimeByIdWithHttpInfo(Integer loggedTimeId) throws ApiException {
        com.squareup.okhttp.Call call = getLoggedTimeByIdValidateBeforeCall(loggedTimeId, null, null);
        Type localVarReturnType = new TypeToken<LoggedTime>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a loggedTime by id (asynchronously)
     * Returns the loggedTime identified by the specified id.
     * @param loggedTimeId Id of the loggedTime to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLoggedTimeByIdAsync(Integer loggedTimeId, final ApiCallback<LoggedTime> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLoggedTimeByIdValidateBeforeCall(loggedTimeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LoggedTime>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLoggedTimeFiles
     * @param loggedTimeId Id of the loggedTime to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLoggedTimeFilesCall(Integer loggedTimeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/loggedTime/{loggedTimeId}/file"
            .replaceAll("\\{" + "loggedTimeId" + "\\}", apiClient.escapeString(loggedTimeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLoggedTimeFilesValidateBeforeCall(Integer loggedTimeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loggedTimeId' is set
        if (loggedTimeId == null) {
            throw new ApiException("Missing the required parameter 'loggedTimeId' when calling getLoggedTimeFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getLoggedTimeFilesCall(loggedTimeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a loggedTime.
     * Get all existing loggedTime files.
     * @param loggedTimeId Id of the loggedTime to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getLoggedTimeFiles(Integer loggedTimeId) throws ApiException {
        getLoggedTimeFilesWithHttpInfo(loggedTimeId);
    }

    /**
     * Get the files for a loggedTime.
     * Get all existing loggedTime files.
     * @param loggedTimeId Id of the loggedTime to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getLoggedTimeFilesWithHttpInfo(Integer loggedTimeId) throws ApiException {
        com.squareup.okhttp.Call call = getLoggedTimeFilesValidateBeforeCall(loggedTimeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a loggedTime. (asynchronously)
     * Get all existing loggedTime files.
     * @param loggedTimeId Id of the loggedTime to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLoggedTimeFilesAsync(Integer loggedTimeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLoggedTimeFilesValidateBeforeCall(loggedTimeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getLoggedTimeTags
     * @param loggedTimeId Id of the loggedTime to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLoggedTimeTagsCall(Integer loggedTimeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/loggedTime/{loggedTimeId}/tag"
            .replaceAll("\\{" + "loggedTimeId" + "\\}", apiClient.escapeString(loggedTimeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLoggedTimeTagsValidateBeforeCall(Integer loggedTimeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loggedTimeId' is set
        if (loggedTimeId == null) {
            throw new ApiException("Missing the required parameter 'loggedTimeId' when calling getLoggedTimeTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getLoggedTimeTagsCall(loggedTimeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a loggedTime.
     * Get all existing loggedTime tags.
     * @param loggedTimeId Id of the loggedTime to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getLoggedTimeTags(Integer loggedTimeId) throws ApiException {
        getLoggedTimeTagsWithHttpInfo(loggedTimeId);
    }

    /**
     * Get the tags for a loggedTime.
     * Get all existing loggedTime tags.
     * @param loggedTimeId Id of the loggedTime to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getLoggedTimeTagsWithHttpInfo(Integer loggedTimeId) throws ApiException {
        com.squareup.okhttp.Call call = getLoggedTimeTagsValidateBeforeCall(loggedTimeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a loggedTime. (asynchronously)
     * Get all existing loggedTime tags.
     * @param loggedTimeId Id of the loggedTime to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLoggedTimeTagsAsync(Integer loggedTimeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLoggedTimeTagsValidateBeforeCall(loggedTimeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateLoggedTimeCustomFields
     * @param body LoggedTime to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLoggedTimeCustomFieldsCall(LoggedTime body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/loggedTime/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLoggedTimeCustomFieldsValidateBeforeCall(LoggedTime body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLoggedTimeCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateLoggedTimeCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a loggedTime custom fields
     * Updates an existing loggedTime custom fields using the specified data.
     * @param body LoggedTime to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateLoggedTimeCustomFields(LoggedTime body) throws ApiException {
        updateLoggedTimeCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a loggedTime custom fields
     * Updates an existing loggedTime custom fields using the specified data.
     * @param body LoggedTime to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateLoggedTimeCustomFieldsWithHttpInfo(LoggedTime body) throws ApiException {
        com.squareup.okhttp.Call call = updateLoggedTimeCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a loggedTime custom fields (asynchronously)
     * Updates an existing loggedTime custom fields using the specified data.
     * @param body LoggedTime to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLoggedTimeCustomFieldsAsync(LoggedTime body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLoggedTimeCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
