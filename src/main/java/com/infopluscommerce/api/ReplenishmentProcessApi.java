/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.RecordFile;
import com.infopluscommerce.model.ReplenishmentProcess;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReplenishmentProcessApi {
    private ApiClient apiClient;

    public ReplenishmentProcessApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReplenishmentProcessApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addReplenishmentProcessAudit
     * @param replenishmentProcessId Id of the replenishmentProcess to add an audit to (required)
     * @param replenishmentProcessAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addReplenishmentProcessAuditCall(Integer replenishmentProcessId, String replenishmentProcessAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishmentProcess/{replenishmentProcessId}/audit/{replenishmentProcessAudit}"
            .replaceAll("\\{" + "replenishmentProcessId" + "\\}", apiClient.escapeString(replenishmentProcessId.toString()))
            .replaceAll("\\{" + "replenishmentProcessAudit" + "\\}", apiClient.escapeString(replenishmentProcessAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addReplenishmentProcessAuditValidateBeforeCall(Integer replenishmentProcessId, String replenishmentProcessAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'replenishmentProcessId' is set
        if (replenishmentProcessId == null) {
            throw new ApiException("Missing the required parameter 'replenishmentProcessId' when calling addReplenishmentProcessAudit(Async)");
        }
        
        // verify the required parameter 'replenishmentProcessAudit' is set
        if (replenishmentProcessAudit == null) {
            throw new ApiException("Missing the required parameter 'replenishmentProcessAudit' when calling addReplenishmentProcessAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addReplenishmentProcessAuditCall(replenishmentProcessId, replenishmentProcessAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a replenishmentProcess
     * Adds an audit to an existing replenishmentProcess.
     * @param replenishmentProcessId Id of the replenishmentProcess to add an audit to (required)
     * @param replenishmentProcessAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addReplenishmentProcessAudit(Integer replenishmentProcessId, String replenishmentProcessAudit) throws ApiException {
        addReplenishmentProcessAuditWithHttpInfo(replenishmentProcessId, replenishmentProcessAudit);
    }

    /**
     * Add new audit for a replenishmentProcess
     * Adds an audit to an existing replenishmentProcess.
     * @param replenishmentProcessId Id of the replenishmentProcess to add an audit to (required)
     * @param replenishmentProcessAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addReplenishmentProcessAuditWithHttpInfo(Integer replenishmentProcessId, String replenishmentProcessAudit) throws ApiException {
        com.squareup.okhttp.Call call = addReplenishmentProcessAuditValidateBeforeCall(replenishmentProcessId, replenishmentProcessAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a replenishmentProcess (asynchronously)
     * Adds an audit to an existing replenishmentProcess.
     * @param replenishmentProcessId Id of the replenishmentProcess to add an audit to (required)
     * @param replenishmentProcessAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addReplenishmentProcessAuditAsync(Integer replenishmentProcessId, String replenishmentProcessAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addReplenishmentProcessAuditValidateBeforeCall(replenishmentProcessId, replenishmentProcessAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addReplenishmentProcessFile
     * @param replenishmentProcessId Id of the replenishmentProcess to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addReplenishmentProcessFileCall(Integer replenishmentProcessId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishmentProcess/{replenishmentProcessId}/file/{fileName}"
            .replaceAll("\\{" + "replenishmentProcessId" + "\\}", apiClient.escapeString(replenishmentProcessId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addReplenishmentProcessFileValidateBeforeCall(Integer replenishmentProcessId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'replenishmentProcessId' is set
        if (replenishmentProcessId == null) {
            throw new ApiException("Missing the required parameter 'replenishmentProcessId' when calling addReplenishmentProcessFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addReplenishmentProcessFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addReplenishmentProcessFileCall(replenishmentProcessId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a replenishmentProcess
     * Adds a file to an existing replenishmentProcess.
     * @param replenishmentProcessId Id of the replenishmentProcess to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addReplenishmentProcessFile(Integer replenishmentProcessId, String fileName) throws ApiException {
        addReplenishmentProcessFileWithHttpInfo(replenishmentProcessId, fileName);
    }

    /**
     * Attach a file to a replenishmentProcess
     * Adds a file to an existing replenishmentProcess.
     * @param replenishmentProcessId Id of the replenishmentProcess to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addReplenishmentProcessFileWithHttpInfo(Integer replenishmentProcessId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addReplenishmentProcessFileValidateBeforeCall(replenishmentProcessId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a replenishmentProcess (asynchronously)
     * Adds a file to an existing replenishmentProcess.
     * @param replenishmentProcessId Id of the replenishmentProcess to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addReplenishmentProcessFileAsync(Integer replenishmentProcessId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addReplenishmentProcessFileValidateBeforeCall(replenishmentProcessId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addReplenishmentProcessFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param replenishmentProcessId Id of the replenishmentProcess to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addReplenishmentProcessFileByURLCall(RecordFile body, Integer replenishmentProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/replenishmentProcess/{replenishmentProcessId}/file"
            .replaceAll("\\{" + "replenishmentProcessId" + "\\}", apiClient.escapeString(replenishmentProcessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addReplenishmentProcessFileByURLValidateBeforeCall(RecordFile body, Integer replenishmentProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addReplenishmentProcessFileByURL(Async)");
        }
        
        // verify the required parameter 'replenishmentProcessId' is set
        if (replenishmentProcessId == null) {
            throw new ApiException("Missing the required parameter 'replenishmentProcessId' when calling addReplenishmentProcessFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addReplenishmentProcessFileByURLCall(body, replenishmentProcessId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a replenishmentProcess by URL.
     * Adds a file to an existing replenishmentProcess by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param replenishmentProcessId Id of the replenishmentProcess to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addReplenishmentProcessFileByURL(RecordFile body, Integer replenishmentProcessId) throws ApiException {
        addReplenishmentProcessFileByURLWithHttpInfo(body, replenishmentProcessId);
    }

    /**
     * Attach a file to a replenishmentProcess by URL.
     * Adds a file to an existing replenishmentProcess by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param replenishmentProcessId Id of the replenishmentProcess to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addReplenishmentProcessFileByURLWithHttpInfo(RecordFile body, Integer replenishmentProcessId) throws ApiException {
        com.squareup.okhttp.Call call = addReplenishmentProcessFileByURLValidateBeforeCall(body, replenishmentProcessId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a replenishmentProcess by URL. (asynchronously)
     * Adds a file to an existing replenishmentProcess by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param replenishmentProcessId Id of the replenishmentProcess to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addReplenishmentProcessFileByURLAsync(RecordFile body, Integer replenishmentProcessId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addReplenishmentProcessFileByURLValidateBeforeCall(body, replenishmentProcessId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addReplenishmentProcessTag
     * @param replenishmentProcessId Id of the replenishmentProcess to add a tag to (required)
     * @param replenishmentProcessTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addReplenishmentProcessTagCall(Integer replenishmentProcessId, String replenishmentProcessTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishmentProcess/{replenishmentProcessId}/tag/{replenishmentProcessTag}"
            .replaceAll("\\{" + "replenishmentProcessId" + "\\}", apiClient.escapeString(replenishmentProcessId.toString()))
            .replaceAll("\\{" + "replenishmentProcessTag" + "\\}", apiClient.escapeString(replenishmentProcessTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addReplenishmentProcessTagValidateBeforeCall(Integer replenishmentProcessId, String replenishmentProcessTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'replenishmentProcessId' is set
        if (replenishmentProcessId == null) {
            throw new ApiException("Missing the required parameter 'replenishmentProcessId' when calling addReplenishmentProcessTag(Async)");
        }
        
        // verify the required parameter 'replenishmentProcessTag' is set
        if (replenishmentProcessTag == null) {
            throw new ApiException("Missing the required parameter 'replenishmentProcessTag' when calling addReplenishmentProcessTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addReplenishmentProcessTagCall(replenishmentProcessId, replenishmentProcessTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a replenishmentProcess.
     * Adds a tag to an existing replenishmentProcess.
     * @param replenishmentProcessId Id of the replenishmentProcess to add a tag to (required)
     * @param replenishmentProcessTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addReplenishmentProcessTag(Integer replenishmentProcessId, String replenishmentProcessTag) throws ApiException {
        addReplenishmentProcessTagWithHttpInfo(replenishmentProcessId, replenishmentProcessTag);
    }

    /**
     * Add new tags for a replenishmentProcess.
     * Adds a tag to an existing replenishmentProcess.
     * @param replenishmentProcessId Id of the replenishmentProcess to add a tag to (required)
     * @param replenishmentProcessTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addReplenishmentProcessTagWithHttpInfo(Integer replenishmentProcessId, String replenishmentProcessTag) throws ApiException {
        com.squareup.okhttp.Call call = addReplenishmentProcessTagValidateBeforeCall(replenishmentProcessId, replenishmentProcessTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a replenishmentProcess. (asynchronously)
     * Adds a tag to an existing replenishmentProcess.
     * @param replenishmentProcessId Id of the replenishmentProcess to add a tag to (required)
     * @param replenishmentProcessTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addReplenishmentProcessTagAsync(Integer replenishmentProcessId, String replenishmentProcessTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addReplenishmentProcessTagValidateBeforeCall(replenishmentProcessId, replenishmentProcessTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteReplenishmentProcessFile
     * @param replenishmentProcessId Id of the replenishmentProcess to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteReplenishmentProcessFileCall(Integer replenishmentProcessId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishmentProcess/{replenishmentProcessId}/file/{fileId}"
            .replaceAll("\\{" + "replenishmentProcessId" + "\\}", apiClient.escapeString(replenishmentProcessId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteReplenishmentProcessFileValidateBeforeCall(Integer replenishmentProcessId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'replenishmentProcessId' is set
        if (replenishmentProcessId == null) {
            throw new ApiException("Missing the required parameter 'replenishmentProcessId' when calling deleteReplenishmentProcessFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteReplenishmentProcessFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteReplenishmentProcessFileCall(replenishmentProcessId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a replenishmentProcess.
     * Deletes an existing replenishmentProcess file using the specified data.
     * @param replenishmentProcessId Id of the replenishmentProcess to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteReplenishmentProcessFile(Integer replenishmentProcessId, Integer fileId) throws ApiException {
        deleteReplenishmentProcessFileWithHttpInfo(replenishmentProcessId, fileId);
    }

    /**
     * Delete a file for a replenishmentProcess.
     * Deletes an existing replenishmentProcess file using the specified data.
     * @param replenishmentProcessId Id of the replenishmentProcess to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteReplenishmentProcessFileWithHttpInfo(Integer replenishmentProcessId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteReplenishmentProcessFileValidateBeforeCall(replenishmentProcessId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a replenishmentProcess. (asynchronously)
     * Deletes an existing replenishmentProcess file using the specified data.
     * @param replenishmentProcessId Id of the replenishmentProcess to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteReplenishmentProcessFileAsync(Integer replenishmentProcessId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteReplenishmentProcessFileValidateBeforeCall(replenishmentProcessId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteReplenishmentProcessTag
     * @param replenishmentProcessId Id of the replenishmentProcess to remove tag from (required)
     * @param replenishmentProcessTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteReplenishmentProcessTagCall(Integer replenishmentProcessId, String replenishmentProcessTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishmentProcess/{replenishmentProcessId}/tag/{replenishmentProcessTag}"
            .replaceAll("\\{" + "replenishmentProcessId" + "\\}", apiClient.escapeString(replenishmentProcessId.toString()))
            .replaceAll("\\{" + "replenishmentProcessTag" + "\\}", apiClient.escapeString(replenishmentProcessTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteReplenishmentProcessTagValidateBeforeCall(Integer replenishmentProcessId, String replenishmentProcessTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'replenishmentProcessId' is set
        if (replenishmentProcessId == null) {
            throw new ApiException("Missing the required parameter 'replenishmentProcessId' when calling deleteReplenishmentProcessTag(Async)");
        }
        
        // verify the required parameter 'replenishmentProcessTag' is set
        if (replenishmentProcessTag == null) {
            throw new ApiException("Missing the required parameter 'replenishmentProcessTag' when calling deleteReplenishmentProcessTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteReplenishmentProcessTagCall(replenishmentProcessId, replenishmentProcessTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a replenishmentProcess.
     * Deletes an existing replenishmentProcess tag using the specified data.
     * @param replenishmentProcessId Id of the replenishmentProcess to remove tag from (required)
     * @param replenishmentProcessTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteReplenishmentProcessTag(Integer replenishmentProcessId, String replenishmentProcessTag) throws ApiException {
        deleteReplenishmentProcessTagWithHttpInfo(replenishmentProcessId, replenishmentProcessTag);
    }

    /**
     * Delete a tag for a replenishmentProcess.
     * Deletes an existing replenishmentProcess tag using the specified data.
     * @param replenishmentProcessId Id of the replenishmentProcess to remove tag from (required)
     * @param replenishmentProcessTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteReplenishmentProcessTagWithHttpInfo(Integer replenishmentProcessId, String replenishmentProcessTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteReplenishmentProcessTagValidateBeforeCall(replenishmentProcessId, replenishmentProcessTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a replenishmentProcess. (asynchronously)
     * Deletes an existing replenishmentProcess tag using the specified data.
     * @param replenishmentProcessId Id of the replenishmentProcess to remove tag from (required)
     * @param replenishmentProcessTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteReplenishmentProcessTagAsync(Integer replenishmentProcessId, String replenishmentProcessTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteReplenishmentProcessTagValidateBeforeCall(replenishmentProcessId, replenishmentProcessTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateReplenishmentProcessById
     * @param replenishmentProcessId Id of the replenishmentProcess to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateReplenishmentProcessByIdCall(Integer replenishmentProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishmentProcess/duplicate/{replenishmentProcessId}"
            .replaceAll("\\{" + "replenishmentProcessId" + "\\}", apiClient.escapeString(replenishmentProcessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateReplenishmentProcessByIdValidateBeforeCall(Integer replenishmentProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'replenishmentProcessId' is set
        if (replenishmentProcessId == null) {
            throw new ApiException("Missing the required parameter 'replenishmentProcessId' when calling getDuplicateReplenishmentProcessById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateReplenishmentProcessByIdCall(replenishmentProcessId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a replenishmentProcess by id
     * Returns a duplicated replenishmentProcess identified by the specified id.
     * @param replenishmentProcessId Id of the replenishmentProcess to be duplicated. (required)
     * @return ReplenishmentProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReplenishmentProcess getDuplicateReplenishmentProcessById(Integer replenishmentProcessId) throws ApiException {
        ApiResponse<ReplenishmentProcess> resp = getDuplicateReplenishmentProcessByIdWithHttpInfo(replenishmentProcessId);
        return resp.getData();
    }

    /**
     * Get a duplicated a replenishmentProcess by id
     * Returns a duplicated replenishmentProcess identified by the specified id.
     * @param replenishmentProcessId Id of the replenishmentProcess to be duplicated. (required)
     * @return ApiResponse&lt;ReplenishmentProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReplenishmentProcess> getDuplicateReplenishmentProcessByIdWithHttpInfo(Integer replenishmentProcessId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateReplenishmentProcessByIdValidateBeforeCall(replenishmentProcessId, null, null);
        Type localVarReturnType = new TypeToken<ReplenishmentProcess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a replenishmentProcess by id (asynchronously)
     * Returns a duplicated replenishmentProcess identified by the specified id.
     * @param replenishmentProcessId Id of the replenishmentProcess to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateReplenishmentProcessByIdAsync(Integer replenishmentProcessId, final ApiCallback<ReplenishmentProcess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateReplenishmentProcessByIdValidateBeforeCall(replenishmentProcessId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReplenishmentProcess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReplenishmentProcessByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReplenishmentProcessByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishmentProcess/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReplenishmentProcessByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getReplenishmentProcessByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search replenishmentProcesses by filter
     * Returns the list of replenishmentProcesses that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;ReplenishmentProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ReplenishmentProcess> getReplenishmentProcessByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<ReplenishmentProcess>> resp = getReplenishmentProcessByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search replenishmentProcesses by filter
     * Returns the list of replenishmentProcesses that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;ReplenishmentProcess&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ReplenishmentProcess>> getReplenishmentProcessByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getReplenishmentProcessByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<ReplenishmentProcess>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search replenishmentProcesses by filter (asynchronously)
     * Returns the list of replenishmentProcesses that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReplenishmentProcessByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<ReplenishmentProcess>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReplenishmentProcessByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ReplenishmentProcess>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReplenishmentProcessById
     * @param replenishmentProcessId Id of the replenishmentProcess to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReplenishmentProcessByIdCall(Integer replenishmentProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishmentProcess/{replenishmentProcessId}"
            .replaceAll("\\{" + "replenishmentProcessId" + "\\}", apiClient.escapeString(replenishmentProcessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReplenishmentProcessByIdValidateBeforeCall(Integer replenishmentProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'replenishmentProcessId' is set
        if (replenishmentProcessId == null) {
            throw new ApiException("Missing the required parameter 'replenishmentProcessId' when calling getReplenishmentProcessById(Async)");
        }
        

        com.squareup.okhttp.Call call = getReplenishmentProcessByIdCall(replenishmentProcessId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a replenishmentProcess by id
     * Returns the replenishmentProcess identified by the specified id.
     * @param replenishmentProcessId Id of the replenishmentProcess to be returned. (required)
     * @return ReplenishmentProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReplenishmentProcess getReplenishmentProcessById(Integer replenishmentProcessId) throws ApiException {
        ApiResponse<ReplenishmentProcess> resp = getReplenishmentProcessByIdWithHttpInfo(replenishmentProcessId);
        return resp.getData();
    }

    /**
     * Get a replenishmentProcess by id
     * Returns the replenishmentProcess identified by the specified id.
     * @param replenishmentProcessId Id of the replenishmentProcess to be returned. (required)
     * @return ApiResponse&lt;ReplenishmentProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReplenishmentProcess> getReplenishmentProcessByIdWithHttpInfo(Integer replenishmentProcessId) throws ApiException {
        com.squareup.okhttp.Call call = getReplenishmentProcessByIdValidateBeforeCall(replenishmentProcessId, null, null);
        Type localVarReturnType = new TypeToken<ReplenishmentProcess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a replenishmentProcess by id (asynchronously)
     * Returns the replenishmentProcess identified by the specified id.
     * @param replenishmentProcessId Id of the replenishmentProcess to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReplenishmentProcessByIdAsync(Integer replenishmentProcessId, final ApiCallback<ReplenishmentProcess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReplenishmentProcessByIdValidateBeforeCall(replenishmentProcessId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReplenishmentProcess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReplenishmentProcessFiles
     * @param replenishmentProcessId Id of the replenishmentProcess to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReplenishmentProcessFilesCall(Integer replenishmentProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishmentProcess/{replenishmentProcessId}/file"
            .replaceAll("\\{" + "replenishmentProcessId" + "\\}", apiClient.escapeString(replenishmentProcessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReplenishmentProcessFilesValidateBeforeCall(Integer replenishmentProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'replenishmentProcessId' is set
        if (replenishmentProcessId == null) {
            throw new ApiException("Missing the required parameter 'replenishmentProcessId' when calling getReplenishmentProcessFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getReplenishmentProcessFilesCall(replenishmentProcessId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a replenishmentProcess.
     * Get all existing replenishmentProcess files.
     * @param replenishmentProcessId Id of the replenishmentProcess to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getReplenishmentProcessFiles(Integer replenishmentProcessId) throws ApiException {
        getReplenishmentProcessFilesWithHttpInfo(replenishmentProcessId);
    }

    /**
     * Get the files for a replenishmentProcess.
     * Get all existing replenishmentProcess files.
     * @param replenishmentProcessId Id of the replenishmentProcess to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getReplenishmentProcessFilesWithHttpInfo(Integer replenishmentProcessId) throws ApiException {
        com.squareup.okhttp.Call call = getReplenishmentProcessFilesValidateBeforeCall(replenishmentProcessId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a replenishmentProcess. (asynchronously)
     * Get all existing replenishmentProcess files.
     * @param replenishmentProcessId Id of the replenishmentProcess to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReplenishmentProcessFilesAsync(Integer replenishmentProcessId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReplenishmentProcessFilesValidateBeforeCall(replenishmentProcessId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getReplenishmentProcessTags
     * @param replenishmentProcessId Id of the replenishmentProcess to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReplenishmentProcessTagsCall(Integer replenishmentProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishmentProcess/{replenishmentProcessId}/tag"
            .replaceAll("\\{" + "replenishmentProcessId" + "\\}", apiClient.escapeString(replenishmentProcessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReplenishmentProcessTagsValidateBeforeCall(Integer replenishmentProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'replenishmentProcessId' is set
        if (replenishmentProcessId == null) {
            throw new ApiException("Missing the required parameter 'replenishmentProcessId' when calling getReplenishmentProcessTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getReplenishmentProcessTagsCall(replenishmentProcessId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a replenishmentProcess.
     * Get all existing replenishmentProcess tags.
     * @param replenishmentProcessId Id of the replenishmentProcess to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getReplenishmentProcessTags(Integer replenishmentProcessId) throws ApiException {
        getReplenishmentProcessTagsWithHttpInfo(replenishmentProcessId);
    }

    /**
     * Get the tags for a replenishmentProcess.
     * Get all existing replenishmentProcess tags.
     * @param replenishmentProcessId Id of the replenishmentProcess to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getReplenishmentProcessTagsWithHttpInfo(Integer replenishmentProcessId) throws ApiException {
        com.squareup.okhttp.Call call = getReplenishmentProcessTagsValidateBeforeCall(replenishmentProcessId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a replenishmentProcess. (asynchronously)
     * Get all existing replenishmentProcess tags.
     * @param replenishmentProcessId Id of the replenishmentProcess to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReplenishmentProcessTagsAsync(Integer replenishmentProcessId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReplenishmentProcessTagsValidateBeforeCall(replenishmentProcessId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateReplenishmentProcessCustomFields
     * @param body ReplenishmentProcess to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateReplenishmentProcessCustomFieldsCall(ReplenishmentProcess body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/replenishmentProcess/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateReplenishmentProcessCustomFieldsValidateBeforeCall(ReplenishmentProcess body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateReplenishmentProcessCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateReplenishmentProcessCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a replenishmentProcess custom fields
     * Updates an existing replenishmentProcess custom fields using the specified data.
     * @param body ReplenishmentProcess to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateReplenishmentProcessCustomFields(ReplenishmentProcess body) throws ApiException {
        updateReplenishmentProcessCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a replenishmentProcess custom fields
     * Updates an existing replenishmentProcess custom fields using the specified data.
     * @param body ReplenishmentProcess to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateReplenishmentProcessCustomFieldsWithHttpInfo(ReplenishmentProcess body) throws ApiException {
        com.squareup.okhttp.Call call = updateReplenishmentProcessCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a replenishmentProcess custom fields (asynchronously)
     * Updates an existing replenishmentProcess custom fields using the specified data.
     * @param body ReplenishmentProcess to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateReplenishmentProcessCustomFieldsAsync(ReplenishmentProcess body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateReplenishmentProcessCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
