/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.PerpetualInventoryLog;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PerpetualInventoryLogApi {
    private ApiClient apiClient;

    public PerpetualInventoryLogApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PerpetualInventoryLogApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addPerpetualInventoryLogAudit
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to add an audit to (required)
     * @param perpetualInventoryLogAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPerpetualInventoryLogAuditCall(Integer perpetualInventoryLogId, String perpetualInventoryLogAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/perpetualInventoryLog/{perpetualInventoryLogId}/audit/{perpetualInventoryLogAudit}"
            .replaceAll("\\{" + "perpetualInventoryLogId" + "\\}", apiClient.escapeString(perpetualInventoryLogId.toString()))
            .replaceAll("\\{" + "perpetualInventoryLogAudit" + "\\}", apiClient.escapeString(perpetualInventoryLogAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPerpetualInventoryLogAuditValidateBeforeCall(Integer perpetualInventoryLogId, String perpetualInventoryLogAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'perpetualInventoryLogId' is set
        if (perpetualInventoryLogId == null) {
            throw new ApiException("Missing the required parameter 'perpetualInventoryLogId' when calling addPerpetualInventoryLogAudit(Async)");
        }
        
        // verify the required parameter 'perpetualInventoryLogAudit' is set
        if (perpetualInventoryLogAudit == null) {
            throw new ApiException("Missing the required parameter 'perpetualInventoryLogAudit' when calling addPerpetualInventoryLogAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addPerpetualInventoryLogAuditCall(perpetualInventoryLogId, perpetualInventoryLogAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a perpetualInventoryLog
     * Adds an audit to an existing perpetualInventoryLog.
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to add an audit to (required)
     * @param perpetualInventoryLogAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addPerpetualInventoryLogAudit(Integer perpetualInventoryLogId, String perpetualInventoryLogAudit) throws ApiException {
        addPerpetualInventoryLogAuditWithHttpInfo(perpetualInventoryLogId, perpetualInventoryLogAudit);
    }

    /**
     * Add new audit for a perpetualInventoryLog
     * Adds an audit to an existing perpetualInventoryLog.
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to add an audit to (required)
     * @param perpetualInventoryLogAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addPerpetualInventoryLogAuditWithHttpInfo(Integer perpetualInventoryLogId, String perpetualInventoryLogAudit) throws ApiException {
        com.squareup.okhttp.Call call = addPerpetualInventoryLogAuditValidateBeforeCall(perpetualInventoryLogId, perpetualInventoryLogAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a perpetualInventoryLog (asynchronously)
     * Adds an audit to an existing perpetualInventoryLog.
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to add an audit to (required)
     * @param perpetualInventoryLogAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPerpetualInventoryLogAuditAsync(Integer perpetualInventoryLogId, String perpetualInventoryLogAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPerpetualInventoryLogAuditValidateBeforeCall(perpetualInventoryLogId, perpetualInventoryLogAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addPerpetualInventoryLogFile
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPerpetualInventoryLogFileCall(Integer perpetualInventoryLogId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/perpetualInventoryLog/{perpetualInventoryLogId}/file/{fileName}"
            .replaceAll("\\{" + "perpetualInventoryLogId" + "\\}", apiClient.escapeString(perpetualInventoryLogId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPerpetualInventoryLogFileValidateBeforeCall(Integer perpetualInventoryLogId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'perpetualInventoryLogId' is set
        if (perpetualInventoryLogId == null) {
            throw new ApiException("Missing the required parameter 'perpetualInventoryLogId' when calling addPerpetualInventoryLogFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addPerpetualInventoryLogFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addPerpetualInventoryLogFileCall(perpetualInventoryLogId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a perpetualInventoryLog
     * Adds a file to an existing perpetualInventoryLog.
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addPerpetualInventoryLogFile(Integer perpetualInventoryLogId, String fileName) throws ApiException {
        addPerpetualInventoryLogFileWithHttpInfo(perpetualInventoryLogId, fileName);
    }

    /**
     * Attach a file to a perpetualInventoryLog
     * Adds a file to an existing perpetualInventoryLog.
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addPerpetualInventoryLogFileWithHttpInfo(Integer perpetualInventoryLogId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addPerpetualInventoryLogFileValidateBeforeCall(perpetualInventoryLogId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a perpetualInventoryLog (asynchronously)
     * Adds a file to an existing perpetualInventoryLog.
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPerpetualInventoryLogFileAsync(Integer perpetualInventoryLogId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPerpetualInventoryLogFileValidateBeforeCall(perpetualInventoryLogId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addPerpetualInventoryLogFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPerpetualInventoryLogFileByURLCall(RecordFile body, Integer perpetualInventoryLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/perpetualInventoryLog/{perpetualInventoryLogId}/file"
            .replaceAll("\\{" + "perpetualInventoryLogId" + "\\}", apiClient.escapeString(perpetualInventoryLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPerpetualInventoryLogFileByURLValidateBeforeCall(RecordFile body, Integer perpetualInventoryLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addPerpetualInventoryLogFileByURL(Async)");
        }
        
        // verify the required parameter 'perpetualInventoryLogId' is set
        if (perpetualInventoryLogId == null) {
            throw new ApiException("Missing the required parameter 'perpetualInventoryLogId' when calling addPerpetualInventoryLogFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addPerpetualInventoryLogFileByURLCall(body, perpetualInventoryLogId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a perpetualInventoryLog by URL.
     * Adds a file to an existing perpetualInventoryLog by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addPerpetualInventoryLogFileByURL(RecordFile body, Integer perpetualInventoryLogId) throws ApiException {
        addPerpetualInventoryLogFileByURLWithHttpInfo(body, perpetualInventoryLogId);
    }

    /**
     * Attach a file to a perpetualInventoryLog by URL.
     * Adds a file to an existing perpetualInventoryLog by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addPerpetualInventoryLogFileByURLWithHttpInfo(RecordFile body, Integer perpetualInventoryLogId) throws ApiException {
        com.squareup.okhttp.Call call = addPerpetualInventoryLogFileByURLValidateBeforeCall(body, perpetualInventoryLogId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a perpetualInventoryLog by URL. (asynchronously)
     * Adds a file to an existing perpetualInventoryLog by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPerpetualInventoryLogFileByURLAsync(RecordFile body, Integer perpetualInventoryLogId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPerpetualInventoryLogFileByURLValidateBeforeCall(body, perpetualInventoryLogId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addPerpetualInventoryLogTag
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to add a tag to (required)
     * @param perpetualInventoryLogTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPerpetualInventoryLogTagCall(Integer perpetualInventoryLogId, String perpetualInventoryLogTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/perpetualInventoryLog/{perpetualInventoryLogId}/tag/{perpetualInventoryLogTag}"
            .replaceAll("\\{" + "perpetualInventoryLogId" + "\\}", apiClient.escapeString(perpetualInventoryLogId.toString()))
            .replaceAll("\\{" + "perpetualInventoryLogTag" + "\\}", apiClient.escapeString(perpetualInventoryLogTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPerpetualInventoryLogTagValidateBeforeCall(Integer perpetualInventoryLogId, String perpetualInventoryLogTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'perpetualInventoryLogId' is set
        if (perpetualInventoryLogId == null) {
            throw new ApiException("Missing the required parameter 'perpetualInventoryLogId' when calling addPerpetualInventoryLogTag(Async)");
        }
        
        // verify the required parameter 'perpetualInventoryLogTag' is set
        if (perpetualInventoryLogTag == null) {
            throw new ApiException("Missing the required parameter 'perpetualInventoryLogTag' when calling addPerpetualInventoryLogTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addPerpetualInventoryLogTagCall(perpetualInventoryLogId, perpetualInventoryLogTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a perpetualInventoryLog.
     * Adds a tag to an existing perpetualInventoryLog.
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to add a tag to (required)
     * @param perpetualInventoryLogTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addPerpetualInventoryLogTag(Integer perpetualInventoryLogId, String perpetualInventoryLogTag) throws ApiException {
        addPerpetualInventoryLogTagWithHttpInfo(perpetualInventoryLogId, perpetualInventoryLogTag);
    }

    /**
     * Add new tags for a perpetualInventoryLog.
     * Adds a tag to an existing perpetualInventoryLog.
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to add a tag to (required)
     * @param perpetualInventoryLogTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addPerpetualInventoryLogTagWithHttpInfo(Integer perpetualInventoryLogId, String perpetualInventoryLogTag) throws ApiException {
        com.squareup.okhttp.Call call = addPerpetualInventoryLogTagValidateBeforeCall(perpetualInventoryLogId, perpetualInventoryLogTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a perpetualInventoryLog. (asynchronously)
     * Adds a tag to an existing perpetualInventoryLog.
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to add a tag to (required)
     * @param perpetualInventoryLogTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPerpetualInventoryLogTagAsync(Integer perpetualInventoryLogId, String perpetualInventoryLogTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPerpetualInventoryLogTagValidateBeforeCall(perpetualInventoryLogId, perpetualInventoryLogTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePerpetualInventoryLogFile
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePerpetualInventoryLogFileCall(Integer perpetualInventoryLogId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/perpetualInventoryLog/{perpetualInventoryLogId}/file/{fileId}"
            .replaceAll("\\{" + "perpetualInventoryLogId" + "\\}", apiClient.escapeString(perpetualInventoryLogId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePerpetualInventoryLogFileValidateBeforeCall(Integer perpetualInventoryLogId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'perpetualInventoryLogId' is set
        if (perpetualInventoryLogId == null) {
            throw new ApiException("Missing the required parameter 'perpetualInventoryLogId' when calling deletePerpetualInventoryLogFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deletePerpetualInventoryLogFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePerpetualInventoryLogFileCall(perpetualInventoryLogId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a perpetualInventoryLog.
     * Deletes an existing perpetualInventoryLog file using the specified data.
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePerpetualInventoryLogFile(Integer perpetualInventoryLogId, Integer fileId) throws ApiException {
        deletePerpetualInventoryLogFileWithHttpInfo(perpetualInventoryLogId, fileId);
    }

    /**
     * Delete a file for a perpetualInventoryLog.
     * Deletes an existing perpetualInventoryLog file using the specified data.
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePerpetualInventoryLogFileWithHttpInfo(Integer perpetualInventoryLogId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deletePerpetualInventoryLogFileValidateBeforeCall(perpetualInventoryLogId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a perpetualInventoryLog. (asynchronously)
     * Deletes an existing perpetualInventoryLog file using the specified data.
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePerpetualInventoryLogFileAsync(Integer perpetualInventoryLogId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePerpetualInventoryLogFileValidateBeforeCall(perpetualInventoryLogId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePerpetualInventoryLogTag
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to remove tag from (required)
     * @param perpetualInventoryLogTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePerpetualInventoryLogTagCall(Integer perpetualInventoryLogId, String perpetualInventoryLogTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/perpetualInventoryLog/{perpetualInventoryLogId}/tag/{perpetualInventoryLogTag}"
            .replaceAll("\\{" + "perpetualInventoryLogId" + "\\}", apiClient.escapeString(perpetualInventoryLogId.toString()))
            .replaceAll("\\{" + "perpetualInventoryLogTag" + "\\}", apiClient.escapeString(perpetualInventoryLogTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePerpetualInventoryLogTagValidateBeforeCall(Integer perpetualInventoryLogId, String perpetualInventoryLogTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'perpetualInventoryLogId' is set
        if (perpetualInventoryLogId == null) {
            throw new ApiException("Missing the required parameter 'perpetualInventoryLogId' when calling deletePerpetualInventoryLogTag(Async)");
        }
        
        // verify the required parameter 'perpetualInventoryLogTag' is set
        if (perpetualInventoryLogTag == null) {
            throw new ApiException("Missing the required parameter 'perpetualInventoryLogTag' when calling deletePerpetualInventoryLogTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePerpetualInventoryLogTagCall(perpetualInventoryLogId, perpetualInventoryLogTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a perpetualInventoryLog.
     * Deletes an existing perpetualInventoryLog tag using the specified data.
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to remove tag from (required)
     * @param perpetualInventoryLogTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePerpetualInventoryLogTag(Integer perpetualInventoryLogId, String perpetualInventoryLogTag) throws ApiException {
        deletePerpetualInventoryLogTagWithHttpInfo(perpetualInventoryLogId, perpetualInventoryLogTag);
    }

    /**
     * Delete a tag for a perpetualInventoryLog.
     * Deletes an existing perpetualInventoryLog tag using the specified data.
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to remove tag from (required)
     * @param perpetualInventoryLogTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePerpetualInventoryLogTagWithHttpInfo(Integer perpetualInventoryLogId, String perpetualInventoryLogTag) throws ApiException {
        com.squareup.okhttp.Call call = deletePerpetualInventoryLogTagValidateBeforeCall(perpetualInventoryLogId, perpetualInventoryLogTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a perpetualInventoryLog. (asynchronously)
     * Deletes an existing perpetualInventoryLog tag using the specified data.
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to remove tag from (required)
     * @param perpetualInventoryLogTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePerpetualInventoryLogTagAsync(Integer perpetualInventoryLogId, String perpetualInventoryLogTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePerpetualInventoryLogTagValidateBeforeCall(perpetualInventoryLogId, perpetualInventoryLogTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicatePerpetualInventoryLogById
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicatePerpetualInventoryLogByIdCall(Integer perpetualInventoryLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/perpetualInventoryLog/duplicate/{perpetualInventoryLogId}"
            .replaceAll("\\{" + "perpetualInventoryLogId" + "\\}", apiClient.escapeString(perpetualInventoryLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicatePerpetualInventoryLogByIdValidateBeforeCall(Integer perpetualInventoryLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'perpetualInventoryLogId' is set
        if (perpetualInventoryLogId == null) {
            throw new ApiException("Missing the required parameter 'perpetualInventoryLogId' when calling getDuplicatePerpetualInventoryLogById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicatePerpetualInventoryLogByIdCall(perpetualInventoryLogId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a perpetualInventoryLog by id
     * Returns a duplicated perpetualInventoryLog identified by the specified id.
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to be duplicated. (required)
     * @return PerpetualInventoryLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PerpetualInventoryLog getDuplicatePerpetualInventoryLogById(Integer perpetualInventoryLogId) throws ApiException {
        ApiResponse<PerpetualInventoryLog> resp = getDuplicatePerpetualInventoryLogByIdWithHttpInfo(perpetualInventoryLogId);
        return resp.getData();
    }

    /**
     * Get a duplicated a perpetualInventoryLog by id
     * Returns a duplicated perpetualInventoryLog identified by the specified id.
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to be duplicated. (required)
     * @return ApiResponse&lt;PerpetualInventoryLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PerpetualInventoryLog> getDuplicatePerpetualInventoryLogByIdWithHttpInfo(Integer perpetualInventoryLogId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicatePerpetualInventoryLogByIdValidateBeforeCall(perpetualInventoryLogId, null, null);
        Type localVarReturnType = new TypeToken<PerpetualInventoryLog>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a perpetualInventoryLog by id (asynchronously)
     * Returns a duplicated perpetualInventoryLog identified by the specified id.
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicatePerpetualInventoryLogByIdAsync(Integer perpetualInventoryLogId, final ApiCallback<PerpetualInventoryLog> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicatePerpetualInventoryLogByIdValidateBeforeCall(perpetualInventoryLogId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PerpetualInventoryLog>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPerpetualInventoryLogByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPerpetualInventoryLogByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/perpetualInventoryLog/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPerpetualInventoryLogByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPerpetualInventoryLogByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search perpetualInventoryLogs by filter
     * Returns the list of perpetualInventoryLogs that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;PerpetualInventoryLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PerpetualInventoryLog> getPerpetualInventoryLogByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<PerpetualInventoryLog>> resp = getPerpetualInventoryLogByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search perpetualInventoryLogs by filter
     * Returns the list of perpetualInventoryLogs that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;PerpetualInventoryLog&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PerpetualInventoryLog>> getPerpetualInventoryLogByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getPerpetualInventoryLogByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<PerpetualInventoryLog>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search perpetualInventoryLogs by filter (asynchronously)
     * Returns the list of perpetualInventoryLogs that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPerpetualInventoryLogByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<PerpetualInventoryLog>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPerpetualInventoryLogByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PerpetualInventoryLog>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPerpetualInventoryLogById
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPerpetualInventoryLogByIdCall(Integer perpetualInventoryLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/perpetualInventoryLog/{perpetualInventoryLogId}"
            .replaceAll("\\{" + "perpetualInventoryLogId" + "\\}", apiClient.escapeString(perpetualInventoryLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPerpetualInventoryLogByIdValidateBeforeCall(Integer perpetualInventoryLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'perpetualInventoryLogId' is set
        if (perpetualInventoryLogId == null) {
            throw new ApiException("Missing the required parameter 'perpetualInventoryLogId' when calling getPerpetualInventoryLogById(Async)");
        }
        

        com.squareup.okhttp.Call call = getPerpetualInventoryLogByIdCall(perpetualInventoryLogId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a perpetualInventoryLog by id
     * Returns the perpetualInventoryLog identified by the specified id.
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to be returned. (required)
     * @return PerpetualInventoryLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PerpetualInventoryLog getPerpetualInventoryLogById(Integer perpetualInventoryLogId) throws ApiException {
        ApiResponse<PerpetualInventoryLog> resp = getPerpetualInventoryLogByIdWithHttpInfo(perpetualInventoryLogId);
        return resp.getData();
    }

    /**
     * Get a perpetualInventoryLog by id
     * Returns the perpetualInventoryLog identified by the specified id.
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to be returned. (required)
     * @return ApiResponse&lt;PerpetualInventoryLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PerpetualInventoryLog> getPerpetualInventoryLogByIdWithHttpInfo(Integer perpetualInventoryLogId) throws ApiException {
        com.squareup.okhttp.Call call = getPerpetualInventoryLogByIdValidateBeforeCall(perpetualInventoryLogId, null, null);
        Type localVarReturnType = new TypeToken<PerpetualInventoryLog>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a perpetualInventoryLog by id (asynchronously)
     * Returns the perpetualInventoryLog identified by the specified id.
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPerpetualInventoryLogByIdAsync(Integer perpetualInventoryLogId, final ApiCallback<PerpetualInventoryLog> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPerpetualInventoryLogByIdValidateBeforeCall(perpetualInventoryLogId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PerpetualInventoryLog>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPerpetualInventoryLogFiles
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPerpetualInventoryLogFilesCall(Integer perpetualInventoryLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/perpetualInventoryLog/{perpetualInventoryLogId}/file"
            .replaceAll("\\{" + "perpetualInventoryLogId" + "\\}", apiClient.escapeString(perpetualInventoryLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPerpetualInventoryLogFilesValidateBeforeCall(Integer perpetualInventoryLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'perpetualInventoryLogId' is set
        if (perpetualInventoryLogId == null) {
            throw new ApiException("Missing the required parameter 'perpetualInventoryLogId' when calling getPerpetualInventoryLogFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getPerpetualInventoryLogFilesCall(perpetualInventoryLogId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a perpetualInventoryLog.
     * Get all existing perpetualInventoryLog files.
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getPerpetualInventoryLogFiles(Integer perpetualInventoryLogId) throws ApiException {
        getPerpetualInventoryLogFilesWithHttpInfo(perpetualInventoryLogId);
    }

    /**
     * Get the files for a perpetualInventoryLog.
     * Get all existing perpetualInventoryLog files.
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getPerpetualInventoryLogFilesWithHttpInfo(Integer perpetualInventoryLogId) throws ApiException {
        com.squareup.okhttp.Call call = getPerpetualInventoryLogFilesValidateBeforeCall(perpetualInventoryLogId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a perpetualInventoryLog. (asynchronously)
     * Get all existing perpetualInventoryLog files.
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPerpetualInventoryLogFilesAsync(Integer perpetualInventoryLogId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPerpetualInventoryLogFilesValidateBeforeCall(perpetualInventoryLogId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getPerpetualInventoryLogTags
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPerpetualInventoryLogTagsCall(Integer perpetualInventoryLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/perpetualInventoryLog/{perpetualInventoryLogId}/tag"
            .replaceAll("\\{" + "perpetualInventoryLogId" + "\\}", apiClient.escapeString(perpetualInventoryLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPerpetualInventoryLogTagsValidateBeforeCall(Integer perpetualInventoryLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'perpetualInventoryLogId' is set
        if (perpetualInventoryLogId == null) {
            throw new ApiException("Missing the required parameter 'perpetualInventoryLogId' when calling getPerpetualInventoryLogTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getPerpetualInventoryLogTagsCall(perpetualInventoryLogId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a perpetualInventoryLog.
     * Get all existing perpetualInventoryLog tags.
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getPerpetualInventoryLogTags(Integer perpetualInventoryLogId) throws ApiException {
        getPerpetualInventoryLogTagsWithHttpInfo(perpetualInventoryLogId);
    }

    /**
     * Get the tags for a perpetualInventoryLog.
     * Get all existing perpetualInventoryLog tags.
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getPerpetualInventoryLogTagsWithHttpInfo(Integer perpetualInventoryLogId) throws ApiException {
        com.squareup.okhttp.Call call = getPerpetualInventoryLogTagsValidateBeforeCall(perpetualInventoryLogId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a perpetualInventoryLog. (asynchronously)
     * Get all existing perpetualInventoryLog tags.
     * @param perpetualInventoryLogId Id of the perpetualInventoryLog to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPerpetualInventoryLogTagsAsync(Integer perpetualInventoryLogId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPerpetualInventoryLogTagsValidateBeforeCall(perpetualInventoryLogId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
