/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.FinanceSystemConnectionLog;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FinanceSystemConnectionLogApi {
    private ApiClient apiClient;

    public FinanceSystemConnectionLogApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FinanceSystemConnectionLogApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addFinanceSystemConnectionLogAudit
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to add an audit to (required)
     * @param financeSystemConnectionLogAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFinanceSystemConnectionLogAuditCall(Integer financeSystemConnectionLogId, String financeSystemConnectionLogAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/audit/{financeSystemConnectionLogAudit}"
            .replaceAll("\\{" + "financeSystemConnectionLogId" + "\\}", apiClient.escapeString(financeSystemConnectionLogId.toString()))
            .replaceAll("\\{" + "financeSystemConnectionLogAudit" + "\\}", apiClient.escapeString(financeSystemConnectionLogAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFinanceSystemConnectionLogAuditValidateBeforeCall(Integer financeSystemConnectionLogId, String financeSystemConnectionLogAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'financeSystemConnectionLogId' is set
        if (financeSystemConnectionLogId == null) {
            throw new ApiException("Missing the required parameter 'financeSystemConnectionLogId' when calling addFinanceSystemConnectionLogAudit(Async)");
        }
        
        // verify the required parameter 'financeSystemConnectionLogAudit' is set
        if (financeSystemConnectionLogAudit == null) {
            throw new ApiException("Missing the required parameter 'financeSystemConnectionLogAudit' when calling addFinanceSystemConnectionLogAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addFinanceSystemConnectionLogAuditCall(financeSystemConnectionLogId, financeSystemConnectionLogAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a financeSystemConnectionLog
     * Adds an audit to an existing financeSystemConnectionLog.
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to add an audit to (required)
     * @param financeSystemConnectionLogAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addFinanceSystemConnectionLogAudit(Integer financeSystemConnectionLogId, String financeSystemConnectionLogAudit) throws ApiException {
        addFinanceSystemConnectionLogAuditWithHttpInfo(financeSystemConnectionLogId, financeSystemConnectionLogAudit);
    }

    /**
     * Add new audit for a financeSystemConnectionLog
     * Adds an audit to an existing financeSystemConnectionLog.
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to add an audit to (required)
     * @param financeSystemConnectionLogAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addFinanceSystemConnectionLogAuditWithHttpInfo(Integer financeSystemConnectionLogId, String financeSystemConnectionLogAudit) throws ApiException {
        com.squareup.okhttp.Call call = addFinanceSystemConnectionLogAuditValidateBeforeCall(financeSystemConnectionLogId, financeSystemConnectionLogAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a financeSystemConnectionLog (asynchronously)
     * Adds an audit to an existing financeSystemConnectionLog.
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to add an audit to (required)
     * @param financeSystemConnectionLogAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFinanceSystemConnectionLogAuditAsync(Integer financeSystemConnectionLogId, String financeSystemConnectionLogAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFinanceSystemConnectionLogAuditValidateBeforeCall(financeSystemConnectionLogId, financeSystemConnectionLogAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addFinanceSystemConnectionLogFile
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFinanceSystemConnectionLogFileCall(Integer financeSystemConnectionLogId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/file/{fileName}"
            .replaceAll("\\{" + "financeSystemConnectionLogId" + "\\}", apiClient.escapeString(financeSystemConnectionLogId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFinanceSystemConnectionLogFileValidateBeforeCall(Integer financeSystemConnectionLogId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'financeSystemConnectionLogId' is set
        if (financeSystemConnectionLogId == null) {
            throw new ApiException("Missing the required parameter 'financeSystemConnectionLogId' when calling addFinanceSystemConnectionLogFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addFinanceSystemConnectionLogFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addFinanceSystemConnectionLogFileCall(financeSystemConnectionLogId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a financeSystemConnectionLog
     * Adds a file to an existing financeSystemConnectionLog.
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addFinanceSystemConnectionLogFile(Integer financeSystemConnectionLogId, String fileName) throws ApiException {
        addFinanceSystemConnectionLogFileWithHttpInfo(financeSystemConnectionLogId, fileName);
    }

    /**
     * Attach a file to a financeSystemConnectionLog
     * Adds a file to an existing financeSystemConnectionLog.
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addFinanceSystemConnectionLogFileWithHttpInfo(Integer financeSystemConnectionLogId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addFinanceSystemConnectionLogFileValidateBeforeCall(financeSystemConnectionLogId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a financeSystemConnectionLog (asynchronously)
     * Adds a file to an existing financeSystemConnectionLog.
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFinanceSystemConnectionLogFileAsync(Integer financeSystemConnectionLogId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFinanceSystemConnectionLogFileValidateBeforeCall(financeSystemConnectionLogId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addFinanceSystemConnectionLogFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFinanceSystemConnectionLogFileByURLCall(RecordFile body, Integer financeSystemConnectionLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/file"
            .replaceAll("\\{" + "financeSystemConnectionLogId" + "\\}", apiClient.escapeString(financeSystemConnectionLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFinanceSystemConnectionLogFileByURLValidateBeforeCall(RecordFile body, Integer financeSystemConnectionLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addFinanceSystemConnectionLogFileByURL(Async)");
        }
        
        // verify the required parameter 'financeSystemConnectionLogId' is set
        if (financeSystemConnectionLogId == null) {
            throw new ApiException("Missing the required parameter 'financeSystemConnectionLogId' when calling addFinanceSystemConnectionLogFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addFinanceSystemConnectionLogFileByURLCall(body, financeSystemConnectionLogId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a financeSystemConnectionLog by URL.
     * Adds a file to an existing financeSystemConnectionLog by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addFinanceSystemConnectionLogFileByURL(RecordFile body, Integer financeSystemConnectionLogId) throws ApiException {
        addFinanceSystemConnectionLogFileByURLWithHttpInfo(body, financeSystemConnectionLogId);
    }

    /**
     * Attach a file to a financeSystemConnectionLog by URL.
     * Adds a file to an existing financeSystemConnectionLog by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addFinanceSystemConnectionLogFileByURLWithHttpInfo(RecordFile body, Integer financeSystemConnectionLogId) throws ApiException {
        com.squareup.okhttp.Call call = addFinanceSystemConnectionLogFileByURLValidateBeforeCall(body, financeSystemConnectionLogId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a financeSystemConnectionLog by URL. (asynchronously)
     * Adds a file to an existing financeSystemConnectionLog by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFinanceSystemConnectionLogFileByURLAsync(RecordFile body, Integer financeSystemConnectionLogId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFinanceSystemConnectionLogFileByURLValidateBeforeCall(body, financeSystemConnectionLogId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addFinanceSystemConnectionLogTag
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to add a tag to (required)
     * @param financeSystemConnectionLogTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFinanceSystemConnectionLogTagCall(Integer financeSystemConnectionLogId, String financeSystemConnectionLogTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/tag/{financeSystemConnectionLogTag}"
            .replaceAll("\\{" + "financeSystemConnectionLogId" + "\\}", apiClient.escapeString(financeSystemConnectionLogId.toString()))
            .replaceAll("\\{" + "financeSystemConnectionLogTag" + "\\}", apiClient.escapeString(financeSystemConnectionLogTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFinanceSystemConnectionLogTagValidateBeforeCall(Integer financeSystemConnectionLogId, String financeSystemConnectionLogTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'financeSystemConnectionLogId' is set
        if (financeSystemConnectionLogId == null) {
            throw new ApiException("Missing the required parameter 'financeSystemConnectionLogId' when calling addFinanceSystemConnectionLogTag(Async)");
        }
        
        // verify the required parameter 'financeSystemConnectionLogTag' is set
        if (financeSystemConnectionLogTag == null) {
            throw new ApiException("Missing the required parameter 'financeSystemConnectionLogTag' when calling addFinanceSystemConnectionLogTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addFinanceSystemConnectionLogTagCall(financeSystemConnectionLogId, financeSystemConnectionLogTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a financeSystemConnectionLog.
     * Adds a tag to an existing financeSystemConnectionLog.
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to add a tag to (required)
     * @param financeSystemConnectionLogTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addFinanceSystemConnectionLogTag(Integer financeSystemConnectionLogId, String financeSystemConnectionLogTag) throws ApiException {
        addFinanceSystemConnectionLogTagWithHttpInfo(financeSystemConnectionLogId, financeSystemConnectionLogTag);
    }

    /**
     * Add new tags for a financeSystemConnectionLog.
     * Adds a tag to an existing financeSystemConnectionLog.
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to add a tag to (required)
     * @param financeSystemConnectionLogTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addFinanceSystemConnectionLogTagWithHttpInfo(Integer financeSystemConnectionLogId, String financeSystemConnectionLogTag) throws ApiException {
        com.squareup.okhttp.Call call = addFinanceSystemConnectionLogTagValidateBeforeCall(financeSystemConnectionLogId, financeSystemConnectionLogTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a financeSystemConnectionLog. (asynchronously)
     * Adds a tag to an existing financeSystemConnectionLog.
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to add a tag to (required)
     * @param financeSystemConnectionLogTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFinanceSystemConnectionLogTagAsync(Integer financeSystemConnectionLogId, String financeSystemConnectionLogTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFinanceSystemConnectionLogTagValidateBeforeCall(financeSystemConnectionLogId, financeSystemConnectionLogTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteFinanceSystemConnectionLogFile
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFinanceSystemConnectionLogFileCall(Integer financeSystemConnectionLogId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/file/{fileId}"
            .replaceAll("\\{" + "financeSystemConnectionLogId" + "\\}", apiClient.escapeString(financeSystemConnectionLogId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFinanceSystemConnectionLogFileValidateBeforeCall(Integer financeSystemConnectionLogId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'financeSystemConnectionLogId' is set
        if (financeSystemConnectionLogId == null) {
            throw new ApiException("Missing the required parameter 'financeSystemConnectionLogId' when calling deleteFinanceSystemConnectionLogFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteFinanceSystemConnectionLogFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFinanceSystemConnectionLogFileCall(financeSystemConnectionLogId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a financeSystemConnectionLog.
     * Deletes an existing financeSystemConnectionLog file using the specified data.
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFinanceSystemConnectionLogFile(Integer financeSystemConnectionLogId, Integer fileId) throws ApiException {
        deleteFinanceSystemConnectionLogFileWithHttpInfo(financeSystemConnectionLogId, fileId);
    }

    /**
     * Delete a file for a financeSystemConnectionLog.
     * Deletes an existing financeSystemConnectionLog file using the specified data.
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFinanceSystemConnectionLogFileWithHttpInfo(Integer financeSystemConnectionLogId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFinanceSystemConnectionLogFileValidateBeforeCall(financeSystemConnectionLogId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a financeSystemConnectionLog. (asynchronously)
     * Deletes an existing financeSystemConnectionLog file using the specified data.
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFinanceSystemConnectionLogFileAsync(Integer financeSystemConnectionLogId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFinanceSystemConnectionLogFileValidateBeforeCall(financeSystemConnectionLogId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteFinanceSystemConnectionLogTag
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to remove tag from (required)
     * @param financeSystemConnectionLogTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFinanceSystemConnectionLogTagCall(Integer financeSystemConnectionLogId, String financeSystemConnectionLogTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/tag/{financeSystemConnectionLogTag}"
            .replaceAll("\\{" + "financeSystemConnectionLogId" + "\\}", apiClient.escapeString(financeSystemConnectionLogId.toString()))
            .replaceAll("\\{" + "financeSystemConnectionLogTag" + "\\}", apiClient.escapeString(financeSystemConnectionLogTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFinanceSystemConnectionLogTagValidateBeforeCall(Integer financeSystemConnectionLogId, String financeSystemConnectionLogTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'financeSystemConnectionLogId' is set
        if (financeSystemConnectionLogId == null) {
            throw new ApiException("Missing the required parameter 'financeSystemConnectionLogId' when calling deleteFinanceSystemConnectionLogTag(Async)");
        }
        
        // verify the required parameter 'financeSystemConnectionLogTag' is set
        if (financeSystemConnectionLogTag == null) {
            throw new ApiException("Missing the required parameter 'financeSystemConnectionLogTag' when calling deleteFinanceSystemConnectionLogTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFinanceSystemConnectionLogTagCall(financeSystemConnectionLogId, financeSystemConnectionLogTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a financeSystemConnectionLog.
     * Deletes an existing financeSystemConnectionLog tag using the specified data.
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to remove tag from (required)
     * @param financeSystemConnectionLogTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFinanceSystemConnectionLogTag(Integer financeSystemConnectionLogId, String financeSystemConnectionLogTag) throws ApiException {
        deleteFinanceSystemConnectionLogTagWithHttpInfo(financeSystemConnectionLogId, financeSystemConnectionLogTag);
    }

    /**
     * Delete a tag for a financeSystemConnectionLog.
     * Deletes an existing financeSystemConnectionLog tag using the specified data.
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to remove tag from (required)
     * @param financeSystemConnectionLogTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFinanceSystemConnectionLogTagWithHttpInfo(Integer financeSystemConnectionLogId, String financeSystemConnectionLogTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteFinanceSystemConnectionLogTagValidateBeforeCall(financeSystemConnectionLogId, financeSystemConnectionLogTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a financeSystemConnectionLog. (asynchronously)
     * Deletes an existing financeSystemConnectionLog tag using the specified data.
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to remove tag from (required)
     * @param financeSystemConnectionLogTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFinanceSystemConnectionLogTagAsync(Integer financeSystemConnectionLogId, String financeSystemConnectionLogTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFinanceSystemConnectionLogTagValidateBeforeCall(financeSystemConnectionLogId, financeSystemConnectionLogTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateFinanceSystemConnectionLogById
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateFinanceSystemConnectionLogByIdCall(Integer financeSystemConnectionLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/financeSystemConnectionLog/duplicate/{financeSystemConnectionLogId}"
            .replaceAll("\\{" + "financeSystemConnectionLogId" + "\\}", apiClient.escapeString(financeSystemConnectionLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateFinanceSystemConnectionLogByIdValidateBeforeCall(Integer financeSystemConnectionLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'financeSystemConnectionLogId' is set
        if (financeSystemConnectionLogId == null) {
            throw new ApiException("Missing the required parameter 'financeSystemConnectionLogId' when calling getDuplicateFinanceSystemConnectionLogById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateFinanceSystemConnectionLogByIdCall(financeSystemConnectionLogId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a financeSystemConnectionLog by id
     * Returns a duplicated financeSystemConnectionLog identified by the specified id.
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to be duplicated. (required)
     * @return FinanceSystemConnectionLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FinanceSystemConnectionLog getDuplicateFinanceSystemConnectionLogById(Integer financeSystemConnectionLogId) throws ApiException {
        ApiResponse<FinanceSystemConnectionLog> resp = getDuplicateFinanceSystemConnectionLogByIdWithHttpInfo(financeSystemConnectionLogId);
        return resp.getData();
    }

    /**
     * Get a duplicated a financeSystemConnectionLog by id
     * Returns a duplicated financeSystemConnectionLog identified by the specified id.
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to be duplicated. (required)
     * @return ApiResponse&lt;FinanceSystemConnectionLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FinanceSystemConnectionLog> getDuplicateFinanceSystemConnectionLogByIdWithHttpInfo(Integer financeSystemConnectionLogId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateFinanceSystemConnectionLogByIdValidateBeforeCall(financeSystemConnectionLogId, null, null);
        Type localVarReturnType = new TypeToken<FinanceSystemConnectionLog>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a financeSystemConnectionLog by id (asynchronously)
     * Returns a duplicated financeSystemConnectionLog identified by the specified id.
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateFinanceSystemConnectionLogByIdAsync(Integer financeSystemConnectionLogId, final ApiCallback<FinanceSystemConnectionLog> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateFinanceSystemConnectionLogByIdValidateBeforeCall(financeSystemConnectionLogId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FinanceSystemConnectionLog>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFinanceSystemConnectionLogByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFinanceSystemConnectionLogByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/financeSystemConnectionLog/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFinanceSystemConnectionLogByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getFinanceSystemConnectionLogByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search financeSystemConnectionLogs by filter
     * Returns the list of financeSystemConnectionLogs that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;FinanceSystemConnectionLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FinanceSystemConnectionLog> getFinanceSystemConnectionLogByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<FinanceSystemConnectionLog>> resp = getFinanceSystemConnectionLogByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search financeSystemConnectionLogs by filter
     * Returns the list of financeSystemConnectionLogs that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;FinanceSystemConnectionLog&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FinanceSystemConnectionLog>> getFinanceSystemConnectionLogByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getFinanceSystemConnectionLogByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<FinanceSystemConnectionLog>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search financeSystemConnectionLogs by filter (asynchronously)
     * Returns the list of financeSystemConnectionLogs that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFinanceSystemConnectionLogByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<FinanceSystemConnectionLog>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFinanceSystemConnectionLogByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FinanceSystemConnectionLog>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFinanceSystemConnectionLogById
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFinanceSystemConnectionLogByIdCall(Integer financeSystemConnectionLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}"
            .replaceAll("\\{" + "financeSystemConnectionLogId" + "\\}", apiClient.escapeString(financeSystemConnectionLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFinanceSystemConnectionLogByIdValidateBeforeCall(Integer financeSystemConnectionLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'financeSystemConnectionLogId' is set
        if (financeSystemConnectionLogId == null) {
            throw new ApiException("Missing the required parameter 'financeSystemConnectionLogId' when calling getFinanceSystemConnectionLogById(Async)");
        }
        

        com.squareup.okhttp.Call call = getFinanceSystemConnectionLogByIdCall(financeSystemConnectionLogId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a financeSystemConnectionLog by id
     * Returns the financeSystemConnectionLog identified by the specified id.
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to be returned. (required)
     * @return FinanceSystemConnectionLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FinanceSystemConnectionLog getFinanceSystemConnectionLogById(Integer financeSystemConnectionLogId) throws ApiException {
        ApiResponse<FinanceSystemConnectionLog> resp = getFinanceSystemConnectionLogByIdWithHttpInfo(financeSystemConnectionLogId);
        return resp.getData();
    }

    /**
     * Get a financeSystemConnectionLog by id
     * Returns the financeSystemConnectionLog identified by the specified id.
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to be returned. (required)
     * @return ApiResponse&lt;FinanceSystemConnectionLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FinanceSystemConnectionLog> getFinanceSystemConnectionLogByIdWithHttpInfo(Integer financeSystemConnectionLogId) throws ApiException {
        com.squareup.okhttp.Call call = getFinanceSystemConnectionLogByIdValidateBeforeCall(financeSystemConnectionLogId, null, null);
        Type localVarReturnType = new TypeToken<FinanceSystemConnectionLog>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a financeSystemConnectionLog by id (asynchronously)
     * Returns the financeSystemConnectionLog identified by the specified id.
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFinanceSystemConnectionLogByIdAsync(Integer financeSystemConnectionLogId, final ApiCallback<FinanceSystemConnectionLog> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFinanceSystemConnectionLogByIdValidateBeforeCall(financeSystemConnectionLogId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FinanceSystemConnectionLog>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFinanceSystemConnectionLogFiles
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFinanceSystemConnectionLogFilesCall(Integer financeSystemConnectionLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/file"
            .replaceAll("\\{" + "financeSystemConnectionLogId" + "\\}", apiClient.escapeString(financeSystemConnectionLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFinanceSystemConnectionLogFilesValidateBeforeCall(Integer financeSystemConnectionLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'financeSystemConnectionLogId' is set
        if (financeSystemConnectionLogId == null) {
            throw new ApiException("Missing the required parameter 'financeSystemConnectionLogId' when calling getFinanceSystemConnectionLogFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getFinanceSystemConnectionLogFilesCall(financeSystemConnectionLogId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a financeSystemConnectionLog.
     * Get all existing financeSystemConnectionLog files.
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getFinanceSystemConnectionLogFiles(Integer financeSystemConnectionLogId) throws ApiException {
        getFinanceSystemConnectionLogFilesWithHttpInfo(financeSystemConnectionLogId);
    }

    /**
     * Get the files for a financeSystemConnectionLog.
     * Get all existing financeSystemConnectionLog files.
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getFinanceSystemConnectionLogFilesWithHttpInfo(Integer financeSystemConnectionLogId) throws ApiException {
        com.squareup.okhttp.Call call = getFinanceSystemConnectionLogFilesValidateBeforeCall(financeSystemConnectionLogId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a financeSystemConnectionLog. (asynchronously)
     * Get all existing financeSystemConnectionLog files.
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFinanceSystemConnectionLogFilesAsync(Integer financeSystemConnectionLogId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFinanceSystemConnectionLogFilesValidateBeforeCall(financeSystemConnectionLogId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getFinanceSystemConnectionLogTags
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFinanceSystemConnectionLogTagsCall(Integer financeSystemConnectionLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/tag"
            .replaceAll("\\{" + "financeSystemConnectionLogId" + "\\}", apiClient.escapeString(financeSystemConnectionLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFinanceSystemConnectionLogTagsValidateBeforeCall(Integer financeSystemConnectionLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'financeSystemConnectionLogId' is set
        if (financeSystemConnectionLogId == null) {
            throw new ApiException("Missing the required parameter 'financeSystemConnectionLogId' when calling getFinanceSystemConnectionLogTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getFinanceSystemConnectionLogTagsCall(financeSystemConnectionLogId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a financeSystemConnectionLog.
     * Get all existing financeSystemConnectionLog tags.
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getFinanceSystemConnectionLogTags(Integer financeSystemConnectionLogId) throws ApiException {
        getFinanceSystemConnectionLogTagsWithHttpInfo(financeSystemConnectionLogId);
    }

    /**
     * Get the tags for a financeSystemConnectionLog.
     * Get all existing financeSystemConnectionLog tags.
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getFinanceSystemConnectionLogTagsWithHttpInfo(Integer financeSystemConnectionLogId) throws ApiException {
        com.squareup.okhttp.Call call = getFinanceSystemConnectionLogTagsValidateBeforeCall(financeSystemConnectionLogId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a financeSystemConnectionLog. (asynchronously)
     * Get all existing financeSystemConnectionLog tags.
     * @param financeSystemConnectionLogId Id of the financeSystemConnectionLog to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFinanceSystemConnectionLogTagsAsync(Integer financeSystemConnectionLogId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFinanceSystemConnectionLogTagsValidateBeforeCall(financeSystemConnectionLogId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
