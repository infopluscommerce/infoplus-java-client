/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ManageScheduledPlans;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManageScheduledPlansApi {
    private ApiClient apiClient;

    public ManageScheduledPlansApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManageScheduledPlansApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addManageScheduledPlans
     * @param body ManageScheduledPlans to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addManageScheduledPlansCall(ManageScheduledPlans body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/manageScheduledPlans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addManageScheduledPlansValidateBeforeCall(ManageScheduledPlans body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addManageScheduledPlans(Async)");
        }
        

        com.squareup.okhttp.Call call = addManageScheduledPlansCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a manageScheduledPlans
     * Inserts a new manageScheduledPlans using the specified data.
     * @param body ManageScheduledPlans to be inserted. (required)
     * @return ManageScheduledPlans
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ManageScheduledPlans addManageScheduledPlans(ManageScheduledPlans body) throws ApiException {
        ApiResponse<ManageScheduledPlans> resp = addManageScheduledPlansWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a manageScheduledPlans
     * Inserts a new manageScheduledPlans using the specified data.
     * @param body ManageScheduledPlans to be inserted. (required)
     * @return ApiResponse&lt;ManageScheduledPlans&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ManageScheduledPlans> addManageScheduledPlansWithHttpInfo(ManageScheduledPlans body) throws ApiException {
        com.squareup.okhttp.Call call = addManageScheduledPlansValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ManageScheduledPlans>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a manageScheduledPlans (asynchronously)
     * Inserts a new manageScheduledPlans using the specified data.
     * @param body ManageScheduledPlans to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addManageScheduledPlansAsync(ManageScheduledPlans body, final ApiCallback<ManageScheduledPlans> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addManageScheduledPlansValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ManageScheduledPlans>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addManageScheduledPlansAudit
     * @param manageScheduledPlansId Id of the manageScheduledPlans to add an audit to (required)
     * @param manageScheduledPlansAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addManageScheduledPlansAuditCall(Integer manageScheduledPlansId, String manageScheduledPlansAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/manageScheduledPlans/{manageScheduledPlansId}/audit/{manageScheduledPlansAudit}"
            .replaceAll("\\{" + "manageScheduledPlansId" + "\\}", apiClient.escapeString(manageScheduledPlansId.toString()))
            .replaceAll("\\{" + "manageScheduledPlansAudit" + "\\}", apiClient.escapeString(manageScheduledPlansAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addManageScheduledPlansAuditValidateBeforeCall(Integer manageScheduledPlansId, String manageScheduledPlansAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'manageScheduledPlansId' is set
        if (manageScheduledPlansId == null) {
            throw new ApiException("Missing the required parameter 'manageScheduledPlansId' when calling addManageScheduledPlansAudit(Async)");
        }
        
        // verify the required parameter 'manageScheduledPlansAudit' is set
        if (manageScheduledPlansAudit == null) {
            throw new ApiException("Missing the required parameter 'manageScheduledPlansAudit' when calling addManageScheduledPlansAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addManageScheduledPlansAuditCall(manageScheduledPlansId, manageScheduledPlansAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a manageScheduledPlans
     * Adds an audit to an existing manageScheduledPlans.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to add an audit to (required)
     * @param manageScheduledPlansAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addManageScheduledPlansAudit(Integer manageScheduledPlansId, String manageScheduledPlansAudit) throws ApiException {
        addManageScheduledPlansAuditWithHttpInfo(manageScheduledPlansId, manageScheduledPlansAudit);
    }

    /**
     * Add new audit for a manageScheduledPlans
     * Adds an audit to an existing manageScheduledPlans.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to add an audit to (required)
     * @param manageScheduledPlansAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addManageScheduledPlansAuditWithHttpInfo(Integer manageScheduledPlansId, String manageScheduledPlansAudit) throws ApiException {
        com.squareup.okhttp.Call call = addManageScheduledPlansAuditValidateBeforeCall(manageScheduledPlansId, manageScheduledPlansAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a manageScheduledPlans (asynchronously)
     * Adds an audit to an existing manageScheduledPlans.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to add an audit to (required)
     * @param manageScheduledPlansAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addManageScheduledPlansAuditAsync(Integer manageScheduledPlansId, String manageScheduledPlansAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addManageScheduledPlansAuditValidateBeforeCall(manageScheduledPlansId, manageScheduledPlansAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addManageScheduledPlansFile
     * @param manageScheduledPlansId Id of the manageScheduledPlans to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addManageScheduledPlansFileCall(Integer manageScheduledPlansId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/manageScheduledPlans/{manageScheduledPlansId}/file/{fileName}"
            .replaceAll("\\{" + "manageScheduledPlansId" + "\\}", apiClient.escapeString(manageScheduledPlansId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addManageScheduledPlansFileValidateBeforeCall(Integer manageScheduledPlansId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'manageScheduledPlansId' is set
        if (manageScheduledPlansId == null) {
            throw new ApiException("Missing the required parameter 'manageScheduledPlansId' when calling addManageScheduledPlansFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addManageScheduledPlansFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addManageScheduledPlansFileCall(manageScheduledPlansId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a manageScheduledPlans
     * Adds a file to an existing manageScheduledPlans.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addManageScheduledPlansFile(Integer manageScheduledPlansId, String fileName) throws ApiException {
        addManageScheduledPlansFileWithHttpInfo(manageScheduledPlansId, fileName);
    }

    /**
     * Attach a file to a manageScheduledPlans
     * Adds a file to an existing manageScheduledPlans.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addManageScheduledPlansFileWithHttpInfo(Integer manageScheduledPlansId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addManageScheduledPlansFileValidateBeforeCall(manageScheduledPlansId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a manageScheduledPlans (asynchronously)
     * Adds a file to an existing manageScheduledPlans.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addManageScheduledPlansFileAsync(Integer manageScheduledPlansId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addManageScheduledPlansFileValidateBeforeCall(manageScheduledPlansId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addManageScheduledPlansFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param manageScheduledPlansId Id of the manageScheduledPlans to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addManageScheduledPlansFileByURLCall(RecordFile body, Integer manageScheduledPlansId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/manageScheduledPlans/{manageScheduledPlansId}/file"
            .replaceAll("\\{" + "manageScheduledPlansId" + "\\}", apiClient.escapeString(manageScheduledPlansId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addManageScheduledPlansFileByURLValidateBeforeCall(RecordFile body, Integer manageScheduledPlansId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addManageScheduledPlansFileByURL(Async)");
        }
        
        // verify the required parameter 'manageScheduledPlansId' is set
        if (manageScheduledPlansId == null) {
            throw new ApiException("Missing the required parameter 'manageScheduledPlansId' when calling addManageScheduledPlansFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addManageScheduledPlansFileByURLCall(body, manageScheduledPlansId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a manageScheduledPlans by URL.
     * Adds a file to an existing manageScheduledPlans by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param manageScheduledPlansId Id of the manageScheduledPlans to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addManageScheduledPlansFileByURL(RecordFile body, Integer manageScheduledPlansId) throws ApiException {
        addManageScheduledPlansFileByURLWithHttpInfo(body, manageScheduledPlansId);
    }

    /**
     * Attach a file to a manageScheduledPlans by URL.
     * Adds a file to an existing manageScheduledPlans by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param manageScheduledPlansId Id of the manageScheduledPlans to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addManageScheduledPlansFileByURLWithHttpInfo(RecordFile body, Integer manageScheduledPlansId) throws ApiException {
        com.squareup.okhttp.Call call = addManageScheduledPlansFileByURLValidateBeforeCall(body, manageScheduledPlansId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a manageScheduledPlans by URL. (asynchronously)
     * Adds a file to an existing manageScheduledPlans by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param manageScheduledPlansId Id of the manageScheduledPlans to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addManageScheduledPlansFileByURLAsync(RecordFile body, Integer manageScheduledPlansId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addManageScheduledPlansFileByURLValidateBeforeCall(body, manageScheduledPlansId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addManageScheduledPlansTag
     * @param manageScheduledPlansId Id of the manageScheduledPlans to add a tag to (required)
     * @param manageScheduledPlansTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addManageScheduledPlansTagCall(Integer manageScheduledPlansId, String manageScheduledPlansTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/manageScheduledPlans/{manageScheduledPlansId}/tag/{manageScheduledPlansTag}"
            .replaceAll("\\{" + "manageScheduledPlansId" + "\\}", apiClient.escapeString(manageScheduledPlansId.toString()))
            .replaceAll("\\{" + "manageScheduledPlansTag" + "\\}", apiClient.escapeString(manageScheduledPlansTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addManageScheduledPlansTagValidateBeforeCall(Integer manageScheduledPlansId, String manageScheduledPlansTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'manageScheduledPlansId' is set
        if (manageScheduledPlansId == null) {
            throw new ApiException("Missing the required parameter 'manageScheduledPlansId' when calling addManageScheduledPlansTag(Async)");
        }
        
        // verify the required parameter 'manageScheduledPlansTag' is set
        if (manageScheduledPlansTag == null) {
            throw new ApiException("Missing the required parameter 'manageScheduledPlansTag' when calling addManageScheduledPlansTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addManageScheduledPlansTagCall(manageScheduledPlansId, manageScheduledPlansTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a manageScheduledPlans.
     * Adds a tag to an existing manageScheduledPlans.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to add a tag to (required)
     * @param manageScheduledPlansTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addManageScheduledPlansTag(Integer manageScheduledPlansId, String manageScheduledPlansTag) throws ApiException {
        addManageScheduledPlansTagWithHttpInfo(manageScheduledPlansId, manageScheduledPlansTag);
    }

    /**
     * Add new tags for a manageScheduledPlans.
     * Adds a tag to an existing manageScheduledPlans.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to add a tag to (required)
     * @param manageScheduledPlansTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addManageScheduledPlansTagWithHttpInfo(Integer manageScheduledPlansId, String manageScheduledPlansTag) throws ApiException {
        com.squareup.okhttp.Call call = addManageScheduledPlansTagValidateBeforeCall(manageScheduledPlansId, manageScheduledPlansTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a manageScheduledPlans. (asynchronously)
     * Adds a tag to an existing manageScheduledPlans.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to add a tag to (required)
     * @param manageScheduledPlansTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addManageScheduledPlansTagAsync(Integer manageScheduledPlansId, String manageScheduledPlansTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addManageScheduledPlansTagValidateBeforeCall(manageScheduledPlansId, manageScheduledPlansTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteManageScheduledPlans
     * @param manageScheduledPlansId Id of the manageScheduledPlans to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteManageScheduledPlansCall(Integer manageScheduledPlansId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/manageScheduledPlans/{manageScheduledPlansId}"
            .replaceAll("\\{" + "manageScheduledPlansId" + "\\}", apiClient.escapeString(manageScheduledPlansId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteManageScheduledPlansValidateBeforeCall(Integer manageScheduledPlansId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'manageScheduledPlansId' is set
        if (manageScheduledPlansId == null) {
            throw new ApiException("Missing the required parameter 'manageScheduledPlansId' when calling deleteManageScheduledPlans(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteManageScheduledPlansCall(manageScheduledPlansId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a manageScheduledPlans
     * Deletes the manageScheduledPlans identified by the specified id.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteManageScheduledPlans(Integer manageScheduledPlansId) throws ApiException {
        deleteManageScheduledPlansWithHttpInfo(manageScheduledPlansId);
    }

    /**
     * Delete a manageScheduledPlans
     * Deletes the manageScheduledPlans identified by the specified id.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteManageScheduledPlansWithHttpInfo(Integer manageScheduledPlansId) throws ApiException {
        com.squareup.okhttp.Call call = deleteManageScheduledPlansValidateBeforeCall(manageScheduledPlansId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a manageScheduledPlans (asynchronously)
     * Deletes the manageScheduledPlans identified by the specified id.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteManageScheduledPlansAsync(Integer manageScheduledPlansId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteManageScheduledPlansValidateBeforeCall(manageScheduledPlansId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteManageScheduledPlansFile
     * @param manageScheduledPlansId Id of the manageScheduledPlans to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteManageScheduledPlansFileCall(Integer manageScheduledPlansId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/manageScheduledPlans/{manageScheduledPlansId}/file/{fileId}"
            .replaceAll("\\{" + "manageScheduledPlansId" + "\\}", apiClient.escapeString(manageScheduledPlansId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteManageScheduledPlansFileValidateBeforeCall(Integer manageScheduledPlansId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'manageScheduledPlansId' is set
        if (manageScheduledPlansId == null) {
            throw new ApiException("Missing the required parameter 'manageScheduledPlansId' when calling deleteManageScheduledPlansFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteManageScheduledPlansFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteManageScheduledPlansFileCall(manageScheduledPlansId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a manageScheduledPlans.
     * Deletes an existing manageScheduledPlans file using the specified data.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteManageScheduledPlansFile(Integer manageScheduledPlansId, Integer fileId) throws ApiException {
        deleteManageScheduledPlansFileWithHttpInfo(manageScheduledPlansId, fileId);
    }

    /**
     * Delete a file for a manageScheduledPlans.
     * Deletes an existing manageScheduledPlans file using the specified data.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteManageScheduledPlansFileWithHttpInfo(Integer manageScheduledPlansId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteManageScheduledPlansFileValidateBeforeCall(manageScheduledPlansId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a manageScheduledPlans. (asynchronously)
     * Deletes an existing manageScheduledPlans file using the specified data.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteManageScheduledPlansFileAsync(Integer manageScheduledPlansId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteManageScheduledPlansFileValidateBeforeCall(manageScheduledPlansId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteManageScheduledPlansTag
     * @param manageScheduledPlansId Id of the manageScheduledPlans to remove tag from (required)
     * @param manageScheduledPlansTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteManageScheduledPlansTagCall(Integer manageScheduledPlansId, String manageScheduledPlansTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/manageScheduledPlans/{manageScheduledPlansId}/tag/{manageScheduledPlansTag}"
            .replaceAll("\\{" + "manageScheduledPlansId" + "\\}", apiClient.escapeString(manageScheduledPlansId.toString()))
            .replaceAll("\\{" + "manageScheduledPlansTag" + "\\}", apiClient.escapeString(manageScheduledPlansTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteManageScheduledPlansTagValidateBeforeCall(Integer manageScheduledPlansId, String manageScheduledPlansTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'manageScheduledPlansId' is set
        if (manageScheduledPlansId == null) {
            throw new ApiException("Missing the required parameter 'manageScheduledPlansId' when calling deleteManageScheduledPlansTag(Async)");
        }
        
        // verify the required parameter 'manageScheduledPlansTag' is set
        if (manageScheduledPlansTag == null) {
            throw new ApiException("Missing the required parameter 'manageScheduledPlansTag' when calling deleteManageScheduledPlansTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteManageScheduledPlansTagCall(manageScheduledPlansId, manageScheduledPlansTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a manageScheduledPlans.
     * Deletes an existing manageScheduledPlans tag using the specified data.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to remove tag from (required)
     * @param manageScheduledPlansTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteManageScheduledPlansTag(Integer manageScheduledPlansId, String manageScheduledPlansTag) throws ApiException {
        deleteManageScheduledPlansTagWithHttpInfo(manageScheduledPlansId, manageScheduledPlansTag);
    }

    /**
     * Delete a tag for a manageScheduledPlans.
     * Deletes an existing manageScheduledPlans tag using the specified data.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to remove tag from (required)
     * @param manageScheduledPlansTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteManageScheduledPlansTagWithHttpInfo(Integer manageScheduledPlansId, String manageScheduledPlansTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteManageScheduledPlansTagValidateBeforeCall(manageScheduledPlansId, manageScheduledPlansTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a manageScheduledPlans. (asynchronously)
     * Deletes an existing manageScheduledPlans tag using the specified data.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to remove tag from (required)
     * @param manageScheduledPlansTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteManageScheduledPlansTagAsync(Integer manageScheduledPlansId, String manageScheduledPlansTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteManageScheduledPlansTagValidateBeforeCall(manageScheduledPlansId, manageScheduledPlansTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateManageScheduledPlansById
     * @param manageScheduledPlansId Id of the manageScheduledPlans to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateManageScheduledPlansByIdCall(Integer manageScheduledPlansId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/manageScheduledPlans/duplicate/{manageScheduledPlansId}"
            .replaceAll("\\{" + "manageScheduledPlansId" + "\\}", apiClient.escapeString(manageScheduledPlansId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateManageScheduledPlansByIdValidateBeforeCall(Integer manageScheduledPlansId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'manageScheduledPlansId' is set
        if (manageScheduledPlansId == null) {
            throw new ApiException("Missing the required parameter 'manageScheduledPlansId' when calling getDuplicateManageScheduledPlansById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateManageScheduledPlansByIdCall(manageScheduledPlansId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a manageScheduledPlans by id
     * Returns a duplicated manageScheduledPlans identified by the specified id.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to be duplicated. (required)
     * @return ManageScheduledPlans
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ManageScheduledPlans getDuplicateManageScheduledPlansById(Integer manageScheduledPlansId) throws ApiException {
        ApiResponse<ManageScheduledPlans> resp = getDuplicateManageScheduledPlansByIdWithHttpInfo(manageScheduledPlansId);
        return resp.getData();
    }

    /**
     * Get a duplicated a manageScheduledPlans by id
     * Returns a duplicated manageScheduledPlans identified by the specified id.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to be duplicated. (required)
     * @return ApiResponse&lt;ManageScheduledPlans&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ManageScheduledPlans> getDuplicateManageScheduledPlansByIdWithHttpInfo(Integer manageScheduledPlansId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateManageScheduledPlansByIdValidateBeforeCall(manageScheduledPlansId, null, null);
        Type localVarReturnType = new TypeToken<ManageScheduledPlans>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a manageScheduledPlans by id (asynchronously)
     * Returns a duplicated manageScheduledPlans identified by the specified id.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateManageScheduledPlansByIdAsync(Integer manageScheduledPlansId, final ApiCallback<ManageScheduledPlans> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateManageScheduledPlansByIdValidateBeforeCall(manageScheduledPlansId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ManageScheduledPlans>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getManageScheduledPlansByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getManageScheduledPlansByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/manageScheduledPlans/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getManageScheduledPlansByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getManageScheduledPlansByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search manageScheduledPlanses by filter
     * Returns the list of manageScheduledPlanses that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;ManageScheduledPlans&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ManageScheduledPlans> getManageScheduledPlansByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<ManageScheduledPlans>> resp = getManageScheduledPlansByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search manageScheduledPlanses by filter
     * Returns the list of manageScheduledPlanses that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;ManageScheduledPlans&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ManageScheduledPlans>> getManageScheduledPlansByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getManageScheduledPlansByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<ManageScheduledPlans>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search manageScheduledPlanses by filter (asynchronously)
     * Returns the list of manageScheduledPlanses that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getManageScheduledPlansByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<ManageScheduledPlans>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getManageScheduledPlansByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ManageScheduledPlans>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getManageScheduledPlansById
     * @param manageScheduledPlansId Id of the manageScheduledPlans to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getManageScheduledPlansByIdCall(Integer manageScheduledPlansId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/manageScheduledPlans/{manageScheduledPlansId}"
            .replaceAll("\\{" + "manageScheduledPlansId" + "\\}", apiClient.escapeString(manageScheduledPlansId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getManageScheduledPlansByIdValidateBeforeCall(Integer manageScheduledPlansId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'manageScheduledPlansId' is set
        if (manageScheduledPlansId == null) {
            throw new ApiException("Missing the required parameter 'manageScheduledPlansId' when calling getManageScheduledPlansById(Async)");
        }
        

        com.squareup.okhttp.Call call = getManageScheduledPlansByIdCall(manageScheduledPlansId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a manageScheduledPlans by id
     * Returns the manageScheduledPlans identified by the specified id.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to be returned. (required)
     * @return ManageScheduledPlans
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ManageScheduledPlans getManageScheduledPlansById(Integer manageScheduledPlansId) throws ApiException {
        ApiResponse<ManageScheduledPlans> resp = getManageScheduledPlansByIdWithHttpInfo(manageScheduledPlansId);
        return resp.getData();
    }

    /**
     * Get a manageScheduledPlans by id
     * Returns the manageScheduledPlans identified by the specified id.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to be returned. (required)
     * @return ApiResponse&lt;ManageScheduledPlans&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ManageScheduledPlans> getManageScheduledPlansByIdWithHttpInfo(Integer manageScheduledPlansId) throws ApiException {
        com.squareup.okhttp.Call call = getManageScheduledPlansByIdValidateBeforeCall(manageScheduledPlansId, null, null);
        Type localVarReturnType = new TypeToken<ManageScheduledPlans>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a manageScheduledPlans by id (asynchronously)
     * Returns the manageScheduledPlans identified by the specified id.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getManageScheduledPlansByIdAsync(Integer manageScheduledPlansId, final ApiCallback<ManageScheduledPlans> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getManageScheduledPlansByIdValidateBeforeCall(manageScheduledPlansId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ManageScheduledPlans>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getManageScheduledPlansFiles
     * @param manageScheduledPlansId Id of the manageScheduledPlans to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getManageScheduledPlansFilesCall(Integer manageScheduledPlansId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/manageScheduledPlans/{manageScheduledPlansId}/file"
            .replaceAll("\\{" + "manageScheduledPlansId" + "\\}", apiClient.escapeString(manageScheduledPlansId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getManageScheduledPlansFilesValidateBeforeCall(Integer manageScheduledPlansId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'manageScheduledPlansId' is set
        if (manageScheduledPlansId == null) {
            throw new ApiException("Missing the required parameter 'manageScheduledPlansId' when calling getManageScheduledPlansFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getManageScheduledPlansFilesCall(manageScheduledPlansId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a manageScheduledPlans.
     * Get all existing manageScheduledPlans files.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getManageScheduledPlansFiles(Integer manageScheduledPlansId) throws ApiException {
        getManageScheduledPlansFilesWithHttpInfo(manageScheduledPlansId);
    }

    /**
     * Get the files for a manageScheduledPlans.
     * Get all existing manageScheduledPlans files.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getManageScheduledPlansFilesWithHttpInfo(Integer manageScheduledPlansId) throws ApiException {
        com.squareup.okhttp.Call call = getManageScheduledPlansFilesValidateBeforeCall(manageScheduledPlansId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a manageScheduledPlans. (asynchronously)
     * Get all existing manageScheduledPlans files.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getManageScheduledPlansFilesAsync(Integer manageScheduledPlansId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getManageScheduledPlansFilesValidateBeforeCall(manageScheduledPlansId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getManageScheduledPlansTags
     * @param manageScheduledPlansId Id of the manageScheduledPlans to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getManageScheduledPlansTagsCall(Integer manageScheduledPlansId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/manageScheduledPlans/{manageScheduledPlansId}/tag"
            .replaceAll("\\{" + "manageScheduledPlansId" + "\\}", apiClient.escapeString(manageScheduledPlansId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getManageScheduledPlansTagsValidateBeforeCall(Integer manageScheduledPlansId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'manageScheduledPlansId' is set
        if (manageScheduledPlansId == null) {
            throw new ApiException("Missing the required parameter 'manageScheduledPlansId' when calling getManageScheduledPlansTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getManageScheduledPlansTagsCall(manageScheduledPlansId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a manageScheduledPlans.
     * Get all existing manageScheduledPlans tags.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getManageScheduledPlansTags(Integer manageScheduledPlansId) throws ApiException {
        getManageScheduledPlansTagsWithHttpInfo(manageScheduledPlansId);
    }

    /**
     * Get the tags for a manageScheduledPlans.
     * Get all existing manageScheduledPlans tags.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getManageScheduledPlansTagsWithHttpInfo(Integer manageScheduledPlansId) throws ApiException {
        com.squareup.okhttp.Call call = getManageScheduledPlansTagsValidateBeforeCall(manageScheduledPlansId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a manageScheduledPlans. (asynchronously)
     * Get all existing manageScheduledPlans tags.
     * @param manageScheduledPlansId Id of the manageScheduledPlans to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getManageScheduledPlansTagsAsync(Integer manageScheduledPlansId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getManageScheduledPlansTagsValidateBeforeCall(manageScheduledPlansId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateManageScheduledPlans
     * @param body ManageScheduledPlans to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateManageScheduledPlansCall(ManageScheduledPlans body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/manageScheduledPlans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateManageScheduledPlansValidateBeforeCall(ManageScheduledPlans body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateManageScheduledPlans(Async)");
        }
        

        com.squareup.okhttp.Call call = updateManageScheduledPlansCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a manageScheduledPlans
     * Updates an existing manageScheduledPlans using the specified data.
     * @param body ManageScheduledPlans to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateManageScheduledPlans(ManageScheduledPlans body) throws ApiException {
        updateManageScheduledPlansWithHttpInfo(body);
    }

    /**
     * Update a manageScheduledPlans
     * Updates an existing manageScheduledPlans using the specified data.
     * @param body ManageScheduledPlans to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateManageScheduledPlansWithHttpInfo(ManageScheduledPlans body) throws ApiException {
        com.squareup.okhttp.Call call = updateManageScheduledPlansValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a manageScheduledPlans (asynchronously)
     * Updates an existing manageScheduledPlans using the specified data.
     * @param body ManageScheduledPlans to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateManageScheduledPlansAsync(ManageScheduledPlans body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateManageScheduledPlansValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
