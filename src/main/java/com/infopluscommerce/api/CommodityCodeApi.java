/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.CommodityCode;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CommodityCodeApi {
    private ApiClient apiClient;

    public CommodityCodeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CommodityCodeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addCommodityCodeAudit
     * @param commodityCodeId Id of the commodityCode to add an audit to (required)
     * @param commodityCodeAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addCommodityCodeAuditCall(Integer commodityCodeId, String commodityCodeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/commodityCode/{commodityCodeId}/audit/{commodityCodeAudit}"
            .replaceAll("\\{" + "commodityCodeId" + "\\}", apiClient.escapeString(commodityCodeId.toString()))
            .replaceAll("\\{" + "commodityCodeAudit" + "\\}", apiClient.escapeString(commodityCodeAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCommodityCodeAuditValidateBeforeCall(Integer commodityCodeId, String commodityCodeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'commodityCodeId' is set
        if (commodityCodeId == null) {
            throw new ApiException("Missing the required parameter 'commodityCodeId' when calling addCommodityCodeAudit(Async)");
        }
        
        // verify the required parameter 'commodityCodeAudit' is set
        if (commodityCodeAudit == null) {
            throw new ApiException("Missing the required parameter 'commodityCodeAudit' when calling addCommodityCodeAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addCommodityCodeAuditCall(commodityCodeId, commodityCodeAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a commodityCode
     * Adds an audit to an existing commodityCode.
     * @param commodityCodeId Id of the commodityCode to add an audit to (required)
     * @param commodityCodeAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addCommodityCodeAudit(Integer commodityCodeId, String commodityCodeAudit) throws ApiException {
        addCommodityCodeAuditWithHttpInfo(commodityCodeId, commodityCodeAudit);
    }

    /**
     * Add new audit for a commodityCode
     * Adds an audit to an existing commodityCode.
     * @param commodityCodeId Id of the commodityCode to add an audit to (required)
     * @param commodityCodeAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addCommodityCodeAuditWithHttpInfo(Integer commodityCodeId, String commodityCodeAudit) throws ApiException {
        com.squareup.okhttp.Call call = addCommodityCodeAuditValidateBeforeCall(commodityCodeId, commodityCodeAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a commodityCode (asynchronously)
     * Adds an audit to an existing commodityCode.
     * @param commodityCodeId Id of the commodityCode to add an audit to (required)
     * @param commodityCodeAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCommodityCodeAuditAsync(Integer commodityCodeId, String commodityCodeAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCommodityCodeAuditValidateBeforeCall(commodityCodeId, commodityCodeAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addCommodityCodeFile
     * @param commodityCodeId Id of the commodityCode to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addCommodityCodeFileCall(Integer commodityCodeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/commodityCode/{commodityCodeId}/file/{fileName}"
            .replaceAll("\\{" + "commodityCodeId" + "\\}", apiClient.escapeString(commodityCodeId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCommodityCodeFileValidateBeforeCall(Integer commodityCodeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'commodityCodeId' is set
        if (commodityCodeId == null) {
            throw new ApiException("Missing the required parameter 'commodityCodeId' when calling addCommodityCodeFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addCommodityCodeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addCommodityCodeFileCall(commodityCodeId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a commodityCode
     * Adds a file to an existing commodityCode.
     * @param commodityCodeId Id of the commodityCode to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addCommodityCodeFile(Integer commodityCodeId, String fileName) throws ApiException {
        addCommodityCodeFileWithHttpInfo(commodityCodeId, fileName);
    }

    /**
     * Attach a file to a commodityCode
     * Adds a file to an existing commodityCode.
     * @param commodityCodeId Id of the commodityCode to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addCommodityCodeFileWithHttpInfo(Integer commodityCodeId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addCommodityCodeFileValidateBeforeCall(commodityCodeId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a commodityCode (asynchronously)
     * Adds a file to an existing commodityCode.
     * @param commodityCodeId Id of the commodityCode to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCommodityCodeFileAsync(Integer commodityCodeId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCommodityCodeFileValidateBeforeCall(commodityCodeId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addCommodityCodeFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param commodityCodeId Id of the commodityCode to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addCommodityCodeFileByURLCall(RecordFile body, Integer commodityCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/commodityCode/{commodityCodeId}/file"
            .replaceAll("\\{" + "commodityCodeId" + "\\}", apiClient.escapeString(commodityCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCommodityCodeFileByURLValidateBeforeCall(RecordFile body, Integer commodityCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addCommodityCodeFileByURL(Async)");
        }
        
        // verify the required parameter 'commodityCodeId' is set
        if (commodityCodeId == null) {
            throw new ApiException("Missing the required parameter 'commodityCodeId' when calling addCommodityCodeFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addCommodityCodeFileByURLCall(body, commodityCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a commodityCode by URL.
     * Adds a file to an existing commodityCode by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param commodityCodeId Id of the commodityCode to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addCommodityCodeFileByURL(RecordFile body, Integer commodityCodeId) throws ApiException {
        addCommodityCodeFileByURLWithHttpInfo(body, commodityCodeId);
    }

    /**
     * Attach a file to a commodityCode by URL.
     * Adds a file to an existing commodityCode by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param commodityCodeId Id of the commodityCode to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addCommodityCodeFileByURLWithHttpInfo(RecordFile body, Integer commodityCodeId) throws ApiException {
        com.squareup.okhttp.Call call = addCommodityCodeFileByURLValidateBeforeCall(body, commodityCodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a commodityCode by URL. (asynchronously)
     * Adds a file to an existing commodityCode by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param commodityCodeId Id of the commodityCode to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCommodityCodeFileByURLAsync(RecordFile body, Integer commodityCodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCommodityCodeFileByURLValidateBeforeCall(body, commodityCodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addCommodityCodeTag
     * @param commodityCodeId Id of the commodityCode to add a tag to (required)
     * @param commodityCodeTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addCommodityCodeTagCall(Integer commodityCodeId, String commodityCodeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/commodityCode/{commodityCodeId}/tag/{commodityCodeTag}"
            .replaceAll("\\{" + "commodityCodeId" + "\\}", apiClient.escapeString(commodityCodeId.toString()))
            .replaceAll("\\{" + "commodityCodeTag" + "\\}", apiClient.escapeString(commodityCodeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCommodityCodeTagValidateBeforeCall(Integer commodityCodeId, String commodityCodeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'commodityCodeId' is set
        if (commodityCodeId == null) {
            throw new ApiException("Missing the required parameter 'commodityCodeId' when calling addCommodityCodeTag(Async)");
        }
        
        // verify the required parameter 'commodityCodeTag' is set
        if (commodityCodeTag == null) {
            throw new ApiException("Missing the required parameter 'commodityCodeTag' when calling addCommodityCodeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addCommodityCodeTagCall(commodityCodeId, commodityCodeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a commodityCode.
     * Adds a tag to an existing commodityCode.
     * @param commodityCodeId Id of the commodityCode to add a tag to (required)
     * @param commodityCodeTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addCommodityCodeTag(Integer commodityCodeId, String commodityCodeTag) throws ApiException {
        addCommodityCodeTagWithHttpInfo(commodityCodeId, commodityCodeTag);
    }

    /**
     * Add new tags for a commodityCode.
     * Adds a tag to an existing commodityCode.
     * @param commodityCodeId Id of the commodityCode to add a tag to (required)
     * @param commodityCodeTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addCommodityCodeTagWithHttpInfo(Integer commodityCodeId, String commodityCodeTag) throws ApiException {
        com.squareup.okhttp.Call call = addCommodityCodeTagValidateBeforeCall(commodityCodeId, commodityCodeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a commodityCode. (asynchronously)
     * Adds a tag to an existing commodityCode.
     * @param commodityCodeId Id of the commodityCode to add a tag to (required)
     * @param commodityCodeTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCommodityCodeTagAsync(Integer commodityCodeId, String commodityCodeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCommodityCodeTagValidateBeforeCall(commodityCodeId, commodityCodeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteCommodityCodeFile
     * @param commodityCodeId Id of the commodityCode to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCommodityCodeFileCall(Integer commodityCodeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/commodityCode/{commodityCodeId}/file/{fileId}"
            .replaceAll("\\{" + "commodityCodeId" + "\\}", apiClient.escapeString(commodityCodeId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCommodityCodeFileValidateBeforeCall(Integer commodityCodeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'commodityCodeId' is set
        if (commodityCodeId == null) {
            throw new ApiException("Missing the required parameter 'commodityCodeId' when calling deleteCommodityCodeFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteCommodityCodeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCommodityCodeFileCall(commodityCodeId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a commodityCode.
     * Deletes an existing commodityCode file using the specified data.
     * @param commodityCodeId Id of the commodityCode to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCommodityCodeFile(Integer commodityCodeId, Integer fileId) throws ApiException {
        deleteCommodityCodeFileWithHttpInfo(commodityCodeId, fileId);
    }

    /**
     * Delete a file for a commodityCode.
     * Deletes an existing commodityCode file using the specified data.
     * @param commodityCodeId Id of the commodityCode to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCommodityCodeFileWithHttpInfo(Integer commodityCodeId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteCommodityCodeFileValidateBeforeCall(commodityCodeId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a commodityCode. (asynchronously)
     * Deletes an existing commodityCode file using the specified data.
     * @param commodityCodeId Id of the commodityCode to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCommodityCodeFileAsync(Integer commodityCodeId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCommodityCodeFileValidateBeforeCall(commodityCodeId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteCommodityCodeTag
     * @param commodityCodeId Id of the commodityCode to remove tag from (required)
     * @param commodityCodeTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCommodityCodeTagCall(Integer commodityCodeId, String commodityCodeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/commodityCode/{commodityCodeId}/tag/{commodityCodeTag}"
            .replaceAll("\\{" + "commodityCodeId" + "\\}", apiClient.escapeString(commodityCodeId.toString()))
            .replaceAll("\\{" + "commodityCodeTag" + "\\}", apiClient.escapeString(commodityCodeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCommodityCodeTagValidateBeforeCall(Integer commodityCodeId, String commodityCodeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'commodityCodeId' is set
        if (commodityCodeId == null) {
            throw new ApiException("Missing the required parameter 'commodityCodeId' when calling deleteCommodityCodeTag(Async)");
        }
        
        // verify the required parameter 'commodityCodeTag' is set
        if (commodityCodeTag == null) {
            throw new ApiException("Missing the required parameter 'commodityCodeTag' when calling deleteCommodityCodeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCommodityCodeTagCall(commodityCodeId, commodityCodeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a commodityCode.
     * Deletes an existing commodityCode tag using the specified data.
     * @param commodityCodeId Id of the commodityCode to remove tag from (required)
     * @param commodityCodeTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCommodityCodeTag(Integer commodityCodeId, String commodityCodeTag) throws ApiException {
        deleteCommodityCodeTagWithHttpInfo(commodityCodeId, commodityCodeTag);
    }

    /**
     * Delete a tag for a commodityCode.
     * Deletes an existing commodityCode tag using the specified data.
     * @param commodityCodeId Id of the commodityCode to remove tag from (required)
     * @param commodityCodeTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCommodityCodeTagWithHttpInfo(Integer commodityCodeId, String commodityCodeTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteCommodityCodeTagValidateBeforeCall(commodityCodeId, commodityCodeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a commodityCode. (asynchronously)
     * Deletes an existing commodityCode tag using the specified data.
     * @param commodityCodeId Id of the commodityCode to remove tag from (required)
     * @param commodityCodeTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCommodityCodeTagAsync(Integer commodityCodeId, String commodityCodeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCommodityCodeTagValidateBeforeCall(commodityCodeId, commodityCodeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getCommodityCodeByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCommodityCodeByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/commodityCode/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCommodityCodeByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getCommodityCodeByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search commodityCodes by filter
     * Returns the list of commodityCodes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;CommodityCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CommodityCode> getCommodityCodeByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<CommodityCode>> resp = getCommodityCodeByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search commodityCodes by filter
     * Returns the list of commodityCodes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;CommodityCode&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CommodityCode>> getCommodityCodeByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getCommodityCodeByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<CommodityCode>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search commodityCodes by filter (asynchronously)
     * Returns the list of commodityCodes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCommodityCodeByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<CommodityCode>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCommodityCodeByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CommodityCode>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCommodityCodeById
     * @param commodityCodeId Id of the commodityCode to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCommodityCodeByIdCall(Integer commodityCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/commodityCode/{commodityCodeId}"
            .replaceAll("\\{" + "commodityCodeId" + "\\}", apiClient.escapeString(commodityCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCommodityCodeByIdValidateBeforeCall(Integer commodityCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'commodityCodeId' is set
        if (commodityCodeId == null) {
            throw new ApiException("Missing the required parameter 'commodityCodeId' when calling getCommodityCodeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getCommodityCodeByIdCall(commodityCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a commodityCode by id
     * Returns the commodityCode identified by the specified id.
     * @param commodityCodeId Id of the commodityCode to be returned. (required)
     * @return CommodityCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommodityCode getCommodityCodeById(Integer commodityCodeId) throws ApiException {
        ApiResponse<CommodityCode> resp = getCommodityCodeByIdWithHttpInfo(commodityCodeId);
        return resp.getData();
    }

    /**
     * Get a commodityCode by id
     * Returns the commodityCode identified by the specified id.
     * @param commodityCodeId Id of the commodityCode to be returned. (required)
     * @return ApiResponse&lt;CommodityCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommodityCode> getCommodityCodeByIdWithHttpInfo(Integer commodityCodeId) throws ApiException {
        com.squareup.okhttp.Call call = getCommodityCodeByIdValidateBeforeCall(commodityCodeId, null, null);
        Type localVarReturnType = new TypeToken<CommodityCode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a commodityCode by id (asynchronously)
     * Returns the commodityCode identified by the specified id.
     * @param commodityCodeId Id of the commodityCode to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCommodityCodeByIdAsync(Integer commodityCodeId, final ApiCallback<CommodityCode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCommodityCodeByIdValidateBeforeCall(commodityCodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommodityCode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCommodityCodeFiles
     * @param commodityCodeId Id of the commodityCode to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCommodityCodeFilesCall(Integer commodityCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/commodityCode/{commodityCodeId}/file"
            .replaceAll("\\{" + "commodityCodeId" + "\\}", apiClient.escapeString(commodityCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCommodityCodeFilesValidateBeforeCall(Integer commodityCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'commodityCodeId' is set
        if (commodityCodeId == null) {
            throw new ApiException("Missing the required parameter 'commodityCodeId' when calling getCommodityCodeFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getCommodityCodeFilesCall(commodityCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a commodityCode.
     * Get all existing commodityCode files.
     * @param commodityCodeId Id of the commodityCode to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getCommodityCodeFiles(Integer commodityCodeId) throws ApiException {
        getCommodityCodeFilesWithHttpInfo(commodityCodeId);
    }

    /**
     * Get the files for a commodityCode.
     * Get all existing commodityCode files.
     * @param commodityCodeId Id of the commodityCode to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getCommodityCodeFilesWithHttpInfo(Integer commodityCodeId) throws ApiException {
        com.squareup.okhttp.Call call = getCommodityCodeFilesValidateBeforeCall(commodityCodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a commodityCode. (asynchronously)
     * Get all existing commodityCode files.
     * @param commodityCodeId Id of the commodityCode to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCommodityCodeFilesAsync(Integer commodityCodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCommodityCodeFilesValidateBeforeCall(commodityCodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getCommodityCodeTags
     * @param commodityCodeId Id of the commodityCode to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCommodityCodeTagsCall(Integer commodityCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/commodityCode/{commodityCodeId}/tag"
            .replaceAll("\\{" + "commodityCodeId" + "\\}", apiClient.escapeString(commodityCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCommodityCodeTagsValidateBeforeCall(Integer commodityCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'commodityCodeId' is set
        if (commodityCodeId == null) {
            throw new ApiException("Missing the required parameter 'commodityCodeId' when calling getCommodityCodeTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getCommodityCodeTagsCall(commodityCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a commodityCode.
     * Get all existing commodityCode tags.
     * @param commodityCodeId Id of the commodityCode to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getCommodityCodeTags(Integer commodityCodeId) throws ApiException {
        getCommodityCodeTagsWithHttpInfo(commodityCodeId);
    }

    /**
     * Get the tags for a commodityCode.
     * Get all existing commodityCode tags.
     * @param commodityCodeId Id of the commodityCode to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getCommodityCodeTagsWithHttpInfo(Integer commodityCodeId) throws ApiException {
        com.squareup.okhttp.Call call = getCommodityCodeTagsValidateBeforeCall(commodityCodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a commodityCode. (asynchronously)
     * Get all existing commodityCode tags.
     * @param commodityCodeId Id of the commodityCode to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCommodityCodeTagsAsync(Integer commodityCodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCommodityCodeTagsValidateBeforeCall(commodityCodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateCommodityCodeById
     * @param commodityCodeId Id of the commodityCode to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateCommodityCodeByIdCall(Integer commodityCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/commodityCode/duplicate/{commodityCodeId}"
            .replaceAll("\\{" + "commodityCodeId" + "\\}", apiClient.escapeString(commodityCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateCommodityCodeByIdValidateBeforeCall(Integer commodityCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'commodityCodeId' is set
        if (commodityCodeId == null) {
            throw new ApiException("Missing the required parameter 'commodityCodeId' when calling getDuplicateCommodityCodeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateCommodityCodeByIdCall(commodityCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a commodityCode by id
     * Returns a duplicated commodityCode identified by the specified id.
     * @param commodityCodeId Id of the commodityCode to be duplicated. (required)
     * @return CommodityCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommodityCode getDuplicateCommodityCodeById(Integer commodityCodeId) throws ApiException {
        ApiResponse<CommodityCode> resp = getDuplicateCommodityCodeByIdWithHttpInfo(commodityCodeId);
        return resp.getData();
    }

    /**
     * Get a duplicated a commodityCode by id
     * Returns a duplicated commodityCode identified by the specified id.
     * @param commodityCodeId Id of the commodityCode to be duplicated. (required)
     * @return ApiResponse&lt;CommodityCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommodityCode> getDuplicateCommodityCodeByIdWithHttpInfo(Integer commodityCodeId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateCommodityCodeByIdValidateBeforeCall(commodityCodeId, null, null);
        Type localVarReturnType = new TypeToken<CommodityCode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a commodityCode by id (asynchronously)
     * Returns a duplicated commodityCode identified by the specified id.
     * @param commodityCodeId Id of the commodityCode to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateCommodityCodeByIdAsync(Integer commodityCodeId, final ApiCallback<CommodityCode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateCommodityCodeByIdValidateBeforeCall(commodityCodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommodityCode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
