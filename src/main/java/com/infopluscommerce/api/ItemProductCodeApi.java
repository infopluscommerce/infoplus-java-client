/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ItemProductCode;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ItemProductCodeApi {
    private ApiClient apiClient;

    public ItemProductCodeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ItemProductCodeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addItemProductCode
     * @param body ItemProductCode to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemProductCodeCall(ItemProductCode body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/itemProductCode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemProductCodeValidateBeforeCall(ItemProductCode body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addItemProductCode(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemProductCodeCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an itemProductCode
     * Inserts a new itemProductCode using the specified data.
     * @param body ItemProductCode to be inserted. (required)
     * @return ItemProductCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemProductCode addItemProductCode(ItemProductCode body) throws ApiException {
        ApiResponse<ItemProductCode> resp = addItemProductCodeWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create an itemProductCode
     * Inserts a new itemProductCode using the specified data.
     * @param body ItemProductCode to be inserted. (required)
     * @return ApiResponse&lt;ItemProductCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemProductCode> addItemProductCodeWithHttpInfo(ItemProductCode body) throws ApiException {
        com.squareup.okhttp.Call call = addItemProductCodeValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ItemProductCode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an itemProductCode (asynchronously)
     * Inserts a new itemProductCode using the specified data.
     * @param body ItemProductCode to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemProductCodeAsync(ItemProductCode body, final ApiCallback<ItemProductCode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemProductCodeValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemProductCode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addItemProductCodeAudit
     * @param itemProductCodeId Id of the itemProductCode to add an audit to (required)
     * @param itemProductCodeAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemProductCodeAuditCall(Integer itemProductCodeId, String itemProductCodeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemProductCode/{itemProductCodeId}/audit/{itemProductCodeAudit}"
            .replaceAll("\\{" + "itemProductCodeId" + "\\}", apiClient.escapeString(itemProductCodeId.toString()))
            .replaceAll("\\{" + "itemProductCodeAudit" + "\\}", apiClient.escapeString(itemProductCodeAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemProductCodeAuditValidateBeforeCall(Integer itemProductCodeId, String itemProductCodeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemProductCodeId' is set
        if (itemProductCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemProductCodeId' when calling addItemProductCodeAudit(Async)");
        }
        
        // verify the required parameter 'itemProductCodeAudit' is set
        if (itemProductCodeAudit == null) {
            throw new ApiException("Missing the required parameter 'itemProductCodeAudit' when calling addItemProductCodeAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemProductCodeAuditCall(itemProductCodeId, itemProductCodeAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for an itemProductCode
     * Adds an audit to an existing itemProductCode.
     * @param itemProductCodeId Id of the itemProductCode to add an audit to (required)
     * @param itemProductCodeAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemProductCodeAudit(Integer itemProductCodeId, String itemProductCodeAudit) throws ApiException {
        addItemProductCodeAuditWithHttpInfo(itemProductCodeId, itemProductCodeAudit);
    }

    /**
     * Add new audit for an itemProductCode
     * Adds an audit to an existing itemProductCode.
     * @param itemProductCodeId Id of the itemProductCode to add an audit to (required)
     * @param itemProductCodeAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemProductCodeAuditWithHttpInfo(Integer itemProductCodeId, String itemProductCodeAudit) throws ApiException {
        com.squareup.okhttp.Call call = addItemProductCodeAuditValidateBeforeCall(itemProductCodeId, itemProductCodeAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for an itemProductCode (asynchronously)
     * Adds an audit to an existing itemProductCode.
     * @param itemProductCodeId Id of the itemProductCode to add an audit to (required)
     * @param itemProductCodeAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemProductCodeAuditAsync(Integer itemProductCodeId, String itemProductCodeAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemProductCodeAuditValidateBeforeCall(itemProductCodeId, itemProductCodeAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemProductCodeFile
     * @param itemProductCodeId Id of the itemProductCode to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemProductCodeFileCall(Integer itemProductCodeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemProductCode/{itemProductCodeId}/file/{fileName}"
            .replaceAll("\\{" + "itemProductCodeId" + "\\}", apiClient.escapeString(itemProductCodeId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemProductCodeFileValidateBeforeCall(Integer itemProductCodeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemProductCodeId' is set
        if (itemProductCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemProductCodeId' when calling addItemProductCodeFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addItemProductCodeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemProductCodeFileCall(itemProductCodeId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an itemProductCode
     * Adds a file to an existing itemProductCode.
     * @param itemProductCodeId Id of the itemProductCode to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemProductCodeFile(Integer itemProductCodeId, String fileName) throws ApiException {
        addItemProductCodeFileWithHttpInfo(itemProductCodeId, fileName);
    }

    /**
     * Attach a file to an itemProductCode
     * Adds a file to an existing itemProductCode.
     * @param itemProductCodeId Id of the itemProductCode to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemProductCodeFileWithHttpInfo(Integer itemProductCodeId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addItemProductCodeFileValidateBeforeCall(itemProductCodeId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an itemProductCode (asynchronously)
     * Adds a file to an existing itemProductCode.
     * @param itemProductCodeId Id of the itemProductCode to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemProductCodeFileAsync(Integer itemProductCodeId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemProductCodeFileValidateBeforeCall(itemProductCodeId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemProductCodeFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param itemProductCodeId Id of the itemProductCode to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemProductCodeFileByURLCall(RecordFile body, Integer itemProductCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/itemProductCode/{itemProductCodeId}/file"
            .replaceAll("\\{" + "itemProductCodeId" + "\\}", apiClient.escapeString(itemProductCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemProductCodeFileByURLValidateBeforeCall(RecordFile body, Integer itemProductCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addItemProductCodeFileByURL(Async)");
        }
        
        // verify the required parameter 'itemProductCodeId' is set
        if (itemProductCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemProductCodeId' when calling addItemProductCodeFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemProductCodeFileByURLCall(body, itemProductCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an itemProductCode by URL.
     * Adds a file to an existing itemProductCode by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param itemProductCodeId Id of the itemProductCode to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemProductCodeFileByURL(RecordFile body, Integer itemProductCodeId) throws ApiException {
        addItemProductCodeFileByURLWithHttpInfo(body, itemProductCodeId);
    }

    /**
     * Attach a file to an itemProductCode by URL.
     * Adds a file to an existing itemProductCode by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param itemProductCodeId Id of the itemProductCode to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemProductCodeFileByURLWithHttpInfo(RecordFile body, Integer itemProductCodeId) throws ApiException {
        com.squareup.okhttp.Call call = addItemProductCodeFileByURLValidateBeforeCall(body, itemProductCodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an itemProductCode by URL. (asynchronously)
     * Adds a file to an existing itemProductCode by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param itemProductCodeId Id of the itemProductCode to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemProductCodeFileByURLAsync(RecordFile body, Integer itemProductCodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemProductCodeFileByURLValidateBeforeCall(body, itemProductCodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemProductCodeTag
     * @param itemProductCodeId Id of the itemProductCode to add a tag to (required)
     * @param itemProductCodeTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemProductCodeTagCall(Integer itemProductCodeId, String itemProductCodeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemProductCode/{itemProductCodeId}/tag/{itemProductCodeTag}"
            .replaceAll("\\{" + "itemProductCodeId" + "\\}", apiClient.escapeString(itemProductCodeId.toString()))
            .replaceAll("\\{" + "itemProductCodeTag" + "\\}", apiClient.escapeString(itemProductCodeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemProductCodeTagValidateBeforeCall(Integer itemProductCodeId, String itemProductCodeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemProductCodeId' is set
        if (itemProductCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemProductCodeId' when calling addItemProductCodeTag(Async)");
        }
        
        // verify the required parameter 'itemProductCodeTag' is set
        if (itemProductCodeTag == null) {
            throw new ApiException("Missing the required parameter 'itemProductCodeTag' when calling addItemProductCodeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemProductCodeTagCall(itemProductCodeId, itemProductCodeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for an itemProductCode.
     * Adds a tag to an existing itemProductCode.
     * @param itemProductCodeId Id of the itemProductCode to add a tag to (required)
     * @param itemProductCodeTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemProductCodeTag(Integer itemProductCodeId, String itemProductCodeTag) throws ApiException {
        addItemProductCodeTagWithHttpInfo(itemProductCodeId, itemProductCodeTag);
    }

    /**
     * Add new tags for an itemProductCode.
     * Adds a tag to an existing itemProductCode.
     * @param itemProductCodeId Id of the itemProductCode to add a tag to (required)
     * @param itemProductCodeTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemProductCodeTagWithHttpInfo(Integer itemProductCodeId, String itemProductCodeTag) throws ApiException {
        com.squareup.okhttp.Call call = addItemProductCodeTagValidateBeforeCall(itemProductCodeId, itemProductCodeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for an itemProductCode. (asynchronously)
     * Adds a tag to an existing itemProductCode.
     * @param itemProductCodeId Id of the itemProductCode to add a tag to (required)
     * @param itemProductCodeTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemProductCodeTagAsync(Integer itemProductCodeId, String itemProductCodeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemProductCodeTagValidateBeforeCall(itemProductCodeId, itemProductCodeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemProductCode
     * @param itemProductCodeId Id of the itemProductCode to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemProductCodeCall(Integer itemProductCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemProductCode/{itemProductCodeId}"
            .replaceAll("\\{" + "itemProductCodeId" + "\\}", apiClient.escapeString(itemProductCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemProductCodeValidateBeforeCall(Integer itemProductCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemProductCodeId' is set
        if (itemProductCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemProductCodeId' when calling deleteItemProductCode(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemProductCodeCall(itemProductCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an itemProductCode
     * Deletes the itemProductCode identified by the specified id.
     * @param itemProductCodeId Id of the itemProductCode to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemProductCode(Integer itemProductCodeId) throws ApiException {
        deleteItemProductCodeWithHttpInfo(itemProductCodeId);
    }

    /**
     * Delete an itemProductCode
     * Deletes the itemProductCode identified by the specified id.
     * @param itemProductCodeId Id of the itemProductCode to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemProductCodeWithHttpInfo(Integer itemProductCodeId) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemProductCodeValidateBeforeCall(itemProductCodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an itemProductCode (asynchronously)
     * Deletes the itemProductCode identified by the specified id.
     * @param itemProductCodeId Id of the itemProductCode to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemProductCodeAsync(Integer itemProductCodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemProductCodeValidateBeforeCall(itemProductCodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemProductCodeFile
     * @param itemProductCodeId Id of the itemProductCode to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemProductCodeFileCall(Integer itemProductCodeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemProductCode/{itemProductCodeId}/file/{fileId}"
            .replaceAll("\\{" + "itemProductCodeId" + "\\}", apiClient.escapeString(itemProductCodeId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemProductCodeFileValidateBeforeCall(Integer itemProductCodeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemProductCodeId' is set
        if (itemProductCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemProductCodeId' when calling deleteItemProductCodeFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteItemProductCodeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemProductCodeFileCall(itemProductCodeId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for an itemProductCode.
     * Deletes an existing itemProductCode file using the specified data.
     * @param itemProductCodeId Id of the itemProductCode to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemProductCodeFile(Integer itemProductCodeId, Integer fileId) throws ApiException {
        deleteItemProductCodeFileWithHttpInfo(itemProductCodeId, fileId);
    }

    /**
     * Delete a file for an itemProductCode.
     * Deletes an existing itemProductCode file using the specified data.
     * @param itemProductCodeId Id of the itemProductCode to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemProductCodeFileWithHttpInfo(Integer itemProductCodeId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemProductCodeFileValidateBeforeCall(itemProductCodeId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for an itemProductCode. (asynchronously)
     * Deletes an existing itemProductCode file using the specified data.
     * @param itemProductCodeId Id of the itemProductCode to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemProductCodeFileAsync(Integer itemProductCodeId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemProductCodeFileValidateBeforeCall(itemProductCodeId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemProductCodeTag
     * @param itemProductCodeId Id of the itemProductCode to remove tag from (required)
     * @param itemProductCodeTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemProductCodeTagCall(Integer itemProductCodeId, String itemProductCodeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemProductCode/{itemProductCodeId}/tag/{itemProductCodeTag}"
            .replaceAll("\\{" + "itemProductCodeId" + "\\}", apiClient.escapeString(itemProductCodeId.toString()))
            .replaceAll("\\{" + "itemProductCodeTag" + "\\}", apiClient.escapeString(itemProductCodeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemProductCodeTagValidateBeforeCall(Integer itemProductCodeId, String itemProductCodeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemProductCodeId' is set
        if (itemProductCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemProductCodeId' when calling deleteItemProductCodeTag(Async)");
        }
        
        // verify the required parameter 'itemProductCodeTag' is set
        if (itemProductCodeTag == null) {
            throw new ApiException("Missing the required parameter 'itemProductCodeTag' when calling deleteItemProductCodeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemProductCodeTagCall(itemProductCodeId, itemProductCodeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for an itemProductCode.
     * Deletes an existing itemProductCode tag using the specified data.
     * @param itemProductCodeId Id of the itemProductCode to remove tag from (required)
     * @param itemProductCodeTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemProductCodeTag(Integer itemProductCodeId, String itemProductCodeTag) throws ApiException {
        deleteItemProductCodeTagWithHttpInfo(itemProductCodeId, itemProductCodeTag);
    }

    /**
     * Delete a tag for an itemProductCode.
     * Deletes an existing itemProductCode tag using the specified data.
     * @param itemProductCodeId Id of the itemProductCode to remove tag from (required)
     * @param itemProductCodeTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemProductCodeTagWithHttpInfo(Integer itemProductCodeId, String itemProductCodeTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemProductCodeTagValidateBeforeCall(itemProductCodeId, itemProductCodeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for an itemProductCode. (asynchronously)
     * Deletes an existing itemProductCode tag using the specified data.
     * @param itemProductCodeId Id of the itemProductCode to remove tag from (required)
     * @param itemProductCodeTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemProductCodeTagAsync(Integer itemProductCodeId, String itemProductCodeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemProductCodeTagValidateBeforeCall(itemProductCodeId, itemProductCodeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateItemProductCodeById
     * @param itemProductCodeId Id of the itemProductCode to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateItemProductCodeByIdCall(Integer itemProductCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemProductCode/duplicate/{itemProductCodeId}"
            .replaceAll("\\{" + "itemProductCodeId" + "\\}", apiClient.escapeString(itemProductCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateItemProductCodeByIdValidateBeforeCall(Integer itemProductCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemProductCodeId' is set
        if (itemProductCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemProductCodeId' when calling getDuplicateItemProductCodeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateItemProductCodeByIdCall(itemProductCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated an itemProductCode by id
     * Returns a duplicated itemProductCode identified by the specified id.
     * @param itemProductCodeId Id of the itemProductCode to be duplicated. (required)
     * @return ItemProductCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemProductCode getDuplicateItemProductCodeById(Integer itemProductCodeId) throws ApiException {
        ApiResponse<ItemProductCode> resp = getDuplicateItemProductCodeByIdWithHttpInfo(itemProductCodeId);
        return resp.getData();
    }

    /**
     * Get a duplicated an itemProductCode by id
     * Returns a duplicated itemProductCode identified by the specified id.
     * @param itemProductCodeId Id of the itemProductCode to be duplicated. (required)
     * @return ApiResponse&lt;ItemProductCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemProductCode> getDuplicateItemProductCodeByIdWithHttpInfo(Integer itemProductCodeId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateItemProductCodeByIdValidateBeforeCall(itemProductCodeId, null, null);
        Type localVarReturnType = new TypeToken<ItemProductCode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated an itemProductCode by id (asynchronously)
     * Returns a duplicated itemProductCode identified by the specified id.
     * @param itemProductCodeId Id of the itemProductCode to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateItemProductCodeByIdAsync(Integer itemProductCodeId, final ApiCallback<ItemProductCode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateItemProductCodeByIdValidateBeforeCall(itemProductCodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemProductCode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemProductCodeByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemProductCodeByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemProductCode/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemProductCodeByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getItemProductCodeByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search itemProductCodes by filter
     * Returns the list of itemProductCodes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;ItemProductCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ItemProductCode> getItemProductCodeByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<ItemProductCode>> resp = getItemProductCodeByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search itemProductCodes by filter
     * Returns the list of itemProductCodes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;ItemProductCode&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ItemProductCode>> getItemProductCodeByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getItemProductCodeByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<ItemProductCode>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search itemProductCodes by filter (asynchronously)
     * Returns the list of itemProductCodes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemProductCodeByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<ItemProductCode>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemProductCodeByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ItemProductCode>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemProductCodeById
     * @param itemProductCodeId Id of the itemProductCode to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemProductCodeByIdCall(Integer itemProductCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemProductCode/{itemProductCodeId}"
            .replaceAll("\\{" + "itemProductCodeId" + "\\}", apiClient.escapeString(itemProductCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemProductCodeByIdValidateBeforeCall(Integer itemProductCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemProductCodeId' is set
        if (itemProductCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemProductCodeId' when calling getItemProductCodeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemProductCodeByIdCall(itemProductCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an itemProductCode by id
     * Returns the itemProductCode identified by the specified id.
     * @param itemProductCodeId Id of the itemProductCode to be returned. (required)
     * @return ItemProductCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemProductCode getItemProductCodeById(Integer itemProductCodeId) throws ApiException {
        ApiResponse<ItemProductCode> resp = getItemProductCodeByIdWithHttpInfo(itemProductCodeId);
        return resp.getData();
    }

    /**
     * Get an itemProductCode by id
     * Returns the itemProductCode identified by the specified id.
     * @param itemProductCodeId Id of the itemProductCode to be returned. (required)
     * @return ApiResponse&lt;ItemProductCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemProductCode> getItemProductCodeByIdWithHttpInfo(Integer itemProductCodeId) throws ApiException {
        com.squareup.okhttp.Call call = getItemProductCodeByIdValidateBeforeCall(itemProductCodeId, null, null);
        Type localVarReturnType = new TypeToken<ItemProductCode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an itemProductCode by id (asynchronously)
     * Returns the itemProductCode identified by the specified id.
     * @param itemProductCodeId Id of the itemProductCode to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemProductCodeByIdAsync(Integer itemProductCodeId, final ApiCallback<ItemProductCode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemProductCodeByIdValidateBeforeCall(itemProductCodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemProductCode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemProductCodeFiles
     * @param itemProductCodeId Id of the itemProductCode to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemProductCodeFilesCall(Integer itemProductCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemProductCode/{itemProductCodeId}/file"
            .replaceAll("\\{" + "itemProductCodeId" + "\\}", apiClient.escapeString(itemProductCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemProductCodeFilesValidateBeforeCall(Integer itemProductCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemProductCodeId' is set
        if (itemProductCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemProductCodeId' when calling getItemProductCodeFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemProductCodeFilesCall(itemProductCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for an itemProductCode.
     * Get all existing itemProductCode files.
     * @param itemProductCodeId Id of the itemProductCode to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getItemProductCodeFiles(Integer itemProductCodeId) throws ApiException {
        getItemProductCodeFilesWithHttpInfo(itemProductCodeId);
    }

    /**
     * Get the files for an itemProductCode.
     * Get all existing itemProductCode files.
     * @param itemProductCodeId Id of the itemProductCode to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getItemProductCodeFilesWithHttpInfo(Integer itemProductCodeId) throws ApiException {
        com.squareup.okhttp.Call call = getItemProductCodeFilesValidateBeforeCall(itemProductCodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for an itemProductCode. (asynchronously)
     * Get all existing itemProductCode files.
     * @param itemProductCodeId Id of the itemProductCode to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemProductCodeFilesAsync(Integer itemProductCodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemProductCodeFilesValidateBeforeCall(itemProductCodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getItemProductCodeTags
     * @param itemProductCodeId Id of the itemProductCode to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemProductCodeTagsCall(Integer itemProductCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemProductCode/{itemProductCodeId}/tag"
            .replaceAll("\\{" + "itemProductCodeId" + "\\}", apiClient.escapeString(itemProductCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemProductCodeTagsValidateBeforeCall(Integer itemProductCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemProductCodeId' is set
        if (itemProductCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemProductCodeId' when calling getItemProductCodeTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemProductCodeTagsCall(itemProductCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for an itemProductCode.
     * Get all existing itemProductCode tags.
     * @param itemProductCodeId Id of the itemProductCode to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getItemProductCodeTags(Integer itemProductCodeId) throws ApiException {
        getItemProductCodeTagsWithHttpInfo(itemProductCodeId);
    }

    /**
     * Get the tags for an itemProductCode.
     * Get all existing itemProductCode tags.
     * @param itemProductCodeId Id of the itemProductCode to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getItemProductCodeTagsWithHttpInfo(Integer itemProductCodeId) throws ApiException {
        com.squareup.okhttp.Call call = getItemProductCodeTagsValidateBeforeCall(itemProductCodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for an itemProductCode. (asynchronously)
     * Get all existing itemProductCode tags.
     * @param itemProductCodeId Id of the itemProductCode to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemProductCodeTagsAsync(Integer itemProductCodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemProductCodeTagsValidateBeforeCall(itemProductCodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateItemProductCode
     * @param body ItemProductCode to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateItemProductCodeCall(ItemProductCode body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/itemProductCode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateItemProductCodeValidateBeforeCall(ItemProductCode body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateItemProductCode(Async)");
        }
        

        com.squareup.okhttp.Call call = updateItemProductCodeCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an itemProductCode
     * Updates an existing itemProductCode using the specified data.
     * @param body ItemProductCode to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateItemProductCode(ItemProductCode body) throws ApiException {
        updateItemProductCodeWithHttpInfo(body);
    }

    /**
     * Update an itemProductCode
     * Updates an existing itemProductCode using the specified data.
     * @param body ItemProductCode to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateItemProductCodeWithHttpInfo(ItemProductCode body) throws ApiException {
        com.squareup.okhttp.Call call = updateItemProductCodeValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an itemProductCode (asynchronously)
     * Updates an existing itemProductCode using the specified data.
     * @param body ItemProductCode to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateItemProductCodeAsync(ItemProductCode body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateItemProductCodeValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
