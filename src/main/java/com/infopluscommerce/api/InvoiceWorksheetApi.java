/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.InvoiceWorksheet;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InvoiceWorksheetApi {
    private ApiClient apiClient;

    public InvoiceWorksheetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InvoiceWorksheetApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addInvoiceWorksheet
     * @param body InvoiceWorksheet to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInvoiceWorksheetCall(InvoiceWorksheet body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInvoiceWorksheetValidateBeforeCall(InvoiceWorksheet body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addInvoiceWorksheet(Async)");
        }
        

        com.squareup.okhttp.Call call = addInvoiceWorksheetCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an invoiceWorksheet
     * Inserts a new invoiceWorksheet using the specified data.
     * @param body InvoiceWorksheet to be inserted. (required)
     * @return InvoiceWorksheet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InvoiceWorksheet addInvoiceWorksheet(InvoiceWorksheet body) throws ApiException {
        ApiResponse<InvoiceWorksheet> resp = addInvoiceWorksheetWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create an invoiceWorksheet
     * Inserts a new invoiceWorksheet using the specified data.
     * @param body InvoiceWorksheet to be inserted. (required)
     * @return ApiResponse&lt;InvoiceWorksheet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InvoiceWorksheet> addInvoiceWorksheetWithHttpInfo(InvoiceWorksheet body) throws ApiException {
        com.squareup.okhttp.Call call = addInvoiceWorksheetValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<InvoiceWorksheet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an invoiceWorksheet (asynchronously)
     * Inserts a new invoiceWorksheet using the specified data.
     * @param body InvoiceWorksheet to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInvoiceWorksheetAsync(InvoiceWorksheet body, final ApiCallback<InvoiceWorksheet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInvoiceWorksheetValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InvoiceWorksheet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addInvoiceWorksheetAudit
     * @param invoiceWorksheetId Id of the invoiceWorksheet to add an audit to (required)
     * @param invoiceWorksheetAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInvoiceWorksheetAuditCall(Integer invoiceWorksheetId, String invoiceWorksheetAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheet/{invoiceWorksheetId}/audit/{invoiceWorksheetAudit}"
            .replaceAll("\\{" + "invoiceWorksheetId" + "\\}", apiClient.escapeString(invoiceWorksheetId.toString()))
            .replaceAll("\\{" + "invoiceWorksheetAudit" + "\\}", apiClient.escapeString(invoiceWorksheetAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInvoiceWorksheetAuditValidateBeforeCall(Integer invoiceWorksheetId, String invoiceWorksheetAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoiceWorksheetId' is set
        if (invoiceWorksheetId == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetId' when calling addInvoiceWorksheetAudit(Async)");
        }
        
        // verify the required parameter 'invoiceWorksheetAudit' is set
        if (invoiceWorksheetAudit == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetAudit' when calling addInvoiceWorksheetAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addInvoiceWorksheetAuditCall(invoiceWorksheetId, invoiceWorksheetAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for an invoiceWorksheet
     * Adds an audit to an existing invoiceWorksheet.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to add an audit to (required)
     * @param invoiceWorksheetAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addInvoiceWorksheetAudit(Integer invoiceWorksheetId, String invoiceWorksheetAudit) throws ApiException {
        addInvoiceWorksheetAuditWithHttpInfo(invoiceWorksheetId, invoiceWorksheetAudit);
    }

    /**
     * Add new audit for an invoiceWorksheet
     * Adds an audit to an existing invoiceWorksheet.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to add an audit to (required)
     * @param invoiceWorksheetAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addInvoiceWorksheetAuditWithHttpInfo(Integer invoiceWorksheetId, String invoiceWorksheetAudit) throws ApiException {
        com.squareup.okhttp.Call call = addInvoiceWorksheetAuditValidateBeforeCall(invoiceWorksheetId, invoiceWorksheetAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for an invoiceWorksheet (asynchronously)
     * Adds an audit to an existing invoiceWorksheet.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to add an audit to (required)
     * @param invoiceWorksheetAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInvoiceWorksheetAuditAsync(Integer invoiceWorksheetId, String invoiceWorksheetAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInvoiceWorksheetAuditValidateBeforeCall(invoiceWorksheetId, invoiceWorksheetAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addInvoiceWorksheetFile
     * @param invoiceWorksheetId Id of the invoiceWorksheet to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInvoiceWorksheetFileCall(Integer invoiceWorksheetId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheet/{invoiceWorksheetId}/file/{fileName}"
            .replaceAll("\\{" + "invoiceWorksheetId" + "\\}", apiClient.escapeString(invoiceWorksheetId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInvoiceWorksheetFileValidateBeforeCall(Integer invoiceWorksheetId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoiceWorksheetId' is set
        if (invoiceWorksheetId == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetId' when calling addInvoiceWorksheetFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addInvoiceWorksheetFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addInvoiceWorksheetFileCall(invoiceWorksheetId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an invoiceWorksheet
     * Adds a file to an existing invoiceWorksheet.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addInvoiceWorksheetFile(Integer invoiceWorksheetId, String fileName) throws ApiException {
        addInvoiceWorksheetFileWithHttpInfo(invoiceWorksheetId, fileName);
    }

    /**
     * Attach a file to an invoiceWorksheet
     * Adds a file to an existing invoiceWorksheet.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addInvoiceWorksheetFileWithHttpInfo(Integer invoiceWorksheetId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addInvoiceWorksheetFileValidateBeforeCall(invoiceWorksheetId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an invoiceWorksheet (asynchronously)
     * Adds a file to an existing invoiceWorksheet.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInvoiceWorksheetFileAsync(Integer invoiceWorksheetId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInvoiceWorksheetFileValidateBeforeCall(invoiceWorksheetId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addInvoiceWorksheetFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param invoiceWorksheetId Id of the invoiceWorksheet to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInvoiceWorksheetFileByURLCall(RecordFile body, Integer invoiceWorksheetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheet/{invoiceWorksheetId}/file"
            .replaceAll("\\{" + "invoiceWorksheetId" + "\\}", apiClient.escapeString(invoiceWorksheetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInvoiceWorksheetFileByURLValidateBeforeCall(RecordFile body, Integer invoiceWorksheetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addInvoiceWorksheetFileByURL(Async)");
        }
        
        // verify the required parameter 'invoiceWorksheetId' is set
        if (invoiceWorksheetId == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetId' when calling addInvoiceWorksheetFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addInvoiceWorksheetFileByURLCall(body, invoiceWorksheetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an invoiceWorksheet by URL.
     * Adds a file to an existing invoiceWorksheet by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param invoiceWorksheetId Id of the invoiceWorksheet to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addInvoiceWorksheetFileByURL(RecordFile body, Integer invoiceWorksheetId) throws ApiException {
        addInvoiceWorksheetFileByURLWithHttpInfo(body, invoiceWorksheetId);
    }

    /**
     * Attach a file to an invoiceWorksheet by URL.
     * Adds a file to an existing invoiceWorksheet by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param invoiceWorksheetId Id of the invoiceWorksheet to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addInvoiceWorksheetFileByURLWithHttpInfo(RecordFile body, Integer invoiceWorksheetId) throws ApiException {
        com.squareup.okhttp.Call call = addInvoiceWorksheetFileByURLValidateBeforeCall(body, invoiceWorksheetId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an invoiceWorksheet by URL. (asynchronously)
     * Adds a file to an existing invoiceWorksheet by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param invoiceWorksheetId Id of the invoiceWorksheet to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInvoiceWorksheetFileByURLAsync(RecordFile body, Integer invoiceWorksheetId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInvoiceWorksheetFileByURLValidateBeforeCall(body, invoiceWorksheetId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addInvoiceWorksheetTag
     * @param invoiceWorksheetId Id of the invoiceWorksheet to add a tag to (required)
     * @param invoiceWorksheetTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInvoiceWorksheetTagCall(Integer invoiceWorksheetId, String invoiceWorksheetTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheet/{invoiceWorksheetId}/tag/{invoiceWorksheetTag}"
            .replaceAll("\\{" + "invoiceWorksheetId" + "\\}", apiClient.escapeString(invoiceWorksheetId.toString()))
            .replaceAll("\\{" + "invoiceWorksheetTag" + "\\}", apiClient.escapeString(invoiceWorksheetTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInvoiceWorksheetTagValidateBeforeCall(Integer invoiceWorksheetId, String invoiceWorksheetTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoiceWorksheetId' is set
        if (invoiceWorksheetId == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetId' when calling addInvoiceWorksheetTag(Async)");
        }
        
        // verify the required parameter 'invoiceWorksheetTag' is set
        if (invoiceWorksheetTag == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetTag' when calling addInvoiceWorksheetTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addInvoiceWorksheetTagCall(invoiceWorksheetId, invoiceWorksheetTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for an invoiceWorksheet.
     * Adds a tag to an existing invoiceWorksheet.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to add a tag to (required)
     * @param invoiceWorksheetTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addInvoiceWorksheetTag(Integer invoiceWorksheetId, String invoiceWorksheetTag) throws ApiException {
        addInvoiceWorksheetTagWithHttpInfo(invoiceWorksheetId, invoiceWorksheetTag);
    }

    /**
     * Add new tags for an invoiceWorksheet.
     * Adds a tag to an existing invoiceWorksheet.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to add a tag to (required)
     * @param invoiceWorksheetTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addInvoiceWorksheetTagWithHttpInfo(Integer invoiceWorksheetId, String invoiceWorksheetTag) throws ApiException {
        com.squareup.okhttp.Call call = addInvoiceWorksheetTagValidateBeforeCall(invoiceWorksheetId, invoiceWorksheetTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for an invoiceWorksheet. (asynchronously)
     * Adds a tag to an existing invoiceWorksheet.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to add a tag to (required)
     * @param invoiceWorksheetTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInvoiceWorksheetTagAsync(Integer invoiceWorksheetId, String invoiceWorksheetTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInvoiceWorksheetTagValidateBeforeCall(invoiceWorksheetId, invoiceWorksheetTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteInvoiceWorksheet
     * @param invoiceWorksheetId Id of the invoiceWorksheet to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteInvoiceWorksheetCall(Integer invoiceWorksheetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheet/{invoiceWorksheetId}"
            .replaceAll("\\{" + "invoiceWorksheetId" + "\\}", apiClient.escapeString(invoiceWorksheetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteInvoiceWorksheetValidateBeforeCall(Integer invoiceWorksheetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoiceWorksheetId' is set
        if (invoiceWorksheetId == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetId' when calling deleteInvoiceWorksheet(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteInvoiceWorksheetCall(invoiceWorksheetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an invoiceWorksheet
     * Deletes the invoiceWorksheet identified by the specified id.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteInvoiceWorksheet(Integer invoiceWorksheetId) throws ApiException {
        deleteInvoiceWorksheetWithHttpInfo(invoiceWorksheetId);
    }

    /**
     * Delete an invoiceWorksheet
     * Deletes the invoiceWorksheet identified by the specified id.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteInvoiceWorksheetWithHttpInfo(Integer invoiceWorksheetId) throws ApiException {
        com.squareup.okhttp.Call call = deleteInvoiceWorksheetValidateBeforeCall(invoiceWorksheetId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an invoiceWorksheet (asynchronously)
     * Deletes the invoiceWorksheet identified by the specified id.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInvoiceWorksheetAsync(Integer invoiceWorksheetId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInvoiceWorksheetValidateBeforeCall(invoiceWorksheetId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteInvoiceWorksheetFile
     * @param invoiceWorksheetId Id of the invoiceWorksheet to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteInvoiceWorksheetFileCall(Integer invoiceWorksheetId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheet/{invoiceWorksheetId}/file/{fileId}"
            .replaceAll("\\{" + "invoiceWorksheetId" + "\\}", apiClient.escapeString(invoiceWorksheetId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteInvoiceWorksheetFileValidateBeforeCall(Integer invoiceWorksheetId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoiceWorksheetId' is set
        if (invoiceWorksheetId == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetId' when calling deleteInvoiceWorksheetFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteInvoiceWorksheetFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteInvoiceWorksheetFileCall(invoiceWorksheetId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for an invoiceWorksheet.
     * Deletes an existing invoiceWorksheet file using the specified data.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteInvoiceWorksheetFile(Integer invoiceWorksheetId, Integer fileId) throws ApiException {
        deleteInvoiceWorksheetFileWithHttpInfo(invoiceWorksheetId, fileId);
    }

    /**
     * Delete a file for an invoiceWorksheet.
     * Deletes an existing invoiceWorksheet file using the specified data.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteInvoiceWorksheetFileWithHttpInfo(Integer invoiceWorksheetId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteInvoiceWorksheetFileValidateBeforeCall(invoiceWorksheetId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for an invoiceWorksheet. (asynchronously)
     * Deletes an existing invoiceWorksheet file using the specified data.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInvoiceWorksheetFileAsync(Integer invoiceWorksheetId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInvoiceWorksheetFileValidateBeforeCall(invoiceWorksheetId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteInvoiceWorksheetTag
     * @param invoiceWorksheetId Id of the invoiceWorksheet to remove tag from (required)
     * @param invoiceWorksheetTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteInvoiceWorksheetTagCall(Integer invoiceWorksheetId, String invoiceWorksheetTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheet/{invoiceWorksheetId}/tag/{invoiceWorksheetTag}"
            .replaceAll("\\{" + "invoiceWorksheetId" + "\\}", apiClient.escapeString(invoiceWorksheetId.toString()))
            .replaceAll("\\{" + "invoiceWorksheetTag" + "\\}", apiClient.escapeString(invoiceWorksheetTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteInvoiceWorksheetTagValidateBeforeCall(Integer invoiceWorksheetId, String invoiceWorksheetTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoiceWorksheetId' is set
        if (invoiceWorksheetId == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetId' when calling deleteInvoiceWorksheetTag(Async)");
        }
        
        // verify the required parameter 'invoiceWorksheetTag' is set
        if (invoiceWorksheetTag == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetTag' when calling deleteInvoiceWorksheetTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteInvoiceWorksheetTagCall(invoiceWorksheetId, invoiceWorksheetTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for an invoiceWorksheet.
     * Deletes an existing invoiceWorksheet tag using the specified data.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to remove tag from (required)
     * @param invoiceWorksheetTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteInvoiceWorksheetTag(Integer invoiceWorksheetId, String invoiceWorksheetTag) throws ApiException {
        deleteInvoiceWorksheetTagWithHttpInfo(invoiceWorksheetId, invoiceWorksheetTag);
    }

    /**
     * Delete a tag for an invoiceWorksheet.
     * Deletes an existing invoiceWorksheet tag using the specified data.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to remove tag from (required)
     * @param invoiceWorksheetTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteInvoiceWorksheetTagWithHttpInfo(Integer invoiceWorksheetId, String invoiceWorksheetTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteInvoiceWorksheetTagValidateBeforeCall(invoiceWorksheetId, invoiceWorksheetTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for an invoiceWorksheet. (asynchronously)
     * Deletes an existing invoiceWorksheet tag using the specified data.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to remove tag from (required)
     * @param invoiceWorksheetTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInvoiceWorksheetTagAsync(Integer invoiceWorksheetId, String invoiceWorksheetTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInvoiceWorksheetTagValidateBeforeCall(invoiceWorksheetId, invoiceWorksheetTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateInvoiceWorksheetById
     * @param invoiceWorksheetId Id of the invoiceWorksheet to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateInvoiceWorksheetByIdCall(Integer invoiceWorksheetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheet/duplicate/{invoiceWorksheetId}"
            .replaceAll("\\{" + "invoiceWorksheetId" + "\\}", apiClient.escapeString(invoiceWorksheetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateInvoiceWorksheetByIdValidateBeforeCall(Integer invoiceWorksheetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoiceWorksheetId' is set
        if (invoiceWorksheetId == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetId' when calling getDuplicateInvoiceWorksheetById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateInvoiceWorksheetByIdCall(invoiceWorksheetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated an invoiceWorksheet by id
     * Returns a duplicated invoiceWorksheet identified by the specified id.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to be duplicated. (required)
     * @return InvoiceWorksheet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InvoiceWorksheet getDuplicateInvoiceWorksheetById(Integer invoiceWorksheetId) throws ApiException {
        ApiResponse<InvoiceWorksheet> resp = getDuplicateInvoiceWorksheetByIdWithHttpInfo(invoiceWorksheetId);
        return resp.getData();
    }

    /**
     * Get a duplicated an invoiceWorksheet by id
     * Returns a duplicated invoiceWorksheet identified by the specified id.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to be duplicated. (required)
     * @return ApiResponse&lt;InvoiceWorksheet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InvoiceWorksheet> getDuplicateInvoiceWorksheetByIdWithHttpInfo(Integer invoiceWorksheetId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateInvoiceWorksheetByIdValidateBeforeCall(invoiceWorksheetId, null, null);
        Type localVarReturnType = new TypeToken<InvoiceWorksheet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated an invoiceWorksheet by id (asynchronously)
     * Returns a duplicated invoiceWorksheet identified by the specified id.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateInvoiceWorksheetByIdAsync(Integer invoiceWorksheetId, final ApiCallback<InvoiceWorksheet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateInvoiceWorksheetByIdValidateBeforeCall(invoiceWorksheetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InvoiceWorksheet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInvoiceWorksheetByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInvoiceWorksheetByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheet/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInvoiceWorksheetByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getInvoiceWorksheetByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search invoiceWorksheets by filter
     * Returns the list of invoiceWorksheets that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;InvoiceWorksheet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InvoiceWorksheet> getInvoiceWorksheetByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<InvoiceWorksheet>> resp = getInvoiceWorksheetByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search invoiceWorksheets by filter
     * Returns the list of invoiceWorksheets that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;InvoiceWorksheet&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InvoiceWorksheet>> getInvoiceWorksheetByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getInvoiceWorksheetByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<InvoiceWorksheet>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search invoiceWorksheets by filter (asynchronously)
     * Returns the list of invoiceWorksheets that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInvoiceWorksheetByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<InvoiceWorksheet>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInvoiceWorksheetByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InvoiceWorksheet>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInvoiceWorksheetById
     * @param invoiceWorksheetId Id of the invoiceWorksheet to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInvoiceWorksheetByIdCall(Integer invoiceWorksheetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheet/{invoiceWorksheetId}"
            .replaceAll("\\{" + "invoiceWorksheetId" + "\\}", apiClient.escapeString(invoiceWorksheetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInvoiceWorksheetByIdValidateBeforeCall(Integer invoiceWorksheetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoiceWorksheetId' is set
        if (invoiceWorksheetId == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetId' when calling getInvoiceWorksheetById(Async)");
        }
        

        com.squareup.okhttp.Call call = getInvoiceWorksheetByIdCall(invoiceWorksheetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an invoiceWorksheet by id
     * Returns the invoiceWorksheet identified by the specified id.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to be returned. (required)
     * @return InvoiceWorksheet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InvoiceWorksheet getInvoiceWorksheetById(Integer invoiceWorksheetId) throws ApiException {
        ApiResponse<InvoiceWorksheet> resp = getInvoiceWorksheetByIdWithHttpInfo(invoiceWorksheetId);
        return resp.getData();
    }

    /**
     * Get an invoiceWorksheet by id
     * Returns the invoiceWorksheet identified by the specified id.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to be returned. (required)
     * @return ApiResponse&lt;InvoiceWorksheet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InvoiceWorksheet> getInvoiceWorksheetByIdWithHttpInfo(Integer invoiceWorksheetId) throws ApiException {
        com.squareup.okhttp.Call call = getInvoiceWorksheetByIdValidateBeforeCall(invoiceWorksheetId, null, null);
        Type localVarReturnType = new TypeToken<InvoiceWorksheet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an invoiceWorksheet by id (asynchronously)
     * Returns the invoiceWorksheet identified by the specified id.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInvoiceWorksheetByIdAsync(Integer invoiceWorksheetId, final ApiCallback<InvoiceWorksheet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInvoiceWorksheetByIdValidateBeforeCall(invoiceWorksheetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InvoiceWorksheet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInvoiceWorksheetFiles
     * @param invoiceWorksheetId Id of the invoiceWorksheet to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInvoiceWorksheetFilesCall(Integer invoiceWorksheetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheet/{invoiceWorksheetId}/file"
            .replaceAll("\\{" + "invoiceWorksheetId" + "\\}", apiClient.escapeString(invoiceWorksheetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInvoiceWorksheetFilesValidateBeforeCall(Integer invoiceWorksheetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoiceWorksheetId' is set
        if (invoiceWorksheetId == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetId' when calling getInvoiceWorksheetFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getInvoiceWorksheetFilesCall(invoiceWorksheetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for an invoiceWorksheet.
     * Get all existing invoiceWorksheet files.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getInvoiceWorksheetFiles(Integer invoiceWorksheetId) throws ApiException {
        getInvoiceWorksheetFilesWithHttpInfo(invoiceWorksheetId);
    }

    /**
     * Get the files for an invoiceWorksheet.
     * Get all existing invoiceWorksheet files.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getInvoiceWorksheetFilesWithHttpInfo(Integer invoiceWorksheetId) throws ApiException {
        com.squareup.okhttp.Call call = getInvoiceWorksheetFilesValidateBeforeCall(invoiceWorksheetId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for an invoiceWorksheet. (asynchronously)
     * Get all existing invoiceWorksheet files.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInvoiceWorksheetFilesAsync(Integer invoiceWorksheetId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInvoiceWorksheetFilesValidateBeforeCall(invoiceWorksheetId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getInvoiceWorksheetTags
     * @param invoiceWorksheetId Id of the invoiceWorksheet to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInvoiceWorksheetTagsCall(Integer invoiceWorksheetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheet/{invoiceWorksheetId}/tag"
            .replaceAll("\\{" + "invoiceWorksheetId" + "\\}", apiClient.escapeString(invoiceWorksheetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInvoiceWorksheetTagsValidateBeforeCall(Integer invoiceWorksheetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoiceWorksheetId' is set
        if (invoiceWorksheetId == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetId' when calling getInvoiceWorksheetTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getInvoiceWorksheetTagsCall(invoiceWorksheetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for an invoiceWorksheet.
     * Get all existing invoiceWorksheet tags.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getInvoiceWorksheetTags(Integer invoiceWorksheetId) throws ApiException {
        getInvoiceWorksheetTagsWithHttpInfo(invoiceWorksheetId);
    }

    /**
     * Get the tags for an invoiceWorksheet.
     * Get all existing invoiceWorksheet tags.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getInvoiceWorksheetTagsWithHttpInfo(Integer invoiceWorksheetId) throws ApiException {
        com.squareup.okhttp.Call call = getInvoiceWorksheetTagsValidateBeforeCall(invoiceWorksheetId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for an invoiceWorksheet. (asynchronously)
     * Get all existing invoiceWorksheet tags.
     * @param invoiceWorksheetId Id of the invoiceWorksheet to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInvoiceWorksheetTagsAsync(Integer invoiceWorksheetId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInvoiceWorksheetTagsValidateBeforeCall(invoiceWorksheetId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateInvoiceWorksheet
     * @param body InvoiceWorksheet to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateInvoiceWorksheetCall(InvoiceWorksheet body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateInvoiceWorksheetValidateBeforeCall(InvoiceWorksheet body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateInvoiceWorksheet(Async)");
        }
        

        com.squareup.okhttp.Call call = updateInvoiceWorksheetCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an invoiceWorksheet
     * Updates an existing invoiceWorksheet using the specified data.
     * @param body InvoiceWorksheet to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateInvoiceWorksheet(InvoiceWorksheet body) throws ApiException {
        updateInvoiceWorksheetWithHttpInfo(body);
    }

    /**
     * Update an invoiceWorksheet
     * Updates an existing invoiceWorksheet using the specified data.
     * @param body InvoiceWorksheet to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateInvoiceWorksheetWithHttpInfo(InvoiceWorksheet body) throws ApiException {
        com.squareup.okhttp.Call call = updateInvoiceWorksheetValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an invoiceWorksheet (asynchronously)
     * Updates an existing invoiceWorksheet using the specified data.
     * @param body InvoiceWorksheet to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateInvoiceWorksheetAsync(InvoiceWorksheet body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateInvoiceWorksheetValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
