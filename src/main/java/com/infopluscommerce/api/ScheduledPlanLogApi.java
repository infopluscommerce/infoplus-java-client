/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.RecordFile;
import com.infopluscommerce.model.ScheduledPlanLog;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScheduledPlanLogApi {
    private ApiClient apiClient;

    public ScheduledPlanLogApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScheduledPlanLogApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addScheduledPlanLogAudit
     * @param scheduledPlanLogId Id of the scheduledPlanLog to add an audit to (required)
     * @param scheduledPlanLogAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addScheduledPlanLogAuditCall(Integer scheduledPlanLogId, String scheduledPlanLogAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/scheduledPlanLog/{scheduledPlanLogId}/audit/{scheduledPlanLogAudit}"
            .replaceAll("\\{" + "scheduledPlanLogId" + "\\}", apiClient.escapeString(scheduledPlanLogId.toString()))
            .replaceAll("\\{" + "scheduledPlanLogAudit" + "\\}", apiClient.escapeString(scheduledPlanLogAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addScheduledPlanLogAuditValidateBeforeCall(Integer scheduledPlanLogId, String scheduledPlanLogAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'scheduledPlanLogId' is set
        if (scheduledPlanLogId == null) {
            throw new ApiException("Missing the required parameter 'scheduledPlanLogId' when calling addScheduledPlanLogAudit(Async)");
        }
        
        // verify the required parameter 'scheduledPlanLogAudit' is set
        if (scheduledPlanLogAudit == null) {
            throw new ApiException("Missing the required parameter 'scheduledPlanLogAudit' when calling addScheduledPlanLogAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addScheduledPlanLogAuditCall(scheduledPlanLogId, scheduledPlanLogAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a scheduledPlanLog
     * Adds an audit to an existing scheduledPlanLog.
     * @param scheduledPlanLogId Id of the scheduledPlanLog to add an audit to (required)
     * @param scheduledPlanLogAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addScheduledPlanLogAudit(Integer scheduledPlanLogId, String scheduledPlanLogAudit) throws ApiException {
        addScheduledPlanLogAuditWithHttpInfo(scheduledPlanLogId, scheduledPlanLogAudit);
    }

    /**
     * Add new audit for a scheduledPlanLog
     * Adds an audit to an existing scheduledPlanLog.
     * @param scheduledPlanLogId Id of the scheduledPlanLog to add an audit to (required)
     * @param scheduledPlanLogAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addScheduledPlanLogAuditWithHttpInfo(Integer scheduledPlanLogId, String scheduledPlanLogAudit) throws ApiException {
        com.squareup.okhttp.Call call = addScheduledPlanLogAuditValidateBeforeCall(scheduledPlanLogId, scheduledPlanLogAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a scheduledPlanLog (asynchronously)
     * Adds an audit to an existing scheduledPlanLog.
     * @param scheduledPlanLogId Id of the scheduledPlanLog to add an audit to (required)
     * @param scheduledPlanLogAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addScheduledPlanLogAuditAsync(Integer scheduledPlanLogId, String scheduledPlanLogAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addScheduledPlanLogAuditValidateBeforeCall(scheduledPlanLogId, scheduledPlanLogAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addScheduledPlanLogFile
     * @param scheduledPlanLogId Id of the scheduledPlanLog to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addScheduledPlanLogFileCall(Integer scheduledPlanLogId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/scheduledPlanLog/{scheduledPlanLogId}/file/{fileName}"
            .replaceAll("\\{" + "scheduledPlanLogId" + "\\}", apiClient.escapeString(scheduledPlanLogId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addScheduledPlanLogFileValidateBeforeCall(Integer scheduledPlanLogId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'scheduledPlanLogId' is set
        if (scheduledPlanLogId == null) {
            throw new ApiException("Missing the required parameter 'scheduledPlanLogId' when calling addScheduledPlanLogFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addScheduledPlanLogFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addScheduledPlanLogFileCall(scheduledPlanLogId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a scheduledPlanLog
     * Adds a file to an existing scheduledPlanLog.
     * @param scheduledPlanLogId Id of the scheduledPlanLog to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addScheduledPlanLogFile(Integer scheduledPlanLogId, String fileName) throws ApiException {
        addScheduledPlanLogFileWithHttpInfo(scheduledPlanLogId, fileName);
    }

    /**
     * Attach a file to a scheduledPlanLog
     * Adds a file to an existing scheduledPlanLog.
     * @param scheduledPlanLogId Id of the scheduledPlanLog to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addScheduledPlanLogFileWithHttpInfo(Integer scheduledPlanLogId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addScheduledPlanLogFileValidateBeforeCall(scheduledPlanLogId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a scheduledPlanLog (asynchronously)
     * Adds a file to an existing scheduledPlanLog.
     * @param scheduledPlanLogId Id of the scheduledPlanLog to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addScheduledPlanLogFileAsync(Integer scheduledPlanLogId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addScheduledPlanLogFileValidateBeforeCall(scheduledPlanLogId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addScheduledPlanLogFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param scheduledPlanLogId Id of the scheduledPlanLog to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addScheduledPlanLogFileByURLCall(RecordFile body, Integer scheduledPlanLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/scheduledPlanLog/{scheduledPlanLogId}/file"
            .replaceAll("\\{" + "scheduledPlanLogId" + "\\}", apiClient.escapeString(scheduledPlanLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addScheduledPlanLogFileByURLValidateBeforeCall(RecordFile body, Integer scheduledPlanLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addScheduledPlanLogFileByURL(Async)");
        }
        
        // verify the required parameter 'scheduledPlanLogId' is set
        if (scheduledPlanLogId == null) {
            throw new ApiException("Missing the required parameter 'scheduledPlanLogId' when calling addScheduledPlanLogFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addScheduledPlanLogFileByURLCall(body, scheduledPlanLogId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a scheduledPlanLog by URL.
     * Adds a file to an existing scheduledPlanLog by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param scheduledPlanLogId Id of the scheduledPlanLog to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addScheduledPlanLogFileByURL(RecordFile body, Integer scheduledPlanLogId) throws ApiException {
        addScheduledPlanLogFileByURLWithHttpInfo(body, scheduledPlanLogId);
    }

    /**
     * Attach a file to a scheduledPlanLog by URL.
     * Adds a file to an existing scheduledPlanLog by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param scheduledPlanLogId Id of the scheduledPlanLog to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addScheduledPlanLogFileByURLWithHttpInfo(RecordFile body, Integer scheduledPlanLogId) throws ApiException {
        com.squareup.okhttp.Call call = addScheduledPlanLogFileByURLValidateBeforeCall(body, scheduledPlanLogId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a scheduledPlanLog by URL. (asynchronously)
     * Adds a file to an existing scheduledPlanLog by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param scheduledPlanLogId Id of the scheduledPlanLog to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addScheduledPlanLogFileByURLAsync(RecordFile body, Integer scheduledPlanLogId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addScheduledPlanLogFileByURLValidateBeforeCall(body, scheduledPlanLogId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addScheduledPlanLogTag
     * @param scheduledPlanLogId Id of the scheduledPlanLog to add a tag to (required)
     * @param scheduledPlanLogTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addScheduledPlanLogTagCall(Integer scheduledPlanLogId, String scheduledPlanLogTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/scheduledPlanLog/{scheduledPlanLogId}/tag/{scheduledPlanLogTag}"
            .replaceAll("\\{" + "scheduledPlanLogId" + "\\}", apiClient.escapeString(scheduledPlanLogId.toString()))
            .replaceAll("\\{" + "scheduledPlanLogTag" + "\\}", apiClient.escapeString(scheduledPlanLogTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addScheduledPlanLogTagValidateBeforeCall(Integer scheduledPlanLogId, String scheduledPlanLogTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'scheduledPlanLogId' is set
        if (scheduledPlanLogId == null) {
            throw new ApiException("Missing the required parameter 'scheduledPlanLogId' when calling addScheduledPlanLogTag(Async)");
        }
        
        // verify the required parameter 'scheduledPlanLogTag' is set
        if (scheduledPlanLogTag == null) {
            throw new ApiException("Missing the required parameter 'scheduledPlanLogTag' when calling addScheduledPlanLogTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addScheduledPlanLogTagCall(scheduledPlanLogId, scheduledPlanLogTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a scheduledPlanLog.
     * Adds a tag to an existing scheduledPlanLog.
     * @param scheduledPlanLogId Id of the scheduledPlanLog to add a tag to (required)
     * @param scheduledPlanLogTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addScheduledPlanLogTag(Integer scheduledPlanLogId, String scheduledPlanLogTag) throws ApiException {
        addScheduledPlanLogTagWithHttpInfo(scheduledPlanLogId, scheduledPlanLogTag);
    }

    /**
     * Add new tags for a scheduledPlanLog.
     * Adds a tag to an existing scheduledPlanLog.
     * @param scheduledPlanLogId Id of the scheduledPlanLog to add a tag to (required)
     * @param scheduledPlanLogTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addScheduledPlanLogTagWithHttpInfo(Integer scheduledPlanLogId, String scheduledPlanLogTag) throws ApiException {
        com.squareup.okhttp.Call call = addScheduledPlanLogTagValidateBeforeCall(scheduledPlanLogId, scheduledPlanLogTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a scheduledPlanLog. (asynchronously)
     * Adds a tag to an existing scheduledPlanLog.
     * @param scheduledPlanLogId Id of the scheduledPlanLog to add a tag to (required)
     * @param scheduledPlanLogTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addScheduledPlanLogTagAsync(Integer scheduledPlanLogId, String scheduledPlanLogTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addScheduledPlanLogTagValidateBeforeCall(scheduledPlanLogId, scheduledPlanLogTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteScheduledPlanLogFile
     * @param scheduledPlanLogId Id of the scheduledPlanLog to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteScheduledPlanLogFileCall(Integer scheduledPlanLogId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/scheduledPlanLog/{scheduledPlanLogId}/file/{fileId}"
            .replaceAll("\\{" + "scheduledPlanLogId" + "\\}", apiClient.escapeString(scheduledPlanLogId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteScheduledPlanLogFileValidateBeforeCall(Integer scheduledPlanLogId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'scheduledPlanLogId' is set
        if (scheduledPlanLogId == null) {
            throw new ApiException("Missing the required parameter 'scheduledPlanLogId' when calling deleteScheduledPlanLogFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteScheduledPlanLogFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteScheduledPlanLogFileCall(scheduledPlanLogId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a scheduledPlanLog.
     * Deletes an existing scheduledPlanLog file using the specified data.
     * @param scheduledPlanLogId Id of the scheduledPlanLog to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteScheduledPlanLogFile(Integer scheduledPlanLogId, Integer fileId) throws ApiException {
        deleteScheduledPlanLogFileWithHttpInfo(scheduledPlanLogId, fileId);
    }

    /**
     * Delete a file for a scheduledPlanLog.
     * Deletes an existing scheduledPlanLog file using the specified data.
     * @param scheduledPlanLogId Id of the scheduledPlanLog to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteScheduledPlanLogFileWithHttpInfo(Integer scheduledPlanLogId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteScheduledPlanLogFileValidateBeforeCall(scheduledPlanLogId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a scheduledPlanLog. (asynchronously)
     * Deletes an existing scheduledPlanLog file using the specified data.
     * @param scheduledPlanLogId Id of the scheduledPlanLog to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteScheduledPlanLogFileAsync(Integer scheduledPlanLogId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteScheduledPlanLogFileValidateBeforeCall(scheduledPlanLogId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteScheduledPlanLogTag
     * @param scheduledPlanLogId Id of the scheduledPlanLog to remove tag from (required)
     * @param scheduledPlanLogTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteScheduledPlanLogTagCall(Integer scheduledPlanLogId, String scheduledPlanLogTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/scheduledPlanLog/{scheduledPlanLogId}/tag/{scheduledPlanLogTag}"
            .replaceAll("\\{" + "scheduledPlanLogId" + "\\}", apiClient.escapeString(scheduledPlanLogId.toString()))
            .replaceAll("\\{" + "scheduledPlanLogTag" + "\\}", apiClient.escapeString(scheduledPlanLogTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteScheduledPlanLogTagValidateBeforeCall(Integer scheduledPlanLogId, String scheduledPlanLogTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'scheduledPlanLogId' is set
        if (scheduledPlanLogId == null) {
            throw new ApiException("Missing the required parameter 'scheduledPlanLogId' when calling deleteScheduledPlanLogTag(Async)");
        }
        
        // verify the required parameter 'scheduledPlanLogTag' is set
        if (scheduledPlanLogTag == null) {
            throw new ApiException("Missing the required parameter 'scheduledPlanLogTag' when calling deleteScheduledPlanLogTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteScheduledPlanLogTagCall(scheduledPlanLogId, scheduledPlanLogTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a scheduledPlanLog.
     * Deletes an existing scheduledPlanLog tag using the specified data.
     * @param scheduledPlanLogId Id of the scheduledPlanLog to remove tag from (required)
     * @param scheduledPlanLogTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteScheduledPlanLogTag(Integer scheduledPlanLogId, String scheduledPlanLogTag) throws ApiException {
        deleteScheduledPlanLogTagWithHttpInfo(scheduledPlanLogId, scheduledPlanLogTag);
    }

    /**
     * Delete a tag for a scheduledPlanLog.
     * Deletes an existing scheduledPlanLog tag using the specified data.
     * @param scheduledPlanLogId Id of the scheduledPlanLog to remove tag from (required)
     * @param scheduledPlanLogTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteScheduledPlanLogTagWithHttpInfo(Integer scheduledPlanLogId, String scheduledPlanLogTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteScheduledPlanLogTagValidateBeforeCall(scheduledPlanLogId, scheduledPlanLogTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a scheduledPlanLog. (asynchronously)
     * Deletes an existing scheduledPlanLog tag using the specified data.
     * @param scheduledPlanLogId Id of the scheduledPlanLog to remove tag from (required)
     * @param scheduledPlanLogTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteScheduledPlanLogTagAsync(Integer scheduledPlanLogId, String scheduledPlanLogTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteScheduledPlanLogTagValidateBeforeCall(scheduledPlanLogId, scheduledPlanLogTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateScheduledPlanLogById
     * @param scheduledPlanLogId Id of the scheduledPlanLog to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateScheduledPlanLogByIdCall(Integer scheduledPlanLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/scheduledPlanLog/duplicate/{scheduledPlanLogId}"
            .replaceAll("\\{" + "scheduledPlanLogId" + "\\}", apiClient.escapeString(scheduledPlanLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateScheduledPlanLogByIdValidateBeforeCall(Integer scheduledPlanLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'scheduledPlanLogId' is set
        if (scheduledPlanLogId == null) {
            throw new ApiException("Missing the required parameter 'scheduledPlanLogId' when calling getDuplicateScheduledPlanLogById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateScheduledPlanLogByIdCall(scheduledPlanLogId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a scheduledPlanLog by id
     * Returns a duplicated scheduledPlanLog identified by the specified id.
     * @param scheduledPlanLogId Id of the scheduledPlanLog to be duplicated. (required)
     * @return ScheduledPlanLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScheduledPlanLog getDuplicateScheduledPlanLogById(Integer scheduledPlanLogId) throws ApiException {
        ApiResponse<ScheduledPlanLog> resp = getDuplicateScheduledPlanLogByIdWithHttpInfo(scheduledPlanLogId);
        return resp.getData();
    }

    /**
     * Get a duplicated a scheduledPlanLog by id
     * Returns a duplicated scheduledPlanLog identified by the specified id.
     * @param scheduledPlanLogId Id of the scheduledPlanLog to be duplicated. (required)
     * @return ApiResponse&lt;ScheduledPlanLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScheduledPlanLog> getDuplicateScheduledPlanLogByIdWithHttpInfo(Integer scheduledPlanLogId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateScheduledPlanLogByIdValidateBeforeCall(scheduledPlanLogId, null, null);
        Type localVarReturnType = new TypeToken<ScheduledPlanLog>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a scheduledPlanLog by id (asynchronously)
     * Returns a duplicated scheduledPlanLog identified by the specified id.
     * @param scheduledPlanLogId Id of the scheduledPlanLog to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateScheduledPlanLogByIdAsync(Integer scheduledPlanLogId, final ApiCallback<ScheduledPlanLog> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateScheduledPlanLogByIdValidateBeforeCall(scheduledPlanLogId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScheduledPlanLog>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getScheduledPlanLogByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getScheduledPlanLogByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/scheduledPlanLog/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getScheduledPlanLogByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getScheduledPlanLogByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search scheduledPlanLogs by filter
     * Returns the list of scheduledPlanLogs that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;ScheduledPlanLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ScheduledPlanLog> getScheduledPlanLogByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<ScheduledPlanLog>> resp = getScheduledPlanLogByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search scheduledPlanLogs by filter
     * Returns the list of scheduledPlanLogs that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;ScheduledPlanLog&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ScheduledPlanLog>> getScheduledPlanLogByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getScheduledPlanLogByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<ScheduledPlanLog>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search scheduledPlanLogs by filter (asynchronously)
     * Returns the list of scheduledPlanLogs that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getScheduledPlanLogByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<ScheduledPlanLog>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getScheduledPlanLogByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ScheduledPlanLog>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getScheduledPlanLogById
     * @param scheduledPlanLogId Id of the scheduledPlanLog to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getScheduledPlanLogByIdCall(Integer scheduledPlanLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/scheduledPlanLog/{scheduledPlanLogId}"
            .replaceAll("\\{" + "scheduledPlanLogId" + "\\}", apiClient.escapeString(scheduledPlanLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getScheduledPlanLogByIdValidateBeforeCall(Integer scheduledPlanLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'scheduledPlanLogId' is set
        if (scheduledPlanLogId == null) {
            throw new ApiException("Missing the required parameter 'scheduledPlanLogId' when calling getScheduledPlanLogById(Async)");
        }
        

        com.squareup.okhttp.Call call = getScheduledPlanLogByIdCall(scheduledPlanLogId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a scheduledPlanLog by id
     * Returns the scheduledPlanLog identified by the specified id.
     * @param scheduledPlanLogId Id of the scheduledPlanLog to be returned. (required)
     * @return ScheduledPlanLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScheduledPlanLog getScheduledPlanLogById(Integer scheduledPlanLogId) throws ApiException {
        ApiResponse<ScheduledPlanLog> resp = getScheduledPlanLogByIdWithHttpInfo(scheduledPlanLogId);
        return resp.getData();
    }

    /**
     * Get a scheduledPlanLog by id
     * Returns the scheduledPlanLog identified by the specified id.
     * @param scheduledPlanLogId Id of the scheduledPlanLog to be returned. (required)
     * @return ApiResponse&lt;ScheduledPlanLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScheduledPlanLog> getScheduledPlanLogByIdWithHttpInfo(Integer scheduledPlanLogId) throws ApiException {
        com.squareup.okhttp.Call call = getScheduledPlanLogByIdValidateBeforeCall(scheduledPlanLogId, null, null);
        Type localVarReturnType = new TypeToken<ScheduledPlanLog>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a scheduledPlanLog by id (asynchronously)
     * Returns the scheduledPlanLog identified by the specified id.
     * @param scheduledPlanLogId Id of the scheduledPlanLog to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getScheduledPlanLogByIdAsync(Integer scheduledPlanLogId, final ApiCallback<ScheduledPlanLog> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getScheduledPlanLogByIdValidateBeforeCall(scheduledPlanLogId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScheduledPlanLog>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getScheduledPlanLogFiles
     * @param scheduledPlanLogId Id of the scheduledPlanLog to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getScheduledPlanLogFilesCall(Integer scheduledPlanLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/scheduledPlanLog/{scheduledPlanLogId}/file"
            .replaceAll("\\{" + "scheduledPlanLogId" + "\\}", apiClient.escapeString(scheduledPlanLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getScheduledPlanLogFilesValidateBeforeCall(Integer scheduledPlanLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'scheduledPlanLogId' is set
        if (scheduledPlanLogId == null) {
            throw new ApiException("Missing the required parameter 'scheduledPlanLogId' when calling getScheduledPlanLogFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getScheduledPlanLogFilesCall(scheduledPlanLogId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a scheduledPlanLog.
     * Get all existing scheduledPlanLog files.
     * @param scheduledPlanLogId Id of the scheduledPlanLog to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getScheduledPlanLogFiles(Integer scheduledPlanLogId) throws ApiException {
        getScheduledPlanLogFilesWithHttpInfo(scheduledPlanLogId);
    }

    /**
     * Get the files for a scheduledPlanLog.
     * Get all existing scheduledPlanLog files.
     * @param scheduledPlanLogId Id of the scheduledPlanLog to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getScheduledPlanLogFilesWithHttpInfo(Integer scheduledPlanLogId) throws ApiException {
        com.squareup.okhttp.Call call = getScheduledPlanLogFilesValidateBeforeCall(scheduledPlanLogId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a scheduledPlanLog. (asynchronously)
     * Get all existing scheduledPlanLog files.
     * @param scheduledPlanLogId Id of the scheduledPlanLog to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getScheduledPlanLogFilesAsync(Integer scheduledPlanLogId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getScheduledPlanLogFilesValidateBeforeCall(scheduledPlanLogId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getScheduledPlanLogTags
     * @param scheduledPlanLogId Id of the scheduledPlanLog to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getScheduledPlanLogTagsCall(Integer scheduledPlanLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/scheduledPlanLog/{scheduledPlanLogId}/tag"
            .replaceAll("\\{" + "scheduledPlanLogId" + "\\}", apiClient.escapeString(scheduledPlanLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getScheduledPlanLogTagsValidateBeforeCall(Integer scheduledPlanLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'scheduledPlanLogId' is set
        if (scheduledPlanLogId == null) {
            throw new ApiException("Missing the required parameter 'scheduledPlanLogId' when calling getScheduledPlanLogTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getScheduledPlanLogTagsCall(scheduledPlanLogId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a scheduledPlanLog.
     * Get all existing scheduledPlanLog tags.
     * @param scheduledPlanLogId Id of the scheduledPlanLog to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getScheduledPlanLogTags(Integer scheduledPlanLogId) throws ApiException {
        getScheduledPlanLogTagsWithHttpInfo(scheduledPlanLogId);
    }

    /**
     * Get the tags for a scheduledPlanLog.
     * Get all existing scheduledPlanLog tags.
     * @param scheduledPlanLogId Id of the scheduledPlanLog to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getScheduledPlanLogTagsWithHttpInfo(Integer scheduledPlanLogId) throws ApiException {
        com.squareup.okhttp.Call call = getScheduledPlanLogTagsValidateBeforeCall(scheduledPlanLogId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a scheduledPlanLog. (asynchronously)
     * Get all existing scheduledPlanLog tags.
     * @param scheduledPlanLogId Id of the scheduledPlanLog to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getScheduledPlanLogTagsAsync(Integer scheduledPlanLogId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getScheduledPlanLogTagsValidateBeforeCall(scheduledPlanLogId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
