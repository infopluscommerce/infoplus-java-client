/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.LocationFootprint;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LocationFootprintApi {
    private ApiClient apiClient;

    public LocationFootprintApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LocationFootprintApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addLocationFootprint
     * @param body LocationFootprint to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLocationFootprintCall(LocationFootprint body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/locationFootprint";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLocationFootprintValidateBeforeCall(LocationFootprint body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addLocationFootprint(Async)");
        }
        

        com.squareup.okhttp.Call call = addLocationFootprintCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a locationFootprint
     * Inserts a new locationFootprint using the specified data.
     * @param body LocationFootprint to be inserted. (required)
     * @return LocationFootprint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LocationFootprint addLocationFootprint(LocationFootprint body) throws ApiException {
        ApiResponse<LocationFootprint> resp = addLocationFootprintWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a locationFootprint
     * Inserts a new locationFootprint using the specified data.
     * @param body LocationFootprint to be inserted. (required)
     * @return ApiResponse&lt;LocationFootprint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LocationFootprint> addLocationFootprintWithHttpInfo(LocationFootprint body) throws ApiException {
        com.squareup.okhttp.Call call = addLocationFootprintValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<LocationFootprint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a locationFootprint (asynchronously)
     * Inserts a new locationFootprint using the specified data.
     * @param body LocationFootprint to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLocationFootprintAsync(LocationFootprint body, final ApiCallback<LocationFootprint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLocationFootprintValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LocationFootprint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addLocationFootprintAudit
     * @param locationFootprintId Id of the locationFootprint to add an audit to (required)
     * @param locationFootprintAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLocationFootprintAuditCall(Integer locationFootprintId, String locationFootprintAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationFootprint/{locationFootprintId}/audit/{locationFootprintAudit}"
            .replaceAll("\\{" + "locationFootprintId" + "\\}", apiClient.escapeString(locationFootprintId.toString()))
            .replaceAll("\\{" + "locationFootprintAudit" + "\\}", apiClient.escapeString(locationFootprintAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLocationFootprintAuditValidateBeforeCall(Integer locationFootprintId, String locationFootprintAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationFootprintId' is set
        if (locationFootprintId == null) {
            throw new ApiException("Missing the required parameter 'locationFootprintId' when calling addLocationFootprintAudit(Async)");
        }
        
        // verify the required parameter 'locationFootprintAudit' is set
        if (locationFootprintAudit == null) {
            throw new ApiException("Missing the required parameter 'locationFootprintAudit' when calling addLocationFootprintAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addLocationFootprintAuditCall(locationFootprintId, locationFootprintAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a locationFootprint
     * Adds an audit to an existing locationFootprint.
     * @param locationFootprintId Id of the locationFootprint to add an audit to (required)
     * @param locationFootprintAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addLocationFootprintAudit(Integer locationFootprintId, String locationFootprintAudit) throws ApiException {
        addLocationFootprintAuditWithHttpInfo(locationFootprintId, locationFootprintAudit);
    }

    /**
     * Add new audit for a locationFootprint
     * Adds an audit to an existing locationFootprint.
     * @param locationFootprintId Id of the locationFootprint to add an audit to (required)
     * @param locationFootprintAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addLocationFootprintAuditWithHttpInfo(Integer locationFootprintId, String locationFootprintAudit) throws ApiException {
        com.squareup.okhttp.Call call = addLocationFootprintAuditValidateBeforeCall(locationFootprintId, locationFootprintAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a locationFootprint (asynchronously)
     * Adds an audit to an existing locationFootprint.
     * @param locationFootprintId Id of the locationFootprint to add an audit to (required)
     * @param locationFootprintAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLocationFootprintAuditAsync(Integer locationFootprintId, String locationFootprintAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLocationFootprintAuditValidateBeforeCall(locationFootprintId, locationFootprintAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addLocationFootprintFile
     * @param locationFootprintId Id of the locationFootprint to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLocationFootprintFileCall(Integer locationFootprintId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationFootprint/{locationFootprintId}/file/{fileName}"
            .replaceAll("\\{" + "locationFootprintId" + "\\}", apiClient.escapeString(locationFootprintId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLocationFootprintFileValidateBeforeCall(Integer locationFootprintId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationFootprintId' is set
        if (locationFootprintId == null) {
            throw new ApiException("Missing the required parameter 'locationFootprintId' when calling addLocationFootprintFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addLocationFootprintFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addLocationFootprintFileCall(locationFootprintId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a locationFootprint
     * Adds a file to an existing locationFootprint.
     * @param locationFootprintId Id of the locationFootprint to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addLocationFootprintFile(Integer locationFootprintId, String fileName) throws ApiException {
        addLocationFootprintFileWithHttpInfo(locationFootprintId, fileName);
    }

    /**
     * Attach a file to a locationFootprint
     * Adds a file to an existing locationFootprint.
     * @param locationFootprintId Id of the locationFootprint to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addLocationFootprintFileWithHttpInfo(Integer locationFootprintId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addLocationFootprintFileValidateBeforeCall(locationFootprintId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a locationFootprint (asynchronously)
     * Adds a file to an existing locationFootprint.
     * @param locationFootprintId Id of the locationFootprint to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLocationFootprintFileAsync(Integer locationFootprintId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLocationFootprintFileValidateBeforeCall(locationFootprintId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addLocationFootprintFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param locationFootprintId Id of the locationFootprint to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLocationFootprintFileByURLCall(RecordFile body, Integer locationFootprintId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/locationFootprint/{locationFootprintId}/file"
            .replaceAll("\\{" + "locationFootprintId" + "\\}", apiClient.escapeString(locationFootprintId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLocationFootprintFileByURLValidateBeforeCall(RecordFile body, Integer locationFootprintId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addLocationFootprintFileByURL(Async)");
        }
        
        // verify the required parameter 'locationFootprintId' is set
        if (locationFootprintId == null) {
            throw new ApiException("Missing the required parameter 'locationFootprintId' when calling addLocationFootprintFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addLocationFootprintFileByURLCall(body, locationFootprintId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a locationFootprint by URL.
     * Adds a file to an existing locationFootprint by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param locationFootprintId Id of the locationFootprint to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addLocationFootprintFileByURL(RecordFile body, Integer locationFootprintId) throws ApiException {
        addLocationFootprintFileByURLWithHttpInfo(body, locationFootprintId);
    }

    /**
     * Attach a file to a locationFootprint by URL.
     * Adds a file to an existing locationFootprint by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param locationFootprintId Id of the locationFootprint to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addLocationFootprintFileByURLWithHttpInfo(RecordFile body, Integer locationFootprintId) throws ApiException {
        com.squareup.okhttp.Call call = addLocationFootprintFileByURLValidateBeforeCall(body, locationFootprintId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a locationFootprint by URL. (asynchronously)
     * Adds a file to an existing locationFootprint by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param locationFootprintId Id of the locationFootprint to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLocationFootprintFileByURLAsync(RecordFile body, Integer locationFootprintId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLocationFootprintFileByURLValidateBeforeCall(body, locationFootprintId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addLocationFootprintTag
     * @param locationFootprintId Id of the locationFootprint to add a tag to (required)
     * @param locationFootprintTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLocationFootprintTagCall(Integer locationFootprintId, String locationFootprintTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationFootprint/{locationFootprintId}/tag/{locationFootprintTag}"
            .replaceAll("\\{" + "locationFootprintId" + "\\}", apiClient.escapeString(locationFootprintId.toString()))
            .replaceAll("\\{" + "locationFootprintTag" + "\\}", apiClient.escapeString(locationFootprintTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLocationFootprintTagValidateBeforeCall(Integer locationFootprintId, String locationFootprintTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationFootprintId' is set
        if (locationFootprintId == null) {
            throw new ApiException("Missing the required parameter 'locationFootprintId' when calling addLocationFootprintTag(Async)");
        }
        
        // verify the required parameter 'locationFootprintTag' is set
        if (locationFootprintTag == null) {
            throw new ApiException("Missing the required parameter 'locationFootprintTag' when calling addLocationFootprintTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addLocationFootprintTagCall(locationFootprintId, locationFootprintTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a locationFootprint.
     * Adds a tag to an existing locationFootprint.
     * @param locationFootprintId Id of the locationFootprint to add a tag to (required)
     * @param locationFootprintTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addLocationFootprintTag(Integer locationFootprintId, String locationFootprintTag) throws ApiException {
        addLocationFootprintTagWithHttpInfo(locationFootprintId, locationFootprintTag);
    }

    /**
     * Add new tags for a locationFootprint.
     * Adds a tag to an existing locationFootprint.
     * @param locationFootprintId Id of the locationFootprint to add a tag to (required)
     * @param locationFootprintTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addLocationFootprintTagWithHttpInfo(Integer locationFootprintId, String locationFootprintTag) throws ApiException {
        com.squareup.okhttp.Call call = addLocationFootprintTagValidateBeforeCall(locationFootprintId, locationFootprintTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a locationFootprint. (asynchronously)
     * Adds a tag to an existing locationFootprint.
     * @param locationFootprintId Id of the locationFootprint to add a tag to (required)
     * @param locationFootprintTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLocationFootprintTagAsync(Integer locationFootprintId, String locationFootprintTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLocationFootprintTagValidateBeforeCall(locationFootprintId, locationFootprintTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLocationFootprint
     * @param locationFootprintId Id of the locationFootprint to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLocationFootprintCall(Integer locationFootprintId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationFootprint/{locationFootprintId}"
            .replaceAll("\\{" + "locationFootprintId" + "\\}", apiClient.escapeString(locationFootprintId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLocationFootprintValidateBeforeCall(Integer locationFootprintId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationFootprintId' is set
        if (locationFootprintId == null) {
            throw new ApiException("Missing the required parameter 'locationFootprintId' when calling deleteLocationFootprint(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteLocationFootprintCall(locationFootprintId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a locationFootprint
     * Deletes the locationFootprint identified by the specified id.
     * @param locationFootprintId Id of the locationFootprint to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLocationFootprint(Integer locationFootprintId) throws ApiException {
        deleteLocationFootprintWithHttpInfo(locationFootprintId);
    }

    /**
     * Delete a locationFootprint
     * Deletes the locationFootprint identified by the specified id.
     * @param locationFootprintId Id of the locationFootprint to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLocationFootprintWithHttpInfo(Integer locationFootprintId) throws ApiException {
        com.squareup.okhttp.Call call = deleteLocationFootprintValidateBeforeCall(locationFootprintId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a locationFootprint (asynchronously)
     * Deletes the locationFootprint identified by the specified id.
     * @param locationFootprintId Id of the locationFootprint to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLocationFootprintAsync(Integer locationFootprintId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLocationFootprintValidateBeforeCall(locationFootprintId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLocationFootprintFile
     * @param locationFootprintId Id of the locationFootprint to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLocationFootprintFileCall(Integer locationFootprintId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationFootprint/{locationFootprintId}/file/{fileId}"
            .replaceAll("\\{" + "locationFootprintId" + "\\}", apiClient.escapeString(locationFootprintId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLocationFootprintFileValidateBeforeCall(Integer locationFootprintId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationFootprintId' is set
        if (locationFootprintId == null) {
            throw new ApiException("Missing the required parameter 'locationFootprintId' when calling deleteLocationFootprintFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteLocationFootprintFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteLocationFootprintFileCall(locationFootprintId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a locationFootprint.
     * Deletes an existing locationFootprint file using the specified data.
     * @param locationFootprintId Id of the locationFootprint to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLocationFootprintFile(Integer locationFootprintId, Integer fileId) throws ApiException {
        deleteLocationFootprintFileWithHttpInfo(locationFootprintId, fileId);
    }

    /**
     * Delete a file for a locationFootprint.
     * Deletes an existing locationFootprint file using the specified data.
     * @param locationFootprintId Id of the locationFootprint to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLocationFootprintFileWithHttpInfo(Integer locationFootprintId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteLocationFootprintFileValidateBeforeCall(locationFootprintId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a locationFootprint. (asynchronously)
     * Deletes an existing locationFootprint file using the specified data.
     * @param locationFootprintId Id of the locationFootprint to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLocationFootprintFileAsync(Integer locationFootprintId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLocationFootprintFileValidateBeforeCall(locationFootprintId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLocationFootprintTag
     * @param locationFootprintId Id of the locationFootprint to remove tag from (required)
     * @param locationFootprintTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLocationFootprintTagCall(Integer locationFootprintId, String locationFootprintTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationFootprint/{locationFootprintId}/tag/{locationFootprintTag}"
            .replaceAll("\\{" + "locationFootprintId" + "\\}", apiClient.escapeString(locationFootprintId.toString()))
            .replaceAll("\\{" + "locationFootprintTag" + "\\}", apiClient.escapeString(locationFootprintTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLocationFootprintTagValidateBeforeCall(Integer locationFootprintId, String locationFootprintTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationFootprintId' is set
        if (locationFootprintId == null) {
            throw new ApiException("Missing the required parameter 'locationFootprintId' when calling deleteLocationFootprintTag(Async)");
        }
        
        // verify the required parameter 'locationFootprintTag' is set
        if (locationFootprintTag == null) {
            throw new ApiException("Missing the required parameter 'locationFootprintTag' when calling deleteLocationFootprintTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteLocationFootprintTagCall(locationFootprintId, locationFootprintTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a locationFootprint.
     * Deletes an existing locationFootprint tag using the specified data.
     * @param locationFootprintId Id of the locationFootprint to remove tag from (required)
     * @param locationFootprintTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLocationFootprintTag(Integer locationFootprintId, String locationFootprintTag) throws ApiException {
        deleteLocationFootprintTagWithHttpInfo(locationFootprintId, locationFootprintTag);
    }

    /**
     * Delete a tag for a locationFootprint.
     * Deletes an existing locationFootprint tag using the specified data.
     * @param locationFootprintId Id of the locationFootprint to remove tag from (required)
     * @param locationFootprintTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLocationFootprintTagWithHttpInfo(Integer locationFootprintId, String locationFootprintTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteLocationFootprintTagValidateBeforeCall(locationFootprintId, locationFootprintTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a locationFootprint. (asynchronously)
     * Deletes an existing locationFootprint tag using the specified data.
     * @param locationFootprintId Id of the locationFootprint to remove tag from (required)
     * @param locationFootprintTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLocationFootprintTagAsync(Integer locationFootprintId, String locationFootprintTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLocationFootprintTagValidateBeforeCall(locationFootprintId, locationFootprintTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateLocationFootprintById
     * @param locationFootprintId Id of the locationFootprint to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateLocationFootprintByIdCall(Integer locationFootprintId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationFootprint/duplicate/{locationFootprintId}"
            .replaceAll("\\{" + "locationFootprintId" + "\\}", apiClient.escapeString(locationFootprintId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateLocationFootprintByIdValidateBeforeCall(Integer locationFootprintId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationFootprintId' is set
        if (locationFootprintId == null) {
            throw new ApiException("Missing the required parameter 'locationFootprintId' when calling getDuplicateLocationFootprintById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateLocationFootprintByIdCall(locationFootprintId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a locationFootprint by id
     * Returns a duplicated locationFootprint identified by the specified id.
     * @param locationFootprintId Id of the locationFootprint to be duplicated. (required)
     * @return LocationFootprint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LocationFootprint getDuplicateLocationFootprintById(Integer locationFootprintId) throws ApiException {
        ApiResponse<LocationFootprint> resp = getDuplicateLocationFootprintByIdWithHttpInfo(locationFootprintId);
        return resp.getData();
    }

    /**
     * Get a duplicated a locationFootprint by id
     * Returns a duplicated locationFootprint identified by the specified id.
     * @param locationFootprintId Id of the locationFootprint to be duplicated. (required)
     * @return ApiResponse&lt;LocationFootprint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LocationFootprint> getDuplicateLocationFootprintByIdWithHttpInfo(Integer locationFootprintId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateLocationFootprintByIdValidateBeforeCall(locationFootprintId, null, null);
        Type localVarReturnType = new TypeToken<LocationFootprint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a locationFootprint by id (asynchronously)
     * Returns a duplicated locationFootprint identified by the specified id.
     * @param locationFootprintId Id of the locationFootprint to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateLocationFootprintByIdAsync(Integer locationFootprintId, final ApiCallback<LocationFootprint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateLocationFootprintByIdValidateBeforeCall(locationFootprintId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LocationFootprint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLocationFootprintByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLocationFootprintByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationFootprint/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLocationFootprintByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getLocationFootprintByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search locationFootprints by filter
     * Returns the list of locationFootprints that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;LocationFootprint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LocationFootprint> getLocationFootprintByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<LocationFootprint>> resp = getLocationFootprintByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search locationFootprints by filter
     * Returns the list of locationFootprints that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;LocationFootprint&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LocationFootprint>> getLocationFootprintByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getLocationFootprintByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<LocationFootprint>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search locationFootprints by filter (asynchronously)
     * Returns the list of locationFootprints that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLocationFootprintByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<LocationFootprint>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLocationFootprintByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LocationFootprint>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLocationFootprintById
     * @param locationFootprintId Id of the locationFootprint to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLocationFootprintByIdCall(Integer locationFootprintId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationFootprint/{locationFootprintId}"
            .replaceAll("\\{" + "locationFootprintId" + "\\}", apiClient.escapeString(locationFootprintId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLocationFootprintByIdValidateBeforeCall(Integer locationFootprintId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationFootprintId' is set
        if (locationFootprintId == null) {
            throw new ApiException("Missing the required parameter 'locationFootprintId' when calling getLocationFootprintById(Async)");
        }
        

        com.squareup.okhttp.Call call = getLocationFootprintByIdCall(locationFootprintId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a locationFootprint by id
     * Returns the locationFootprint identified by the specified id.
     * @param locationFootprintId Id of the locationFootprint to be returned. (required)
     * @return LocationFootprint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LocationFootprint getLocationFootprintById(Integer locationFootprintId) throws ApiException {
        ApiResponse<LocationFootprint> resp = getLocationFootprintByIdWithHttpInfo(locationFootprintId);
        return resp.getData();
    }

    /**
     * Get a locationFootprint by id
     * Returns the locationFootprint identified by the specified id.
     * @param locationFootprintId Id of the locationFootprint to be returned. (required)
     * @return ApiResponse&lt;LocationFootprint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LocationFootprint> getLocationFootprintByIdWithHttpInfo(Integer locationFootprintId) throws ApiException {
        com.squareup.okhttp.Call call = getLocationFootprintByIdValidateBeforeCall(locationFootprintId, null, null);
        Type localVarReturnType = new TypeToken<LocationFootprint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a locationFootprint by id (asynchronously)
     * Returns the locationFootprint identified by the specified id.
     * @param locationFootprintId Id of the locationFootprint to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLocationFootprintByIdAsync(Integer locationFootprintId, final ApiCallback<LocationFootprint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLocationFootprintByIdValidateBeforeCall(locationFootprintId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LocationFootprint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLocationFootprintFiles
     * @param locationFootprintId Id of the locationFootprint to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLocationFootprintFilesCall(Integer locationFootprintId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationFootprint/{locationFootprintId}/file"
            .replaceAll("\\{" + "locationFootprintId" + "\\}", apiClient.escapeString(locationFootprintId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLocationFootprintFilesValidateBeforeCall(Integer locationFootprintId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationFootprintId' is set
        if (locationFootprintId == null) {
            throw new ApiException("Missing the required parameter 'locationFootprintId' when calling getLocationFootprintFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getLocationFootprintFilesCall(locationFootprintId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a locationFootprint.
     * Get all existing locationFootprint files.
     * @param locationFootprintId Id of the locationFootprint to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getLocationFootprintFiles(Integer locationFootprintId) throws ApiException {
        getLocationFootprintFilesWithHttpInfo(locationFootprintId);
    }

    /**
     * Get the files for a locationFootprint.
     * Get all existing locationFootprint files.
     * @param locationFootprintId Id of the locationFootprint to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getLocationFootprintFilesWithHttpInfo(Integer locationFootprintId) throws ApiException {
        com.squareup.okhttp.Call call = getLocationFootprintFilesValidateBeforeCall(locationFootprintId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a locationFootprint. (asynchronously)
     * Get all existing locationFootprint files.
     * @param locationFootprintId Id of the locationFootprint to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLocationFootprintFilesAsync(Integer locationFootprintId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLocationFootprintFilesValidateBeforeCall(locationFootprintId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getLocationFootprintTags
     * @param locationFootprintId Id of the locationFootprint to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLocationFootprintTagsCall(Integer locationFootprintId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationFootprint/{locationFootprintId}/tag"
            .replaceAll("\\{" + "locationFootprintId" + "\\}", apiClient.escapeString(locationFootprintId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLocationFootprintTagsValidateBeforeCall(Integer locationFootprintId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationFootprintId' is set
        if (locationFootprintId == null) {
            throw new ApiException("Missing the required parameter 'locationFootprintId' when calling getLocationFootprintTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getLocationFootprintTagsCall(locationFootprintId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a locationFootprint.
     * Get all existing locationFootprint tags.
     * @param locationFootprintId Id of the locationFootprint to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getLocationFootprintTags(Integer locationFootprintId) throws ApiException {
        getLocationFootprintTagsWithHttpInfo(locationFootprintId);
    }

    /**
     * Get the tags for a locationFootprint.
     * Get all existing locationFootprint tags.
     * @param locationFootprintId Id of the locationFootprint to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getLocationFootprintTagsWithHttpInfo(Integer locationFootprintId) throws ApiException {
        com.squareup.okhttp.Call call = getLocationFootprintTagsValidateBeforeCall(locationFootprintId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a locationFootprint. (asynchronously)
     * Get all existing locationFootprint tags.
     * @param locationFootprintId Id of the locationFootprint to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLocationFootprintTagsAsync(Integer locationFootprintId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLocationFootprintTagsValidateBeforeCall(locationFootprintId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateLocationFootprint
     * @param body LocationFootprint to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLocationFootprintCall(LocationFootprint body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/locationFootprint";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLocationFootprintValidateBeforeCall(LocationFootprint body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLocationFootprint(Async)");
        }
        

        com.squareup.okhttp.Call call = updateLocationFootprintCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a locationFootprint
     * Updates an existing locationFootprint using the specified data.
     * @param body LocationFootprint to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateLocationFootprint(LocationFootprint body) throws ApiException {
        updateLocationFootprintWithHttpInfo(body);
    }

    /**
     * Update a locationFootprint
     * Updates an existing locationFootprint using the specified data.
     * @param body LocationFootprint to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateLocationFootprintWithHttpInfo(LocationFootprint body) throws ApiException {
        com.squareup.okhttp.Call call = updateLocationFootprintValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a locationFootprint (asynchronously)
     * Updates an existing locationFootprint using the specified data.
     * @param body LocationFootprint to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLocationFootprintAsync(LocationFootprint body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLocationFootprintValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateLocationFootprintCustomFields
     * @param body LocationFootprint to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLocationFootprintCustomFieldsCall(LocationFootprint body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/locationFootprint/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLocationFootprintCustomFieldsValidateBeforeCall(LocationFootprint body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLocationFootprintCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateLocationFootprintCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a locationFootprint custom fields
     * Updates an existing locationFootprint custom fields using the specified data.
     * @param body LocationFootprint to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateLocationFootprintCustomFields(LocationFootprint body) throws ApiException {
        updateLocationFootprintCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a locationFootprint custom fields
     * Updates an existing locationFootprint custom fields using the specified data.
     * @param body LocationFootprint to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateLocationFootprintCustomFieldsWithHttpInfo(LocationFootprint body) throws ApiException {
        com.squareup.okhttp.Call call = updateLocationFootprintCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a locationFootprint custom fields (asynchronously)
     * Updates an existing locationFootprint custom fields using the specified data.
     * @param body LocationFootprint to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLocationFootprintCustomFieldsAsync(LocationFootprint body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLocationFootprintCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
