/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ParcelInvoice;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ParcelInvoiceApi {
    private ApiClient apiClient;

    public ParcelInvoiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ParcelInvoiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addParcelInvoiceAudit
     * @param parcelInvoiceId Id of the parcelInvoice to add an audit to (required)
     * @param parcelInvoiceAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addParcelInvoiceAuditCall(Integer parcelInvoiceId, String parcelInvoiceAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/parcelInvoice/{parcelInvoiceId}/audit/{parcelInvoiceAudit}"
            .replaceAll("\\{" + "parcelInvoiceId" + "\\}", apiClient.escapeString(parcelInvoiceId.toString()))
            .replaceAll("\\{" + "parcelInvoiceAudit" + "\\}", apiClient.escapeString(parcelInvoiceAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addParcelInvoiceAuditValidateBeforeCall(Integer parcelInvoiceId, String parcelInvoiceAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parcelInvoiceId' is set
        if (parcelInvoiceId == null) {
            throw new ApiException("Missing the required parameter 'parcelInvoiceId' when calling addParcelInvoiceAudit(Async)");
        }
        
        // verify the required parameter 'parcelInvoiceAudit' is set
        if (parcelInvoiceAudit == null) {
            throw new ApiException("Missing the required parameter 'parcelInvoiceAudit' when calling addParcelInvoiceAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addParcelInvoiceAuditCall(parcelInvoiceId, parcelInvoiceAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a parcelInvoice
     * Adds an audit to an existing parcelInvoice.
     * @param parcelInvoiceId Id of the parcelInvoice to add an audit to (required)
     * @param parcelInvoiceAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addParcelInvoiceAudit(Integer parcelInvoiceId, String parcelInvoiceAudit) throws ApiException {
        addParcelInvoiceAuditWithHttpInfo(parcelInvoiceId, parcelInvoiceAudit);
    }

    /**
     * Add new audit for a parcelInvoice
     * Adds an audit to an existing parcelInvoice.
     * @param parcelInvoiceId Id of the parcelInvoice to add an audit to (required)
     * @param parcelInvoiceAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addParcelInvoiceAuditWithHttpInfo(Integer parcelInvoiceId, String parcelInvoiceAudit) throws ApiException {
        com.squareup.okhttp.Call call = addParcelInvoiceAuditValidateBeforeCall(parcelInvoiceId, parcelInvoiceAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a parcelInvoice (asynchronously)
     * Adds an audit to an existing parcelInvoice.
     * @param parcelInvoiceId Id of the parcelInvoice to add an audit to (required)
     * @param parcelInvoiceAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addParcelInvoiceAuditAsync(Integer parcelInvoiceId, String parcelInvoiceAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addParcelInvoiceAuditValidateBeforeCall(parcelInvoiceId, parcelInvoiceAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addParcelInvoiceFile
     * @param parcelInvoiceId Id of the parcelInvoice to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addParcelInvoiceFileCall(Integer parcelInvoiceId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/parcelInvoice/{parcelInvoiceId}/file/{fileName}"
            .replaceAll("\\{" + "parcelInvoiceId" + "\\}", apiClient.escapeString(parcelInvoiceId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addParcelInvoiceFileValidateBeforeCall(Integer parcelInvoiceId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parcelInvoiceId' is set
        if (parcelInvoiceId == null) {
            throw new ApiException("Missing the required parameter 'parcelInvoiceId' when calling addParcelInvoiceFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addParcelInvoiceFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addParcelInvoiceFileCall(parcelInvoiceId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a parcelInvoice
     * Adds a file to an existing parcelInvoice.
     * @param parcelInvoiceId Id of the parcelInvoice to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addParcelInvoiceFile(Integer parcelInvoiceId, String fileName) throws ApiException {
        addParcelInvoiceFileWithHttpInfo(parcelInvoiceId, fileName);
    }

    /**
     * Attach a file to a parcelInvoice
     * Adds a file to an existing parcelInvoice.
     * @param parcelInvoiceId Id of the parcelInvoice to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addParcelInvoiceFileWithHttpInfo(Integer parcelInvoiceId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addParcelInvoiceFileValidateBeforeCall(parcelInvoiceId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a parcelInvoice (asynchronously)
     * Adds a file to an existing parcelInvoice.
     * @param parcelInvoiceId Id of the parcelInvoice to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addParcelInvoiceFileAsync(Integer parcelInvoiceId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addParcelInvoiceFileValidateBeforeCall(parcelInvoiceId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addParcelInvoiceFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param parcelInvoiceId Id of the parcelInvoice to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addParcelInvoiceFileByURLCall(RecordFile body, Integer parcelInvoiceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/parcelInvoice/{parcelInvoiceId}/file"
            .replaceAll("\\{" + "parcelInvoiceId" + "\\}", apiClient.escapeString(parcelInvoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addParcelInvoiceFileByURLValidateBeforeCall(RecordFile body, Integer parcelInvoiceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addParcelInvoiceFileByURL(Async)");
        }
        
        // verify the required parameter 'parcelInvoiceId' is set
        if (parcelInvoiceId == null) {
            throw new ApiException("Missing the required parameter 'parcelInvoiceId' when calling addParcelInvoiceFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addParcelInvoiceFileByURLCall(body, parcelInvoiceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a parcelInvoice by URL.
     * Adds a file to an existing parcelInvoice by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param parcelInvoiceId Id of the parcelInvoice to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addParcelInvoiceFileByURL(RecordFile body, Integer parcelInvoiceId) throws ApiException {
        addParcelInvoiceFileByURLWithHttpInfo(body, parcelInvoiceId);
    }

    /**
     * Attach a file to a parcelInvoice by URL.
     * Adds a file to an existing parcelInvoice by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param parcelInvoiceId Id of the parcelInvoice to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addParcelInvoiceFileByURLWithHttpInfo(RecordFile body, Integer parcelInvoiceId) throws ApiException {
        com.squareup.okhttp.Call call = addParcelInvoiceFileByURLValidateBeforeCall(body, parcelInvoiceId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a parcelInvoice by URL. (asynchronously)
     * Adds a file to an existing parcelInvoice by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param parcelInvoiceId Id of the parcelInvoice to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addParcelInvoiceFileByURLAsync(RecordFile body, Integer parcelInvoiceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addParcelInvoiceFileByURLValidateBeforeCall(body, parcelInvoiceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addParcelInvoiceTag
     * @param parcelInvoiceId Id of the parcelInvoice to add a tag to (required)
     * @param parcelInvoiceTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addParcelInvoiceTagCall(Integer parcelInvoiceId, String parcelInvoiceTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/parcelInvoice/{parcelInvoiceId}/tag/{parcelInvoiceTag}"
            .replaceAll("\\{" + "parcelInvoiceId" + "\\}", apiClient.escapeString(parcelInvoiceId.toString()))
            .replaceAll("\\{" + "parcelInvoiceTag" + "\\}", apiClient.escapeString(parcelInvoiceTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addParcelInvoiceTagValidateBeforeCall(Integer parcelInvoiceId, String parcelInvoiceTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parcelInvoiceId' is set
        if (parcelInvoiceId == null) {
            throw new ApiException("Missing the required parameter 'parcelInvoiceId' when calling addParcelInvoiceTag(Async)");
        }
        
        // verify the required parameter 'parcelInvoiceTag' is set
        if (parcelInvoiceTag == null) {
            throw new ApiException("Missing the required parameter 'parcelInvoiceTag' when calling addParcelInvoiceTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addParcelInvoiceTagCall(parcelInvoiceId, parcelInvoiceTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a parcelInvoice.
     * Adds a tag to an existing parcelInvoice.
     * @param parcelInvoiceId Id of the parcelInvoice to add a tag to (required)
     * @param parcelInvoiceTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addParcelInvoiceTag(Integer parcelInvoiceId, String parcelInvoiceTag) throws ApiException {
        addParcelInvoiceTagWithHttpInfo(parcelInvoiceId, parcelInvoiceTag);
    }

    /**
     * Add new tags for a parcelInvoice.
     * Adds a tag to an existing parcelInvoice.
     * @param parcelInvoiceId Id of the parcelInvoice to add a tag to (required)
     * @param parcelInvoiceTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addParcelInvoiceTagWithHttpInfo(Integer parcelInvoiceId, String parcelInvoiceTag) throws ApiException {
        com.squareup.okhttp.Call call = addParcelInvoiceTagValidateBeforeCall(parcelInvoiceId, parcelInvoiceTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a parcelInvoice. (asynchronously)
     * Adds a tag to an existing parcelInvoice.
     * @param parcelInvoiceId Id of the parcelInvoice to add a tag to (required)
     * @param parcelInvoiceTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addParcelInvoiceTagAsync(Integer parcelInvoiceId, String parcelInvoiceTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addParcelInvoiceTagValidateBeforeCall(parcelInvoiceId, parcelInvoiceTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteParcelInvoice
     * @param parcelInvoiceId Id of the parcelInvoice to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteParcelInvoiceCall(Integer parcelInvoiceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/parcelInvoice/{parcelInvoiceId}"
            .replaceAll("\\{" + "parcelInvoiceId" + "\\}", apiClient.escapeString(parcelInvoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteParcelInvoiceValidateBeforeCall(Integer parcelInvoiceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parcelInvoiceId' is set
        if (parcelInvoiceId == null) {
            throw new ApiException("Missing the required parameter 'parcelInvoiceId' when calling deleteParcelInvoice(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteParcelInvoiceCall(parcelInvoiceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a parcelInvoice
     * Deletes the parcelInvoice identified by the specified id.
     * @param parcelInvoiceId Id of the parcelInvoice to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteParcelInvoice(Integer parcelInvoiceId) throws ApiException {
        deleteParcelInvoiceWithHttpInfo(parcelInvoiceId);
    }

    /**
     * Delete a parcelInvoice
     * Deletes the parcelInvoice identified by the specified id.
     * @param parcelInvoiceId Id of the parcelInvoice to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteParcelInvoiceWithHttpInfo(Integer parcelInvoiceId) throws ApiException {
        com.squareup.okhttp.Call call = deleteParcelInvoiceValidateBeforeCall(parcelInvoiceId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a parcelInvoice (asynchronously)
     * Deletes the parcelInvoice identified by the specified id.
     * @param parcelInvoiceId Id of the parcelInvoice to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteParcelInvoiceAsync(Integer parcelInvoiceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteParcelInvoiceValidateBeforeCall(parcelInvoiceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteParcelInvoiceFile
     * @param parcelInvoiceId Id of the parcelInvoice to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteParcelInvoiceFileCall(Integer parcelInvoiceId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/parcelInvoice/{parcelInvoiceId}/file/{fileId}"
            .replaceAll("\\{" + "parcelInvoiceId" + "\\}", apiClient.escapeString(parcelInvoiceId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteParcelInvoiceFileValidateBeforeCall(Integer parcelInvoiceId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parcelInvoiceId' is set
        if (parcelInvoiceId == null) {
            throw new ApiException("Missing the required parameter 'parcelInvoiceId' when calling deleteParcelInvoiceFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteParcelInvoiceFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteParcelInvoiceFileCall(parcelInvoiceId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a parcelInvoice.
     * Deletes an existing parcelInvoice file using the specified data.
     * @param parcelInvoiceId Id of the parcelInvoice to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteParcelInvoiceFile(Integer parcelInvoiceId, Integer fileId) throws ApiException {
        deleteParcelInvoiceFileWithHttpInfo(parcelInvoiceId, fileId);
    }

    /**
     * Delete a file for a parcelInvoice.
     * Deletes an existing parcelInvoice file using the specified data.
     * @param parcelInvoiceId Id of the parcelInvoice to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteParcelInvoiceFileWithHttpInfo(Integer parcelInvoiceId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteParcelInvoiceFileValidateBeforeCall(parcelInvoiceId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a parcelInvoice. (asynchronously)
     * Deletes an existing parcelInvoice file using the specified data.
     * @param parcelInvoiceId Id of the parcelInvoice to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteParcelInvoiceFileAsync(Integer parcelInvoiceId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteParcelInvoiceFileValidateBeforeCall(parcelInvoiceId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteParcelInvoiceTag
     * @param parcelInvoiceId Id of the parcelInvoice to remove tag from (required)
     * @param parcelInvoiceTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteParcelInvoiceTagCall(Integer parcelInvoiceId, String parcelInvoiceTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/parcelInvoice/{parcelInvoiceId}/tag/{parcelInvoiceTag}"
            .replaceAll("\\{" + "parcelInvoiceId" + "\\}", apiClient.escapeString(parcelInvoiceId.toString()))
            .replaceAll("\\{" + "parcelInvoiceTag" + "\\}", apiClient.escapeString(parcelInvoiceTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteParcelInvoiceTagValidateBeforeCall(Integer parcelInvoiceId, String parcelInvoiceTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parcelInvoiceId' is set
        if (parcelInvoiceId == null) {
            throw new ApiException("Missing the required parameter 'parcelInvoiceId' when calling deleteParcelInvoiceTag(Async)");
        }
        
        // verify the required parameter 'parcelInvoiceTag' is set
        if (parcelInvoiceTag == null) {
            throw new ApiException("Missing the required parameter 'parcelInvoiceTag' when calling deleteParcelInvoiceTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteParcelInvoiceTagCall(parcelInvoiceId, parcelInvoiceTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a parcelInvoice.
     * Deletes an existing parcelInvoice tag using the specified data.
     * @param parcelInvoiceId Id of the parcelInvoice to remove tag from (required)
     * @param parcelInvoiceTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteParcelInvoiceTag(Integer parcelInvoiceId, String parcelInvoiceTag) throws ApiException {
        deleteParcelInvoiceTagWithHttpInfo(parcelInvoiceId, parcelInvoiceTag);
    }

    /**
     * Delete a tag for a parcelInvoice.
     * Deletes an existing parcelInvoice tag using the specified data.
     * @param parcelInvoiceId Id of the parcelInvoice to remove tag from (required)
     * @param parcelInvoiceTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteParcelInvoiceTagWithHttpInfo(Integer parcelInvoiceId, String parcelInvoiceTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteParcelInvoiceTagValidateBeforeCall(parcelInvoiceId, parcelInvoiceTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a parcelInvoice. (asynchronously)
     * Deletes an existing parcelInvoice tag using the specified data.
     * @param parcelInvoiceId Id of the parcelInvoice to remove tag from (required)
     * @param parcelInvoiceTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteParcelInvoiceTagAsync(Integer parcelInvoiceId, String parcelInvoiceTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteParcelInvoiceTagValidateBeforeCall(parcelInvoiceId, parcelInvoiceTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateParcelInvoiceById
     * @param parcelInvoiceId Id of the parcelInvoice to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateParcelInvoiceByIdCall(Integer parcelInvoiceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/parcelInvoice/duplicate/{parcelInvoiceId}"
            .replaceAll("\\{" + "parcelInvoiceId" + "\\}", apiClient.escapeString(parcelInvoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateParcelInvoiceByIdValidateBeforeCall(Integer parcelInvoiceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parcelInvoiceId' is set
        if (parcelInvoiceId == null) {
            throw new ApiException("Missing the required parameter 'parcelInvoiceId' when calling getDuplicateParcelInvoiceById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateParcelInvoiceByIdCall(parcelInvoiceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a parcelInvoice by id
     * Returns a duplicated parcelInvoice identified by the specified id.
     * @param parcelInvoiceId Id of the parcelInvoice to be duplicated. (required)
     * @return ParcelInvoice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ParcelInvoice getDuplicateParcelInvoiceById(Integer parcelInvoiceId) throws ApiException {
        ApiResponse<ParcelInvoice> resp = getDuplicateParcelInvoiceByIdWithHttpInfo(parcelInvoiceId);
        return resp.getData();
    }

    /**
     * Get a duplicated a parcelInvoice by id
     * Returns a duplicated parcelInvoice identified by the specified id.
     * @param parcelInvoiceId Id of the parcelInvoice to be duplicated. (required)
     * @return ApiResponse&lt;ParcelInvoice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ParcelInvoice> getDuplicateParcelInvoiceByIdWithHttpInfo(Integer parcelInvoiceId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateParcelInvoiceByIdValidateBeforeCall(parcelInvoiceId, null, null);
        Type localVarReturnType = new TypeToken<ParcelInvoice>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a parcelInvoice by id (asynchronously)
     * Returns a duplicated parcelInvoice identified by the specified id.
     * @param parcelInvoiceId Id of the parcelInvoice to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateParcelInvoiceByIdAsync(Integer parcelInvoiceId, final ApiCallback<ParcelInvoice> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateParcelInvoiceByIdValidateBeforeCall(parcelInvoiceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ParcelInvoice>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getParcelInvoiceByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParcelInvoiceByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/parcelInvoice/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getParcelInvoiceByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getParcelInvoiceByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search parcelInvoices by filter
     * Returns the list of parcelInvoices that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;ParcelInvoice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ParcelInvoice> getParcelInvoiceByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<ParcelInvoice>> resp = getParcelInvoiceByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search parcelInvoices by filter
     * Returns the list of parcelInvoices that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;ParcelInvoice&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ParcelInvoice>> getParcelInvoiceByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getParcelInvoiceByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<ParcelInvoice>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search parcelInvoices by filter (asynchronously)
     * Returns the list of parcelInvoices that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getParcelInvoiceByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<ParcelInvoice>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParcelInvoiceByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ParcelInvoice>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getParcelInvoiceById
     * @param parcelInvoiceId Id of the parcelInvoice to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParcelInvoiceByIdCall(Integer parcelInvoiceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/parcelInvoice/{parcelInvoiceId}"
            .replaceAll("\\{" + "parcelInvoiceId" + "\\}", apiClient.escapeString(parcelInvoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getParcelInvoiceByIdValidateBeforeCall(Integer parcelInvoiceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parcelInvoiceId' is set
        if (parcelInvoiceId == null) {
            throw new ApiException("Missing the required parameter 'parcelInvoiceId' when calling getParcelInvoiceById(Async)");
        }
        

        com.squareup.okhttp.Call call = getParcelInvoiceByIdCall(parcelInvoiceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a parcelInvoice by id
     * Returns the parcelInvoice identified by the specified id.
     * @param parcelInvoiceId Id of the parcelInvoice to be returned. (required)
     * @return ParcelInvoice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ParcelInvoice getParcelInvoiceById(Integer parcelInvoiceId) throws ApiException {
        ApiResponse<ParcelInvoice> resp = getParcelInvoiceByIdWithHttpInfo(parcelInvoiceId);
        return resp.getData();
    }

    /**
     * Get a parcelInvoice by id
     * Returns the parcelInvoice identified by the specified id.
     * @param parcelInvoiceId Id of the parcelInvoice to be returned. (required)
     * @return ApiResponse&lt;ParcelInvoice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ParcelInvoice> getParcelInvoiceByIdWithHttpInfo(Integer parcelInvoiceId) throws ApiException {
        com.squareup.okhttp.Call call = getParcelInvoiceByIdValidateBeforeCall(parcelInvoiceId, null, null);
        Type localVarReturnType = new TypeToken<ParcelInvoice>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a parcelInvoice by id (asynchronously)
     * Returns the parcelInvoice identified by the specified id.
     * @param parcelInvoiceId Id of the parcelInvoice to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getParcelInvoiceByIdAsync(Integer parcelInvoiceId, final ApiCallback<ParcelInvoice> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParcelInvoiceByIdValidateBeforeCall(parcelInvoiceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ParcelInvoice>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getParcelInvoiceFiles
     * @param parcelInvoiceId Id of the parcelInvoice to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParcelInvoiceFilesCall(Integer parcelInvoiceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/parcelInvoice/{parcelInvoiceId}/file"
            .replaceAll("\\{" + "parcelInvoiceId" + "\\}", apiClient.escapeString(parcelInvoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getParcelInvoiceFilesValidateBeforeCall(Integer parcelInvoiceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parcelInvoiceId' is set
        if (parcelInvoiceId == null) {
            throw new ApiException("Missing the required parameter 'parcelInvoiceId' when calling getParcelInvoiceFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getParcelInvoiceFilesCall(parcelInvoiceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a parcelInvoice.
     * Get all existing parcelInvoice files.
     * @param parcelInvoiceId Id of the parcelInvoice to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getParcelInvoiceFiles(Integer parcelInvoiceId) throws ApiException {
        getParcelInvoiceFilesWithHttpInfo(parcelInvoiceId);
    }

    /**
     * Get the files for a parcelInvoice.
     * Get all existing parcelInvoice files.
     * @param parcelInvoiceId Id of the parcelInvoice to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getParcelInvoiceFilesWithHttpInfo(Integer parcelInvoiceId) throws ApiException {
        com.squareup.okhttp.Call call = getParcelInvoiceFilesValidateBeforeCall(parcelInvoiceId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a parcelInvoice. (asynchronously)
     * Get all existing parcelInvoice files.
     * @param parcelInvoiceId Id of the parcelInvoice to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getParcelInvoiceFilesAsync(Integer parcelInvoiceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParcelInvoiceFilesValidateBeforeCall(parcelInvoiceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getParcelInvoiceTags
     * @param parcelInvoiceId Id of the parcelInvoice to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParcelInvoiceTagsCall(Integer parcelInvoiceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/parcelInvoice/{parcelInvoiceId}/tag"
            .replaceAll("\\{" + "parcelInvoiceId" + "\\}", apiClient.escapeString(parcelInvoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getParcelInvoiceTagsValidateBeforeCall(Integer parcelInvoiceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parcelInvoiceId' is set
        if (parcelInvoiceId == null) {
            throw new ApiException("Missing the required parameter 'parcelInvoiceId' when calling getParcelInvoiceTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getParcelInvoiceTagsCall(parcelInvoiceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a parcelInvoice.
     * Get all existing parcelInvoice tags.
     * @param parcelInvoiceId Id of the parcelInvoice to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getParcelInvoiceTags(Integer parcelInvoiceId) throws ApiException {
        getParcelInvoiceTagsWithHttpInfo(parcelInvoiceId);
    }

    /**
     * Get the tags for a parcelInvoice.
     * Get all existing parcelInvoice tags.
     * @param parcelInvoiceId Id of the parcelInvoice to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getParcelInvoiceTagsWithHttpInfo(Integer parcelInvoiceId) throws ApiException {
        com.squareup.okhttp.Call call = getParcelInvoiceTagsValidateBeforeCall(parcelInvoiceId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a parcelInvoice. (asynchronously)
     * Get all existing parcelInvoice tags.
     * @param parcelInvoiceId Id of the parcelInvoice to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getParcelInvoiceTagsAsync(Integer parcelInvoiceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParcelInvoiceTagsValidateBeforeCall(parcelInvoiceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
