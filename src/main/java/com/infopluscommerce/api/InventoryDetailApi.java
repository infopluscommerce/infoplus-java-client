/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.InventoryDetail;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InventoryDetailApi {
    private ApiClient apiClient;

    public InventoryDetailApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InventoryDetailApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addInventoryDetailAudit
     * @param inventoryDetailId Id of the inventoryDetail to add an audit to (required)
     * @param inventoryDetailAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInventoryDetailAuditCall(Integer inventoryDetailId, String inventoryDetailAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryDetail/{inventoryDetailId}/audit/{inventoryDetailAudit}"
            .replaceAll("\\{" + "inventoryDetailId" + "\\}", apiClient.escapeString(inventoryDetailId.toString()))
            .replaceAll("\\{" + "inventoryDetailAudit" + "\\}", apiClient.escapeString(inventoryDetailAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInventoryDetailAuditValidateBeforeCall(Integer inventoryDetailId, String inventoryDetailAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryDetailId' is set
        if (inventoryDetailId == null) {
            throw new ApiException("Missing the required parameter 'inventoryDetailId' when calling addInventoryDetailAudit(Async)");
        }
        
        // verify the required parameter 'inventoryDetailAudit' is set
        if (inventoryDetailAudit == null) {
            throw new ApiException("Missing the required parameter 'inventoryDetailAudit' when calling addInventoryDetailAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addInventoryDetailAuditCall(inventoryDetailId, inventoryDetailAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for an inventoryDetail
     * Adds an audit to an existing inventoryDetail.
     * @param inventoryDetailId Id of the inventoryDetail to add an audit to (required)
     * @param inventoryDetailAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addInventoryDetailAudit(Integer inventoryDetailId, String inventoryDetailAudit) throws ApiException {
        addInventoryDetailAuditWithHttpInfo(inventoryDetailId, inventoryDetailAudit);
    }

    /**
     * Add new audit for an inventoryDetail
     * Adds an audit to an existing inventoryDetail.
     * @param inventoryDetailId Id of the inventoryDetail to add an audit to (required)
     * @param inventoryDetailAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addInventoryDetailAuditWithHttpInfo(Integer inventoryDetailId, String inventoryDetailAudit) throws ApiException {
        com.squareup.okhttp.Call call = addInventoryDetailAuditValidateBeforeCall(inventoryDetailId, inventoryDetailAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for an inventoryDetail (asynchronously)
     * Adds an audit to an existing inventoryDetail.
     * @param inventoryDetailId Id of the inventoryDetail to add an audit to (required)
     * @param inventoryDetailAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInventoryDetailAuditAsync(Integer inventoryDetailId, String inventoryDetailAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInventoryDetailAuditValidateBeforeCall(inventoryDetailId, inventoryDetailAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addInventoryDetailFile
     * @param inventoryDetailId Id of the inventoryDetail to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInventoryDetailFileCall(Integer inventoryDetailId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryDetail/{inventoryDetailId}/file/{fileName}"
            .replaceAll("\\{" + "inventoryDetailId" + "\\}", apiClient.escapeString(inventoryDetailId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInventoryDetailFileValidateBeforeCall(Integer inventoryDetailId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryDetailId' is set
        if (inventoryDetailId == null) {
            throw new ApiException("Missing the required parameter 'inventoryDetailId' when calling addInventoryDetailFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addInventoryDetailFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addInventoryDetailFileCall(inventoryDetailId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an inventoryDetail
     * Adds a file to an existing inventoryDetail.
     * @param inventoryDetailId Id of the inventoryDetail to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addInventoryDetailFile(Integer inventoryDetailId, String fileName) throws ApiException {
        addInventoryDetailFileWithHttpInfo(inventoryDetailId, fileName);
    }

    /**
     * Attach a file to an inventoryDetail
     * Adds a file to an existing inventoryDetail.
     * @param inventoryDetailId Id of the inventoryDetail to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addInventoryDetailFileWithHttpInfo(Integer inventoryDetailId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addInventoryDetailFileValidateBeforeCall(inventoryDetailId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an inventoryDetail (asynchronously)
     * Adds a file to an existing inventoryDetail.
     * @param inventoryDetailId Id of the inventoryDetail to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInventoryDetailFileAsync(Integer inventoryDetailId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInventoryDetailFileValidateBeforeCall(inventoryDetailId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addInventoryDetailFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param inventoryDetailId Id of the inventoryDetail to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInventoryDetailFileByURLCall(RecordFile body, Integer inventoryDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/inventoryDetail/{inventoryDetailId}/file"
            .replaceAll("\\{" + "inventoryDetailId" + "\\}", apiClient.escapeString(inventoryDetailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInventoryDetailFileByURLValidateBeforeCall(RecordFile body, Integer inventoryDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addInventoryDetailFileByURL(Async)");
        }
        
        // verify the required parameter 'inventoryDetailId' is set
        if (inventoryDetailId == null) {
            throw new ApiException("Missing the required parameter 'inventoryDetailId' when calling addInventoryDetailFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addInventoryDetailFileByURLCall(body, inventoryDetailId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an inventoryDetail by URL.
     * Adds a file to an existing inventoryDetail by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param inventoryDetailId Id of the inventoryDetail to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addInventoryDetailFileByURL(RecordFile body, Integer inventoryDetailId) throws ApiException {
        addInventoryDetailFileByURLWithHttpInfo(body, inventoryDetailId);
    }

    /**
     * Attach a file to an inventoryDetail by URL.
     * Adds a file to an existing inventoryDetail by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param inventoryDetailId Id of the inventoryDetail to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addInventoryDetailFileByURLWithHttpInfo(RecordFile body, Integer inventoryDetailId) throws ApiException {
        com.squareup.okhttp.Call call = addInventoryDetailFileByURLValidateBeforeCall(body, inventoryDetailId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an inventoryDetail by URL. (asynchronously)
     * Adds a file to an existing inventoryDetail by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param inventoryDetailId Id of the inventoryDetail to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInventoryDetailFileByURLAsync(RecordFile body, Integer inventoryDetailId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInventoryDetailFileByURLValidateBeforeCall(body, inventoryDetailId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addInventoryDetailTag
     * @param inventoryDetailId Id of the inventoryDetail to add a tag to (required)
     * @param inventoryDetailTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInventoryDetailTagCall(Integer inventoryDetailId, String inventoryDetailTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryDetail/{inventoryDetailId}/tag/{inventoryDetailTag}"
            .replaceAll("\\{" + "inventoryDetailId" + "\\}", apiClient.escapeString(inventoryDetailId.toString()))
            .replaceAll("\\{" + "inventoryDetailTag" + "\\}", apiClient.escapeString(inventoryDetailTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInventoryDetailTagValidateBeforeCall(Integer inventoryDetailId, String inventoryDetailTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryDetailId' is set
        if (inventoryDetailId == null) {
            throw new ApiException("Missing the required parameter 'inventoryDetailId' when calling addInventoryDetailTag(Async)");
        }
        
        // verify the required parameter 'inventoryDetailTag' is set
        if (inventoryDetailTag == null) {
            throw new ApiException("Missing the required parameter 'inventoryDetailTag' when calling addInventoryDetailTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addInventoryDetailTagCall(inventoryDetailId, inventoryDetailTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for an inventoryDetail.
     * Adds a tag to an existing inventoryDetail.
     * @param inventoryDetailId Id of the inventoryDetail to add a tag to (required)
     * @param inventoryDetailTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addInventoryDetailTag(Integer inventoryDetailId, String inventoryDetailTag) throws ApiException {
        addInventoryDetailTagWithHttpInfo(inventoryDetailId, inventoryDetailTag);
    }

    /**
     * Add new tags for an inventoryDetail.
     * Adds a tag to an existing inventoryDetail.
     * @param inventoryDetailId Id of the inventoryDetail to add a tag to (required)
     * @param inventoryDetailTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addInventoryDetailTagWithHttpInfo(Integer inventoryDetailId, String inventoryDetailTag) throws ApiException {
        com.squareup.okhttp.Call call = addInventoryDetailTagValidateBeforeCall(inventoryDetailId, inventoryDetailTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for an inventoryDetail. (asynchronously)
     * Adds a tag to an existing inventoryDetail.
     * @param inventoryDetailId Id of the inventoryDetail to add a tag to (required)
     * @param inventoryDetailTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInventoryDetailTagAsync(Integer inventoryDetailId, String inventoryDetailTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInventoryDetailTagValidateBeforeCall(inventoryDetailId, inventoryDetailTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteInventoryDetailFile
     * @param inventoryDetailId Id of the inventoryDetail to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteInventoryDetailFileCall(Integer inventoryDetailId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryDetail/{inventoryDetailId}/file/{fileId}"
            .replaceAll("\\{" + "inventoryDetailId" + "\\}", apiClient.escapeString(inventoryDetailId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteInventoryDetailFileValidateBeforeCall(Integer inventoryDetailId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryDetailId' is set
        if (inventoryDetailId == null) {
            throw new ApiException("Missing the required parameter 'inventoryDetailId' when calling deleteInventoryDetailFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteInventoryDetailFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteInventoryDetailFileCall(inventoryDetailId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for an inventoryDetail.
     * Deletes an existing inventoryDetail file using the specified data.
     * @param inventoryDetailId Id of the inventoryDetail to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteInventoryDetailFile(Integer inventoryDetailId, Integer fileId) throws ApiException {
        deleteInventoryDetailFileWithHttpInfo(inventoryDetailId, fileId);
    }

    /**
     * Delete a file for an inventoryDetail.
     * Deletes an existing inventoryDetail file using the specified data.
     * @param inventoryDetailId Id of the inventoryDetail to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteInventoryDetailFileWithHttpInfo(Integer inventoryDetailId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteInventoryDetailFileValidateBeforeCall(inventoryDetailId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for an inventoryDetail. (asynchronously)
     * Deletes an existing inventoryDetail file using the specified data.
     * @param inventoryDetailId Id of the inventoryDetail to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInventoryDetailFileAsync(Integer inventoryDetailId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInventoryDetailFileValidateBeforeCall(inventoryDetailId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteInventoryDetailTag
     * @param inventoryDetailId Id of the inventoryDetail to remove tag from (required)
     * @param inventoryDetailTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteInventoryDetailTagCall(Integer inventoryDetailId, String inventoryDetailTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryDetail/{inventoryDetailId}/tag/{inventoryDetailTag}"
            .replaceAll("\\{" + "inventoryDetailId" + "\\}", apiClient.escapeString(inventoryDetailId.toString()))
            .replaceAll("\\{" + "inventoryDetailTag" + "\\}", apiClient.escapeString(inventoryDetailTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteInventoryDetailTagValidateBeforeCall(Integer inventoryDetailId, String inventoryDetailTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryDetailId' is set
        if (inventoryDetailId == null) {
            throw new ApiException("Missing the required parameter 'inventoryDetailId' when calling deleteInventoryDetailTag(Async)");
        }
        
        // verify the required parameter 'inventoryDetailTag' is set
        if (inventoryDetailTag == null) {
            throw new ApiException("Missing the required parameter 'inventoryDetailTag' when calling deleteInventoryDetailTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteInventoryDetailTagCall(inventoryDetailId, inventoryDetailTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for an inventoryDetail.
     * Deletes an existing inventoryDetail tag using the specified data.
     * @param inventoryDetailId Id of the inventoryDetail to remove tag from (required)
     * @param inventoryDetailTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteInventoryDetailTag(Integer inventoryDetailId, String inventoryDetailTag) throws ApiException {
        deleteInventoryDetailTagWithHttpInfo(inventoryDetailId, inventoryDetailTag);
    }

    /**
     * Delete a tag for an inventoryDetail.
     * Deletes an existing inventoryDetail tag using the specified data.
     * @param inventoryDetailId Id of the inventoryDetail to remove tag from (required)
     * @param inventoryDetailTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteInventoryDetailTagWithHttpInfo(Integer inventoryDetailId, String inventoryDetailTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteInventoryDetailTagValidateBeforeCall(inventoryDetailId, inventoryDetailTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for an inventoryDetail. (asynchronously)
     * Deletes an existing inventoryDetail tag using the specified data.
     * @param inventoryDetailId Id of the inventoryDetail to remove tag from (required)
     * @param inventoryDetailTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInventoryDetailTagAsync(Integer inventoryDetailId, String inventoryDetailTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInventoryDetailTagValidateBeforeCall(inventoryDetailId, inventoryDetailTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateInventoryDetailById
     * @param inventoryDetailId Id of the inventoryDetail to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateInventoryDetailByIdCall(Integer inventoryDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryDetail/duplicate/{inventoryDetailId}"
            .replaceAll("\\{" + "inventoryDetailId" + "\\}", apiClient.escapeString(inventoryDetailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateInventoryDetailByIdValidateBeforeCall(Integer inventoryDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryDetailId' is set
        if (inventoryDetailId == null) {
            throw new ApiException("Missing the required parameter 'inventoryDetailId' when calling getDuplicateInventoryDetailById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateInventoryDetailByIdCall(inventoryDetailId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated an inventoryDetail by id
     * Returns a duplicated inventoryDetail identified by the specified id.
     * @param inventoryDetailId Id of the inventoryDetail to be duplicated. (required)
     * @return InventoryDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InventoryDetail getDuplicateInventoryDetailById(Integer inventoryDetailId) throws ApiException {
        ApiResponse<InventoryDetail> resp = getDuplicateInventoryDetailByIdWithHttpInfo(inventoryDetailId);
        return resp.getData();
    }

    /**
     * Get a duplicated an inventoryDetail by id
     * Returns a duplicated inventoryDetail identified by the specified id.
     * @param inventoryDetailId Id of the inventoryDetail to be duplicated. (required)
     * @return ApiResponse&lt;InventoryDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InventoryDetail> getDuplicateInventoryDetailByIdWithHttpInfo(Integer inventoryDetailId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateInventoryDetailByIdValidateBeforeCall(inventoryDetailId, null, null);
        Type localVarReturnType = new TypeToken<InventoryDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated an inventoryDetail by id (asynchronously)
     * Returns a duplicated inventoryDetail identified by the specified id.
     * @param inventoryDetailId Id of the inventoryDetail to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateInventoryDetailByIdAsync(Integer inventoryDetailId, final ApiCallback<InventoryDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateInventoryDetailByIdValidateBeforeCall(inventoryDetailId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InventoryDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInventoryDetailByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInventoryDetailByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryDetail/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInventoryDetailByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getInventoryDetailByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search inventoryDetails by filter
     * Returns the list of inventoryDetails that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;InventoryDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InventoryDetail> getInventoryDetailByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<InventoryDetail>> resp = getInventoryDetailByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search inventoryDetails by filter
     * Returns the list of inventoryDetails that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;InventoryDetail&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InventoryDetail>> getInventoryDetailByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getInventoryDetailByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<InventoryDetail>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search inventoryDetails by filter (asynchronously)
     * Returns the list of inventoryDetails that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInventoryDetailByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<InventoryDetail>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInventoryDetailByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InventoryDetail>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInventoryDetailById
     * @param inventoryDetailId Id of the inventoryDetail to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInventoryDetailByIdCall(Integer inventoryDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryDetail/{inventoryDetailId}"
            .replaceAll("\\{" + "inventoryDetailId" + "\\}", apiClient.escapeString(inventoryDetailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInventoryDetailByIdValidateBeforeCall(Integer inventoryDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryDetailId' is set
        if (inventoryDetailId == null) {
            throw new ApiException("Missing the required parameter 'inventoryDetailId' when calling getInventoryDetailById(Async)");
        }
        

        com.squareup.okhttp.Call call = getInventoryDetailByIdCall(inventoryDetailId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an inventoryDetail by id
     * Returns the inventoryDetail identified by the specified id.
     * @param inventoryDetailId Id of the inventoryDetail to be returned. (required)
     * @return InventoryDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InventoryDetail getInventoryDetailById(Integer inventoryDetailId) throws ApiException {
        ApiResponse<InventoryDetail> resp = getInventoryDetailByIdWithHttpInfo(inventoryDetailId);
        return resp.getData();
    }

    /**
     * Get an inventoryDetail by id
     * Returns the inventoryDetail identified by the specified id.
     * @param inventoryDetailId Id of the inventoryDetail to be returned. (required)
     * @return ApiResponse&lt;InventoryDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InventoryDetail> getInventoryDetailByIdWithHttpInfo(Integer inventoryDetailId) throws ApiException {
        com.squareup.okhttp.Call call = getInventoryDetailByIdValidateBeforeCall(inventoryDetailId, null, null);
        Type localVarReturnType = new TypeToken<InventoryDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an inventoryDetail by id (asynchronously)
     * Returns the inventoryDetail identified by the specified id.
     * @param inventoryDetailId Id of the inventoryDetail to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInventoryDetailByIdAsync(Integer inventoryDetailId, final ApiCallback<InventoryDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInventoryDetailByIdValidateBeforeCall(inventoryDetailId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InventoryDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInventoryDetailFiles
     * @param inventoryDetailId Id of the inventoryDetail to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInventoryDetailFilesCall(Integer inventoryDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryDetail/{inventoryDetailId}/file"
            .replaceAll("\\{" + "inventoryDetailId" + "\\}", apiClient.escapeString(inventoryDetailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInventoryDetailFilesValidateBeforeCall(Integer inventoryDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryDetailId' is set
        if (inventoryDetailId == null) {
            throw new ApiException("Missing the required parameter 'inventoryDetailId' when calling getInventoryDetailFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getInventoryDetailFilesCall(inventoryDetailId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for an inventoryDetail.
     * Get all existing inventoryDetail files.
     * @param inventoryDetailId Id of the inventoryDetail to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getInventoryDetailFiles(Integer inventoryDetailId) throws ApiException {
        getInventoryDetailFilesWithHttpInfo(inventoryDetailId);
    }

    /**
     * Get the files for an inventoryDetail.
     * Get all existing inventoryDetail files.
     * @param inventoryDetailId Id of the inventoryDetail to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getInventoryDetailFilesWithHttpInfo(Integer inventoryDetailId) throws ApiException {
        com.squareup.okhttp.Call call = getInventoryDetailFilesValidateBeforeCall(inventoryDetailId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for an inventoryDetail. (asynchronously)
     * Get all existing inventoryDetail files.
     * @param inventoryDetailId Id of the inventoryDetail to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInventoryDetailFilesAsync(Integer inventoryDetailId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInventoryDetailFilesValidateBeforeCall(inventoryDetailId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getInventoryDetailTags
     * @param inventoryDetailId Id of the inventoryDetail to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInventoryDetailTagsCall(Integer inventoryDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryDetail/{inventoryDetailId}/tag"
            .replaceAll("\\{" + "inventoryDetailId" + "\\}", apiClient.escapeString(inventoryDetailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInventoryDetailTagsValidateBeforeCall(Integer inventoryDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryDetailId' is set
        if (inventoryDetailId == null) {
            throw new ApiException("Missing the required parameter 'inventoryDetailId' when calling getInventoryDetailTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getInventoryDetailTagsCall(inventoryDetailId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for an inventoryDetail.
     * Get all existing inventoryDetail tags.
     * @param inventoryDetailId Id of the inventoryDetail to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getInventoryDetailTags(Integer inventoryDetailId) throws ApiException {
        getInventoryDetailTagsWithHttpInfo(inventoryDetailId);
    }

    /**
     * Get the tags for an inventoryDetail.
     * Get all existing inventoryDetail tags.
     * @param inventoryDetailId Id of the inventoryDetail to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getInventoryDetailTagsWithHttpInfo(Integer inventoryDetailId) throws ApiException {
        com.squareup.okhttp.Call call = getInventoryDetailTagsValidateBeforeCall(inventoryDetailId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for an inventoryDetail. (asynchronously)
     * Get all existing inventoryDetail tags.
     * @param inventoryDetailId Id of the inventoryDetail to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInventoryDetailTagsAsync(Integer inventoryDetailId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInventoryDetailTagsValidateBeforeCall(inventoryDetailId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateInventoryDetailCustomFields
     * @param body InventoryDetail to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateInventoryDetailCustomFieldsCall(InventoryDetail body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/inventoryDetail/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateInventoryDetailCustomFieldsValidateBeforeCall(InventoryDetail body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateInventoryDetailCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateInventoryDetailCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an inventoryDetail custom fields
     * Updates an existing inventoryDetail custom fields using the specified data.
     * @param body InventoryDetail to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateInventoryDetailCustomFields(InventoryDetail body) throws ApiException {
        updateInventoryDetailCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update an inventoryDetail custom fields
     * Updates an existing inventoryDetail custom fields using the specified data.
     * @param body InventoryDetail to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateInventoryDetailCustomFieldsWithHttpInfo(InventoryDetail body) throws ApiException {
        com.squareup.okhttp.Call call = updateInventoryDetailCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an inventoryDetail custom fields (asynchronously)
     * Updates an existing inventoryDetail custom fields using the specified data.
     * @param body InventoryDetail to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateInventoryDetailCustomFieldsAsync(InventoryDetail body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateInventoryDetailCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
