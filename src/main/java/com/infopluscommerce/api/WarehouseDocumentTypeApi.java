/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.RecordFile;
import com.infopluscommerce.model.WarehouseDocumentType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WarehouseDocumentTypeApi {
    private ApiClient apiClient;

    public WarehouseDocumentTypeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WarehouseDocumentTypeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addWarehouseDocumentTypeAudit
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to add an audit to (required)
     * @param warehouseDocumentTypeAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addWarehouseDocumentTypeAuditCall(Integer warehouseDocumentTypeId, String warehouseDocumentTypeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseDocumentType/{warehouseDocumentTypeId}/audit/{warehouseDocumentTypeAudit}"
            .replaceAll("\\{" + "warehouseDocumentTypeId" + "\\}", apiClient.escapeString(warehouseDocumentTypeId.toString()))
            .replaceAll("\\{" + "warehouseDocumentTypeAudit" + "\\}", apiClient.escapeString(warehouseDocumentTypeAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addWarehouseDocumentTypeAuditValidateBeforeCall(Integer warehouseDocumentTypeId, String warehouseDocumentTypeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseDocumentTypeId' is set
        if (warehouseDocumentTypeId == null) {
            throw new ApiException("Missing the required parameter 'warehouseDocumentTypeId' when calling addWarehouseDocumentTypeAudit(Async)");
        }
        
        // verify the required parameter 'warehouseDocumentTypeAudit' is set
        if (warehouseDocumentTypeAudit == null) {
            throw new ApiException("Missing the required parameter 'warehouseDocumentTypeAudit' when calling addWarehouseDocumentTypeAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addWarehouseDocumentTypeAuditCall(warehouseDocumentTypeId, warehouseDocumentTypeAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a warehouseDocumentType
     * Adds an audit to an existing warehouseDocumentType.
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to add an audit to (required)
     * @param warehouseDocumentTypeAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addWarehouseDocumentTypeAudit(Integer warehouseDocumentTypeId, String warehouseDocumentTypeAudit) throws ApiException {
        addWarehouseDocumentTypeAuditWithHttpInfo(warehouseDocumentTypeId, warehouseDocumentTypeAudit);
    }

    /**
     * Add new audit for a warehouseDocumentType
     * Adds an audit to an existing warehouseDocumentType.
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to add an audit to (required)
     * @param warehouseDocumentTypeAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addWarehouseDocumentTypeAuditWithHttpInfo(Integer warehouseDocumentTypeId, String warehouseDocumentTypeAudit) throws ApiException {
        com.squareup.okhttp.Call call = addWarehouseDocumentTypeAuditValidateBeforeCall(warehouseDocumentTypeId, warehouseDocumentTypeAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a warehouseDocumentType (asynchronously)
     * Adds an audit to an existing warehouseDocumentType.
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to add an audit to (required)
     * @param warehouseDocumentTypeAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addWarehouseDocumentTypeAuditAsync(Integer warehouseDocumentTypeId, String warehouseDocumentTypeAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addWarehouseDocumentTypeAuditValidateBeforeCall(warehouseDocumentTypeId, warehouseDocumentTypeAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addWarehouseDocumentTypeFile
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addWarehouseDocumentTypeFileCall(Integer warehouseDocumentTypeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseDocumentType/{warehouseDocumentTypeId}/file/{fileName}"
            .replaceAll("\\{" + "warehouseDocumentTypeId" + "\\}", apiClient.escapeString(warehouseDocumentTypeId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addWarehouseDocumentTypeFileValidateBeforeCall(Integer warehouseDocumentTypeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseDocumentTypeId' is set
        if (warehouseDocumentTypeId == null) {
            throw new ApiException("Missing the required parameter 'warehouseDocumentTypeId' when calling addWarehouseDocumentTypeFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addWarehouseDocumentTypeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addWarehouseDocumentTypeFileCall(warehouseDocumentTypeId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a warehouseDocumentType
     * Adds a file to an existing warehouseDocumentType.
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addWarehouseDocumentTypeFile(Integer warehouseDocumentTypeId, String fileName) throws ApiException {
        addWarehouseDocumentTypeFileWithHttpInfo(warehouseDocumentTypeId, fileName);
    }

    /**
     * Attach a file to a warehouseDocumentType
     * Adds a file to an existing warehouseDocumentType.
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addWarehouseDocumentTypeFileWithHttpInfo(Integer warehouseDocumentTypeId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addWarehouseDocumentTypeFileValidateBeforeCall(warehouseDocumentTypeId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a warehouseDocumentType (asynchronously)
     * Adds a file to an existing warehouseDocumentType.
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addWarehouseDocumentTypeFileAsync(Integer warehouseDocumentTypeId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addWarehouseDocumentTypeFileValidateBeforeCall(warehouseDocumentTypeId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addWarehouseDocumentTypeFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addWarehouseDocumentTypeFileByURLCall(RecordFile body, Integer warehouseDocumentTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/warehouseDocumentType/{warehouseDocumentTypeId}/file"
            .replaceAll("\\{" + "warehouseDocumentTypeId" + "\\}", apiClient.escapeString(warehouseDocumentTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addWarehouseDocumentTypeFileByURLValidateBeforeCall(RecordFile body, Integer warehouseDocumentTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addWarehouseDocumentTypeFileByURL(Async)");
        }
        
        // verify the required parameter 'warehouseDocumentTypeId' is set
        if (warehouseDocumentTypeId == null) {
            throw new ApiException("Missing the required parameter 'warehouseDocumentTypeId' when calling addWarehouseDocumentTypeFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addWarehouseDocumentTypeFileByURLCall(body, warehouseDocumentTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a warehouseDocumentType by URL.
     * Adds a file to an existing warehouseDocumentType by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addWarehouseDocumentTypeFileByURL(RecordFile body, Integer warehouseDocumentTypeId) throws ApiException {
        addWarehouseDocumentTypeFileByURLWithHttpInfo(body, warehouseDocumentTypeId);
    }

    /**
     * Attach a file to a warehouseDocumentType by URL.
     * Adds a file to an existing warehouseDocumentType by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addWarehouseDocumentTypeFileByURLWithHttpInfo(RecordFile body, Integer warehouseDocumentTypeId) throws ApiException {
        com.squareup.okhttp.Call call = addWarehouseDocumentTypeFileByURLValidateBeforeCall(body, warehouseDocumentTypeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a warehouseDocumentType by URL. (asynchronously)
     * Adds a file to an existing warehouseDocumentType by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addWarehouseDocumentTypeFileByURLAsync(RecordFile body, Integer warehouseDocumentTypeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addWarehouseDocumentTypeFileByURLValidateBeforeCall(body, warehouseDocumentTypeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addWarehouseDocumentTypeTag
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to add a tag to (required)
     * @param warehouseDocumentTypeTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addWarehouseDocumentTypeTagCall(Integer warehouseDocumentTypeId, String warehouseDocumentTypeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseDocumentType/{warehouseDocumentTypeId}/tag/{warehouseDocumentTypeTag}"
            .replaceAll("\\{" + "warehouseDocumentTypeId" + "\\}", apiClient.escapeString(warehouseDocumentTypeId.toString()))
            .replaceAll("\\{" + "warehouseDocumentTypeTag" + "\\}", apiClient.escapeString(warehouseDocumentTypeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addWarehouseDocumentTypeTagValidateBeforeCall(Integer warehouseDocumentTypeId, String warehouseDocumentTypeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseDocumentTypeId' is set
        if (warehouseDocumentTypeId == null) {
            throw new ApiException("Missing the required parameter 'warehouseDocumentTypeId' when calling addWarehouseDocumentTypeTag(Async)");
        }
        
        // verify the required parameter 'warehouseDocumentTypeTag' is set
        if (warehouseDocumentTypeTag == null) {
            throw new ApiException("Missing the required parameter 'warehouseDocumentTypeTag' when calling addWarehouseDocumentTypeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addWarehouseDocumentTypeTagCall(warehouseDocumentTypeId, warehouseDocumentTypeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a warehouseDocumentType.
     * Adds a tag to an existing warehouseDocumentType.
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to add a tag to (required)
     * @param warehouseDocumentTypeTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addWarehouseDocumentTypeTag(Integer warehouseDocumentTypeId, String warehouseDocumentTypeTag) throws ApiException {
        addWarehouseDocumentTypeTagWithHttpInfo(warehouseDocumentTypeId, warehouseDocumentTypeTag);
    }

    /**
     * Add new tags for a warehouseDocumentType.
     * Adds a tag to an existing warehouseDocumentType.
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to add a tag to (required)
     * @param warehouseDocumentTypeTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addWarehouseDocumentTypeTagWithHttpInfo(Integer warehouseDocumentTypeId, String warehouseDocumentTypeTag) throws ApiException {
        com.squareup.okhttp.Call call = addWarehouseDocumentTypeTagValidateBeforeCall(warehouseDocumentTypeId, warehouseDocumentTypeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a warehouseDocumentType. (asynchronously)
     * Adds a tag to an existing warehouseDocumentType.
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to add a tag to (required)
     * @param warehouseDocumentTypeTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addWarehouseDocumentTypeTagAsync(Integer warehouseDocumentTypeId, String warehouseDocumentTypeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addWarehouseDocumentTypeTagValidateBeforeCall(warehouseDocumentTypeId, warehouseDocumentTypeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteWarehouseDocumentTypeFile
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteWarehouseDocumentTypeFileCall(Integer warehouseDocumentTypeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseDocumentType/{warehouseDocumentTypeId}/file/{fileId}"
            .replaceAll("\\{" + "warehouseDocumentTypeId" + "\\}", apiClient.escapeString(warehouseDocumentTypeId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteWarehouseDocumentTypeFileValidateBeforeCall(Integer warehouseDocumentTypeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseDocumentTypeId' is set
        if (warehouseDocumentTypeId == null) {
            throw new ApiException("Missing the required parameter 'warehouseDocumentTypeId' when calling deleteWarehouseDocumentTypeFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteWarehouseDocumentTypeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteWarehouseDocumentTypeFileCall(warehouseDocumentTypeId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a warehouseDocumentType.
     * Deletes an existing warehouseDocumentType file using the specified data.
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteWarehouseDocumentTypeFile(Integer warehouseDocumentTypeId, Integer fileId) throws ApiException {
        deleteWarehouseDocumentTypeFileWithHttpInfo(warehouseDocumentTypeId, fileId);
    }

    /**
     * Delete a file for a warehouseDocumentType.
     * Deletes an existing warehouseDocumentType file using the specified data.
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteWarehouseDocumentTypeFileWithHttpInfo(Integer warehouseDocumentTypeId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteWarehouseDocumentTypeFileValidateBeforeCall(warehouseDocumentTypeId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a warehouseDocumentType. (asynchronously)
     * Deletes an existing warehouseDocumentType file using the specified data.
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteWarehouseDocumentTypeFileAsync(Integer warehouseDocumentTypeId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteWarehouseDocumentTypeFileValidateBeforeCall(warehouseDocumentTypeId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteWarehouseDocumentTypeTag
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to remove tag from (required)
     * @param warehouseDocumentTypeTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteWarehouseDocumentTypeTagCall(Integer warehouseDocumentTypeId, String warehouseDocumentTypeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseDocumentType/{warehouseDocumentTypeId}/tag/{warehouseDocumentTypeTag}"
            .replaceAll("\\{" + "warehouseDocumentTypeId" + "\\}", apiClient.escapeString(warehouseDocumentTypeId.toString()))
            .replaceAll("\\{" + "warehouseDocumentTypeTag" + "\\}", apiClient.escapeString(warehouseDocumentTypeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteWarehouseDocumentTypeTagValidateBeforeCall(Integer warehouseDocumentTypeId, String warehouseDocumentTypeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseDocumentTypeId' is set
        if (warehouseDocumentTypeId == null) {
            throw new ApiException("Missing the required parameter 'warehouseDocumentTypeId' when calling deleteWarehouseDocumentTypeTag(Async)");
        }
        
        // verify the required parameter 'warehouseDocumentTypeTag' is set
        if (warehouseDocumentTypeTag == null) {
            throw new ApiException("Missing the required parameter 'warehouseDocumentTypeTag' when calling deleteWarehouseDocumentTypeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteWarehouseDocumentTypeTagCall(warehouseDocumentTypeId, warehouseDocumentTypeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a warehouseDocumentType.
     * Deletes an existing warehouseDocumentType tag using the specified data.
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to remove tag from (required)
     * @param warehouseDocumentTypeTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteWarehouseDocumentTypeTag(Integer warehouseDocumentTypeId, String warehouseDocumentTypeTag) throws ApiException {
        deleteWarehouseDocumentTypeTagWithHttpInfo(warehouseDocumentTypeId, warehouseDocumentTypeTag);
    }

    /**
     * Delete a tag for a warehouseDocumentType.
     * Deletes an existing warehouseDocumentType tag using the specified data.
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to remove tag from (required)
     * @param warehouseDocumentTypeTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteWarehouseDocumentTypeTagWithHttpInfo(Integer warehouseDocumentTypeId, String warehouseDocumentTypeTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteWarehouseDocumentTypeTagValidateBeforeCall(warehouseDocumentTypeId, warehouseDocumentTypeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a warehouseDocumentType. (asynchronously)
     * Deletes an existing warehouseDocumentType tag using the specified data.
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to remove tag from (required)
     * @param warehouseDocumentTypeTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteWarehouseDocumentTypeTagAsync(Integer warehouseDocumentTypeId, String warehouseDocumentTypeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteWarehouseDocumentTypeTagValidateBeforeCall(warehouseDocumentTypeId, warehouseDocumentTypeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateWarehouseDocumentTypeById
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateWarehouseDocumentTypeByIdCall(Integer warehouseDocumentTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseDocumentType/duplicate/{warehouseDocumentTypeId}"
            .replaceAll("\\{" + "warehouseDocumentTypeId" + "\\}", apiClient.escapeString(warehouseDocumentTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateWarehouseDocumentTypeByIdValidateBeforeCall(Integer warehouseDocumentTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseDocumentTypeId' is set
        if (warehouseDocumentTypeId == null) {
            throw new ApiException("Missing the required parameter 'warehouseDocumentTypeId' when calling getDuplicateWarehouseDocumentTypeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateWarehouseDocumentTypeByIdCall(warehouseDocumentTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a warehouseDocumentType by id
     * Returns a duplicated warehouseDocumentType identified by the specified id.
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to be duplicated. (required)
     * @return WarehouseDocumentType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WarehouseDocumentType getDuplicateWarehouseDocumentTypeById(Integer warehouseDocumentTypeId) throws ApiException {
        ApiResponse<WarehouseDocumentType> resp = getDuplicateWarehouseDocumentTypeByIdWithHttpInfo(warehouseDocumentTypeId);
        return resp.getData();
    }

    /**
     * Get a duplicated a warehouseDocumentType by id
     * Returns a duplicated warehouseDocumentType identified by the specified id.
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to be duplicated. (required)
     * @return ApiResponse&lt;WarehouseDocumentType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WarehouseDocumentType> getDuplicateWarehouseDocumentTypeByIdWithHttpInfo(Integer warehouseDocumentTypeId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateWarehouseDocumentTypeByIdValidateBeforeCall(warehouseDocumentTypeId, null, null);
        Type localVarReturnType = new TypeToken<WarehouseDocumentType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a warehouseDocumentType by id (asynchronously)
     * Returns a duplicated warehouseDocumentType identified by the specified id.
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateWarehouseDocumentTypeByIdAsync(Integer warehouseDocumentTypeId, final ApiCallback<WarehouseDocumentType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateWarehouseDocumentTypeByIdValidateBeforeCall(warehouseDocumentTypeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WarehouseDocumentType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWarehouseDocumentTypeByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWarehouseDocumentTypeByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseDocumentType/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWarehouseDocumentTypeByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getWarehouseDocumentTypeByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search warehouseDocumentTypes by filter
     * Returns the list of warehouseDocumentTypes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;WarehouseDocumentType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<WarehouseDocumentType> getWarehouseDocumentTypeByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<WarehouseDocumentType>> resp = getWarehouseDocumentTypeByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search warehouseDocumentTypes by filter
     * Returns the list of warehouseDocumentTypes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;WarehouseDocumentType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<WarehouseDocumentType>> getWarehouseDocumentTypeByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getWarehouseDocumentTypeByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<WarehouseDocumentType>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search warehouseDocumentTypes by filter (asynchronously)
     * Returns the list of warehouseDocumentTypes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWarehouseDocumentTypeByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<WarehouseDocumentType>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWarehouseDocumentTypeByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<WarehouseDocumentType>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWarehouseDocumentTypeById
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWarehouseDocumentTypeByIdCall(Integer warehouseDocumentTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseDocumentType/{warehouseDocumentTypeId}"
            .replaceAll("\\{" + "warehouseDocumentTypeId" + "\\}", apiClient.escapeString(warehouseDocumentTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWarehouseDocumentTypeByIdValidateBeforeCall(Integer warehouseDocumentTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseDocumentTypeId' is set
        if (warehouseDocumentTypeId == null) {
            throw new ApiException("Missing the required parameter 'warehouseDocumentTypeId' when calling getWarehouseDocumentTypeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getWarehouseDocumentTypeByIdCall(warehouseDocumentTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a warehouseDocumentType by id
     * Returns the warehouseDocumentType identified by the specified id.
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to be returned. (required)
     * @return WarehouseDocumentType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WarehouseDocumentType getWarehouseDocumentTypeById(Integer warehouseDocumentTypeId) throws ApiException {
        ApiResponse<WarehouseDocumentType> resp = getWarehouseDocumentTypeByIdWithHttpInfo(warehouseDocumentTypeId);
        return resp.getData();
    }

    /**
     * Get a warehouseDocumentType by id
     * Returns the warehouseDocumentType identified by the specified id.
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to be returned. (required)
     * @return ApiResponse&lt;WarehouseDocumentType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WarehouseDocumentType> getWarehouseDocumentTypeByIdWithHttpInfo(Integer warehouseDocumentTypeId) throws ApiException {
        com.squareup.okhttp.Call call = getWarehouseDocumentTypeByIdValidateBeforeCall(warehouseDocumentTypeId, null, null);
        Type localVarReturnType = new TypeToken<WarehouseDocumentType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a warehouseDocumentType by id (asynchronously)
     * Returns the warehouseDocumentType identified by the specified id.
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWarehouseDocumentTypeByIdAsync(Integer warehouseDocumentTypeId, final ApiCallback<WarehouseDocumentType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWarehouseDocumentTypeByIdValidateBeforeCall(warehouseDocumentTypeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WarehouseDocumentType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWarehouseDocumentTypeFiles
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWarehouseDocumentTypeFilesCall(Integer warehouseDocumentTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseDocumentType/{warehouseDocumentTypeId}/file"
            .replaceAll("\\{" + "warehouseDocumentTypeId" + "\\}", apiClient.escapeString(warehouseDocumentTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWarehouseDocumentTypeFilesValidateBeforeCall(Integer warehouseDocumentTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseDocumentTypeId' is set
        if (warehouseDocumentTypeId == null) {
            throw new ApiException("Missing the required parameter 'warehouseDocumentTypeId' when calling getWarehouseDocumentTypeFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getWarehouseDocumentTypeFilesCall(warehouseDocumentTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a warehouseDocumentType.
     * Get all existing warehouseDocumentType files.
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getWarehouseDocumentTypeFiles(Integer warehouseDocumentTypeId) throws ApiException {
        getWarehouseDocumentTypeFilesWithHttpInfo(warehouseDocumentTypeId);
    }

    /**
     * Get the files for a warehouseDocumentType.
     * Get all existing warehouseDocumentType files.
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getWarehouseDocumentTypeFilesWithHttpInfo(Integer warehouseDocumentTypeId) throws ApiException {
        com.squareup.okhttp.Call call = getWarehouseDocumentTypeFilesValidateBeforeCall(warehouseDocumentTypeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a warehouseDocumentType. (asynchronously)
     * Get all existing warehouseDocumentType files.
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWarehouseDocumentTypeFilesAsync(Integer warehouseDocumentTypeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWarehouseDocumentTypeFilesValidateBeforeCall(warehouseDocumentTypeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getWarehouseDocumentTypeTags
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWarehouseDocumentTypeTagsCall(Integer warehouseDocumentTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseDocumentType/{warehouseDocumentTypeId}/tag"
            .replaceAll("\\{" + "warehouseDocumentTypeId" + "\\}", apiClient.escapeString(warehouseDocumentTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWarehouseDocumentTypeTagsValidateBeforeCall(Integer warehouseDocumentTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseDocumentTypeId' is set
        if (warehouseDocumentTypeId == null) {
            throw new ApiException("Missing the required parameter 'warehouseDocumentTypeId' when calling getWarehouseDocumentTypeTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getWarehouseDocumentTypeTagsCall(warehouseDocumentTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a warehouseDocumentType.
     * Get all existing warehouseDocumentType tags.
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getWarehouseDocumentTypeTags(Integer warehouseDocumentTypeId) throws ApiException {
        getWarehouseDocumentTypeTagsWithHttpInfo(warehouseDocumentTypeId);
    }

    /**
     * Get the tags for a warehouseDocumentType.
     * Get all existing warehouseDocumentType tags.
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getWarehouseDocumentTypeTagsWithHttpInfo(Integer warehouseDocumentTypeId) throws ApiException {
        com.squareup.okhttp.Call call = getWarehouseDocumentTypeTagsValidateBeforeCall(warehouseDocumentTypeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a warehouseDocumentType. (asynchronously)
     * Get all existing warehouseDocumentType tags.
     * @param warehouseDocumentTypeId Id of the warehouseDocumentType to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWarehouseDocumentTypeTagsAsync(Integer warehouseDocumentTypeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWarehouseDocumentTypeTagsValidateBeforeCall(warehouseDocumentTypeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
