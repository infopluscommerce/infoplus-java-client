/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ExecuteQuickAdjustmentInputAPIModel;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.ProcessOutputAPIModel;
import com.infopluscommerce.model.QuickAdjustment;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QuickAdjustmentApi {
    private ApiClient apiClient;

    public QuickAdjustmentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QuickAdjustmentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addQuickAdjustment
     * @param body QuickAdjustment to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addQuickAdjustmentCall(QuickAdjustment body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/quickAdjustment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addQuickAdjustmentValidateBeforeCall(QuickAdjustment body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addQuickAdjustment(Async)");
        }
        

        com.squareup.okhttp.Call call = addQuickAdjustmentCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a quickAdjustment
     * Inserts a new quickAdjustment using the specified data.
     * @param body QuickAdjustment to be inserted. (required)
     * @return QuickAdjustment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QuickAdjustment addQuickAdjustment(QuickAdjustment body) throws ApiException {
        ApiResponse<QuickAdjustment> resp = addQuickAdjustmentWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a quickAdjustment
     * Inserts a new quickAdjustment using the specified data.
     * @param body QuickAdjustment to be inserted. (required)
     * @return ApiResponse&lt;QuickAdjustment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QuickAdjustment> addQuickAdjustmentWithHttpInfo(QuickAdjustment body) throws ApiException {
        com.squareup.okhttp.Call call = addQuickAdjustmentValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<QuickAdjustment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a quickAdjustment (asynchronously)
     * Inserts a new quickAdjustment using the specified data.
     * @param body QuickAdjustment to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addQuickAdjustmentAsync(QuickAdjustment body, final ApiCallback<QuickAdjustment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addQuickAdjustmentValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QuickAdjustment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addQuickAdjustmentAudit
     * @param quickAdjustmentId Id of the quickAdjustment to add an audit to (required)
     * @param quickAdjustmentAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addQuickAdjustmentAuditCall(Integer quickAdjustmentId, String quickAdjustmentAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}/audit/{quickAdjustmentAudit}"
            .replaceAll("\\{" + "quickAdjustmentId" + "\\}", apiClient.escapeString(quickAdjustmentId.toString()))
            .replaceAll("\\{" + "quickAdjustmentAudit" + "\\}", apiClient.escapeString(quickAdjustmentAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addQuickAdjustmentAuditValidateBeforeCall(Integer quickAdjustmentId, String quickAdjustmentAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quickAdjustmentId' is set
        if (quickAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'quickAdjustmentId' when calling addQuickAdjustmentAudit(Async)");
        }
        
        // verify the required parameter 'quickAdjustmentAudit' is set
        if (quickAdjustmentAudit == null) {
            throw new ApiException("Missing the required parameter 'quickAdjustmentAudit' when calling addQuickAdjustmentAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addQuickAdjustmentAuditCall(quickAdjustmentId, quickAdjustmentAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a quickAdjustment
     * Adds an audit to an existing quickAdjustment.
     * @param quickAdjustmentId Id of the quickAdjustment to add an audit to (required)
     * @param quickAdjustmentAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addQuickAdjustmentAudit(Integer quickAdjustmentId, String quickAdjustmentAudit) throws ApiException {
        addQuickAdjustmentAuditWithHttpInfo(quickAdjustmentId, quickAdjustmentAudit);
    }

    /**
     * Add new audit for a quickAdjustment
     * Adds an audit to an existing quickAdjustment.
     * @param quickAdjustmentId Id of the quickAdjustment to add an audit to (required)
     * @param quickAdjustmentAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addQuickAdjustmentAuditWithHttpInfo(Integer quickAdjustmentId, String quickAdjustmentAudit) throws ApiException {
        com.squareup.okhttp.Call call = addQuickAdjustmentAuditValidateBeforeCall(quickAdjustmentId, quickAdjustmentAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a quickAdjustment (asynchronously)
     * Adds an audit to an existing quickAdjustment.
     * @param quickAdjustmentId Id of the quickAdjustment to add an audit to (required)
     * @param quickAdjustmentAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addQuickAdjustmentAuditAsync(Integer quickAdjustmentId, String quickAdjustmentAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addQuickAdjustmentAuditValidateBeforeCall(quickAdjustmentId, quickAdjustmentAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addQuickAdjustmentFile
     * @param quickAdjustmentId Id of the quickAdjustment to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addQuickAdjustmentFileCall(Integer quickAdjustmentId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}/file/{fileName}"
            .replaceAll("\\{" + "quickAdjustmentId" + "\\}", apiClient.escapeString(quickAdjustmentId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addQuickAdjustmentFileValidateBeforeCall(Integer quickAdjustmentId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quickAdjustmentId' is set
        if (quickAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'quickAdjustmentId' when calling addQuickAdjustmentFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addQuickAdjustmentFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addQuickAdjustmentFileCall(quickAdjustmentId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a quickAdjustment
     * Adds a file to an existing quickAdjustment.
     * @param quickAdjustmentId Id of the quickAdjustment to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addQuickAdjustmentFile(Integer quickAdjustmentId, String fileName) throws ApiException {
        addQuickAdjustmentFileWithHttpInfo(quickAdjustmentId, fileName);
    }

    /**
     * Attach a file to a quickAdjustment
     * Adds a file to an existing quickAdjustment.
     * @param quickAdjustmentId Id of the quickAdjustment to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addQuickAdjustmentFileWithHttpInfo(Integer quickAdjustmentId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addQuickAdjustmentFileValidateBeforeCall(quickAdjustmentId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a quickAdjustment (asynchronously)
     * Adds a file to an existing quickAdjustment.
     * @param quickAdjustmentId Id of the quickAdjustment to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addQuickAdjustmentFileAsync(Integer quickAdjustmentId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addQuickAdjustmentFileValidateBeforeCall(quickAdjustmentId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addQuickAdjustmentFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param quickAdjustmentId Id of the quickAdjustment to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addQuickAdjustmentFileByURLCall(RecordFile body, Integer quickAdjustmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}/file"
            .replaceAll("\\{" + "quickAdjustmentId" + "\\}", apiClient.escapeString(quickAdjustmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addQuickAdjustmentFileByURLValidateBeforeCall(RecordFile body, Integer quickAdjustmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addQuickAdjustmentFileByURL(Async)");
        }
        
        // verify the required parameter 'quickAdjustmentId' is set
        if (quickAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'quickAdjustmentId' when calling addQuickAdjustmentFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addQuickAdjustmentFileByURLCall(body, quickAdjustmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a quickAdjustment by URL.
     * Adds a file to an existing quickAdjustment by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param quickAdjustmentId Id of the quickAdjustment to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addQuickAdjustmentFileByURL(RecordFile body, Integer quickAdjustmentId) throws ApiException {
        addQuickAdjustmentFileByURLWithHttpInfo(body, quickAdjustmentId);
    }

    /**
     * Attach a file to a quickAdjustment by URL.
     * Adds a file to an existing quickAdjustment by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param quickAdjustmentId Id of the quickAdjustment to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addQuickAdjustmentFileByURLWithHttpInfo(RecordFile body, Integer quickAdjustmentId) throws ApiException {
        com.squareup.okhttp.Call call = addQuickAdjustmentFileByURLValidateBeforeCall(body, quickAdjustmentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a quickAdjustment by URL. (asynchronously)
     * Adds a file to an existing quickAdjustment by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param quickAdjustmentId Id of the quickAdjustment to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addQuickAdjustmentFileByURLAsync(RecordFile body, Integer quickAdjustmentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addQuickAdjustmentFileByURLValidateBeforeCall(body, quickAdjustmentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addQuickAdjustmentTag
     * @param quickAdjustmentId Id of the quickAdjustment to add a tag to (required)
     * @param quickAdjustmentTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addQuickAdjustmentTagCall(Integer quickAdjustmentId, String quickAdjustmentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}/tag/{quickAdjustmentTag}"
            .replaceAll("\\{" + "quickAdjustmentId" + "\\}", apiClient.escapeString(quickAdjustmentId.toString()))
            .replaceAll("\\{" + "quickAdjustmentTag" + "\\}", apiClient.escapeString(quickAdjustmentTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addQuickAdjustmentTagValidateBeforeCall(Integer quickAdjustmentId, String quickAdjustmentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quickAdjustmentId' is set
        if (quickAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'quickAdjustmentId' when calling addQuickAdjustmentTag(Async)");
        }
        
        // verify the required parameter 'quickAdjustmentTag' is set
        if (quickAdjustmentTag == null) {
            throw new ApiException("Missing the required parameter 'quickAdjustmentTag' when calling addQuickAdjustmentTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addQuickAdjustmentTagCall(quickAdjustmentId, quickAdjustmentTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a quickAdjustment.
     * Adds a tag to an existing quickAdjustment.
     * @param quickAdjustmentId Id of the quickAdjustment to add a tag to (required)
     * @param quickAdjustmentTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addQuickAdjustmentTag(Integer quickAdjustmentId, String quickAdjustmentTag) throws ApiException {
        addQuickAdjustmentTagWithHttpInfo(quickAdjustmentId, quickAdjustmentTag);
    }

    /**
     * Add new tags for a quickAdjustment.
     * Adds a tag to an existing quickAdjustment.
     * @param quickAdjustmentId Id of the quickAdjustment to add a tag to (required)
     * @param quickAdjustmentTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addQuickAdjustmentTagWithHttpInfo(Integer quickAdjustmentId, String quickAdjustmentTag) throws ApiException {
        com.squareup.okhttp.Call call = addQuickAdjustmentTagValidateBeforeCall(quickAdjustmentId, quickAdjustmentTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a quickAdjustment. (asynchronously)
     * Adds a tag to an existing quickAdjustment.
     * @param quickAdjustmentId Id of the quickAdjustment to add a tag to (required)
     * @param quickAdjustmentTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addQuickAdjustmentTagAsync(Integer quickAdjustmentId, String quickAdjustmentTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addQuickAdjustmentTagValidateBeforeCall(quickAdjustmentId, quickAdjustmentTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteQuickAdjustment
     * @param quickAdjustmentId Id of the quickAdjustment to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteQuickAdjustmentCall(Integer quickAdjustmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}"
            .replaceAll("\\{" + "quickAdjustmentId" + "\\}", apiClient.escapeString(quickAdjustmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteQuickAdjustmentValidateBeforeCall(Integer quickAdjustmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quickAdjustmentId' is set
        if (quickAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'quickAdjustmentId' when calling deleteQuickAdjustment(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteQuickAdjustmentCall(quickAdjustmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a quickAdjustment
     * Deletes the quickAdjustment identified by the specified id.
     * @param quickAdjustmentId Id of the quickAdjustment to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteQuickAdjustment(Integer quickAdjustmentId) throws ApiException {
        deleteQuickAdjustmentWithHttpInfo(quickAdjustmentId);
    }

    /**
     * Delete a quickAdjustment
     * Deletes the quickAdjustment identified by the specified id.
     * @param quickAdjustmentId Id of the quickAdjustment to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteQuickAdjustmentWithHttpInfo(Integer quickAdjustmentId) throws ApiException {
        com.squareup.okhttp.Call call = deleteQuickAdjustmentValidateBeforeCall(quickAdjustmentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a quickAdjustment (asynchronously)
     * Deletes the quickAdjustment identified by the specified id.
     * @param quickAdjustmentId Id of the quickAdjustment to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteQuickAdjustmentAsync(Integer quickAdjustmentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteQuickAdjustmentValidateBeforeCall(quickAdjustmentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteQuickAdjustmentFile
     * @param quickAdjustmentId Id of the quickAdjustment to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteQuickAdjustmentFileCall(Integer quickAdjustmentId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}/file/{fileId}"
            .replaceAll("\\{" + "quickAdjustmentId" + "\\}", apiClient.escapeString(quickAdjustmentId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteQuickAdjustmentFileValidateBeforeCall(Integer quickAdjustmentId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quickAdjustmentId' is set
        if (quickAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'quickAdjustmentId' when calling deleteQuickAdjustmentFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteQuickAdjustmentFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteQuickAdjustmentFileCall(quickAdjustmentId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a quickAdjustment.
     * Deletes an existing quickAdjustment file using the specified data.
     * @param quickAdjustmentId Id of the quickAdjustment to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteQuickAdjustmentFile(Integer quickAdjustmentId, Integer fileId) throws ApiException {
        deleteQuickAdjustmentFileWithHttpInfo(quickAdjustmentId, fileId);
    }

    /**
     * Delete a file for a quickAdjustment.
     * Deletes an existing quickAdjustment file using the specified data.
     * @param quickAdjustmentId Id of the quickAdjustment to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteQuickAdjustmentFileWithHttpInfo(Integer quickAdjustmentId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteQuickAdjustmentFileValidateBeforeCall(quickAdjustmentId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a quickAdjustment. (asynchronously)
     * Deletes an existing quickAdjustment file using the specified data.
     * @param quickAdjustmentId Id of the quickAdjustment to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteQuickAdjustmentFileAsync(Integer quickAdjustmentId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteQuickAdjustmentFileValidateBeforeCall(quickAdjustmentId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteQuickAdjustmentTag
     * @param quickAdjustmentId Id of the quickAdjustment to remove tag from (required)
     * @param quickAdjustmentTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteQuickAdjustmentTagCall(Integer quickAdjustmentId, String quickAdjustmentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}/tag/{quickAdjustmentTag}"
            .replaceAll("\\{" + "quickAdjustmentId" + "\\}", apiClient.escapeString(quickAdjustmentId.toString()))
            .replaceAll("\\{" + "quickAdjustmentTag" + "\\}", apiClient.escapeString(quickAdjustmentTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteQuickAdjustmentTagValidateBeforeCall(Integer quickAdjustmentId, String quickAdjustmentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quickAdjustmentId' is set
        if (quickAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'quickAdjustmentId' when calling deleteQuickAdjustmentTag(Async)");
        }
        
        // verify the required parameter 'quickAdjustmentTag' is set
        if (quickAdjustmentTag == null) {
            throw new ApiException("Missing the required parameter 'quickAdjustmentTag' when calling deleteQuickAdjustmentTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteQuickAdjustmentTagCall(quickAdjustmentId, quickAdjustmentTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a quickAdjustment.
     * Deletes an existing quickAdjustment tag using the specified data.
     * @param quickAdjustmentId Id of the quickAdjustment to remove tag from (required)
     * @param quickAdjustmentTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteQuickAdjustmentTag(Integer quickAdjustmentId, String quickAdjustmentTag) throws ApiException {
        deleteQuickAdjustmentTagWithHttpInfo(quickAdjustmentId, quickAdjustmentTag);
    }

    /**
     * Delete a tag for a quickAdjustment.
     * Deletes an existing quickAdjustment tag using the specified data.
     * @param quickAdjustmentId Id of the quickAdjustment to remove tag from (required)
     * @param quickAdjustmentTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteQuickAdjustmentTagWithHttpInfo(Integer quickAdjustmentId, String quickAdjustmentTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteQuickAdjustmentTagValidateBeforeCall(quickAdjustmentId, quickAdjustmentTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a quickAdjustment. (asynchronously)
     * Deletes an existing quickAdjustment tag using the specified data.
     * @param quickAdjustmentId Id of the quickAdjustment to remove tag from (required)
     * @param quickAdjustmentTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteQuickAdjustmentTagAsync(Integer quickAdjustmentId, String quickAdjustmentTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteQuickAdjustmentTagValidateBeforeCall(quickAdjustmentId, quickAdjustmentTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for executeQuickAdjustment
     * @param body Input data for ExecuteQuickAdjustment process. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeQuickAdjustmentCall(ExecuteQuickAdjustmentInputAPIModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/quickAdjustment/executeQuickAdjustment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call executeQuickAdjustmentValidateBeforeCall(ExecuteQuickAdjustmentInputAPIModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling executeQuickAdjustment(Async)");
        }
        

        com.squareup.okhttp.Call call = executeQuickAdjustmentCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Run the ExecuteQuickAdjustment process.
     * 
     * @param body Input data for ExecuteQuickAdjustment process. (required)
     * @return List&lt;ProcessOutputAPIModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ProcessOutputAPIModel> executeQuickAdjustment(ExecuteQuickAdjustmentInputAPIModel body) throws ApiException {
        ApiResponse<List<ProcessOutputAPIModel>> resp = executeQuickAdjustmentWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Run the ExecuteQuickAdjustment process.
     * 
     * @param body Input data for ExecuteQuickAdjustment process. (required)
     * @return ApiResponse&lt;List&lt;ProcessOutputAPIModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ProcessOutputAPIModel>> executeQuickAdjustmentWithHttpInfo(ExecuteQuickAdjustmentInputAPIModel body) throws ApiException {
        com.squareup.okhttp.Call call = executeQuickAdjustmentValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<List<ProcessOutputAPIModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Run the ExecuteQuickAdjustment process. (asynchronously)
     * 
     * @param body Input data for ExecuteQuickAdjustment process. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeQuickAdjustmentAsync(ExecuteQuickAdjustmentInputAPIModel body, final ApiCallback<List<ProcessOutputAPIModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeQuickAdjustmentValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ProcessOutputAPIModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDuplicateQuickAdjustmentById
     * @param quickAdjustmentId Id of the quickAdjustment to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateQuickAdjustmentByIdCall(Integer quickAdjustmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/quickAdjustment/duplicate/{quickAdjustmentId}"
            .replaceAll("\\{" + "quickAdjustmentId" + "\\}", apiClient.escapeString(quickAdjustmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateQuickAdjustmentByIdValidateBeforeCall(Integer quickAdjustmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quickAdjustmentId' is set
        if (quickAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'quickAdjustmentId' when calling getDuplicateQuickAdjustmentById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateQuickAdjustmentByIdCall(quickAdjustmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a quickAdjustment by id
     * Returns a duplicated quickAdjustment identified by the specified id.
     * @param quickAdjustmentId Id of the quickAdjustment to be duplicated. (required)
     * @return QuickAdjustment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QuickAdjustment getDuplicateQuickAdjustmentById(Integer quickAdjustmentId) throws ApiException {
        ApiResponse<QuickAdjustment> resp = getDuplicateQuickAdjustmentByIdWithHttpInfo(quickAdjustmentId);
        return resp.getData();
    }

    /**
     * Get a duplicated a quickAdjustment by id
     * Returns a duplicated quickAdjustment identified by the specified id.
     * @param quickAdjustmentId Id of the quickAdjustment to be duplicated. (required)
     * @return ApiResponse&lt;QuickAdjustment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QuickAdjustment> getDuplicateQuickAdjustmentByIdWithHttpInfo(Integer quickAdjustmentId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateQuickAdjustmentByIdValidateBeforeCall(quickAdjustmentId, null, null);
        Type localVarReturnType = new TypeToken<QuickAdjustment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a quickAdjustment by id (asynchronously)
     * Returns a duplicated quickAdjustment identified by the specified id.
     * @param quickAdjustmentId Id of the quickAdjustment to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateQuickAdjustmentByIdAsync(Integer quickAdjustmentId, final ApiCallback<QuickAdjustment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateQuickAdjustmentByIdValidateBeforeCall(quickAdjustmentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QuickAdjustment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getQuickAdjustmentByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getQuickAdjustmentByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/quickAdjustment/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQuickAdjustmentByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getQuickAdjustmentByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search quickAdjustments by filter
     * Returns the list of quickAdjustments that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;QuickAdjustment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<QuickAdjustment> getQuickAdjustmentByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<QuickAdjustment>> resp = getQuickAdjustmentByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search quickAdjustments by filter
     * Returns the list of quickAdjustments that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;QuickAdjustment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<QuickAdjustment>> getQuickAdjustmentByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getQuickAdjustmentByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<QuickAdjustment>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search quickAdjustments by filter (asynchronously)
     * Returns the list of quickAdjustments that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQuickAdjustmentByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<QuickAdjustment>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuickAdjustmentByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<QuickAdjustment>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getQuickAdjustmentById
     * @param quickAdjustmentId Id of the quickAdjustment to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getQuickAdjustmentByIdCall(Integer quickAdjustmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}"
            .replaceAll("\\{" + "quickAdjustmentId" + "\\}", apiClient.escapeString(quickAdjustmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQuickAdjustmentByIdValidateBeforeCall(Integer quickAdjustmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quickAdjustmentId' is set
        if (quickAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'quickAdjustmentId' when calling getQuickAdjustmentById(Async)");
        }
        

        com.squareup.okhttp.Call call = getQuickAdjustmentByIdCall(quickAdjustmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a quickAdjustment by id
     * Returns the quickAdjustment identified by the specified id.
     * @param quickAdjustmentId Id of the quickAdjustment to be returned. (required)
     * @return QuickAdjustment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QuickAdjustment getQuickAdjustmentById(Integer quickAdjustmentId) throws ApiException {
        ApiResponse<QuickAdjustment> resp = getQuickAdjustmentByIdWithHttpInfo(quickAdjustmentId);
        return resp.getData();
    }

    /**
     * Get a quickAdjustment by id
     * Returns the quickAdjustment identified by the specified id.
     * @param quickAdjustmentId Id of the quickAdjustment to be returned. (required)
     * @return ApiResponse&lt;QuickAdjustment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QuickAdjustment> getQuickAdjustmentByIdWithHttpInfo(Integer quickAdjustmentId) throws ApiException {
        com.squareup.okhttp.Call call = getQuickAdjustmentByIdValidateBeforeCall(quickAdjustmentId, null, null);
        Type localVarReturnType = new TypeToken<QuickAdjustment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a quickAdjustment by id (asynchronously)
     * Returns the quickAdjustment identified by the specified id.
     * @param quickAdjustmentId Id of the quickAdjustment to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQuickAdjustmentByIdAsync(Integer quickAdjustmentId, final ApiCallback<QuickAdjustment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuickAdjustmentByIdValidateBeforeCall(quickAdjustmentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QuickAdjustment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getQuickAdjustmentFiles
     * @param quickAdjustmentId Id of the quickAdjustment to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getQuickAdjustmentFilesCall(Integer quickAdjustmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}/file"
            .replaceAll("\\{" + "quickAdjustmentId" + "\\}", apiClient.escapeString(quickAdjustmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQuickAdjustmentFilesValidateBeforeCall(Integer quickAdjustmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quickAdjustmentId' is set
        if (quickAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'quickAdjustmentId' when calling getQuickAdjustmentFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getQuickAdjustmentFilesCall(quickAdjustmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a quickAdjustment.
     * Get all existing quickAdjustment files.
     * @param quickAdjustmentId Id of the quickAdjustment to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getQuickAdjustmentFiles(Integer quickAdjustmentId) throws ApiException {
        getQuickAdjustmentFilesWithHttpInfo(quickAdjustmentId);
    }

    /**
     * Get the files for a quickAdjustment.
     * Get all existing quickAdjustment files.
     * @param quickAdjustmentId Id of the quickAdjustment to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getQuickAdjustmentFilesWithHttpInfo(Integer quickAdjustmentId) throws ApiException {
        com.squareup.okhttp.Call call = getQuickAdjustmentFilesValidateBeforeCall(quickAdjustmentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a quickAdjustment. (asynchronously)
     * Get all existing quickAdjustment files.
     * @param quickAdjustmentId Id of the quickAdjustment to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQuickAdjustmentFilesAsync(Integer quickAdjustmentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuickAdjustmentFilesValidateBeforeCall(quickAdjustmentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getQuickAdjustmentTags
     * @param quickAdjustmentId Id of the quickAdjustment to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getQuickAdjustmentTagsCall(Integer quickAdjustmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/quickAdjustment/{quickAdjustmentId}/tag"
            .replaceAll("\\{" + "quickAdjustmentId" + "\\}", apiClient.escapeString(quickAdjustmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQuickAdjustmentTagsValidateBeforeCall(Integer quickAdjustmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quickAdjustmentId' is set
        if (quickAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'quickAdjustmentId' when calling getQuickAdjustmentTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getQuickAdjustmentTagsCall(quickAdjustmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a quickAdjustment.
     * Get all existing quickAdjustment tags.
     * @param quickAdjustmentId Id of the quickAdjustment to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getQuickAdjustmentTags(Integer quickAdjustmentId) throws ApiException {
        getQuickAdjustmentTagsWithHttpInfo(quickAdjustmentId);
    }

    /**
     * Get the tags for a quickAdjustment.
     * Get all existing quickAdjustment tags.
     * @param quickAdjustmentId Id of the quickAdjustment to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getQuickAdjustmentTagsWithHttpInfo(Integer quickAdjustmentId) throws ApiException {
        com.squareup.okhttp.Call call = getQuickAdjustmentTagsValidateBeforeCall(quickAdjustmentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a quickAdjustment. (asynchronously)
     * Get all existing quickAdjustment tags.
     * @param quickAdjustmentId Id of the quickAdjustment to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQuickAdjustmentTagsAsync(Integer quickAdjustmentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuickAdjustmentTagsValidateBeforeCall(quickAdjustmentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateQuickAdjustment
     * @param body QuickAdjustment to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateQuickAdjustmentCall(QuickAdjustment body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/quickAdjustment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateQuickAdjustmentValidateBeforeCall(QuickAdjustment body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateQuickAdjustment(Async)");
        }
        

        com.squareup.okhttp.Call call = updateQuickAdjustmentCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a quickAdjustment
     * Updates an existing quickAdjustment using the specified data.
     * @param body QuickAdjustment to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateQuickAdjustment(QuickAdjustment body) throws ApiException {
        updateQuickAdjustmentWithHttpInfo(body);
    }

    /**
     * Update a quickAdjustment
     * Updates an existing quickAdjustment using the specified data.
     * @param body QuickAdjustment to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateQuickAdjustmentWithHttpInfo(QuickAdjustment body) throws ApiException {
        com.squareup.okhttp.Call call = updateQuickAdjustmentValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a quickAdjustment (asynchronously)
     * Updates an existing quickAdjustment using the specified data.
     * @param body QuickAdjustment to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateQuickAdjustmentAsync(QuickAdjustment body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateQuickAdjustmentValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateQuickAdjustmentCustomFields
     * @param body QuickAdjustment to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateQuickAdjustmentCustomFieldsCall(QuickAdjustment body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/quickAdjustment/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateQuickAdjustmentCustomFieldsValidateBeforeCall(QuickAdjustment body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateQuickAdjustmentCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateQuickAdjustmentCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a quickAdjustment custom fields
     * Updates an existing quickAdjustment custom fields using the specified data.
     * @param body QuickAdjustment to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateQuickAdjustmentCustomFields(QuickAdjustment body) throws ApiException {
        updateQuickAdjustmentCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a quickAdjustment custom fields
     * Updates an existing quickAdjustment custom fields using the specified data.
     * @param body QuickAdjustment to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateQuickAdjustmentCustomFieldsWithHttpInfo(QuickAdjustment body) throws ApiException {
        com.squareup.okhttp.Call call = updateQuickAdjustmentCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a quickAdjustment custom fields (asynchronously)
     * Updates an existing quickAdjustment custom fields using the specified data.
     * @param body QuickAdjustment to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateQuickAdjustmentCustomFieldsAsync(QuickAdjustment body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateQuickAdjustmentCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
