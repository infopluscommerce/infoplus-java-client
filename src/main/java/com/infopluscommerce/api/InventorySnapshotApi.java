/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.InventorySnapshot;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InventorySnapshotApi {
    private ApiClient apiClient;

    public InventorySnapshotApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InventorySnapshotApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addInventorySnapshotAudit
     * @param inventorySnapshotId Id of the inventorySnapshot to add an audit to (required)
     * @param inventorySnapshotAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInventorySnapshotAuditCall(Integer inventorySnapshotId, String inventorySnapshotAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventorySnapshot/{inventorySnapshotId}/audit/{inventorySnapshotAudit}"
            .replaceAll("\\{" + "inventorySnapshotId" + "\\}", apiClient.escapeString(inventorySnapshotId.toString()))
            .replaceAll("\\{" + "inventorySnapshotAudit" + "\\}", apiClient.escapeString(inventorySnapshotAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInventorySnapshotAuditValidateBeforeCall(Integer inventorySnapshotId, String inventorySnapshotAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventorySnapshotId' is set
        if (inventorySnapshotId == null) {
            throw new ApiException("Missing the required parameter 'inventorySnapshotId' when calling addInventorySnapshotAudit(Async)");
        }
        
        // verify the required parameter 'inventorySnapshotAudit' is set
        if (inventorySnapshotAudit == null) {
            throw new ApiException("Missing the required parameter 'inventorySnapshotAudit' when calling addInventorySnapshotAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addInventorySnapshotAuditCall(inventorySnapshotId, inventorySnapshotAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for an inventorySnapshot
     * Adds an audit to an existing inventorySnapshot.
     * @param inventorySnapshotId Id of the inventorySnapshot to add an audit to (required)
     * @param inventorySnapshotAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addInventorySnapshotAudit(Integer inventorySnapshotId, String inventorySnapshotAudit) throws ApiException {
        addInventorySnapshotAuditWithHttpInfo(inventorySnapshotId, inventorySnapshotAudit);
    }

    /**
     * Add new audit for an inventorySnapshot
     * Adds an audit to an existing inventorySnapshot.
     * @param inventorySnapshotId Id of the inventorySnapshot to add an audit to (required)
     * @param inventorySnapshotAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addInventorySnapshotAuditWithHttpInfo(Integer inventorySnapshotId, String inventorySnapshotAudit) throws ApiException {
        com.squareup.okhttp.Call call = addInventorySnapshotAuditValidateBeforeCall(inventorySnapshotId, inventorySnapshotAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for an inventorySnapshot (asynchronously)
     * Adds an audit to an existing inventorySnapshot.
     * @param inventorySnapshotId Id of the inventorySnapshot to add an audit to (required)
     * @param inventorySnapshotAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInventorySnapshotAuditAsync(Integer inventorySnapshotId, String inventorySnapshotAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInventorySnapshotAuditValidateBeforeCall(inventorySnapshotId, inventorySnapshotAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addInventorySnapshotFile
     * @param inventorySnapshotId Id of the inventorySnapshot to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInventorySnapshotFileCall(Integer inventorySnapshotId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventorySnapshot/{inventorySnapshotId}/file/{fileName}"
            .replaceAll("\\{" + "inventorySnapshotId" + "\\}", apiClient.escapeString(inventorySnapshotId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInventorySnapshotFileValidateBeforeCall(Integer inventorySnapshotId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventorySnapshotId' is set
        if (inventorySnapshotId == null) {
            throw new ApiException("Missing the required parameter 'inventorySnapshotId' when calling addInventorySnapshotFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addInventorySnapshotFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addInventorySnapshotFileCall(inventorySnapshotId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an inventorySnapshot
     * Adds a file to an existing inventorySnapshot.
     * @param inventorySnapshotId Id of the inventorySnapshot to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addInventorySnapshotFile(Integer inventorySnapshotId, String fileName) throws ApiException {
        addInventorySnapshotFileWithHttpInfo(inventorySnapshotId, fileName);
    }

    /**
     * Attach a file to an inventorySnapshot
     * Adds a file to an existing inventorySnapshot.
     * @param inventorySnapshotId Id of the inventorySnapshot to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addInventorySnapshotFileWithHttpInfo(Integer inventorySnapshotId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addInventorySnapshotFileValidateBeforeCall(inventorySnapshotId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an inventorySnapshot (asynchronously)
     * Adds a file to an existing inventorySnapshot.
     * @param inventorySnapshotId Id of the inventorySnapshot to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInventorySnapshotFileAsync(Integer inventorySnapshotId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInventorySnapshotFileValidateBeforeCall(inventorySnapshotId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addInventorySnapshotFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param inventorySnapshotId Id of the inventorySnapshot to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInventorySnapshotFileByURLCall(RecordFile body, Integer inventorySnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/inventorySnapshot/{inventorySnapshotId}/file"
            .replaceAll("\\{" + "inventorySnapshotId" + "\\}", apiClient.escapeString(inventorySnapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInventorySnapshotFileByURLValidateBeforeCall(RecordFile body, Integer inventorySnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addInventorySnapshotFileByURL(Async)");
        }
        
        // verify the required parameter 'inventorySnapshotId' is set
        if (inventorySnapshotId == null) {
            throw new ApiException("Missing the required parameter 'inventorySnapshotId' when calling addInventorySnapshotFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addInventorySnapshotFileByURLCall(body, inventorySnapshotId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an inventorySnapshot by URL.
     * Adds a file to an existing inventorySnapshot by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param inventorySnapshotId Id of the inventorySnapshot to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addInventorySnapshotFileByURL(RecordFile body, Integer inventorySnapshotId) throws ApiException {
        addInventorySnapshotFileByURLWithHttpInfo(body, inventorySnapshotId);
    }

    /**
     * Attach a file to an inventorySnapshot by URL.
     * Adds a file to an existing inventorySnapshot by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param inventorySnapshotId Id of the inventorySnapshot to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addInventorySnapshotFileByURLWithHttpInfo(RecordFile body, Integer inventorySnapshotId) throws ApiException {
        com.squareup.okhttp.Call call = addInventorySnapshotFileByURLValidateBeforeCall(body, inventorySnapshotId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an inventorySnapshot by URL. (asynchronously)
     * Adds a file to an existing inventorySnapshot by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param inventorySnapshotId Id of the inventorySnapshot to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInventorySnapshotFileByURLAsync(RecordFile body, Integer inventorySnapshotId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInventorySnapshotFileByURLValidateBeforeCall(body, inventorySnapshotId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addInventorySnapshotTag
     * @param inventorySnapshotId Id of the inventorySnapshot to add a tag to (required)
     * @param inventorySnapshotTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInventorySnapshotTagCall(Integer inventorySnapshotId, String inventorySnapshotTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventorySnapshot/{inventorySnapshotId}/tag/{inventorySnapshotTag}"
            .replaceAll("\\{" + "inventorySnapshotId" + "\\}", apiClient.escapeString(inventorySnapshotId.toString()))
            .replaceAll("\\{" + "inventorySnapshotTag" + "\\}", apiClient.escapeString(inventorySnapshotTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInventorySnapshotTagValidateBeforeCall(Integer inventorySnapshotId, String inventorySnapshotTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventorySnapshotId' is set
        if (inventorySnapshotId == null) {
            throw new ApiException("Missing the required parameter 'inventorySnapshotId' when calling addInventorySnapshotTag(Async)");
        }
        
        // verify the required parameter 'inventorySnapshotTag' is set
        if (inventorySnapshotTag == null) {
            throw new ApiException("Missing the required parameter 'inventorySnapshotTag' when calling addInventorySnapshotTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addInventorySnapshotTagCall(inventorySnapshotId, inventorySnapshotTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for an inventorySnapshot.
     * Adds a tag to an existing inventorySnapshot.
     * @param inventorySnapshotId Id of the inventorySnapshot to add a tag to (required)
     * @param inventorySnapshotTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addInventorySnapshotTag(Integer inventorySnapshotId, String inventorySnapshotTag) throws ApiException {
        addInventorySnapshotTagWithHttpInfo(inventorySnapshotId, inventorySnapshotTag);
    }

    /**
     * Add new tags for an inventorySnapshot.
     * Adds a tag to an existing inventorySnapshot.
     * @param inventorySnapshotId Id of the inventorySnapshot to add a tag to (required)
     * @param inventorySnapshotTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addInventorySnapshotTagWithHttpInfo(Integer inventorySnapshotId, String inventorySnapshotTag) throws ApiException {
        com.squareup.okhttp.Call call = addInventorySnapshotTagValidateBeforeCall(inventorySnapshotId, inventorySnapshotTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for an inventorySnapshot. (asynchronously)
     * Adds a tag to an existing inventorySnapshot.
     * @param inventorySnapshotId Id of the inventorySnapshot to add a tag to (required)
     * @param inventorySnapshotTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInventorySnapshotTagAsync(Integer inventorySnapshotId, String inventorySnapshotTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInventorySnapshotTagValidateBeforeCall(inventorySnapshotId, inventorySnapshotTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteInventorySnapshotFile
     * @param inventorySnapshotId Id of the inventorySnapshot to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteInventorySnapshotFileCall(Integer inventorySnapshotId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventorySnapshot/{inventorySnapshotId}/file/{fileId}"
            .replaceAll("\\{" + "inventorySnapshotId" + "\\}", apiClient.escapeString(inventorySnapshotId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteInventorySnapshotFileValidateBeforeCall(Integer inventorySnapshotId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventorySnapshotId' is set
        if (inventorySnapshotId == null) {
            throw new ApiException("Missing the required parameter 'inventorySnapshotId' when calling deleteInventorySnapshotFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteInventorySnapshotFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteInventorySnapshotFileCall(inventorySnapshotId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for an inventorySnapshot.
     * Deletes an existing inventorySnapshot file using the specified data.
     * @param inventorySnapshotId Id of the inventorySnapshot to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteInventorySnapshotFile(Integer inventorySnapshotId, Integer fileId) throws ApiException {
        deleteInventorySnapshotFileWithHttpInfo(inventorySnapshotId, fileId);
    }

    /**
     * Delete a file for an inventorySnapshot.
     * Deletes an existing inventorySnapshot file using the specified data.
     * @param inventorySnapshotId Id of the inventorySnapshot to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteInventorySnapshotFileWithHttpInfo(Integer inventorySnapshotId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteInventorySnapshotFileValidateBeforeCall(inventorySnapshotId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for an inventorySnapshot. (asynchronously)
     * Deletes an existing inventorySnapshot file using the specified data.
     * @param inventorySnapshotId Id of the inventorySnapshot to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInventorySnapshotFileAsync(Integer inventorySnapshotId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInventorySnapshotFileValidateBeforeCall(inventorySnapshotId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteInventorySnapshotTag
     * @param inventorySnapshotId Id of the inventorySnapshot to remove tag from (required)
     * @param inventorySnapshotTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteInventorySnapshotTagCall(Integer inventorySnapshotId, String inventorySnapshotTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventorySnapshot/{inventorySnapshotId}/tag/{inventorySnapshotTag}"
            .replaceAll("\\{" + "inventorySnapshotId" + "\\}", apiClient.escapeString(inventorySnapshotId.toString()))
            .replaceAll("\\{" + "inventorySnapshotTag" + "\\}", apiClient.escapeString(inventorySnapshotTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteInventorySnapshotTagValidateBeforeCall(Integer inventorySnapshotId, String inventorySnapshotTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventorySnapshotId' is set
        if (inventorySnapshotId == null) {
            throw new ApiException("Missing the required parameter 'inventorySnapshotId' when calling deleteInventorySnapshotTag(Async)");
        }
        
        // verify the required parameter 'inventorySnapshotTag' is set
        if (inventorySnapshotTag == null) {
            throw new ApiException("Missing the required parameter 'inventorySnapshotTag' when calling deleteInventorySnapshotTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteInventorySnapshotTagCall(inventorySnapshotId, inventorySnapshotTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for an inventorySnapshot.
     * Deletes an existing inventorySnapshot tag using the specified data.
     * @param inventorySnapshotId Id of the inventorySnapshot to remove tag from (required)
     * @param inventorySnapshotTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteInventorySnapshotTag(Integer inventorySnapshotId, String inventorySnapshotTag) throws ApiException {
        deleteInventorySnapshotTagWithHttpInfo(inventorySnapshotId, inventorySnapshotTag);
    }

    /**
     * Delete a tag for an inventorySnapshot.
     * Deletes an existing inventorySnapshot tag using the specified data.
     * @param inventorySnapshotId Id of the inventorySnapshot to remove tag from (required)
     * @param inventorySnapshotTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteInventorySnapshotTagWithHttpInfo(Integer inventorySnapshotId, String inventorySnapshotTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteInventorySnapshotTagValidateBeforeCall(inventorySnapshotId, inventorySnapshotTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for an inventorySnapshot. (asynchronously)
     * Deletes an existing inventorySnapshot tag using the specified data.
     * @param inventorySnapshotId Id of the inventorySnapshot to remove tag from (required)
     * @param inventorySnapshotTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInventorySnapshotTagAsync(Integer inventorySnapshotId, String inventorySnapshotTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInventorySnapshotTagValidateBeforeCall(inventorySnapshotId, inventorySnapshotTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateInventorySnapshotById
     * @param inventorySnapshotId Id of the inventorySnapshot to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateInventorySnapshotByIdCall(Integer inventorySnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventorySnapshot/duplicate/{inventorySnapshotId}"
            .replaceAll("\\{" + "inventorySnapshotId" + "\\}", apiClient.escapeString(inventorySnapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateInventorySnapshotByIdValidateBeforeCall(Integer inventorySnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventorySnapshotId' is set
        if (inventorySnapshotId == null) {
            throw new ApiException("Missing the required parameter 'inventorySnapshotId' when calling getDuplicateInventorySnapshotById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateInventorySnapshotByIdCall(inventorySnapshotId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated an inventorySnapshot by id
     * Returns a duplicated inventorySnapshot identified by the specified id.
     * @param inventorySnapshotId Id of the inventorySnapshot to be duplicated. (required)
     * @return InventorySnapshot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InventorySnapshot getDuplicateInventorySnapshotById(Integer inventorySnapshotId) throws ApiException {
        ApiResponse<InventorySnapshot> resp = getDuplicateInventorySnapshotByIdWithHttpInfo(inventorySnapshotId);
        return resp.getData();
    }

    /**
     * Get a duplicated an inventorySnapshot by id
     * Returns a duplicated inventorySnapshot identified by the specified id.
     * @param inventorySnapshotId Id of the inventorySnapshot to be duplicated. (required)
     * @return ApiResponse&lt;InventorySnapshot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InventorySnapshot> getDuplicateInventorySnapshotByIdWithHttpInfo(Integer inventorySnapshotId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateInventorySnapshotByIdValidateBeforeCall(inventorySnapshotId, null, null);
        Type localVarReturnType = new TypeToken<InventorySnapshot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated an inventorySnapshot by id (asynchronously)
     * Returns a duplicated inventorySnapshot identified by the specified id.
     * @param inventorySnapshotId Id of the inventorySnapshot to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateInventorySnapshotByIdAsync(Integer inventorySnapshotId, final ApiCallback<InventorySnapshot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateInventorySnapshotByIdValidateBeforeCall(inventorySnapshotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InventorySnapshot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInventorySnapshotByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInventorySnapshotByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventorySnapshot/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInventorySnapshotByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getInventorySnapshotByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search inventorySnapshots by filter
     * Returns the list of inventorySnapshots that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;InventorySnapshot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InventorySnapshot> getInventorySnapshotByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<InventorySnapshot>> resp = getInventorySnapshotByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search inventorySnapshots by filter
     * Returns the list of inventorySnapshots that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;InventorySnapshot&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InventorySnapshot>> getInventorySnapshotByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getInventorySnapshotByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<InventorySnapshot>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search inventorySnapshots by filter (asynchronously)
     * Returns the list of inventorySnapshots that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInventorySnapshotByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<InventorySnapshot>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInventorySnapshotByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InventorySnapshot>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInventorySnapshotById
     * @param inventorySnapshotId Id of the inventorySnapshot to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInventorySnapshotByIdCall(Integer inventorySnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventorySnapshot/{inventorySnapshotId}"
            .replaceAll("\\{" + "inventorySnapshotId" + "\\}", apiClient.escapeString(inventorySnapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInventorySnapshotByIdValidateBeforeCall(Integer inventorySnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventorySnapshotId' is set
        if (inventorySnapshotId == null) {
            throw new ApiException("Missing the required parameter 'inventorySnapshotId' when calling getInventorySnapshotById(Async)");
        }
        

        com.squareup.okhttp.Call call = getInventorySnapshotByIdCall(inventorySnapshotId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an inventorySnapshot by id
     * Returns the inventorySnapshot identified by the specified id.
     * @param inventorySnapshotId Id of the inventorySnapshot to be returned. (required)
     * @return InventorySnapshot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InventorySnapshot getInventorySnapshotById(Integer inventorySnapshotId) throws ApiException {
        ApiResponse<InventorySnapshot> resp = getInventorySnapshotByIdWithHttpInfo(inventorySnapshotId);
        return resp.getData();
    }

    /**
     * Get an inventorySnapshot by id
     * Returns the inventorySnapshot identified by the specified id.
     * @param inventorySnapshotId Id of the inventorySnapshot to be returned. (required)
     * @return ApiResponse&lt;InventorySnapshot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InventorySnapshot> getInventorySnapshotByIdWithHttpInfo(Integer inventorySnapshotId) throws ApiException {
        com.squareup.okhttp.Call call = getInventorySnapshotByIdValidateBeforeCall(inventorySnapshotId, null, null);
        Type localVarReturnType = new TypeToken<InventorySnapshot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an inventorySnapshot by id (asynchronously)
     * Returns the inventorySnapshot identified by the specified id.
     * @param inventorySnapshotId Id of the inventorySnapshot to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInventorySnapshotByIdAsync(Integer inventorySnapshotId, final ApiCallback<InventorySnapshot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInventorySnapshotByIdValidateBeforeCall(inventorySnapshotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InventorySnapshot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInventorySnapshotFiles
     * @param inventorySnapshotId Id of the inventorySnapshot to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInventorySnapshotFilesCall(Integer inventorySnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventorySnapshot/{inventorySnapshotId}/file"
            .replaceAll("\\{" + "inventorySnapshotId" + "\\}", apiClient.escapeString(inventorySnapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInventorySnapshotFilesValidateBeforeCall(Integer inventorySnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventorySnapshotId' is set
        if (inventorySnapshotId == null) {
            throw new ApiException("Missing the required parameter 'inventorySnapshotId' when calling getInventorySnapshotFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getInventorySnapshotFilesCall(inventorySnapshotId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for an inventorySnapshot.
     * Get all existing inventorySnapshot files.
     * @param inventorySnapshotId Id of the inventorySnapshot to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getInventorySnapshotFiles(Integer inventorySnapshotId) throws ApiException {
        getInventorySnapshotFilesWithHttpInfo(inventorySnapshotId);
    }

    /**
     * Get the files for an inventorySnapshot.
     * Get all existing inventorySnapshot files.
     * @param inventorySnapshotId Id of the inventorySnapshot to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getInventorySnapshotFilesWithHttpInfo(Integer inventorySnapshotId) throws ApiException {
        com.squareup.okhttp.Call call = getInventorySnapshotFilesValidateBeforeCall(inventorySnapshotId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for an inventorySnapshot. (asynchronously)
     * Get all existing inventorySnapshot files.
     * @param inventorySnapshotId Id of the inventorySnapshot to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInventorySnapshotFilesAsync(Integer inventorySnapshotId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInventorySnapshotFilesValidateBeforeCall(inventorySnapshotId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getInventorySnapshotTags
     * @param inventorySnapshotId Id of the inventorySnapshot to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInventorySnapshotTagsCall(Integer inventorySnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventorySnapshot/{inventorySnapshotId}/tag"
            .replaceAll("\\{" + "inventorySnapshotId" + "\\}", apiClient.escapeString(inventorySnapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInventorySnapshotTagsValidateBeforeCall(Integer inventorySnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventorySnapshotId' is set
        if (inventorySnapshotId == null) {
            throw new ApiException("Missing the required parameter 'inventorySnapshotId' when calling getInventorySnapshotTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getInventorySnapshotTagsCall(inventorySnapshotId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for an inventorySnapshot.
     * Get all existing inventorySnapshot tags.
     * @param inventorySnapshotId Id of the inventorySnapshot to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getInventorySnapshotTags(Integer inventorySnapshotId) throws ApiException {
        getInventorySnapshotTagsWithHttpInfo(inventorySnapshotId);
    }

    /**
     * Get the tags for an inventorySnapshot.
     * Get all existing inventorySnapshot tags.
     * @param inventorySnapshotId Id of the inventorySnapshot to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getInventorySnapshotTagsWithHttpInfo(Integer inventorySnapshotId) throws ApiException {
        com.squareup.okhttp.Call call = getInventorySnapshotTagsValidateBeforeCall(inventorySnapshotId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for an inventorySnapshot. (asynchronously)
     * Get all existing inventorySnapshot tags.
     * @param inventorySnapshotId Id of the inventorySnapshot to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInventorySnapshotTagsAsync(Integer inventorySnapshotId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInventorySnapshotTagsValidateBeforeCall(inventorySnapshotId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
