/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ItemActivity;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ItemActivityApi {
    private ApiClient apiClient;

    public ItemActivityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ItemActivityApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addItemActivityAudit
     * @param itemActivityId Id of the itemActivity to add an audit to (required)
     * @param itemActivityAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemActivityAuditCall(Integer itemActivityId, String itemActivityAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemActivity/{itemActivityId}/audit/{itemActivityAudit}"
            .replaceAll("\\{" + "itemActivityId" + "\\}", apiClient.escapeString(itemActivityId.toString()))
            .replaceAll("\\{" + "itemActivityAudit" + "\\}", apiClient.escapeString(itemActivityAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemActivityAuditValidateBeforeCall(Integer itemActivityId, String itemActivityAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemActivityId' is set
        if (itemActivityId == null) {
            throw new ApiException("Missing the required parameter 'itemActivityId' when calling addItemActivityAudit(Async)");
        }
        
        // verify the required parameter 'itemActivityAudit' is set
        if (itemActivityAudit == null) {
            throw new ApiException("Missing the required parameter 'itemActivityAudit' when calling addItemActivityAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemActivityAuditCall(itemActivityId, itemActivityAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for an itemActivity
     * Adds an audit to an existing itemActivity.
     * @param itemActivityId Id of the itemActivity to add an audit to (required)
     * @param itemActivityAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemActivityAudit(Integer itemActivityId, String itemActivityAudit) throws ApiException {
        addItemActivityAuditWithHttpInfo(itemActivityId, itemActivityAudit);
    }

    /**
     * Add new audit for an itemActivity
     * Adds an audit to an existing itemActivity.
     * @param itemActivityId Id of the itemActivity to add an audit to (required)
     * @param itemActivityAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemActivityAuditWithHttpInfo(Integer itemActivityId, String itemActivityAudit) throws ApiException {
        com.squareup.okhttp.Call call = addItemActivityAuditValidateBeforeCall(itemActivityId, itemActivityAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for an itemActivity (asynchronously)
     * Adds an audit to an existing itemActivity.
     * @param itemActivityId Id of the itemActivity to add an audit to (required)
     * @param itemActivityAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemActivityAuditAsync(Integer itemActivityId, String itemActivityAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemActivityAuditValidateBeforeCall(itemActivityId, itemActivityAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemActivityFile
     * @param itemActivityId Id of the itemActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemActivityFileCall(Integer itemActivityId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemActivity/{itemActivityId}/file/{fileName}"
            .replaceAll("\\{" + "itemActivityId" + "\\}", apiClient.escapeString(itemActivityId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemActivityFileValidateBeforeCall(Integer itemActivityId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemActivityId' is set
        if (itemActivityId == null) {
            throw new ApiException("Missing the required parameter 'itemActivityId' when calling addItemActivityFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addItemActivityFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemActivityFileCall(itemActivityId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an itemActivity
     * Adds a file to an existing itemActivity.
     * @param itemActivityId Id of the itemActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemActivityFile(Integer itemActivityId, String fileName) throws ApiException {
        addItemActivityFileWithHttpInfo(itemActivityId, fileName);
    }

    /**
     * Attach a file to an itemActivity
     * Adds a file to an existing itemActivity.
     * @param itemActivityId Id of the itemActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemActivityFileWithHttpInfo(Integer itemActivityId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addItemActivityFileValidateBeforeCall(itemActivityId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an itemActivity (asynchronously)
     * Adds a file to an existing itemActivity.
     * @param itemActivityId Id of the itemActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemActivityFileAsync(Integer itemActivityId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemActivityFileValidateBeforeCall(itemActivityId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemActivityFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param itemActivityId Id of the itemActivity to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemActivityFileByURLCall(RecordFile body, Integer itemActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/itemActivity/{itemActivityId}/file"
            .replaceAll("\\{" + "itemActivityId" + "\\}", apiClient.escapeString(itemActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemActivityFileByURLValidateBeforeCall(RecordFile body, Integer itemActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addItemActivityFileByURL(Async)");
        }
        
        // verify the required parameter 'itemActivityId' is set
        if (itemActivityId == null) {
            throw new ApiException("Missing the required parameter 'itemActivityId' when calling addItemActivityFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemActivityFileByURLCall(body, itemActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an itemActivity by URL.
     * Adds a file to an existing itemActivity by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param itemActivityId Id of the itemActivity to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemActivityFileByURL(RecordFile body, Integer itemActivityId) throws ApiException {
        addItemActivityFileByURLWithHttpInfo(body, itemActivityId);
    }

    /**
     * Attach a file to an itemActivity by URL.
     * Adds a file to an existing itemActivity by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param itemActivityId Id of the itemActivity to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemActivityFileByURLWithHttpInfo(RecordFile body, Integer itemActivityId) throws ApiException {
        com.squareup.okhttp.Call call = addItemActivityFileByURLValidateBeforeCall(body, itemActivityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an itemActivity by URL. (asynchronously)
     * Adds a file to an existing itemActivity by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param itemActivityId Id of the itemActivity to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemActivityFileByURLAsync(RecordFile body, Integer itemActivityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemActivityFileByURLValidateBeforeCall(body, itemActivityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemActivityTag
     * @param itemActivityId Id of the itemActivity to add a tag to (required)
     * @param itemActivityTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemActivityTagCall(Integer itemActivityId, String itemActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemActivity/{itemActivityId}/tag/{itemActivityTag}"
            .replaceAll("\\{" + "itemActivityId" + "\\}", apiClient.escapeString(itemActivityId.toString()))
            .replaceAll("\\{" + "itemActivityTag" + "\\}", apiClient.escapeString(itemActivityTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemActivityTagValidateBeforeCall(Integer itemActivityId, String itemActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemActivityId' is set
        if (itemActivityId == null) {
            throw new ApiException("Missing the required parameter 'itemActivityId' when calling addItemActivityTag(Async)");
        }
        
        // verify the required parameter 'itemActivityTag' is set
        if (itemActivityTag == null) {
            throw new ApiException("Missing the required parameter 'itemActivityTag' when calling addItemActivityTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemActivityTagCall(itemActivityId, itemActivityTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for an itemActivity.
     * Adds a tag to an existing itemActivity.
     * @param itemActivityId Id of the itemActivity to add a tag to (required)
     * @param itemActivityTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemActivityTag(Integer itemActivityId, String itemActivityTag) throws ApiException {
        addItemActivityTagWithHttpInfo(itemActivityId, itemActivityTag);
    }

    /**
     * Add new tags for an itemActivity.
     * Adds a tag to an existing itemActivity.
     * @param itemActivityId Id of the itemActivity to add a tag to (required)
     * @param itemActivityTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemActivityTagWithHttpInfo(Integer itemActivityId, String itemActivityTag) throws ApiException {
        com.squareup.okhttp.Call call = addItemActivityTagValidateBeforeCall(itemActivityId, itemActivityTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for an itemActivity. (asynchronously)
     * Adds a tag to an existing itemActivity.
     * @param itemActivityId Id of the itemActivity to add a tag to (required)
     * @param itemActivityTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemActivityTagAsync(Integer itemActivityId, String itemActivityTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemActivityTagValidateBeforeCall(itemActivityId, itemActivityTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemActivityFile
     * @param itemActivityId Id of the itemActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemActivityFileCall(Integer itemActivityId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemActivity/{itemActivityId}/file/{fileId}"
            .replaceAll("\\{" + "itemActivityId" + "\\}", apiClient.escapeString(itemActivityId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemActivityFileValidateBeforeCall(Integer itemActivityId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemActivityId' is set
        if (itemActivityId == null) {
            throw new ApiException("Missing the required parameter 'itemActivityId' when calling deleteItemActivityFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteItemActivityFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemActivityFileCall(itemActivityId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for an itemActivity.
     * Deletes an existing itemActivity file using the specified data.
     * @param itemActivityId Id of the itemActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemActivityFile(Integer itemActivityId, Integer fileId) throws ApiException {
        deleteItemActivityFileWithHttpInfo(itemActivityId, fileId);
    }

    /**
     * Delete a file for an itemActivity.
     * Deletes an existing itemActivity file using the specified data.
     * @param itemActivityId Id of the itemActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemActivityFileWithHttpInfo(Integer itemActivityId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemActivityFileValidateBeforeCall(itemActivityId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for an itemActivity. (asynchronously)
     * Deletes an existing itemActivity file using the specified data.
     * @param itemActivityId Id of the itemActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemActivityFileAsync(Integer itemActivityId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemActivityFileValidateBeforeCall(itemActivityId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemActivityTag
     * @param itemActivityId Id of the itemActivity to remove tag from (required)
     * @param itemActivityTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemActivityTagCall(Integer itemActivityId, String itemActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemActivity/{itemActivityId}/tag/{itemActivityTag}"
            .replaceAll("\\{" + "itemActivityId" + "\\}", apiClient.escapeString(itemActivityId.toString()))
            .replaceAll("\\{" + "itemActivityTag" + "\\}", apiClient.escapeString(itemActivityTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemActivityTagValidateBeforeCall(Integer itemActivityId, String itemActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemActivityId' is set
        if (itemActivityId == null) {
            throw new ApiException("Missing the required parameter 'itemActivityId' when calling deleteItemActivityTag(Async)");
        }
        
        // verify the required parameter 'itemActivityTag' is set
        if (itemActivityTag == null) {
            throw new ApiException("Missing the required parameter 'itemActivityTag' when calling deleteItemActivityTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemActivityTagCall(itemActivityId, itemActivityTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for an itemActivity.
     * Deletes an existing itemActivity tag using the specified data.
     * @param itemActivityId Id of the itemActivity to remove tag from (required)
     * @param itemActivityTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemActivityTag(Integer itemActivityId, String itemActivityTag) throws ApiException {
        deleteItemActivityTagWithHttpInfo(itemActivityId, itemActivityTag);
    }

    /**
     * Delete a tag for an itemActivity.
     * Deletes an existing itemActivity tag using the specified data.
     * @param itemActivityId Id of the itemActivity to remove tag from (required)
     * @param itemActivityTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemActivityTagWithHttpInfo(Integer itemActivityId, String itemActivityTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemActivityTagValidateBeforeCall(itemActivityId, itemActivityTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for an itemActivity. (asynchronously)
     * Deletes an existing itemActivity tag using the specified data.
     * @param itemActivityId Id of the itemActivity to remove tag from (required)
     * @param itemActivityTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemActivityTagAsync(Integer itemActivityId, String itemActivityTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemActivityTagValidateBeforeCall(itemActivityId, itemActivityTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateItemActivityById
     * @param itemActivityId Id of the itemActivity to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateItemActivityByIdCall(Integer itemActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemActivity/duplicate/{itemActivityId}"
            .replaceAll("\\{" + "itemActivityId" + "\\}", apiClient.escapeString(itemActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateItemActivityByIdValidateBeforeCall(Integer itemActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemActivityId' is set
        if (itemActivityId == null) {
            throw new ApiException("Missing the required parameter 'itemActivityId' when calling getDuplicateItemActivityById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateItemActivityByIdCall(itemActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated an itemActivity by id
     * Returns a duplicated itemActivity identified by the specified id.
     * @param itemActivityId Id of the itemActivity to be duplicated. (required)
     * @return ItemActivity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemActivity getDuplicateItemActivityById(Integer itemActivityId) throws ApiException {
        ApiResponse<ItemActivity> resp = getDuplicateItemActivityByIdWithHttpInfo(itemActivityId);
        return resp.getData();
    }

    /**
     * Get a duplicated an itemActivity by id
     * Returns a duplicated itemActivity identified by the specified id.
     * @param itemActivityId Id of the itemActivity to be duplicated. (required)
     * @return ApiResponse&lt;ItemActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemActivity> getDuplicateItemActivityByIdWithHttpInfo(Integer itemActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateItemActivityByIdValidateBeforeCall(itemActivityId, null, null);
        Type localVarReturnType = new TypeToken<ItemActivity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated an itemActivity by id (asynchronously)
     * Returns a duplicated itemActivity identified by the specified id.
     * @param itemActivityId Id of the itemActivity to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateItemActivityByIdAsync(Integer itemActivityId, final ApiCallback<ItemActivity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateItemActivityByIdValidateBeforeCall(itemActivityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemActivity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemActivityByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemActivityByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemActivity/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemActivityByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getItemActivityByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search itemActivitys by filter
     * Returns the list of itemActivitys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;ItemActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ItemActivity> getItemActivityByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<ItemActivity>> resp = getItemActivityByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search itemActivitys by filter
     * Returns the list of itemActivitys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;ItemActivity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ItemActivity>> getItemActivityByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getItemActivityByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<ItemActivity>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search itemActivitys by filter (asynchronously)
     * Returns the list of itemActivitys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemActivityByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<ItemActivity>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemActivityByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ItemActivity>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemActivityById
     * @param itemActivityId Id of the itemActivity to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemActivityByIdCall(Integer itemActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemActivity/{itemActivityId}"
            .replaceAll("\\{" + "itemActivityId" + "\\}", apiClient.escapeString(itemActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemActivityByIdValidateBeforeCall(Integer itemActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemActivityId' is set
        if (itemActivityId == null) {
            throw new ApiException("Missing the required parameter 'itemActivityId' when calling getItemActivityById(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemActivityByIdCall(itemActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an itemActivity by id
     * Returns the itemActivity identified by the specified id.
     * @param itemActivityId Id of the itemActivity to be returned. (required)
     * @return ItemActivity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemActivity getItemActivityById(Integer itemActivityId) throws ApiException {
        ApiResponse<ItemActivity> resp = getItemActivityByIdWithHttpInfo(itemActivityId);
        return resp.getData();
    }

    /**
     * Get an itemActivity by id
     * Returns the itemActivity identified by the specified id.
     * @param itemActivityId Id of the itemActivity to be returned. (required)
     * @return ApiResponse&lt;ItemActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemActivity> getItemActivityByIdWithHttpInfo(Integer itemActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getItemActivityByIdValidateBeforeCall(itemActivityId, null, null);
        Type localVarReturnType = new TypeToken<ItemActivity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an itemActivity by id (asynchronously)
     * Returns the itemActivity identified by the specified id.
     * @param itemActivityId Id of the itemActivity to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemActivityByIdAsync(Integer itemActivityId, final ApiCallback<ItemActivity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemActivityByIdValidateBeforeCall(itemActivityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemActivity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemActivityFiles
     * @param itemActivityId Id of the itemActivity to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemActivityFilesCall(Integer itemActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemActivity/{itemActivityId}/file"
            .replaceAll("\\{" + "itemActivityId" + "\\}", apiClient.escapeString(itemActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemActivityFilesValidateBeforeCall(Integer itemActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemActivityId' is set
        if (itemActivityId == null) {
            throw new ApiException("Missing the required parameter 'itemActivityId' when calling getItemActivityFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemActivityFilesCall(itemActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for an itemActivity.
     * Get all existing itemActivity files.
     * @param itemActivityId Id of the itemActivity to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getItemActivityFiles(Integer itemActivityId) throws ApiException {
        getItemActivityFilesWithHttpInfo(itemActivityId);
    }

    /**
     * Get the files for an itemActivity.
     * Get all existing itemActivity files.
     * @param itemActivityId Id of the itemActivity to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getItemActivityFilesWithHttpInfo(Integer itemActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getItemActivityFilesValidateBeforeCall(itemActivityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for an itemActivity. (asynchronously)
     * Get all existing itemActivity files.
     * @param itemActivityId Id of the itemActivity to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemActivityFilesAsync(Integer itemActivityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemActivityFilesValidateBeforeCall(itemActivityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getItemActivityTags
     * @param itemActivityId Id of the itemActivity to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemActivityTagsCall(Integer itemActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemActivity/{itemActivityId}/tag"
            .replaceAll("\\{" + "itemActivityId" + "\\}", apiClient.escapeString(itemActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemActivityTagsValidateBeforeCall(Integer itemActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemActivityId' is set
        if (itemActivityId == null) {
            throw new ApiException("Missing the required parameter 'itemActivityId' when calling getItemActivityTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemActivityTagsCall(itemActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for an itemActivity.
     * Get all existing itemActivity tags.
     * @param itemActivityId Id of the itemActivity to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getItemActivityTags(Integer itemActivityId) throws ApiException {
        getItemActivityTagsWithHttpInfo(itemActivityId);
    }

    /**
     * Get the tags for an itemActivity.
     * Get all existing itemActivity tags.
     * @param itemActivityId Id of the itemActivity to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getItemActivityTagsWithHttpInfo(Integer itemActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getItemActivityTagsValidateBeforeCall(itemActivityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for an itemActivity. (asynchronously)
     * Get all existing itemActivity tags.
     * @param itemActivityId Id of the itemActivity to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemActivityTagsAsync(Integer itemActivityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemActivityTagsValidateBeforeCall(itemActivityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
