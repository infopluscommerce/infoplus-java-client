/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.InventoryAdjustment;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InventoryAdjustmentApi {
    private ApiClient apiClient;

    public InventoryAdjustmentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InventoryAdjustmentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addInventoryAdjustmentAudit
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to add an audit to (required)
     * @param inventoryAdjustmentAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInventoryAdjustmentAuditCall(Integer inventoryAdjustmentId, String inventoryAdjustmentAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryAdjustment/{inventoryAdjustmentId}/audit/{inventoryAdjustmentAudit}"
            .replaceAll("\\{" + "inventoryAdjustmentId" + "\\}", apiClient.escapeString(inventoryAdjustmentId.toString()))
            .replaceAll("\\{" + "inventoryAdjustmentAudit" + "\\}", apiClient.escapeString(inventoryAdjustmentAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInventoryAdjustmentAuditValidateBeforeCall(Integer inventoryAdjustmentId, String inventoryAdjustmentAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryAdjustmentId' is set
        if (inventoryAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'inventoryAdjustmentId' when calling addInventoryAdjustmentAudit(Async)");
        }
        
        // verify the required parameter 'inventoryAdjustmentAudit' is set
        if (inventoryAdjustmentAudit == null) {
            throw new ApiException("Missing the required parameter 'inventoryAdjustmentAudit' when calling addInventoryAdjustmentAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addInventoryAdjustmentAuditCall(inventoryAdjustmentId, inventoryAdjustmentAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for an inventoryAdjustment
     * Adds an audit to an existing inventoryAdjustment.
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to add an audit to (required)
     * @param inventoryAdjustmentAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addInventoryAdjustmentAudit(Integer inventoryAdjustmentId, String inventoryAdjustmentAudit) throws ApiException {
        addInventoryAdjustmentAuditWithHttpInfo(inventoryAdjustmentId, inventoryAdjustmentAudit);
    }

    /**
     * Add new audit for an inventoryAdjustment
     * Adds an audit to an existing inventoryAdjustment.
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to add an audit to (required)
     * @param inventoryAdjustmentAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addInventoryAdjustmentAuditWithHttpInfo(Integer inventoryAdjustmentId, String inventoryAdjustmentAudit) throws ApiException {
        com.squareup.okhttp.Call call = addInventoryAdjustmentAuditValidateBeforeCall(inventoryAdjustmentId, inventoryAdjustmentAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for an inventoryAdjustment (asynchronously)
     * Adds an audit to an existing inventoryAdjustment.
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to add an audit to (required)
     * @param inventoryAdjustmentAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInventoryAdjustmentAuditAsync(Integer inventoryAdjustmentId, String inventoryAdjustmentAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInventoryAdjustmentAuditValidateBeforeCall(inventoryAdjustmentId, inventoryAdjustmentAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addInventoryAdjustmentFile
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInventoryAdjustmentFileCall(Integer inventoryAdjustmentId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryAdjustment/{inventoryAdjustmentId}/file/{fileName}"
            .replaceAll("\\{" + "inventoryAdjustmentId" + "\\}", apiClient.escapeString(inventoryAdjustmentId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInventoryAdjustmentFileValidateBeforeCall(Integer inventoryAdjustmentId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryAdjustmentId' is set
        if (inventoryAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'inventoryAdjustmentId' when calling addInventoryAdjustmentFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addInventoryAdjustmentFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addInventoryAdjustmentFileCall(inventoryAdjustmentId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an inventoryAdjustment
     * Adds a file to an existing inventoryAdjustment.
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addInventoryAdjustmentFile(Integer inventoryAdjustmentId, String fileName) throws ApiException {
        addInventoryAdjustmentFileWithHttpInfo(inventoryAdjustmentId, fileName);
    }

    /**
     * Attach a file to an inventoryAdjustment
     * Adds a file to an existing inventoryAdjustment.
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addInventoryAdjustmentFileWithHttpInfo(Integer inventoryAdjustmentId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addInventoryAdjustmentFileValidateBeforeCall(inventoryAdjustmentId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an inventoryAdjustment (asynchronously)
     * Adds a file to an existing inventoryAdjustment.
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInventoryAdjustmentFileAsync(Integer inventoryAdjustmentId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInventoryAdjustmentFileValidateBeforeCall(inventoryAdjustmentId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addInventoryAdjustmentFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInventoryAdjustmentFileByURLCall(RecordFile body, Integer inventoryAdjustmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/inventoryAdjustment/{inventoryAdjustmentId}/file"
            .replaceAll("\\{" + "inventoryAdjustmentId" + "\\}", apiClient.escapeString(inventoryAdjustmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInventoryAdjustmentFileByURLValidateBeforeCall(RecordFile body, Integer inventoryAdjustmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addInventoryAdjustmentFileByURL(Async)");
        }
        
        // verify the required parameter 'inventoryAdjustmentId' is set
        if (inventoryAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'inventoryAdjustmentId' when calling addInventoryAdjustmentFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addInventoryAdjustmentFileByURLCall(body, inventoryAdjustmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an inventoryAdjustment by URL.
     * Adds a file to an existing inventoryAdjustment by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addInventoryAdjustmentFileByURL(RecordFile body, Integer inventoryAdjustmentId) throws ApiException {
        addInventoryAdjustmentFileByURLWithHttpInfo(body, inventoryAdjustmentId);
    }

    /**
     * Attach a file to an inventoryAdjustment by URL.
     * Adds a file to an existing inventoryAdjustment by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addInventoryAdjustmentFileByURLWithHttpInfo(RecordFile body, Integer inventoryAdjustmentId) throws ApiException {
        com.squareup.okhttp.Call call = addInventoryAdjustmentFileByURLValidateBeforeCall(body, inventoryAdjustmentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an inventoryAdjustment by URL. (asynchronously)
     * Adds a file to an existing inventoryAdjustment by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInventoryAdjustmentFileByURLAsync(RecordFile body, Integer inventoryAdjustmentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInventoryAdjustmentFileByURLValidateBeforeCall(body, inventoryAdjustmentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addInventoryAdjustmentTag
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to add a tag to (required)
     * @param inventoryAdjustmentTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInventoryAdjustmentTagCall(Integer inventoryAdjustmentId, String inventoryAdjustmentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryAdjustment/{inventoryAdjustmentId}/tag/{inventoryAdjustmentTag}"
            .replaceAll("\\{" + "inventoryAdjustmentId" + "\\}", apiClient.escapeString(inventoryAdjustmentId.toString()))
            .replaceAll("\\{" + "inventoryAdjustmentTag" + "\\}", apiClient.escapeString(inventoryAdjustmentTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInventoryAdjustmentTagValidateBeforeCall(Integer inventoryAdjustmentId, String inventoryAdjustmentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryAdjustmentId' is set
        if (inventoryAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'inventoryAdjustmentId' when calling addInventoryAdjustmentTag(Async)");
        }
        
        // verify the required parameter 'inventoryAdjustmentTag' is set
        if (inventoryAdjustmentTag == null) {
            throw new ApiException("Missing the required parameter 'inventoryAdjustmentTag' when calling addInventoryAdjustmentTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addInventoryAdjustmentTagCall(inventoryAdjustmentId, inventoryAdjustmentTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for an inventoryAdjustment.
     * Adds a tag to an existing inventoryAdjustment.
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to add a tag to (required)
     * @param inventoryAdjustmentTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addInventoryAdjustmentTag(Integer inventoryAdjustmentId, String inventoryAdjustmentTag) throws ApiException {
        addInventoryAdjustmentTagWithHttpInfo(inventoryAdjustmentId, inventoryAdjustmentTag);
    }

    /**
     * Add new tags for an inventoryAdjustment.
     * Adds a tag to an existing inventoryAdjustment.
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to add a tag to (required)
     * @param inventoryAdjustmentTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addInventoryAdjustmentTagWithHttpInfo(Integer inventoryAdjustmentId, String inventoryAdjustmentTag) throws ApiException {
        com.squareup.okhttp.Call call = addInventoryAdjustmentTagValidateBeforeCall(inventoryAdjustmentId, inventoryAdjustmentTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for an inventoryAdjustment. (asynchronously)
     * Adds a tag to an existing inventoryAdjustment.
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to add a tag to (required)
     * @param inventoryAdjustmentTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInventoryAdjustmentTagAsync(Integer inventoryAdjustmentId, String inventoryAdjustmentTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInventoryAdjustmentTagValidateBeforeCall(inventoryAdjustmentId, inventoryAdjustmentTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteInventoryAdjustmentFile
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteInventoryAdjustmentFileCall(Integer inventoryAdjustmentId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryAdjustment/{inventoryAdjustmentId}/file/{fileId}"
            .replaceAll("\\{" + "inventoryAdjustmentId" + "\\}", apiClient.escapeString(inventoryAdjustmentId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteInventoryAdjustmentFileValidateBeforeCall(Integer inventoryAdjustmentId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryAdjustmentId' is set
        if (inventoryAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'inventoryAdjustmentId' when calling deleteInventoryAdjustmentFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteInventoryAdjustmentFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteInventoryAdjustmentFileCall(inventoryAdjustmentId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for an inventoryAdjustment.
     * Deletes an existing inventoryAdjustment file using the specified data.
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteInventoryAdjustmentFile(Integer inventoryAdjustmentId, Integer fileId) throws ApiException {
        deleteInventoryAdjustmentFileWithHttpInfo(inventoryAdjustmentId, fileId);
    }

    /**
     * Delete a file for an inventoryAdjustment.
     * Deletes an existing inventoryAdjustment file using the specified data.
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteInventoryAdjustmentFileWithHttpInfo(Integer inventoryAdjustmentId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteInventoryAdjustmentFileValidateBeforeCall(inventoryAdjustmentId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for an inventoryAdjustment. (asynchronously)
     * Deletes an existing inventoryAdjustment file using the specified data.
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInventoryAdjustmentFileAsync(Integer inventoryAdjustmentId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInventoryAdjustmentFileValidateBeforeCall(inventoryAdjustmentId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteInventoryAdjustmentTag
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to remove tag from (required)
     * @param inventoryAdjustmentTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteInventoryAdjustmentTagCall(Integer inventoryAdjustmentId, String inventoryAdjustmentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryAdjustment/{inventoryAdjustmentId}/tag/{inventoryAdjustmentTag}"
            .replaceAll("\\{" + "inventoryAdjustmentId" + "\\}", apiClient.escapeString(inventoryAdjustmentId.toString()))
            .replaceAll("\\{" + "inventoryAdjustmentTag" + "\\}", apiClient.escapeString(inventoryAdjustmentTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteInventoryAdjustmentTagValidateBeforeCall(Integer inventoryAdjustmentId, String inventoryAdjustmentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryAdjustmentId' is set
        if (inventoryAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'inventoryAdjustmentId' when calling deleteInventoryAdjustmentTag(Async)");
        }
        
        // verify the required parameter 'inventoryAdjustmentTag' is set
        if (inventoryAdjustmentTag == null) {
            throw new ApiException("Missing the required parameter 'inventoryAdjustmentTag' when calling deleteInventoryAdjustmentTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteInventoryAdjustmentTagCall(inventoryAdjustmentId, inventoryAdjustmentTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for an inventoryAdjustment.
     * Deletes an existing inventoryAdjustment tag using the specified data.
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to remove tag from (required)
     * @param inventoryAdjustmentTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteInventoryAdjustmentTag(Integer inventoryAdjustmentId, String inventoryAdjustmentTag) throws ApiException {
        deleteInventoryAdjustmentTagWithHttpInfo(inventoryAdjustmentId, inventoryAdjustmentTag);
    }

    /**
     * Delete a tag for an inventoryAdjustment.
     * Deletes an existing inventoryAdjustment tag using the specified data.
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to remove tag from (required)
     * @param inventoryAdjustmentTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteInventoryAdjustmentTagWithHttpInfo(Integer inventoryAdjustmentId, String inventoryAdjustmentTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteInventoryAdjustmentTagValidateBeforeCall(inventoryAdjustmentId, inventoryAdjustmentTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for an inventoryAdjustment. (asynchronously)
     * Deletes an existing inventoryAdjustment tag using the specified data.
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to remove tag from (required)
     * @param inventoryAdjustmentTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInventoryAdjustmentTagAsync(Integer inventoryAdjustmentId, String inventoryAdjustmentTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInventoryAdjustmentTagValidateBeforeCall(inventoryAdjustmentId, inventoryAdjustmentTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateInventoryAdjustmentById
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateInventoryAdjustmentByIdCall(Integer inventoryAdjustmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryAdjustment/duplicate/{inventoryAdjustmentId}"
            .replaceAll("\\{" + "inventoryAdjustmentId" + "\\}", apiClient.escapeString(inventoryAdjustmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateInventoryAdjustmentByIdValidateBeforeCall(Integer inventoryAdjustmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryAdjustmentId' is set
        if (inventoryAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'inventoryAdjustmentId' when calling getDuplicateInventoryAdjustmentById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateInventoryAdjustmentByIdCall(inventoryAdjustmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated an inventoryAdjustment by id
     * Returns a duplicated inventoryAdjustment identified by the specified id.
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to be duplicated. (required)
     * @return InventoryAdjustment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InventoryAdjustment getDuplicateInventoryAdjustmentById(Integer inventoryAdjustmentId) throws ApiException {
        ApiResponse<InventoryAdjustment> resp = getDuplicateInventoryAdjustmentByIdWithHttpInfo(inventoryAdjustmentId);
        return resp.getData();
    }

    /**
     * Get a duplicated an inventoryAdjustment by id
     * Returns a duplicated inventoryAdjustment identified by the specified id.
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to be duplicated. (required)
     * @return ApiResponse&lt;InventoryAdjustment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InventoryAdjustment> getDuplicateInventoryAdjustmentByIdWithHttpInfo(Integer inventoryAdjustmentId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateInventoryAdjustmentByIdValidateBeforeCall(inventoryAdjustmentId, null, null);
        Type localVarReturnType = new TypeToken<InventoryAdjustment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated an inventoryAdjustment by id (asynchronously)
     * Returns a duplicated inventoryAdjustment identified by the specified id.
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateInventoryAdjustmentByIdAsync(Integer inventoryAdjustmentId, final ApiCallback<InventoryAdjustment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateInventoryAdjustmentByIdValidateBeforeCall(inventoryAdjustmentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InventoryAdjustment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInventoryAdjustmentByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInventoryAdjustmentByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryAdjustment/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInventoryAdjustmentByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getInventoryAdjustmentByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search inventoryAdjustments by filter
     * Returns the list of inventoryAdjustments that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;InventoryAdjustment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InventoryAdjustment> getInventoryAdjustmentByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<InventoryAdjustment>> resp = getInventoryAdjustmentByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search inventoryAdjustments by filter
     * Returns the list of inventoryAdjustments that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;InventoryAdjustment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InventoryAdjustment>> getInventoryAdjustmentByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getInventoryAdjustmentByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<InventoryAdjustment>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search inventoryAdjustments by filter (asynchronously)
     * Returns the list of inventoryAdjustments that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInventoryAdjustmentByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<InventoryAdjustment>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInventoryAdjustmentByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InventoryAdjustment>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInventoryAdjustmentById
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInventoryAdjustmentByIdCall(Integer inventoryAdjustmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryAdjustment/{inventoryAdjustmentId}"
            .replaceAll("\\{" + "inventoryAdjustmentId" + "\\}", apiClient.escapeString(inventoryAdjustmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInventoryAdjustmentByIdValidateBeforeCall(Integer inventoryAdjustmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryAdjustmentId' is set
        if (inventoryAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'inventoryAdjustmentId' when calling getInventoryAdjustmentById(Async)");
        }
        

        com.squareup.okhttp.Call call = getInventoryAdjustmentByIdCall(inventoryAdjustmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an inventoryAdjustment by id
     * Returns the inventoryAdjustment identified by the specified id.
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to be returned. (required)
     * @return InventoryAdjustment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InventoryAdjustment getInventoryAdjustmentById(Integer inventoryAdjustmentId) throws ApiException {
        ApiResponse<InventoryAdjustment> resp = getInventoryAdjustmentByIdWithHttpInfo(inventoryAdjustmentId);
        return resp.getData();
    }

    /**
     * Get an inventoryAdjustment by id
     * Returns the inventoryAdjustment identified by the specified id.
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to be returned. (required)
     * @return ApiResponse&lt;InventoryAdjustment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InventoryAdjustment> getInventoryAdjustmentByIdWithHttpInfo(Integer inventoryAdjustmentId) throws ApiException {
        com.squareup.okhttp.Call call = getInventoryAdjustmentByIdValidateBeforeCall(inventoryAdjustmentId, null, null);
        Type localVarReturnType = new TypeToken<InventoryAdjustment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an inventoryAdjustment by id (asynchronously)
     * Returns the inventoryAdjustment identified by the specified id.
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInventoryAdjustmentByIdAsync(Integer inventoryAdjustmentId, final ApiCallback<InventoryAdjustment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInventoryAdjustmentByIdValidateBeforeCall(inventoryAdjustmentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InventoryAdjustment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInventoryAdjustmentFiles
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInventoryAdjustmentFilesCall(Integer inventoryAdjustmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryAdjustment/{inventoryAdjustmentId}/file"
            .replaceAll("\\{" + "inventoryAdjustmentId" + "\\}", apiClient.escapeString(inventoryAdjustmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInventoryAdjustmentFilesValidateBeforeCall(Integer inventoryAdjustmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryAdjustmentId' is set
        if (inventoryAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'inventoryAdjustmentId' when calling getInventoryAdjustmentFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getInventoryAdjustmentFilesCall(inventoryAdjustmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for an inventoryAdjustment.
     * Get all existing inventoryAdjustment files.
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getInventoryAdjustmentFiles(Integer inventoryAdjustmentId) throws ApiException {
        getInventoryAdjustmentFilesWithHttpInfo(inventoryAdjustmentId);
    }

    /**
     * Get the files for an inventoryAdjustment.
     * Get all existing inventoryAdjustment files.
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getInventoryAdjustmentFilesWithHttpInfo(Integer inventoryAdjustmentId) throws ApiException {
        com.squareup.okhttp.Call call = getInventoryAdjustmentFilesValidateBeforeCall(inventoryAdjustmentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for an inventoryAdjustment. (asynchronously)
     * Get all existing inventoryAdjustment files.
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInventoryAdjustmentFilesAsync(Integer inventoryAdjustmentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInventoryAdjustmentFilesValidateBeforeCall(inventoryAdjustmentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getInventoryAdjustmentTags
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInventoryAdjustmentTagsCall(Integer inventoryAdjustmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryAdjustment/{inventoryAdjustmentId}/tag"
            .replaceAll("\\{" + "inventoryAdjustmentId" + "\\}", apiClient.escapeString(inventoryAdjustmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInventoryAdjustmentTagsValidateBeforeCall(Integer inventoryAdjustmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryAdjustmentId' is set
        if (inventoryAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'inventoryAdjustmentId' when calling getInventoryAdjustmentTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getInventoryAdjustmentTagsCall(inventoryAdjustmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for an inventoryAdjustment.
     * Get all existing inventoryAdjustment tags.
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getInventoryAdjustmentTags(Integer inventoryAdjustmentId) throws ApiException {
        getInventoryAdjustmentTagsWithHttpInfo(inventoryAdjustmentId);
    }

    /**
     * Get the tags for an inventoryAdjustment.
     * Get all existing inventoryAdjustment tags.
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getInventoryAdjustmentTagsWithHttpInfo(Integer inventoryAdjustmentId) throws ApiException {
        com.squareup.okhttp.Call call = getInventoryAdjustmentTagsValidateBeforeCall(inventoryAdjustmentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for an inventoryAdjustment. (asynchronously)
     * Get all existing inventoryAdjustment tags.
     * @param inventoryAdjustmentId Id of the inventoryAdjustment to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInventoryAdjustmentTagsAsync(Integer inventoryAdjustmentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInventoryAdjustmentTagsValidateBeforeCall(inventoryAdjustmentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateInventoryAdjustmentCustomFields
     * @param body InventoryAdjustment to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateInventoryAdjustmentCustomFieldsCall(InventoryAdjustment body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/inventoryAdjustment/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateInventoryAdjustmentCustomFieldsValidateBeforeCall(InventoryAdjustment body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateInventoryAdjustmentCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateInventoryAdjustmentCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an inventoryAdjustment custom fields
     * Updates an existing inventoryAdjustment custom fields using the specified data.
     * @param body InventoryAdjustment to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateInventoryAdjustmentCustomFields(InventoryAdjustment body) throws ApiException {
        updateInventoryAdjustmentCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update an inventoryAdjustment custom fields
     * Updates an existing inventoryAdjustment custom fields using the specified data.
     * @param body InventoryAdjustment to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateInventoryAdjustmentCustomFieldsWithHttpInfo(InventoryAdjustment body) throws ApiException {
        com.squareup.okhttp.Call call = updateInventoryAdjustmentCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an inventoryAdjustment custom fields (asynchronously)
     * Updates an existing inventoryAdjustment custom fields using the specified data.
     * @param body InventoryAdjustment to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateInventoryAdjustmentCustomFieldsAsync(InventoryAdjustment body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateInventoryAdjustmentCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
