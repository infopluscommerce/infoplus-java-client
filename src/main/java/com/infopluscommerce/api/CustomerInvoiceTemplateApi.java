/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.CustomerInvoiceTemplate;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomerInvoiceTemplateApi {
    private ApiClient apiClient;

    public CustomerInvoiceTemplateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomerInvoiceTemplateApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addCustomerInvoiceTemplate
     * @param body CustomerInvoiceTemplate to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addCustomerInvoiceTemplateCall(CustomerInvoiceTemplate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/customerInvoiceTemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCustomerInvoiceTemplateValidateBeforeCall(CustomerInvoiceTemplate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addCustomerInvoiceTemplate(Async)");
        }
        

        com.squareup.okhttp.Call call = addCustomerInvoiceTemplateCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a customerInvoiceTemplate
     * Inserts a new customerInvoiceTemplate using the specified data.
     * @param body CustomerInvoiceTemplate to be inserted. (required)
     * @return CustomerInvoiceTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerInvoiceTemplate addCustomerInvoiceTemplate(CustomerInvoiceTemplate body) throws ApiException {
        ApiResponse<CustomerInvoiceTemplate> resp = addCustomerInvoiceTemplateWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a customerInvoiceTemplate
     * Inserts a new customerInvoiceTemplate using the specified data.
     * @param body CustomerInvoiceTemplate to be inserted. (required)
     * @return ApiResponse&lt;CustomerInvoiceTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerInvoiceTemplate> addCustomerInvoiceTemplateWithHttpInfo(CustomerInvoiceTemplate body) throws ApiException {
        com.squareup.okhttp.Call call = addCustomerInvoiceTemplateValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CustomerInvoiceTemplate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a customerInvoiceTemplate (asynchronously)
     * Inserts a new customerInvoiceTemplate using the specified data.
     * @param body CustomerInvoiceTemplate to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCustomerInvoiceTemplateAsync(CustomerInvoiceTemplate body, final ApiCallback<CustomerInvoiceTemplate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCustomerInvoiceTemplateValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerInvoiceTemplate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addCustomerInvoiceTemplateAudit
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to add an audit to (required)
     * @param customerInvoiceTemplateAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addCustomerInvoiceTemplateAuditCall(Integer customerInvoiceTemplateId, String customerInvoiceTemplateAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}/audit/{customerInvoiceTemplateAudit}"
            .replaceAll("\\{" + "customerInvoiceTemplateId" + "\\}", apiClient.escapeString(customerInvoiceTemplateId.toString()))
            .replaceAll("\\{" + "customerInvoiceTemplateAudit" + "\\}", apiClient.escapeString(customerInvoiceTemplateAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCustomerInvoiceTemplateAuditValidateBeforeCall(Integer customerInvoiceTemplateId, String customerInvoiceTemplateAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customerInvoiceTemplateId' is set
        if (customerInvoiceTemplateId == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateId' when calling addCustomerInvoiceTemplateAudit(Async)");
        }
        
        // verify the required parameter 'customerInvoiceTemplateAudit' is set
        if (customerInvoiceTemplateAudit == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateAudit' when calling addCustomerInvoiceTemplateAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addCustomerInvoiceTemplateAuditCall(customerInvoiceTemplateId, customerInvoiceTemplateAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a customerInvoiceTemplate
     * Adds an audit to an existing customerInvoiceTemplate.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to add an audit to (required)
     * @param customerInvoiceTemplateAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addCustomerInvoiceTemplateAudit(Integer customerInvoiceTemplateId, String customerInvoiceTemplateAudit) throws ApiException {
        addCustomerInvoiceTemplateAuditWithHttpInfo(customerInvoiceTemplateId, customerInvoiceTemplateAudit);
    }

    /**
     * Add new audit for a customerInvoiceTemplate
     * Adds an audit to an existing customerInvoiceTemplate.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to add an audit to (required)
     * @param customerInvoiceTemplateAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addCustomerInvoiceTemplateAuditWithHttpInfo(Integer customerInvoiceTemplateId, String customerInvoiceTemplateAudit) throws ApiException {
        com.squareup.okhttp.Call call = addCustomerInvoiceTemplateAuditValidateBeforeCall(customerInvoiceTemplateId, customerInvoiceTemplateAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a customerInvoiceTemplate (asynchronously)
     * Adds an audit to an existing customerInvoiceTemplate.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to add an audit to (required)
     * @param customerInvoiceTemplateAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCustomerInvoiceTemplateAuditAsync(Integer customerInvoiceTemplateId, String customerInvoiceTemplateAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCustomerInvoiceTemplateAuditValidateBeforeCall(customerInvoiceTemplateId, customerInvoiceTemplateAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addCustomerInvoiceTemplateFile
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addCustomerInvoiceTemplateFileCall(Integer customerInvoiceTemplateId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}/file/{fileName}"
            .replaceAll("\\{" + "customerInvoiceTemplateId" + "\\}", apiClient.escapeString(customerInvoiceTemplateId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCustomerInvoiceTemplateFileValidateBeforeCall(Integer customerInvoiceTemplateId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customerInvoiceTemplateId' is set
        if (customerInvoiceTemplateId == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateId' when calling addCustomerInvoiceTemplateFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addCustomerInvoiceTemplateFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addCustomerInvoiceTemplateFileCall(customerInvoiceTemplateId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a customerInvoiceTemplate
     * Adds a file to an existing customerInvoiceTemplate.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addCustomerInvoiceTemplateFile(Integer customerInvoiceTemplateId, String fileName) throws ApiException {
        addCustomerInvoiceTemplateFileWithHttpInfo(customerInvoiceTemplateId, fileName);
    }

    /**
     * Attach a file to a customerInvoiceTemplate
     * Adds a file to an existing customerInvoiceTemplate.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addCustomerInvoiceTemplateFileWithHttpInfo(Integer customerInvoiceTemplateId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addCustomerInvoiceTemplateFileValidateBeforeCall(customerInvoiceTemplateId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a customerInvoiceTemplate (asynchronously)
     * Adds a file to an existing customerInvoiceTemplate.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCustomerInvoiceTemplateFileAsync(Integer customerInvoiceTemplateId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCustomerInvoiceTemplateFileValidateBeforeCall(customerInvoiceTemplateId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addCustomerInvoiceTemplateFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addCustomerInvoiceTemplateFileByURLCall(RecordFile body, Integer customerInvoiceTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}/file"
            .replaceAll("\\{" + "customerInvoiceTemplateId" + "\\}", apiClient.escapeString(customerInvoiceTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCustomerInvoiceTemplateFileByURLValidateBeforeCall(RecordFile body, Integer customerInvoiceTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addCustomerInvoiceTemplateFileByURL(Async)");
        }
        
        // verify the required parameter 'customerInvoiceTemplateId' is set
        if (customerInvoiceTemplateId == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateId' when calling addCustomerInvoiceTemplateFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addCustomerInvoiceTemplateFileByURLCall(body, customerInvoiceTemplateId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a customerInvoiceTemplate by URL.
     * Adds a file to an existing customerInvoiceTemplate by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addCustomerInvoiceTemplateFileByURL(RecordFile body, Integer customerInvoiceTemplateId) throws ApiException {
        addCustomerInvoiceTemplateFileByURLWithHttpInfo(body, customerInvoiceTemplateId);
    }

    /**
     * Attach a file to a customerInvoiceTemplate by URL.
     * Adds a file to an existing customerInvoiceTemplate by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addCustomerInvoiceTemplateFileByURLWithHttpInfo(RecordFile body, Integer customerInvoiceTemplateId) throws ApiException {
        com.squareup.okhttp.Call call = addCustomerInvoiceTemplateFileByURLValidateBeforeCall(body, customerInvoiceTemplateId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a customerInvoiceTemplate by URL. (asynchronously)
     * Adds a file to an existing customerInvoiceTemplate by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCustomerInvoiceTemplateFileByURLAsync(RecordFile body, Integer customerInvoiceTemplateId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCustomerInvoiceTemplateFileByURLValidateBeforeCall(body, customerInvoiceTemplateId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addCustomerInvoiceTemplateTag
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to add a tag to (required)
     * @param customerInvoiceTemplateTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addCustomerInvoiceTemplateTagCall(Integer customerInvoiceTemplateId, String customerInvoiceTemplateTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}/tag/{customerInvoiceTemplateTag}"
            .replaceAll("\\{" + "customerInvoiceTemplateId" + "\\}", apiClient.escapeString(customerInvoiceTemplateId.toString()))
            .replaceAll("\\{" + "customerInvoiceTemplateTag" + "\\}", apiClient.escapeString(customerInvoiceTemplateTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCustomerInvoiceTemplateTagValidateBeforeCall(Integer customerInvoiceTemplateId, String customerInvoiceTemplateTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customerInvoiceTemplateId' is set
        if (customerInvoiceTemplateId == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateId' when calling addCustomerInvoiceTemplateTag(Async)");
        }
        
        // verify the required parameter 'customerInvoiceTemplateTag' is set
        if (customerInvoiceTemplateTag == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateTag' when calling addCustomerInvoiceTemplateTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addCustomerInvoiceTemplateTagCall(customerInvoiceTemplateId, customerInvoiceTemplateTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a customerInvoiceTemplate.
     * Adds a tag to an existing customerInvoiceTemplate.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to add a tag to (required)
     * @param customerInvoiceTemplateTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addCustomerInvoiceTemplateTag(Integer customerInvoiceTemplateId, String customerInvoiceTemplateTag) throws ApiException {
        addCustomerInvoiceTemplateTagWithHttpInfo(customerInvoiceTemplateId, customerInvoiceTemplateTag);
    }

    /**
     * Add new tags for a customerInvoiceTemplate.
     * Adds a tag to an existing customerInvoiceTemplate.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to add a tag to (required)
     * @param customerInvoiceTemplateTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addCustomerInvoiceTemplateTagWithHttpInfo(Integer customerInvoiceTemplateId, String customerInvoiceTemplateTag) throws ApiException {
        com.squareup.okhttp.Call call = addCustomerInvoiceTemplateTagValidateBeforeCall(customerInvoiceTemplateId, customerInvoiceTemplateTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a customerInvoiceTemplate. (asynchronously)
     * Adds a tag to an existing customerInvoiceTemplate.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to add a tag to (required)
     * @param customerInvoiceTemplateTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCustomerInvoiceTemplateTagAsync(Integer customerInvoiceTemplateId, String customerInvoiceTemplateTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCustomerInvoiceTemplateTagValidateBeforeCall(customerInvoiceTemplateId, customerInvoiceTemplateTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteCustomerInvoiceTemplate
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCustomerInvoiceTemplateCall(Integer customerInvoiceTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}"
            .replaceAll("\\{" + "customerInvoiceTemplateId" + "\\}", apiClient.escapeString(customerInvoiceTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCustomerInvoiceTemplateValidateBeforeCall(Integer customerInvoiceTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customerInvoiceTemplateId' is set
        if (customerInvoiceTemplateId == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateId' when calling deleteCustomerInvoiceTemplate(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCustomerInvoiceTemplateCall(customerInvoiceTemplateId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a customerInvoiceTemplate
     * Deletes the customerInvoiceTemplate identified by the specified id.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCustomerInvoiceTemplate(Integer customerInvoiceTemplateId) throws ApiException {
        deleteCustomerInvoiceTemplateWithHttpInfo(customerInvoiceTemplateId);
    }

    /**
     * Delete a customerInvoiceTemplate
     * Deletes the customerInvoiceTemplate identified by the specified id.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCustomerInvoiceTemplateWithHttpInfo(Integer customerInvoiceTemplateId) throws ApiException {
        com.squareup.okhttp.Call call = deleteCustomerInvoiceTemplateValidateBeforeCall(customerInvoiceTemplateId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a customerInvoiceTemplate (asynchronously)
     * Deletes the customerInvoiceTemplate identified by the specified id.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCustomerInvoiceTemplateAsync(Integer customerInvoiceTemplateId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCustomerInvoiceTemplateValidateBeforeCall(customerInvoiceTemplateId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteCustomerInvoiceTemplateFile
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCustomerInvoiceTemplateFileCall(Integer customerInvoiceTemplateId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}/file/{fileId}"
            .replaceAll("\\{" + "customerInvoiceTemplateId" + "\\}", apiClient.escapeString(customerInvoiceTemplateId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCustomerInvoiceTemplateFileValidateBeforeCall(Integer customerInvoiceTemplateId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customerInvoiceTemplateId' is set
        if (customerInvoiceTemplateId == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateId' when calling deleteCustomerInvoiceTemplateFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteCustomerInvoiceTemplateFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCustomerInvoiceTemplateFileCall(customerInvoiceTemplateId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a customerInvoiceTemplate.
     * Deletes an existing customerInvoiceTemplate file using the specified data.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCustomerInvoiceTemplateFile(Integer customerInvoiceTemplateId, Integer fileId) throws ApiException {
        deleteCustomerInvoiceTemplateFileWithHttpInfo(customerInvoiceTemplateId, fileId);
    }

    /**
     * Delete a file for a customerInvoiceTemplate.
     * Deletes an existing customerInvoiceTemplate file using the specified data.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCustomerInvoiceTemplateFileWithHttpInfo(Integer customerInvoiceTemplateId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteCustomerInvoiceTemplateFileValidateBeforeCall(customerInvoiceTemplateId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a customerInvoiceTemplate. (asynchronously)
     * Deletes an existing customerInvoiceTemplate file using the specified data.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCustomerInvoiceTemplateFileAsync(Integer customerInvoiceTemplateId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCustomerInvoiceTemplateFileValidateBeforeCall(customerInvoiceTemplateId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteCustomerInvoiceTemplateTag
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to remove tag from (required)
     * @param customerInvoiceTemplateTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCustomerInvoiceTemplateTagCall(Integer customerInvoiceTemplateId, String customerInvoiceTemplateTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}/tag/{customerInvoiceTemplateTag}"
            .replaceAll("\\{" + "customerInvoiceTemplateId" + "\\}", apiClient.escapeString(customerInvoiceTemplateId.toString()))
            .replaceAll("\\{" + "customerInvoiceTemplateTag" + "\\}", apiClient.escapeString(customerInvoiceTemplateTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCustomerInvoiceTemplateTagValidateBeforeCall(Integer customerInvoiceTemplateId, String customerInvoiceTemplateTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customerInvoiceTemplateId' is set
        if (customerInvoiceTemplateId == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateId' when calling deleteCustomerInvoiceTemplateTag(Async)");
        }
        
        // verify the required parameter 'customerInvoiceTemplateTag' is set
        if (customerInvoiceTemplateTag == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateTag' when calling deleteCustomerInvoiceTemplateTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCustomerInvoiceTemplateTagCall(customerInvoiceTemplateId, customerInvoiceTemplateTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a customerInvoiceTemplate.
     * Deletes an existing customerInvoiceTemplate tag using the specified data.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to remove tag from (required)
     * @param customerInvoiceTemplateTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCustomerInvoiceTemplateTag(Integer customerInvoiceTemplateId, String customerInvoiceTemplateTag) throws ApiException {
        deleteCustomerInvoiceTemplateTagWithHttpInfo(customerInvoiceTemplateId, customerInvoiceTemplateTag);
    }

    /**
     * Delete a tag for a customerInvoiceTemplate.
     * Deletes an existing customerInvoiceTemplate tag using the specified data.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to remove tag from (required)
     * @param customerInvoiceTemplateTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCustomerInvoiceTemplateTagWithHttpInfo(Integer customerInvoiceTemplateId, String customerInvoiceTemplateTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteCustomerInvoiceTemplateTagValidateBeforeCall(customerInvoiceTemplateId, customerInvoiceTemplateTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a customerInvoiceTemplate. (asynchronously)
     * Deletes an existing customerInvoiceTemplate tag using the specified data.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to remove tag from (required)
     * @param customerInvoiceTemplateTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCustomerInvoiceTemplateTagAsync(Integer customerInvoiceTemplateId, String customerInvoiceTemplateTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCustomerInvoiceTemplateTagValidateBeforeCall(customerInvoiceTemplateId, customerInvoiceTemplateTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getCustomerInvoiceTemplateByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomerInvoiceTemplateByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/customerInvoiceTemplate/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomerInvoiceTemplateByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getCustomerInvoiceTemplateByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search customerInvoiceTemplates by filter
     * Returns the list of customerInvoiceTemplates that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;CustomerInvoiceTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CustomerInvoiceTemplate> getCustomerInvoiceTemplateByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<CustomerInvoiceTemplate>> resp = getCustomerInvoiceTemplateByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search customerInvoiceTemplates by filter
     * Returns the list of customerInvoiceTemplates that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;CustomerInvoiceTemplate&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CustomerInvoiceTemplate>> getCustomerInvoiceTemplateByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getCustomerInvoiceTemplateByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<CustomerInvoiceTemplate>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search customerInvoiceTemplates by filter (asynchronously)
     * Returns the list of customerInvoiceTemplates that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomerInvoiceTemplateByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<CustomerInvoiceTemplate>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomerInvoiceTemplateByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CustomerInvoiceTemplate>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomerInvoiceTemplateById
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomerInvoiceTemplateByIdCall(Integer customerInvoiceTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}"
            .replaceAll("\\{" + "customerInvoiceTemplateId" + "\\}", apiClient.escapeString(customerInvoiceTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomerInvoiceTemplateByIdValidateBeforeCall(Integer customerInvoiceTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customerInvoiceTemplateId' is set
        if (customerInvoiceTemplateId == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateId' when calling getCustomerInvoiceTemplateById(Async)");
        }
        

        com.squareup.okhttp.Call call = getCustomerInvoiceTemplateByIdCall(customerInvoiceTemplateId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a customerInvoiceTemplate by id
     * Returns the customerInvoiceTemplate identified by the specified id.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to be returned. (required)
     * @return CustomerInvoiceTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerInvoiceTemplate getCustomerInvoiceTemplateById(Integer customerInvoiceTemplateId) throws ApiException {
        ApiResponse<CustomerInvoiceTemplate> resp = getCustomerInvoiceTemplateByIdWithHttpInfo(customerInvoiceTemplateId);
        return resp.getData();
    }

    /**
     * Get a customerInvoiceTemplate by id
     * Returns the customerInvoiceTemplate identified by the specified id.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to be returned. (required)
     * @return ApiResponse&lt;CustomerInvoiceTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerInvoiceTemplate> getCustomerInvoiceTemplateByIdWithHttpInfo(Integer customerInvoiceTemplateId) throws ApiException {
        com.squareup.okhttp.Call call = getCustomerInvoiceTemplateByIdValidateBeforeCall(customerInvoiceTemplateId, null, null);
        Type localVarReturnType = new TypeToken<CustomerInvoiceTemplate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a customerInvoiceTemplate by id (asynchronously)
     * Returns the customerInvoiceTemplate identified by the specified id.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomerInvoiceTemplateByIdAsync(Integer customerInvoiceTemplateId, final ApiCallback<CustomerInvoiceTemplate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomerInvoiceTemplateByIdValidateBeforeCall(customerInvoiceTemplateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerInvoiceTemplate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomerInvoiceTemplateFiles
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomerInvoiceTemplateFilesCall(Integer customerInvoiceTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}/file"
            .replaceAll("\\{" + "customerInvoiceTemplateId" + "\\}", apiClient.escapeString(customerInvoiceTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomerInvoiceTemplateFilesValidateBeforeCall(Integer customerInvoiceTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customerInvoiceTemplateId' is set
        if (customerInvoiceTemplateId == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateId' when calling getCustomerInvoiceTemplateFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getCustomerInvoiceTemplateFilesCall(customerInvoiceTemplateId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a customerInvoiceTemplate.
     * Get all existing customerInvoiceTemplate files.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getCustomerInvoiceTemplateFiles(Integer customerInvoiceTemplateId) throws ApiException {
        getCustomerInvoiceTemplateFilesWithHttpInfo(customerInvoiceTemplateId);
    }

    /**
     * Get the files for a customerInvoiceTemplate.
     * Get all existing customerInvoiceTemplate files.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getCustomerInvoiceTemplateFilesWithHttpInfo(Integer customerInvoiceTemplateId) throws ApiException {
        com.squareup.okhttp.Call call = getCustomerInvoiceTemplateFilesValidateBeforeCall(customerInvoiceTemplateId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a customerInvoiceTemplate. (asynchronously)
     * Get all existing customerInvoiceTemplate files.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomerInvoiceTemplateFilesAsync(Integer customerInvoiceTemplateId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomerInvoiceTemplateFilesValidateBeforeCall(customerInvoiceTemplateId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getCustomerInvoiceTemplateTags
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomerInvoiceTemplateTagsCall(Integer customerInvoiceTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/customerInvoiceTemplate/{customerInvoiceTemplateId}/tag"
            .replaceAll("\\{" + "customerInvoiceTemplateId" + "\\}", apiClient.escapeString(customerInvoiceTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomerInvoiceTemplateTagsValidateBeforeCall(Integer customerInvoiceTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customerInvoiceTemplateId' is set
        if (customerInvoiceTemplateId == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateId' when calling getCustomerInvoiceTemplateTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getCustomerInvoiceTemplateTagsCall(customerInvoiceTemplateId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a customerInvoiceTemplate.
     * Get all existing customerInvoiceTemplate tags.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getCustomerInvoiceTemplateTags(Integer customerInvoiceTemplateId) throws ApiException {
        getCustomerInvoiceTemplateTagsWithHttpInfo(customerInvoiceTemplateId);
    }

    /**
     * Get the tags for a customerInvoiceTemplate.
     * Get all existing customerInvoiceTemplate tags.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getCustomerInvoiceTemplateTagsWithHttpInfo(Integer customerInvoiceTemplateId) throws ApiException {
        com.squareup.okhttp.Call call = getCustomerInvoiceTemplateTagsValidateBeforeCall(customerInvoiceTemplateId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a customerInvoiceTemplate. (asynchronously)
     * Get all existing customerInvoiceTemplate tags.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomerInvoiceTemplateTagsAsync(Integer customerInvoiceTemplateId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomerInvoiceTemplateTagsValidateBeforeCall(customerInvoiceTemplateId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateCustomerInvoiceTemplateById
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateCustomerInvoiceTemplateByIdCall(Integer customerInvoiceTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/customerInvoiceTemplate/duplicate/{customerInvoiceTemplateId}"
            .replaceAll("\\{" + "customerInvoiceTemplateId" + "\\}", apiClient.escapeString(customerInvoiceTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateCustomerInvoiceTemplateByIdValidateBeforeCall(Integer customerInvoiceTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customerInvoiceTemplateId' is set
        if (customerInvoiceTemplateId == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateId' when calling getDuplicateCustomerInvoiceTemplateById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateCustomerInvoiceTemplateByIdCall(customerInvoiceTemplateId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a customerInvoiceTemplate by id
     * Returns a duplicated customerInvoiceTemplate identified by the specified id.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to be duplicated. (required)
     * @return CustomerInvoiceTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerInvoiceTemplate getDuplicateCustomerInvoiceTemplateById(Integer customerInvoiceTemplateId) throws ApiException {
        ApiResponse<CustomerInvoiceTemplate> resp = getDuplicateCustomerInvoiceTemplateByIdWithHttpInfo(customerInvoiceTemplateId);
        return resp.getData();
    }

    /**
     * Get a duplicated a customerInvoiceTemplate by id
     * Returns a duplicated customerInvoiceTemplate identified by the specified id.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to be duplicated. (required)
     * @return ApiResponse&lt;CustomerInvoiceTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerInvoiceTemplate> getDuplicateCustomerInvoiceTemplateByIdWithHttpInfo(Integer customerInvoiceTemplateId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateCustomerInvoiceTemplateByIdValidateBeforeCall(customerInvoiceTemplateId, null, null);
        Type localVarReturnType = new TypeToken<CustomerInvoiceTemplate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a customerInvoiceTemplate by id (asynchronously)
     * Returns a duplicated customerInvoiceTemplate identified by the specified id.
     * @param customerInvoiceTemplateId Id of the customerInvoiceTemplate to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateCustomerInvoiceTemplateByIdAsync(Integer customerInvoiceTemplateId, final ApiCallback<CustomerInvoiceTemplate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateCustomerInvoiceTemplateByIdValidateBeforeCall(customerInvoiceTemplateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerInvoiceTemplate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCustomerInvoiceTemplate
     * @param body CustomerInvoiceTemplate to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCustomerInvoiceTemplateCall(CustomerInvoiceTemplate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/customerInvoiceTemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCustomerInvoiceTemplateValidateBeforeCall(CustomerInvoiceTemplate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateCustomerInvoiceTemplate(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCustomerInvoiceTemplateCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a customerInvoiceTemplate
     * Updates an existing customerInvoiceTemplate using the specified data.
     * @param body CustomerInvoiceTemplate to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateCustomerInvoiceTemplate(CustomerInvoiceTemplate body) throws ApiException {
        updateCustomerInvoiceTemplateWithHttpInfo(body);
    }

    /**
     * Update a customerInvoiceTemplate
     * Updates an existing customerInvoiceTemplate using the specified data.
     * @param body CustomerInvoiceTemplate to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateCustomerInvoiceTemplateWithHttpInfo(CustomerInvoiceTemplate body) throws ApiException {
        com.squareup.okhttp.Call call = updateCustomerInvoiceTemplateValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a customerInvoiceTemplate (asynchronously)
     * Updates an existing customerInvoiceTemplate using the specified data.
     * @param body CustomerInvoiceTemplate to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCustomerInvoiceTemplateAsync(CustomerInvoiceTemplate body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCustomerInvoiceTemplateValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
