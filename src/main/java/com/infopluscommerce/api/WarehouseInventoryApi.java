/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.RecordFile;
import com.infopluscommerce.model.WarehouseInventory;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WarehouseInventoryApi {
    private ApiClient apiClient;

    public WarehouseInventoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WarehouseInventoryApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addWarehouseInventoryAudit
     * @param warehouseInventoryId Id of the warehouseInventory to add an audit to (required)
     * @param warehouseInventoryAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addWarehouseInventoryAuditCall(Integer warehouseInventoryId, String warehouseInventoryAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseInventory/{warehouseInventoryId}/audit/{warehouseInventoryAudit}"
            .replaceAll("\\{" + "warehouseInventoryId" + "\\}", apiClient.escapeString(warehouseInventoryId.toString()))
            .replaceAll("\\{" + "warehouseInventoryAudit" + "\\}", apiClient.escapeString(warehouseInventoryAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addWarehouseInventoryAuditValidateBeforeCall(Integer warehouseInventoryId, String warehouseInventoryAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseInventoryId' is set
        if (warehouseInventoryId == null) {
            throw new ApiException("Missing the required parameter 'warehouseInventoryId' when calling addWarehouseInventoryAudit(Async)");
        }
        
        // verify the required parameter 'warehouseInventoryAudit' is set
        if (warehouseInventoryAudit == null) {
            throw new ApiException("Missing the required parameter 'warehouseInventoryAudit' when calling addWarehouseInventoryAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addWarehouseInventoryAuditCall(warehouseInventoryId, warehouseInventoryAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a warehouseInventory
     * Adds an audit to an existing warehouseInventory.
     * @param warehouseInventoryId Id of the warehouseInventory to add an audit to (required)
     * @param warehouseInventoryAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addWarehouseInventoryAudit(Integer warehouseInventoryId, String warehouseInventoryAudit) throws ApiException {
        addWarehouseInventoryAuditWithHttpInfo(warehouseInventoryId, warehouseInventoryAudit);
    }

    /**
     * Add new audit for a warehouseInventory
     * Adds an audit to an existing warehouseInventory.
     * @param warehouseInventoryId Id of the warehouseInventory to add an audit to (required)
     * @param warehouseInventoryAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addWarehouseInventoryAuditWithHttpInfo(Integer warehouseInventoryId, String warehouseInventoryAudit) throws ApiException {
        com.squareup.okhttp.Call call = addWarehouseInventoryAuditValidateBeforeCall(warehouseInventoryId, warehouseInventoryAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a warehouseInventory (asynchronously)
     * Adds an audit to an existing warehouseInventory.
     * @param warehouseInventoryId Id of the warehouseInventory to add an audit to (required)
     * @param warehouseInventoryAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addWarehouseInventoryAuditAsync(Integer warehouseInventoryId, String warehouseInventoryAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addWarehouseInventoryAuditValidateBeforeCall(warehouseInventoryId, warehouseInventoryAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addWarehouseInventoryFile
     * @param warehouseInventoryId Id of the warehouseInventory to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addWarehouseInventoryFileCall(Integer warehouseInventoryId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseInventory/{warehouseInventoryId}/file/{fileName}"
            .replaceAll("\\{" + "warehouseInventoryId" + "\\}", apiClient.escapeString(warehouseInventoryId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addWarehouseInventoryFileValidateBeforeCall(Integer warehouseInventoryId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseInventoryId' is set
        if (warehouseInventoryId == null) {
            throw new ApiException("Missing the required parameter 'warehouseInventoryId' when calling addWarehouseInventoryFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addWarehouseInventoryFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addWarehouseInventoryFileCall(warehouseInventoryId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a warehouseInventory
     * Adds a file to an existing warehouseInventory.
     * @param warehouseInventoryId Id of the warehouseInventory to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addWarehouseInventoryFile(Integer warehouseInventoryId, String fileName) throws ApiException {
        addWarehouseInventoryFileWithHttpInfo(warehouseInventoryId, fileName);
    }

    /**
     * Attach a file to a warehouseInventory
     * Adds a file to an existing warehouseInventory.
     * @param warehouseInventoryId Id of the warehouseInventory to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addWarehouseInventoryFileWithHttpInfo(Integer warehouseInventoryId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addWarehouseInventoryFileValidateBeforeCall(warehouseInventoryId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a warehouseInventory (asynchronously)
     * Adds a file to an existing warehouseInventory.
     * @param warehouseInventoryId Id of the warehouseInventory to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addWarehouseInventoryFileAsync(Integer warehouseInventoryId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addWarehouseInventoryFileValidateBeforeCall(warehouseInventoryId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addWarehouseInventoryFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param warehouseInventoryId Id of the warehouseInventory to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addWarehouseInventoryFileByURLCall(RecordFile body, Integer warehouseInventoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/warehouseInventory/{warehouseInventoryId}/file"
            .replaceAll("\\{" + "warehouseInventoryId" + "\\}", apiClient.escapeString(warehouseInventoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addWarehouseInventoryFileByURLValidateBeforeCall(RecordFile body, Integer warehouseInventoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addWarehouseInventoryFileByURL(Async)");
        }
        
        // verify the required parameter 'warehouseInventoryId' is set
        if (warehouseInventoryId == null) {
            throw new ApiException("Missing the required parameter 'warehouseInventoryId' when calling addWarehouseInventoryFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addWarehouseInventoryFileByURLCall(body, warehouseInventoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a warehouseInventory by URL.
     * Adds a file to an existing warehouseInventory by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param warehouseInventoryId Id of the warehouseInventory to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addWarehouseInventoryFileByURL(RecordFile body, Integer warehouseInventoryId) throws ApiException {
        addWarehouseInventoryFileByURLWithHttpInfo(body, warehouseInventoryId);
    }

    /**
     * Attach a file to a warehouseInventory by URL.
     * Adds a file to an existing warehouseInventory by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param warehouseInventoryId Id of the warehouseInventory to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addWarehouseInventoryFileByURLWithHttpInfo(RecordFile body, Integer warehouseInventoryId) throws ApiException {
        com.squareup.okhttp.Call call = addWarehouseInventoryFileByURLValidateBeforeCall(body, warehouseInventoryId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a warehouseInventory by URL. (asynchronously)
     * Adds a file to an existing warehouseInventory by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param warehouseInventoryId Id of the warehouseInventory to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addWarehouseInventoryFileByURLAsync(RecordFile body, Integer warehouseInventoryId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addWarehouseInventoryFileByURLValidateBeforeCall(body, warehouseInventoryId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addWarehouseInventoryTag
     * @param warehouseInventoryId Id of the warehouseInventory to add a tag to (required)
     * @param warehouseInventoryTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addWarehouseInventoryTagCall(Integer warehouseInventoryId, String warehouseInventoryTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseInventory/{warehouseInventoryId}/tag/{warehouseInventoryTag}"
            .replaceAll("\\{" + "warehouseInventoryId" + "\\}", apiClient.escapeString(warehouseInventoryId.toString()))
            .replaceAll("\\{" + "warehouseInventoryTag" + "\\}", apiClient.escapeString(warehouseInventoryTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addWarehouseInventoryTagValidateBeforeCall(Integer warehouseInventoryId, String warehouseInventoryTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseInventoryId' is set
        if (warehouseInventoryId == null) {
            throw new ApiException("Missing the required parameter 'warehouseInventoryId' when calling addWarehouseInventoryTag(Async)");
        }
        
        // verify the required parameter 'warehouseInventoryTag' is set
        if (warehouseInventoryTag == null) {
            throw new ApiException("Missing the required parameter 'warehouseInventoryTag' when calling addWarehouseInventoryTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addWarehouseInventoryTagCall(warehouseInventoryId, warehouseInventoryTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a warehouseInventory.
     * Adds a tag to an existing warehouseInventory.
     * @param warehouseInventoryId Id of the warehouseInventory to add a tag to (required)
     * @param warehouseInventoryTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addWarehouseInventoryTag(Integer warehouseInventoryId, String warehouseInventoryTag) throws ApiException {
        addWarehouseInventoryTagWithHttpInfo(warehouseInventoryId, warehouseInventoryTag);
    }

    /**
     * Add new tags for a warehouseInventory.
     * Adds a tag to an existing warehouseInventory.
     * @param warehouseInventoryId Id of the warehouseInventory to add a tag to (required)
     * @param warehouseInventoryTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addWarehouseInventoryTagWithHttpInfo(Integer warehouseInventoryId, String warehouseInventoryTag) throws ApiException {
        com.squareup.okhttp.Call call = addWarehouseInventoryTagValidateBeforeCall(warehouseInventoryId, warehouseInventoryTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a warehouseInventory. (asynchronously)
     * Adds a tag to an existing warehouseInventory.
     * @param warehouseInventoryId Id of the warehouseInventory to add a tag to (required)
     * @param warehouseInventoryTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addWarehouseInventoryTagAsync(Integer warehouseInventoryId, String warehouseInventoryTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addWarehouseInventoryTagValidateBeforeCall(warehouseInventoryId, warehouseInventoryTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteWarehouseInventoryFile
     * @param warehouseInventoryId Id of the warehouseInventory to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteWarehouseInventoryFileCall(Integer warehouseInventoryId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseInventory/{warehouseInventoryId}/file/{fileId}"
            .replaceAll("\\{" + "warehouseInventoryId" + "\\}", apiClient.escapeString(warehouseInventoryId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteWarehouseInventoryFileValidateBeforeCall(Integer warehouseInventoryId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseInventoryId' is set
        if (warehouseInventoryId == null) {
            throw new ApiException("Missing the required parameter 'warehouseInventoryId' when calling deleteWarehouseInventoryFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteWarehouseInventoryFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteWarehouseInventoryFileCall(warehouseInventoryId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a warehouseInventory.
     * Deletes an existing warehouseInventory file using the specified data.
     * @param warehouseInventoryId Id of the warehouseInventory to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteWarehouseInventoryFile(Integer warehouseInventoryId, Integer fileId) throws ApiException {
        deleteWarehouseInventoryFileWithHttpInfo(warehouseInventoryId, fileId);
    }

    /**
     * Delete a file for a warehouseInventory.
     * Deletes an existing warehouseInventory file using the specified data.
     * @param warehouseInventoryId Id of the warehouseInventory to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteWarehouseInventoryFileWithHttpInfo(Integer warehouseInventoryId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteWarehouseInventoryFileValidateBeforeCall(warehouseInventoryId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a warehouseInventory. (asynchronously)
     * Deletes an existing warehouseInventory file using the specified data.
     * @param warehouseInventoryId Id of the warehouseInventory to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteWarehouseInventoryFileAsync(Integer warehouseInventoryId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteWarehouseInventoryFileValidateBeforeCall(warehouseInventoryId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteWarehouseInventoryTag
     * @param warehouseInventoryId Id of the warehouseInventory to remove tag from (required)
     * @param warehouseInventoryTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteWarehouseInventoryTagCall(Integer warehouseInventoryId, String warehouseInventoryTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseInventory/{warehouseInventoryId}/tag/{warehouseInventoryTag}"
            .replaceAll("\\{" + "warehouseInventoryId" + "\\}", apiClient.escapeString(warehouseInventoryId.toString()))
            .replaceAll("\\{" + "warehouseInventoryTag" + "\\}", apiClient.escapeString(warehouseInventoryTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteWarehouseInventoryTagValidateBeforeCall(Integer warehouseInventoryId, String warehouseInventoryTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseInventoryId' is set
        if (warehouseInventoryId == null) {
            throw new ApiException("Missing the required parameter 'warehouseInventoryId' when calling deleteWarehouseInventoryTag(Async)");
        }
        
        // verify the required parameter 'warehouseInventoryTag' is set
        if (warehouseInventoryTag == null) {
            throw new ApiException("Missing the required parameter 'warehouseInventoryTag' when calling deleteWarehouseInventoryTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteWarehouseInventoryTagCall(warehouseInventoryId, warehouseInventoryTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a warehouseInventory.
     * Deletes an existing warehouseInventory tag using the specified data.
     * @param warehouseInventoryId Id of the warehouseInventory to remove tag from (required)
     * @param warehouseInventoryTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteWarehouseInventoryTag(Integer warehouseInventoryId, String warehouseInventoryTag) throws ApiException {
        deleteWarehouseInventoryTagWithHttpInfo(warehouseInventoryId, warehouseInventoryTag);
    }

    /**
     * Delete a tag for a warehouseInventory.
     * Deletes an existing warehouseInventory tag using the specified data.
     * @param warehouseInventoryId Id of the warehouseInventory to remove tag from (required)
     * @param warehouseInventoryTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteWarehouseInventoryTagWithHttpInfo(Integer warehouseInventoryId, String warehouseInventoryTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteWarehouseInventoryTagValidateBeforeCall(warehouseInventoryId, warehouseInventoryTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a warehouseInventory. (asynchronously)
     * Deletes an existing warehouseInventory tag using the specified data.
     * @param warehouseInventoryId Id of the warehouseInventory to remove tag from (required)
     * @param warehouseInventoryTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteWarehouseInventoryTagAsync(Integer warehouseInventoryId, String warehouseInventoryTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteWarehouseInventoryTagValidateBeforeCall(warehouseInventoryId, warehouseInventoryTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateWarehouseInventoryById
     * @param warehouseInventoryId Id of the warehouseInventory to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateWarehouseInventoryByIdCall(Integer warehouseInventoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseInventory/duplicate/{warehouseInventoryId}"
            .replaceAll("\\{" + "warehouseInventoryId" + "\\}", apiClient.escapeString(warehouseInventoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateWarehouseInventoryByIdValidateBeforeCall(Integer warehouseInventoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseInventoryId' is set
        if (warehouseInventoryId == null) {
            throw new ApiException("Missing the required parameter 'warehouseInventoryId' when calling getDuplicateWarehouseInventoryById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateWarehouseInventoryByIdCall(warehouseInventoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a warehouseInventory by id
     * Returns a duplicated warehouseInventory identified by the specified id.
     * @param warehouseInventoryId Id of the warehouseInventory to be duplicated. (required)
     * @return WarehouseInventory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WarehouseInventory getDuplicateWarehouseInventoryById(Integer warehouseInventoryId) throws ApiException {
        ApiResponse<WarehouseInventory> resp = getDuplicateWarehouseInventoryByIdWithHttpInfo(warehouseInventoryId);
        return resp.getData();
    }

    /**
     * Get a duplicated a warehouseInventory by id
     * Returns a duplicated warehouseInventory identified by the specified id.
     * @param warehouseInventoryId Id of the warehouseInventory to be duplicated. (required)
     * @return ApiResponse&lt;WarehouseInventory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WarehouseInventory> getDuplicateWarehouseInventoryByIdWithHttpInfo(Integer warehouseInventoryId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateWarehouseInventoryByIdValidateBeforeCall(warehouseInventoryId, null, null);
        Type localVarReturnType = new TypeToken<WarehouseInventory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a warehouseInventory by id (asynchronously)
     * Returns a duplicated warehouseInventory identified by the specified id.
     * @param warehouseInventoryId Id of the warehouseInventory to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateWarehouseInventoryByIdAsync(Integer warehouseInventoryId, final ApiCallback<WarehouseInventory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateWarehouseInventoryByIdValidateBeforeCall(warehouseInventoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WarehouseInventory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWarehouseInventoryByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWarehouseInventoryByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseInventory/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWarehouseInventoryByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getWarehouseInventoryByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search warehouseInventorys by filter
     * Returns the list of warehouseInventorys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;WarehouseInventory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<WarehouseInventory> getWarehouseInventoryByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<WarehouseInventory>> resp = getWarehouseInventoryByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search warehouseInventorys by filter
     * Returns the list of warehouseInventorys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;WarehouseInventory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<WarehouseInventory>> getWarehouseInventoryByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getWarehouseInventoryByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<WarehouseInventory>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search warehouseInventorys by filter (asynchronously)
     * Returns the list of warehouseInventorys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWarehouseInventoryByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<WarehouseInventory>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWarehouseInventoryByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<WarehouseInventory>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWarehouseInventoryById
     * @param warehouseInventoryId Id of the warehouseInventory to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWarehouseInventoryByIdCall(Integer warehouseInventoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseInventory/{warehouseInventoryId}"
            .replaceAll("\\{" + "warehouseInventoryId" + "\\}", apiClient.escapeString(warehouseInventoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWarehouseInventoryByIdValidateBeforeCall(Integer warehouseInventoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseInventoryId' is set
        if (warehouseInventoryId == null) {
            throw new ApiException("Missing the required parameter 'warehouseInventoryId' when calling getWarehouseInventoryById(Async)");
        }
        

        com.squareup.okhttp.Call call = getWarehouseInventoryByIdCall(warehouseInventoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a warehouseInventory by id
     * Returns the warehouseInventory identified by the specified id.
     * @param warehouseInventoryId Id of the warehouseInventory to be returned. (required)
     * @return WarehouseInventory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WarehouseInventory getWarehouseInventoryById(Integer warehouseInventoryId) throws ApiException {
        ApiResponse<WarehouseInventory> resp = getWarehouseInventoryByIdWithHttpInfo(warehouseInventoryId);
        return resp.getData();
    }

    /**
     * Get a warehouseInventory by id
     * Returns the warehouseInventory identified by the specified id.
     * @param warehouseInventoryId Id of the warehouseInventory to be returned. (required)
     * @return ApiResponse&lt;WarehouseInventory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WarehouseInventory> getWarehouseInventoryByIdWithHttpInfo(Integer warehouseInventoryId) throws ApiException {
        com.squareup.okhttp.Call call = getWarehouseInventoryByIdValidateBeforeCall(warehouseInventoryId, null, null);
        Type localVarReturnType = new TypeToken<WarehouseInventory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a warehouseInventory by id (asynchronously)
     * Returns the warehouseInventory identified by the specified id.
     * @param warehouseInventoryId Id of the warehouseInventory to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWarehouseInventoryByIdAsync(Integer warehouseInventoryId, final ApiCallback<WarehouseInventory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWarehouseInventoryByIdValidateBeforeCall(warehouseInventoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WarehouseInventory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWarehouseInventoryFiles
     * @param warehouseInventoryId Id of the warehouseInventory to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWarehouseInventoryFilesCall(Integer warehouseInventoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseInventory/{warehouseInventoryId}/file"
            .replaceAll("\\{" + "warehouseInventoryId" + "\\}", apiClient.escapeString(warehouseInventoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWarehouseInventoryFilesValidateBeforeCall(Integer warehouseInventoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseInventoryId' is set
        if (warehouseInventoryId == null) {
            throw new ApiException("Missing the required parameter 'warehouseInventoryId' when calling getWarehouseInventoryFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getWarehouseInventoryFilesCall(warehouseInventoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a warehouseInventory.
     * Get all existing warehouseInventory files.
     * @param warehouseInventoryId Id of the warehouseInventory to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getWarehouseInventoryFiles(Integer warehouseInventoryId) throws ApiException {
        getWarehouseInventoryFilesWithHttpInfo(warehouseInventoryId);
    }

    /**
     * Get the files for a warehouseInventory.
     * Get all existing warehouseInventory files.
     * @param warehouseInventoryId Id of the warehouseInventory to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getWarehouseInventoryFilesWithHttpInfo(Integer warehouseInventoryId) throws ApiException {
        com.squareup.okhttp.Call call = getWarehouseInventoryFilesValidateBeforeCall(warehouseInventoryId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a warehouseInventory. (asynchronously)
     * Get all existing warehouseInventory files.
     * @param warehouseInventoryId Id of the warehouseInventory to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWarehouseInventoryFilesAsync(Integer warehouseInventoryId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWarehouseInventoryFilesValidateBeforeCall(warehouseInventoryId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getWarehouseInventoryTags
     * @param warehouseInventoryId Id of the warehouseInventory to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWarehouseInventoryTagsCall(Integer warehouseInventoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseInventory/{warehouseInventoryId}/tag"
            .replaceAll("\\{" + "warehouseInventoryId" + "\\}", apiClient.escapeString(warehouseInventoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWarehouseInventoryTagsValidateBeforeCall(Integer warehouseInventoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseInventoryId' is set
        if (warehouseInventoryId == null) {
            throw new ApiException("Missing the required parameter 'warehouseInventoryId' when calling getWarehouseInventoryTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getWarehouseInventoryTagsCall(warehouseInventoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a warehouseInventory.
     * Get all existing warehouseInventory tags.
     * @param warehouseInventoryId Id of the warehouseInventory to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getWarehouseInventoryTags(Integer warehouseInventoryId) throws ApiException {
        getWarehouseInventoryTagsWithHttpInfo(warehouseInventoryId);
    }

    /**
     * Get the tags for a warehouseInventory.
     * Get all existing warehouseInventory tags.
     * @param warehouseInventoryId Id of the warehouseInventory to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getWarehouseInventoryTagsWithHttpInfo(Integer warehouseInventoryId) throws ApiException {
        com.squareup.okhttp.Call call = getWarehouseInventoryTagsValidateBeforeCall(warehouseInventoryId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a warehouseInventory. (asynchronously)
     * Get all existing warehouseInventory tags.
     * @param warehouseInventoryId Id of the warehouseInventory to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWarehouseInventoryTagsAsync(Integer warehouseInventoryId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWarehouseInventoryTagsValidateBeforeCall(warehouseInventoryId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
