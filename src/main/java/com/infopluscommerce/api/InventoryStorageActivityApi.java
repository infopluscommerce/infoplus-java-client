/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.InventoryStorageActivity;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InventoryStorageActivityApi {
    private ApiClient apiClient;

    public InventoryStorageActivityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InventoryStorageActivityApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addInventoryStorageActivity
     * @param body InventoryStorageActivity to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInventoryStorageActivityCall(InventoryStorageActivity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/inventoryStorageActivity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInventoryStorageActivityValidateBeforeCall(InventoryStorageActivity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addInventoryStorageActivity(Async)");
        }
        

        com.squareup.okhttp.Call call = addInventoryStorageActivityCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an inventoryStorageActivity
     * Inserts a new inventoryStorageActivity using the specified data.
     * @param body InventoryStorageActivity to be inserted. (required)
     * @return InventoryStorageActivity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InventoryStorageActivity addInventoryStorageActivity(InventoryStorageActivity body) throws ApiException {
        ApiResponse<InventoryStorageActivity> resp = addInventoryStorageActivityWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create an inventoryStorageActivity
     * Inserts a new inventoryStorageActivity using the specified data.
     * @param body InventoryStorageActivity to be inserted. (required)
     * @return ApiResponse&lt;InventoryStorageActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InventoryStorageActivity> addInventoryStorageActivityWithHttpInfo(InventoryStorageActivity body) throws ApiException {
        com.squareup.okhttp.Call call = addInventoryStorageActivityValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<InventoryStorageActivity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an inventoryStorageActivity (asynchronously)
     * Inserts a new inventoryStorageActivity using the specified data.
     * @param body InventoryStorageActivity to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInventoryStorageActivityAsync(InventoryStorageActivity body, final ApiCallback<InventoryStorageActivity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInventoryStorageActivityValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InventoryStorageActivity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addInventoryStorageActivityAudit
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to add an audit to (required)
     * @param inventoryStorageActivityAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInventoryStorageActivityAuditCall(Integer inventoryStorageActivityId, String inventoryStorageActivityAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryStorageActivity/{inventoryStorageActivityId}/audit/{inventoryStorageActivityAudit}"
            .replaceAll("\\{" + "inventoryStorageActivityId" + "\\}", apiClient.escapeString(inventoryStorageActivityId.toString()))
            .replaceAll("\\{" + "inventoryStorageActivityAudit" + "\\}", apiClient.escapeString(inventoryStorageActivityAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInventoryStorageActivityAuditValidateBeforeCall(Integer inventoryStorageActivityId, String inventoryStorageActivityAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryStorageActivityId' is set
        if (inventoryStorageActivityId == null) {
            throw new ApiException("Missing the required parameter 'inventoryStorageActivityId' when calling addInventoryStorageActivityAudit(Async)");
        }
        
        // verify the required parameter 'inventoryStorageActivityAudit' is set
        if (inventoryStorageActivityAudit == null) {
            throw new ApiException("Missing the required parameter 'inventoryStorageActivityAudit' when calling addInventoryStorageActivityAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addInventoryStorageActivityAuditCall(inventoryStorageActivityId, inventoryStorageActivityAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for an inventoryStorageActivity
     * Adds an audit to an existing inventoryStorageActivity.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to add an audit to (required)
     * @param inventoryStorageActivityAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addInventoryStorageActivityAudit(Integer inventoryStorageActivityId, String inventoryStorageActivityAudit) throws ApiException {
        addInventoryStorageActivityAuditWithHttpInfo(inventoryStorageActivityId, inventoryStorageActivityAudit);
    }

    /**
     * Add new audit for an inventoryStorageActivity
     * Adds an audit to an existing inventoryStorageActivity.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to add an audit to (required)
     * @param inventoryStorageActivityAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addInventoryStorageActivityAuditWithHttpInfo(Integer inventoryStorageActivityId, String inventoryStorageActivityAudit) throws ApiException {
        com.squareup.okhttp.Call call = addInventoryStorageActivityAuditValidateBeforeCall(inventoryStorageActivityId, inventoryStorageActivityAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for an inventoryStorageActivity (asynchronously)
     * Adds an audit to an existing inventoryStorageActivity.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to add an audit to (required)
     * @param inventoryStorageActivityAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInventoryStorageActivityAuditAsync(Integer inventoryStorageActivityId, String inventoryStorageActivityAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInventoryStorageActivityAuditValidateBeforeCall(inventoryStorageActivityId, inventoryStorageActivityAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addInventoryStorageActivityFile
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInventoryStorageActivityFileCall(Integer inventoryStorageActivityId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryStorageActivity/{inventoryStorageActivityId}/file/{fileName}"
            .replaceAll("\\{" + "inventoryStorageActivityId" + "\\}", apiClient.escapeString(inventoryStorageActivityId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInventoryStorageActivityFileValidateBeforeCall(Integer inventoryStorageActivityId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryStorageActivityId' is set
        if (inventoryStorageActivityId == null) {
            throw new ApiException("Missing the required parameter 'inventoryStorageActivityId' when calling addInventoryStorageActivityFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addInventoryStorageActivityFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addInventoryStorageActivityFileCall(inventoryStorageActivityId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an inventoryStorageActivity
     * Adds a file to an existing inventoryStorageActivity.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addInventoryStorageActivityFile(Integer inventoryStorageActivityId, String fileName) throws ApiException {
        addInventoryStorageActivityFileWithHttpInfo(inventoryStorageActivityId, fileName);
    }

    /**
     * Attach a file to an inventoryStorageActivity
     * Adds a file to an existing inventoryStorageActivity.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addInventoryStorageActivityFileWithHttpInfo(Integer inventoryStorageActivityId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addInventoryStorageActivityFileValidateBeforeCall(inventoryStorageActivityId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an inventoryStorageActivity (asynchronously)
     * Adds a file to an existing inventoryStorageActivity.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInventoryStorageActivityFileAsync(Integer inventoryStorageActivityId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInventoryStorageActivityFileValidateBeforeCall(inventoryStorageActivityId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addInventoryStorageActivityFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInventoryStorageActivityFileByURLCall(RecordFile body, Integer inventoryStorageActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/inventoryStorageActivity/{inventoryStorageActivityId}/file"
            .replaceAll("\\{" + "inventoryStorageActivityId" + "\\}", apiClient.escapeString(inventoryStorageActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInventoryStorageActivityFileByURLValidateBeforeCall(RecordFile body, Integer inventoryStorageActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addInventoryStorageActivityFileByURL(Async)");
        }
        
        // verify the required parameter 'inventoryStorageActivityId' is set
        if (inventoryStorageActivityId == null) {
            throw new ApiException("Missing the required parameter 'inventoryStorageActivityId' when calling addInventoryStorageActivityFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addInventoryStorageActivityFileByURLCall(body, inventoryStorageActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an inventoryStorageActivity by URL.
     * Adds a file to an existing inventoryStorageActivity by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addInventoryStorageActivityFileByURL(RecordFile body, Integer inventoryStorageActivityId) throws ApiException {
        addInventoryStorageActivityFileByURLWithHttpInfo(body, inventoryStorageActivityId);
    }

    /**
     * Attach a file to an inventoryStorageActivity by URL.
     * Adds a file to an existing inventoryStorageActivity by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addInventoryStorageActivityFileByURLWithHttpInfo(RecordFile body, Integer inventoryStorageActivityId) throws ApiException {
        com.squareup.okhttp.Call call = addInventoryStorageActivityFileByURLValidateBeforeCall(body, inventoryStorageActivityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an inventoryStorageActivity by URL. (asynchronously)
     * Adds a file to an existing inventoryStorageActivity by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInventoryStorageActivityFileByURLAsync(RecordFile body, Integer inventoryStorageActivityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInventoryStorageActivityFileByURLValidateBeforeCall(body, inventoryStorageActivityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addInventoryStorageActivityTag
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to add a tag to (required)
     * @param inventoryStorageActivityTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInventoryStorageActivityTagCall(Integer inventoryStorageActivityId, String inventoryStorageActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryStorageActivity/{inventoryStorageActivityId}/tag/{inventoryStorageActivityTag}"
            .replaceAll("\\{" + "inventoryStorageActivityId" + "\\}", apiClient.escapeString(inventoryStorageActivityId.toString()))
            .replaceAll("\\{" + "inventoryStorageActivityTag" + "\\}", apiClient.escapeString(inventoryStorageActivityTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInventoryStorageActivityTagValidateBeforeCall(Integer inventoryStorageActivityId, String inventoryStorageActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryStorageActivityId' is set
        if (inventoryStorageActivityId == null) {
            throw new ApiException("Missing the required parameter 'inventoryStorageActivityId' when calling addInventoryStorageActivityTag(Async)");
        }
        
        // verify the required parameter 'inventoryStorageActivityTag' is set
        if (inventoryStorageActivityTag == null) {
            throw new ApiException("Missing the required parameter 'inventoryStorageActivityTag' when calling addInventoryStorageActivityTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addInventoryStorageActivityTagCall(inventoryStorageActivityId, inventoryStorageActivityTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for an inventoryStorageActivity.
     * Adds a tag to an existing inventoryStorageActivity.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to add a tag to (required)
     * @param inventoryStorageActivityTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addInventoryStorageActivityTag(Integer inventoryStorageActivityId, String inventoryStorageActivityTag) throws ApiException {
        addInventoryStorageActivityTagWithHttpInfo(inventoryStorageActivityId, inventoryStorageActivityTag);
    }

    /**
     * Add new tags for an inventoryStorageActivity.
     * Adds a tag to an existing inventoryStorageActivity.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to add a tag to (required)
     * @param inventoryStorageActivityTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addInventoryStorageActivityTagWithHttpInfo(Integer inventoryStorageActivityId, String inventoryStorageActivityTag) throws ApiException {
        com.squareup.okhttp.Call call = addInventoryStorageActivityTagValidateBeforeCall(inventoryStorageActivityId, inventoryStorageActivityTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for an inventoryStorageActivity. (asynchronously)
     * Adds a tag to an existing inventoryStorageActivity.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to add a tag to (required)
     * @param inventoryStorageActivityTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInventoryStorageActivityTagAsync(Integer inventoryStorageActivityId, String inventoryStorageActivityTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInventoryStorageActivityTagValidateBeforeCall(inventoryStorageActivityId, inventoryStorageActivityTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteInventoryStorageActivity
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteInventoryStorageActivityCall(Integer inventoryStorageActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryStorageActivity/{inventoryStorageActivityId}"
            .replaceAll("\\{" + "inventoryStorageActivityId" + "\\}", apiClient.escapeString(inventoryStorageActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteInventoryStorageActivityValidateBeforeCall(Integer inventoryStorageActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryStorageActivityId' is set
        if (inventoryStorageActivityId == null) {
            throw new ApiException("Missing the required parameter 'inventoryStorageActivityId' when calling deleteInventoryStorageActivity(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteInventoryStorageActivityCall(inventoryStorageActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an inventoryStorageActivity
     * Deletes the inventoryStorageActivity identified by the specified id.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteInventoryStorageActivity(Integer inventoryStorageActivityId) throws ApiException {
        deleteInventoryStorageActivityWithHttpInfo(inventoryStorageActivityId);
    }

    /**
     * Delete an inventoryStorageActivity
     * Deletes the inventoryStorageActivity identified by the specified id.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteInventoryStorageActivityWithHttpInfo(Integer inventoryStorageActivityId) throws ApiException {
        com.squareup.okhttp.Call call = deleteInventoryStorageActivityValidateBeforeCall(inventoryStorageActivityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an inventoryStorageActivity (asynchronously)
     * Deletes the inventoryStorageActivity identified by the specified id.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInventoryStorageActivityAsync(Integer inventoryStorageActivityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInventoryStorageActivityValidateBeforeCall(inventoryStorageActivityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteInventoryStorageActivityFile
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteInventoryStorageActivityFileCall(Integer inventoryStorageActivityId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryStorageActivity/{inventoryStorageActivityId}/file/{fileId}"
            .replaceAll("\\{" + "inventoryStorageActivityId" + "\\}", apiClient.escapeString(inventoryStorageActivityId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteInventoryStorageActivityFileValidateBeforeCall(Integer inventoryStorageActivityId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryStorageActivityId' is set
        if (inventoryStorageActivityId == null) {
            throw new ApiException("Missing the required parameter 'inventoryStorageActivityId' when calling deleteInventoryStorageActivityFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteInventoryStorageActivityFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteInventoryStorageActivityFileCall(inventoryStorageActivityId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for an inventoryStorageActivity.
     * Deletes an existing inventoryStorageActivity file using the specified data.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteInventoryStorageActivityFile(Integer inventoryStorageActivityId, Integer fileId) throws ApiException {
        deleteInventoryStorageActivityFileWithHttpInfo(inventoryStorageActivityId, fileId);
    }

    /**
     * Delete a file for an inventoryStorageActivity.
     * Deletes an existing inventoryStorageActivity file using the specified data.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteInventoryStorageActivityFileWithHttpInfo(Integer inventoryStorageActivityId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteInventoryStorageActivityFileValidateBeforeCall(inventoryStorageActivityId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for an inventoryStorageActivity. (asynchronously)
     * Deletes an existing inventoryStorageActivity file using the specified data.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInventoryStorageActivityFileAsync(Integer inventoryStorageActivityId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInventoryStorageActivityFileValidateBeforeCall(inventoryStorageActivityId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteInventoryStorageActivityTag
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to remove tag from (required)
     * @param inventoryStorageActivityTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteInventoryStorageActivityTagCall(Integer inventoryStorageActivityId, String inventoryStorageActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryStorageActivity/{inventoryStorageActivityId}/tag/{inventoryStorageActivityTag}"
            .replaceAll("\\{" + "inventoryStorageActivityId" + "\\}", apiClient.escapeString(inventoryStorageActivityId.toString()))
            .replaceAll("\\{" + "inventoryStorageActivityTag" + "\\}", apiClient.escapeString(inventoryStorageActivityTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteInventoryStorageActivityTagValidateBeforeCall(Integer inventoryStorageActivityId, String inventoryStorageActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryStorageActivityId' is set
        if (inventoryStorageActivityId == null) {
            throw new ApiException("Missing the required parameter 'inventoryStorageActivityId' when calling deleteInventoryStorageActivityTag(Async)");
        }
        
        // verify the required parameter 'inventoryStorageActivityTag' is set
        if (inventoryStorageActivityTag == null) {
            throw new ApiException("Missing the required parameter 'inventoryStorageActivityTag' when calling deleteInventoryStorageActivityTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteInventoryStorageActivityTagCall(inventoryStorageActivityId, inventoryStorageActivityTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for an inventoryStorageActivity.
     * Deletes an existing inventoryStorageActivity tag using the specified data.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to remove tag from (required)
     * @param inventoryStorageActivityTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteInventoryStorageActivityTag(Integer inventoryStorageActivityId, String inventoryStorageActivityTag) throws ApiException {
        deleteInventoryStorageActivityTagWithHttpInfo(inventoryStorageActivityId, inventoryStorageActivityTag);
    }

    /**
     * Delete a tag for an inventoryStorageActivity.
     * Deletes an existing inventoryStorageActivity tag using the specified data.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to remove tag from (required)
     * @param inventoryStorageActivityTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteInventoryStorageActivityTagWithHttpInfo(Integer inventoryStorageActivityId, String inventoryStorageActivityTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteInventoryStorageActivityTagValidateBeforeCall(inventoryStorageActivityId, inventoryStorageActivityTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for an inventoryStorageActivity. (asynchronously)
     * Deletes an existing inventoryStorageActivity tag using the specified data.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to remove tag from (required)
     * @param inventoryStorageActivityTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInventoryStorageActivityTagAsync(Integer inventoryStorageActivityId, String inventoryStorageActivityTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInventoryStorageActivityTagValidateBeforeCall(inventoryStorageActivityId, inventoryStorageActivityTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateInventoryStorageActivityById
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateInventoryStorageActivityByIdCall(Integer inventoryStorageActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryStorageActivity/duplicate/{inventoryStorageActivityId}"
            .replaceAll("\\{" + "inventoryStorageActivityId" + "\\}", apiClient.escapeString(inventoryStorageActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateInventoryStorageActivityByIdValidateBeforeCall(Integer inventoryStorageActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryStorageActivityId' is set
        if (inventoryStorageActivityId == null) {
            throw new ApiException("Missing the required parameter 'inventoryStorageActivityId' when calling getDuplicateInventoryStorageActivityById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateInventoryStorageActivityByIdCall(inventoryStorageActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated an inventoryStorageActivity by id
     * Returns a duplicated inventoryStorageActivity identified by the specified id.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to be duplicated. (required)
     * @return InventoryStorageActivity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InventoryStorageActivity getDuplicateInventoryStorageActivityById(Integer inventoryStorageActivityId) throws ApiException {
        ApiResponse<InventoryStorageActivity> resp = getDuplicateInventoryStorageActivityByIdWithHttpInfo(inventoryStorageActivityId);
        return resp.getData();
    }

    /**
     * Get a duplicated an inventoryStorageActivity by id
     * Returns a duplicated inventoryStorageActivity identified by the specified id.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to be duplicated. (required)
     * @return ApiResponse&lt;InventoryStorageActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InventoryStorageActivity> getDuplicateInventoryStorageActivityByIdWithHttpInfo(Integer inventoryStorageActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateInventoryStorageActivityByIdValidateBeforeCall(inventoryStorageActivityId, null, null);
        Type localVarReturnType = new TypeToken<InventoryStorageActivity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated an inventoryStorageActivity by id (asynchronously)
     * Returns a duplicated inventoryStorageActivity identified by the specified id.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateInventoryStorageActivityByIdAsync(Integer inventoryStorageActivityId, final ApiCallback<InventoryStorageActivity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateInventoryStorageActivityByIdValidateBeforeCall(inventoryStorageActivityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InventoryStorageActivity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInventoryStorageActivityByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInventoryStorageActivityByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryStorageActivity/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInventoryStorageActivityByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getInventoryStorageActivityByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search inventoryStorageActivitys by filter
     * Returns the list of inventoryStorageActivitys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;InventoryStorageActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InventoryStorageActivity> getInventoryStorageActivityByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<InventoryStorageActivity>> resp = getInventoryStorageActivityByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search inventoryStorageActivitys by filter
     * Returns the list of inventoryStorageActivitys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;InventoryStorageActivity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InventoryStorageActivity>> getInventoryStorageActivityByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getInventoryStorageActivityByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<InventoryStorageActivity>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search inventoryStorageActivitys by filter (asynchronously)
     * Returns the list of inventoryStorageActivitys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInventoryStorageActivityByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<InventoryStorageActivity>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInventoryStorageActivityByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InventoryStorageActivity>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInventoryStorageActivityById
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInventoryStorageActivityByIdCall(Integer inventoryStorageActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryStorageActivity/{inventoryStorageActivityId}"
            .replaceAll("\\{" + "inventoryStorageActivityId" + "\\}", apiClient.escapeString(inventoryStorageActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInventoryStorageActivityByIdValidateBeforeCall(Integer inventoryStorageActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryStorageActivityId' is set
        if (inventoryStorageActivityId == null) {
            throw new ApiException("Missing the required parameter 'inventoryStorageActivityId' when calling getInventoryStorageActivityById(Async)");
        }
        

        com.squareup.okhttp.Call call = getInventoryStorageActivityByIdCall(inventoryStorageActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an inventoryStorageActivity by id
     * Returns the inventoryStorageActivity identified by the specified id.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to be returned. (required)
     * @return InventoryStorageActivity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InventoryStorageActivity getInventoryStorageActivityById(Integer inventoryStorageActivityId) throws ApiException {
        ApiResponse<InventoryStorageActivity> resp = getInventoryStorageActivityByIdWithHttpInfo(inventoryStorageActivityId);
        return resp.getData();
    }

    /**
     * Get an inventoryStorageActivity by id
     * Returns the inventoryStorageActivity identified by the specified id.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to be returned. (required)
     * @return ApiResponse&lt;InventoryStorageActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InventoryStorageActivity> getInventoryStorageActivityByIdWithHttpInfo(Integer inventoryStorageActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getInventoryStorageActivityByIdValidateBeforeCall(inventoryStorageActivityId, null, null);
        Type localVarReturnType = new TypeToken<InventoryStorageActivity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an inventoryStorageActivity by id (asynchronously)
     * Returns the inventoryStorageActivity identified by the specified id.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInventoryStorageActivityByIdAsync(Integer inventoryStorageActivityId, final ApiCallback<InventoryStorageActivity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInventoryStorageActivityByIdValidateBeforeCall(inventoryStorageActivityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InventoryStorageActivity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInventoryStorageActivityFiles
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInventoryStorageActivityFilesCall(Integer inventoryStorageActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryStorageActivity/{inventoryStorageActivityId}/file"
            .replaceAll("\\{" + "inventoryStorageActivityId" + "\\}", apiClient.escapeString(inventoryStorageActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInventoryStorageActivityFilesValidateBeforeCall(Integer inventoryStorageActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryStorageActivityId' is set
        if (inventoryStorageActivityId == null) {
            throw new ApiException("Missing the required parameter 'inventoryStorageActivityId' when calling getInventoryStorageActivityFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getInventoryStorageActivityFilesCall(inventoryStorageActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for an inventoryStorageActivity.
     * Get all existing inventoryStorageActivity files.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getInventoryStorageActivityFiles(Integer inventoryStorageActivityId) throws ApiException {
        getInventoryStorageActivityFilesWithHttpInfo(inventoryStorageActivityId);
    }

    /**
     * Get the files for an inventoryStorageActivity.
     * Get all existing inventoryStorageActivity files.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getInventoryStorageActivityFilesWithHttpInfo(Integer inventoryStorageActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getInventoryStorageActivityFilesValidateBeforeCall(inventoryStorageActivityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for an inventoryStorageActivity. (asynchronously)
     * Get all existing inventoryStorageActivity files.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInventoryStorageActivityFilesAsync(Integer inventoryStorageActivityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInventoryStorageActivityFilesValidateBeforeCall(inventoryStorageActivityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getInventoryStorageActivityTags
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInventoryStorageActivityTagsCall(Integer inventoryStorageActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/inventoryStorageActivity/{inventoryStorageActivityId}/tag"
            .replaceAll("\\{" + "inventoryStorageActivityId" + "\\}", apiClient.escapeString(inventoryStorageActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInventoryStorageActivityTagsValidateBeforeCall(Integer inventoryStorageActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inventoryStorageActivityId' is set
        if (inventoryStorageActivityId == null) {
            throw new ApiException("Missing the required parameter 'inventoryStorageActivityId' when calling getInventoryStorageActivityTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getInventoryStorageActivityTagsCall(inventoryStorageActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for an inventoryStorageActivity.
     * Get all existing inventoryStorageActivity tags.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getInventoryStorageActivityTags(Integer inventoryStorageActivityId) throws ApiException {
        getInventoryStorageActivityTagsWithHttpInfo(inventoryStorageActivityId);
    }

    /**
     * Get the tags for an inventoryStorageActivity.
     * Get all existing inventoryStorageActivity tags.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getInventoryStorageActivityTagsWithHttpInfo(Integer inventoryStorageActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getInventoryStorageActivityTagsValidateBeforeCall(inventoryStorageActivityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for an inventoryStorageActivity. (asynchronously)
     * Get all existing inventoryStorageActivity tags.
     * @param inventoryStorageActivityId Id of the inventoryStorageActivity to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInventoryStorageActivityTagsAsync(Integer inventoryStorageActivityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInventoryStorageActivityTagsValidateBeforeCall(inventoryStorageActivityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateInventoryStorageActivity
     * @param body InventoryStorageActivity to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateInventoryStorageActivityCall(InventoryStorageActivity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/inventoryStorageActivity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateInventoryStorageActivityValidateBeforeCall(InventoryStorageActivity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateInventoryStorageActivity(Async)");
        }
        

        com.squareup.okhttp.Call call = updateInventoryStorageActivityCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an inventoryStorageActivity
     * Updates an existing inventoryStorageActivity using the specified data.
     * @param body InventoryStorageActivity to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateInventoryStorageActivity(InventoryStorageActivity body) throws ApiException {
        updateInventoryStorageActivityWithHttpInfo(body);
    }

    /**
     * Update an inventoryStorageActivity
     * Updates an existing inventoryStorageActivity using the specified data.
     * @param body InventoryStorageActivity to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateInventoryStorageActivityWithHttpInfo(InventoryStorageActivity body) throws ApiException {
        com.squareup.okhttp.Call call = updateInventoryStorageActivityValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an inventoryStorageActivity (asynchronously)
     * Updates an existing inventoryStorageActivity using the specified data.
     * @param body InventoryStorageActivity to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateInventoryStorageActivityAsync(InventoryStorageActivity body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateInventoryStorageActivityValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
