/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.RecordFile;
import com.infopluscommerce.model.WarehouseDocument;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WarehouseDocumentApi {
    private ApiClient apiClient;

    public WarehouseDocumentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WarehouseDocumentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addWarehouseDocumentAudit
     * @param warehouseDocumentId Id of the warehouseDocument to add an audit to (required)
     * @param warehouseDocumentAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addWarehouseDocumentAuditCall(Integer warehouseDocumentId, String warehouseDocumentAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseDocument/{warehouseDocumentId}/audit/{warehouseDocumentAudit}"
            .replaceAll("\\{" + "warehouseDocumentId" + "\\}", apiClient.escapeString(warehouseDocumentId.toString()))
            .replaceAll("\\{" + "warehouseDocumentAudit" + "\\}", apiClient.escapeString(warehouseDocumentAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addWarehouseDocumentAuditValidateBeforeCall(Integer warehouseDocumentId, String warehouseDocumentAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseDocumentId' is set
        if (warehouseDocumentId == null) {
            throw new ApiException("Missing the required parameter 'warehouseDocumentId' when calling addWarehouseDocumentAudit(Async)");
        }
        
        // verify the required parameter 'warehouseDocumentAudit' is set
        if (warehouseDocumentAudit == null) {
            throw new ApiException("Missing the required parameter 'warehouseDocumentAudit' when calling addWarehouseDocumentAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addWarehouseDocumentAuditCall(warehouseDocumentId, warehouseDocumentAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a warehouseDocument
     * Adds an audit to an existing warehouseDocument.
     * @param warehouseDocumentId Id of the warehouseDocument to add an audit to (required)
     * @param warehouseDocumentAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addWarehouseDocumentAudit(Integer warehouseDocumentId, String warehouseDocumentAudit) throws ApiException {
        addWarehouseDocumentAuditWithHttpInfo(warehouseDocumentId, warehouseDocumentAudit);
    }

    /**
     * Add new audit for a warehouseDocument
     * Adds an audit to an existing warehouseDocument.
     * @param warehouseDocumentId Id of the warehouseDocument to add an audit to (required)
     * @param warehouseDocumentAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addWarehouseDocumentAuditWithHttpInfo(Integer warehouseDocumentId, String warehouseDocumentAudit) throws ApiException {
        com.squareup.okhttp.Call call = addWarehouseDocumentAuditValidateBeforeCall(warehouseDocumentId, warehouseDocumentAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a warehouseDocument (asynchronously)
     * Adds an audit to an existing warehouseDocument.
     * @param warehouseDocumentId Id of the warehouseDocument to add an audit to (required)
     * @param warehouseDocumentAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addWarehouseDocumentAuditAsync(Integer warehouseDocumentId, String warehouseDocumentAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addWarehouseDocumentAuditValidateBeforeCall(warehouseDocumentId, warehouseDocumentAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addWarehouseDocumentFile
     * @param warehouseDocumentId Id of the warehouseDocument to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addWarehouseDocumentFileCall(Integer warehouseDocumentId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseDocument/{warehouseDocumentId}/file/{fileName}"
            .replaceAll("\\{" + "warehouseDocumentId" + "\\}", apiClient.escapeString(warehouseDocumentId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addWarehouseDocumentFileValidateBeforeCall(Integer warehouseDocumentId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseDocumentId' is set
        if (warehouseDocumentId == null) {
            throw new ApiException("Missing the required parameter 'warehouseDocumentId' when calling addWarehouseDocumentFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addWarehouseDocumentFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addWarehouseDocumentFileCall(warehouseDocumentId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a warehouseDocument
     * Adds a file to an existing warehouseDocument.
     * @param warehouseDocumentId Id of the warehouseDocument to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addWarehouseDocumentFile(Integer warehouseDocumentId, String fileName) throws ApiException {
        addWarehouseDocumentFileWithHttpInfo(warehouseDocumentId, fileName);
    }

    /**
     * Attach a file to a warehouseDocument
     * Adds a file to an existing warehouseDocument.
     * @param warehouseDocumentId Id of the warehouseDocument to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addWarehouseDocumentFileWithHttpInfo(Integer warehouseDocumentId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addWarehouseDocumentFileValidateBeforeCall(warehouseDocumentId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a warehouseDocument (asynchronously)
     * Adds a file to an existing warehouseDocument.
     * @param warehouseDocumentId Id of the warehouseDocument to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addWarehouseDocumentFileAsync(Integer warehouseDocumentId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addWarehouseDocumentFileValidateBeforeCall(warehouseDocumentId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addWarehouseDocumentFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param warehouseDocumentId Id of the warehouseDocument to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addWarehouseDocumentFileByURLCall(RecordFile body, Integer warehouseDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/warehouseDocument/{warehouseDocumentId}/file"
            .replaceAll("\\{" + "warehouseDocumentId" + "\\}", apiClient.escapeString(warehouseDocumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addWarehouseDocumentFileByURLValidateBeforeCall(RecordFile body, Integer warehouseDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addWarehouseDocumentFileByURL(Async)");
        }
        
        // verify the required parameter 'warehouseDocumentId' is set
        if (warehouseDocumentId == null) {
            throw new ApiException("Missing the required parameter 'warehouseDocumentId' when calling addWarehouseDocumentFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addWarehouseDocumentFileByURLCall(body, warehouseDocumentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a warehouseDocument by URL.
     * Adds a file to an existing warehouseDocument by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param warehouseDocumentId Id of the warehouseDocument to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addWarehouseDocumentFileByURL(RecordFile body, Integer warehouseDocumentId) throws ApiException {
        addWarehouseDocumentFileByURLWithHttpInfo(body, warehouseDocumentId);
    }

    /**
     * Attach a file to a warehouseDocument by URL.
     * Adds a file to an existing warehouseDocument by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param warehouseDocumentId Id of the warehouseDocument to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addWarehouseDocumentFileByURLWithHttpInfo(RecordFile body, Integer warehouseDocumentId) throws ApiException {
        com.squareup.okhttp.Call call = addWarehouseDocumentFileByURLValidateBeforeCall(body, warehouseDocumentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a warehouseDocument by URL. (asynchronously)
     * Adds a file to an existing warehouseDocument by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param warehouseDocumentId Id of the warehouseDocument to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addWarehouseDocumentFileByURLAsync(RecordFile body, Integer warehouseDocumentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addWarehouseDocumentFileByURLValidateBeforeCall(body, warehouseDocumentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addWarehouseDocumentTag
     * @param warehouseDocumentId Id of the warehouseDocument to add a tag to (required)
     * @param warehouseDocumentTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addWarehouseDocumentTagCall(Integer warehouseDocumentId, String warehouseDocumentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseDocument/{warehouseDocumentId}/tag/{warehouseDocumentTag}"
            .replaceAll("\\{" + "warehouseDocumentId" + "\\}", apiClient.escapeString(warehouseDocumentId.toString()))
            .replaceAll("\\{" + "warehouseDocumentTag" + "\\}", apiClient.escapeString(warehouseDocumentTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addWarehouseDocumentTagValidateBeforeCall(Integer warehouseDocumentId, String warehouseDocumentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseDocumentId' is set
        if (warehouseDocumentId == null) {
            throw new ApiException("Missing the required parameter 'warehouseDocumentId' when calling addWarehouseDocumentTag(Async)");
        }
        
        // verify the required parameter 'warehouseDocumentTag' is set
        if (warehouseDocumentTag == null) {
            throw new ApiException("Missing the required parameter 'warehouseDocumentTag' when calling addWarehouseDocumentTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addWarehouseDocumentTagCall(warehouseDocumentId, warehouseDocumentTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a warehouseDocument.
     * Adds a tag to an existing warehouseDocument.
     * @param warehouseDocumentId Id of the warehouseDocument to add a tag to (required)
     * @param warehouseDocumentTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addWarehouseDocumentTag(Integer warehouseDocumentId, String warehouseDocumentTag) throws ApiException {
        addWarehouseDocumentTagWithHttpInfo(warehouseDocumentId, warehouseDocumentTag);
    }

    /**
     * Add new tags for a warehouseDocument.
     * Adds a tag to an existing warehouseDocument.
     * @param warehouseDocumentId Id of the warehouseDocument to add a tag to (required)
     * @param warehouseDocumentTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addWarehouseDocumentTagWithHttpInfo(Integer warehouseDocumentId, String warehouseDocumentTag) throws ApiException {
        com.squareup.okhttp.Call call = addWarehouseDocumentTagValidateBeforeCall(warehouseDocumentId, warehouseDocumentTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a warehouseDocument. (asynchronously)
     * Adds a tag to an existing warehouseDocument.
     * @param warehouseDocumentId Id of the warehouseDocument to add a tag to (required)
     * @param warehouseDocumentTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addWarehouseDocumentTagAsync(Integer warehouseDocumentId, String warehouseDocumentTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addWarehouseDocumentTagValidateBeforeCall(warehouseDocumentId, warehouseDocumentTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteWarehouseDocumentFile
     * @param warehouseDocumentId Id of the warehouseDocument to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteWarehouseDocumentFileCall(Integer warehouseDocumentId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseDocument/{warehouseDocumentId}/file/{fileId}"
            .replaceAll("\\{" + "warehouseDocumentId" + "\\}", apiClient.escapeString(warehouseDocumentId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteWarehouseDocumentFileValidateBeforeCall(Integer warehouseDocumentId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseDocumentId' is set
        if (warehouseDocumentId == null) {
            throw new ApiException("Missing the required parameter 'warehouseDocumentId' when calling deleteWarehouseDocumentFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteWarehouseDocumentFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteWarehouseDocumentFileCall(warehouseDocumentId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a warehouseDocument.
     * Deletes an existing warehouseDocument file using the specified data.
     * @param warehouseDocumentId Id of the warehouseDocument to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteWarehouseDocumentFile(Integer warehouseDocumentId, Integer fileId) throws ApiException {
        deleteWarehouseDocumentFileWithHttpInfo(warehouseDocumentId, fileId);
    }

    /**
     * Delete a file for a warehouseDocument.
     * Deletes an existing warehouseDocument file using the specified data.
     * @param warehouseDocumentId Id of the warehouseDocument to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteWarehouseDocumentFileWithHttpInfo(Integer warehouseDocumentId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteWarehouseDocumentFileValidateBeforeCall(warehouseDocumentId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a warehouseDocument. (asynchronously)
     * Deletes an existing warehouseDocument file using the specified data.
     * @param warehouseDocumentId Id of the warehouseDocument to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteWarehouseDocumentFileAsync(Integer warehouseDocumentId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteWarehouseDocumentFileValidateBeforeCall(warehouseDocumentId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteWarehouseDocumentTag
     * @param warehouseDocumentId Id of the warehouseDocument to remove tag from (required)
     * @param warehouseDocumentTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteWarehouseDocumentTagCall(Integer warehouseDocumentId, String warehouseDocumentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseDocument/{warehouseDocumentId}/tag/{warehouseDocumentTag}"
            .replaceAll("\\{" + "warehouseDocumentId" + "\\}", apiClient.escapeString(warehouseDocumentId.toString()))
            .replaceAll("\\{" + "warehouseDocumentTag" + "\\}", apiClient.escapeString(warehouseDocumentTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteWarehouseDocumentTagValidateBeforeCall(Integer warehouseDocumentId, String warehouseDocumentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseDocumentId' is set
        if (warehouseDocumentId == null) {
            throw new ApiException("Missing the required parameter 'warehouseDocumentId' when calling deleteWarehouseDocumentTag(Async)");
        }
        
        // verify the required parameter 'warehouseDocumentTag' is set
        if (warehouseDocumentTag == null) {
            throw new ApiException("Missing the required parameter 'warehouseDocumentTag' when calling deleteWarehouseDocumentTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteWarehouseDocumentTagCall(warehouseDocumentId, warehouseDocumentTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a warehouseDocument.
     * Deletes an existing warehouseDocument tag using the specified data.
     * @param warehouseDocumentId Id of the warehouseDocument to remove tag from (required)
     * @param warehouseDocumentTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteWarehouseDocumentTag(Integer warehouseDocumentId, String warehouseDocumentTag) throws ApiException {
        deleteWarehouseDocumentTagWithHttpInfo(warehouseDocumentId, warehouseDocumentTag);
    }

    /**
     * Delete a tag for a warehouseDocument.
     * Deletes an existing warehouseDocument tag using the specified data.
     * @param warehouseDocumentId Id of the warehouseDocument to remove tag from (required)
     * @param warehouseDocumentTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteWarehouseDocumentTagWithHttpInfo(Integer warehouseDocumentId, String warehouseDocumentTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteWarehouseDocumentTagValidateBeforeCall(warehouseDocumentId, warehouseDocumentTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a warehouseDocument. (asynchronously)
     * Deletes an existing warehouseDocument tag using the specified data.
     * @param warehouseDocumentId Id of the warehouseDocument to remove tag from (required)
     * @param warehouseDocumentTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteWarehouseDocumentTagAsync(Integer warehouseDocumentId, String warehouseDocumentTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteWarehouseDocumentTagValidateBeforeCall(warehouseDocumentId, warehouseDocumentTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateWarehouseDocumentById
     * @param warehouseDocumentId Id of the warehouseDocument to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateWarehouseDocumentByIdCall(Integer warehouseDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseDocument/duplicate/{warehouseDocumentId}"
            .replaceAll("\\{" + "warehouseDocumentId" + "\\}", apiClient.escapeString(warehouseDocumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateWarehouseDocumentByIdValidateBeforeCall(Integer warehouseDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseDocumentId' is set
        if (warehouseDocumentId == null) {
            throw new ApiException("Missing the required parameter 'warehouseDocumentId' when calling getDuplicateWarehouseDocumentById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateWarehouseDocumentByIdCall(warehouseDocumentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a warehouseDocument by id
     * Returns a duplicated warehouseDocument identified by the specified id.
     * @param warehouseDocumentId Id of the warehouseDocument to be duplicated. (required)
     * @return WarehouseDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WarehouseDocument getDuplicateWarehouseDocumentById(Integer warehouseDocumentId) throws ApiException {
        ApiResponse<WarehouseDocument> resp = getDuplicateWarehouseDocumentByIdWithHttpInfo(warehouseDocumentId);
        return resp.getData();
    }

    /**
     * Get a duplicated a warehouseDocument by id
     * Returns a duplicated warehouseDocument identified by the specified id.
     * @param warehouseDocumentId Id of the warehouseDocument to be duplicated. (required)
     * @return ApiResponse&lt;WarehouseDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WarehouseDocument> getDuplicateWarehouseDocumentByIdWithHttpInfo(Integer warehouseDocumentId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateWarehouseDocumentByIdValidateBeforeCall(warehouseDocumentId, null, null);
        Type localVarReturnType = new TypeToken<WarehouseDocument>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a warehouseDocument by id (asynchronously)
     * Returns a duplicated warehouseDocument identified by the specified id.
     * @param warehouseDocumentId Id of the warehouseDocument to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateWarehouseDocumentByIdAsync(Integer warehouseDocumentId, final ApiCallback<WarehouseDocument> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateWarehouseDocumentByIdValidateBeforeCall(warehouseDocumentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WarehouseDocument>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWarehouseDocumentByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWarehouseDocumentByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseDocument/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWarehouseDocumentByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getWarehouseDocumentByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search warehouseDocuments by filter
     * Returns the list of warehouseDocuments that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;WarehouseDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<WarehouseDocument> getWarehouseDocumentByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<WarehouseDocument>> resp = getWarehouseDocumentByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search warehouseDocuments by filter
     * Returns the list of warehouseDocuments that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;WarehouseDocument&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<WarehouseDocument>> getWarehouseDocumentByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getWarehouseDocumentByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<WarehouseDocument>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search warehouseDocuments by filter (asynchronously)
     * Returns the list of warehouseDocuments that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWarehouseDocumentByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<WarehouseDocument>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWarehouseDocumentByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<WarehouseDocument>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWarehouseDocumentById
     * @param warehouseDocumentId Id of the warehouseDocument to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWarehouseDocumentByIdCall(Integer warehouseDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseDocument/{warehouseDocumentId}"
            .replaceAll("\\{" + "warehouseDocumentId" + "\\}", apiClient.escapeString(warehouseDocumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWarehouseDocumentByIdValidateBeforeCall(Integer warehouseDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseDocumentId' is set
        if (warehouseDocumentId == null) {
            throw new ApiException("Missing the required parameter 'warehouseDocumentId' when calling getWarehouseDocumentById(Async)");
        }
        

        com.squareup.okhttp.Call call = getWarehouseDocumentByIdCall(warehouseDocumentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a warehouseDocument by id
     * Returns the warehouseDocument identified by the specified id.
     * @param warehouseDocumentId Id of the warehouseDocument to be returned. (required)
     * @return WarehouseDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WarehouseDocument getWarehouseDocumentById(Integer warehouseDocumentId) throws ApiException {
        ApiResponse<WarehouseDocument> resp = getWarehouseDocumentByIdWithHttpInfo(warehouseDocumentId);
        return resp.getData();
    }

    /**
     * Get a warehouseDocument by id
     * Returns the warehouseDocument identified by the specified id.
     * @param warehouseDocumentId Id of the warehouseDocument to be returned. (required)
     * @return ApiResponse&lt;WarehouseDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WarehouseDocument> getWarehouseDocumentByIdWithHttpInfo(Integer warehouseDocumentId) throws ApiException {
        com.squareup.okhttp.Call call = getWarehouseDocumentByIdValidateBeforeCall(warehouseDocumentId, null, null);
        Type localVarReturnType = new TypeToken<WarehouseDocument>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a warehouseDocument by id (asynchronously)
     * Returns the warehouseDocument identified by the specified id.
     * @param warehouseDocumentId Id of the warehouseDocument to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWarehouseDocumentByIdAsync(Integer warehouseDocumentId, final ApiCallback<WarehouseDocument> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWarehouseDocumentByIdValidateBeforeCall(warehouseDocumentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WarehouseDocument>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWarehouseDocumentFiles
     * @param warehouseDocumentId Id of the warehouseDocument to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWarehouseDocumentFilesCall(Integer warehouseDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseDocument/{warehouseDocumentId}/file"
            .replaceAll("\\{" + "warehouseDocumentId" + "\\}", apiClient.escapeString(warehouseDocumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWarehouseDocumentFilesValidateBeforeCall(Integer warehouseDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseDocumentId' is set
        if (warehouseDocumentId == null) {
            throw new ApiException("Missing the required parameter 'warehouseDocumentId' when calling getWarehouseDocumentFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getWarehouseDocumentFilesCall(warehouseDocumentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a warehouseDocument.
     * Get all existing warehouseDocument files.
     * @param warehouseDocumentId Id of the warehouseDocument to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getWarehouseDocumentFiles(Integer warehouseDocumentId) throws ApiException {
        getWarehouseDocumentFilesWithHttpInfo(warehouseDocumentId);
    }

    /**
     * Get the files for a warehouseDocument.
     * Get all existing warehouseDocument files.
     * @param warehouseDocumentId Id of the warehouseDocument to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getWarehouseDocumentFilesWithHttpInfo(Integer warehouseDocumentId) throws ApiException {
        com.squareup.okhttp.Call call = getWarehouseDocumentFilesValidateBeforeCall(warehouseDocumentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a warehouseDocument. (asynchronously)
     * Get all existing warehouseDocument files.
     * @param warehouseDocumentId Id of the warehouseDocument to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWarehouseDocumentFilesAsync(Integer warehouseDocumentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWarehouseDocumentFilesValidateBeforeCall(warehouseDocumentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getWarehouseDocumentTags
     * @param warehouseDocumentId Id of the warehouseDocument to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWarehouseDocumentTagsCall(Integer warehouseDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseDocument/{warehouseDocumentId}/tag"
            .replaceAll("\\{" + "warehouseDocumentId" + "\\}", apiClient.escapeString(warehouseDocumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWarehouseDocumentTagsValidateBeforeCall(Integer warehouseDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseDocumentId' is set
        if (warehouseDocumentId == null) {
            throw new ApiException("Missing the required parameter 'warehouseDocumentId' when calling getWarehouseDocumentTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getWarehouseDocumentTagsCall(warehouseDocumentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a warehouseDocument.
     * Get all existing warehouseDocument tags.
     * @param warehouseDocumentId Id of the warehouseDocument to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getWarehouseDocumentTags(Integer warehouseDocumentId) throws ApiException {
        getWarehouseDocumentTagsWithHttpInfo(warehouseDocumentId);
    }

    /**
     * Get the tags for a warehouseDocument.
     * Get all existing warehouseDocument tags.
     * @param warehouseDocumentId Id of the warehouseDocument to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getWarehouseDocumentTagsWithHttpInfo(Integer warehouseDocumentId) throws ApiException {
        com.squareup.okhttp.Call call = getWarehouseDocumentTagsValidateBeforeCall(warehouseDocumentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a warehouseDocument. (asynchronously)
     * Get all existing warehouseDocument tags.
     * @param warehouseDocumentId Id of the warehouseDocument to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWarehouseDocumentTagsAsync(Integer warehouseDocumentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWarehouseDocumentTagsValidateBeforeCall(warehouseDocumentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateWarehouseDocumentCustomFields
     * @param body WarehouseDocument to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateWarehouseDocumentCustomFieldsCall(WarehouseDocument body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/warehouseDocument/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateWarehouseDocumentCustomFieldsValidateBeforeCall(WarehouseDocument body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateWarehouseDocumentCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateWarehouseDocumentCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a warehouseDocument custom fields
     * Updates an existing warehouseDocument custom fields using the specified data.
     * @param body WarehouseDocument to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateWarehouseDocumentCustomFields(WarehouseDocument body) throws ApiException {
        updateWarehouseDocumentCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a warehouseDocument custom fields
     * Updates an existing warehouseDocument custom fields using the specified data.
     * @param body WarehouseDocument to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateWarehouseDocumentCustomFieldsWithHttpInfo(WarehouseDocument body) throws ApiException {
        com.squareup.okhttp.Call call = updateWarehouseDocumentCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a warehouseDocument custom fields (asynchronously)
     * Updates an existing warehouseDocument custom fields using the specified data.
     * @param body WarehouseDocument to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateWarehouseDocumentCustomFieldsAsync(WarehouseDocument body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateWarehouseDocumentCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
