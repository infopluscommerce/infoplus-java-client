/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.InvoiceWorksheetLine;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InvoiceWorksheetLineApi {
    private ApiClient apiClient;

    public InvoiceWorksheetLineApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InvoiceWorksheetLineApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addInvoiceWorksheetLine
     * @param body InvoiceWorksheetLine to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInvoiceWorksheetLineCall(InvoiceWorksheetLine body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheetLine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInvoiceWorksheetLineValidateBeforeCall(InvoiceWorksheetLine body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addInvoiceWorksheetLine(Async)");
        }
        

        com.squareup.okhttp.Call call = addInvoiceWorksheetLineCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an invoiceWorksheetLine
     * Inserts a new invoiceWorksheetLine using the specified data.
     * @param body InvoiceWorksheetLine to be inserted. (required)
     * @return InvoiceWorksheetLine
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InvoiceWorksheetLine addInvoiceWorksheetLine(InvoiceWorksheetLine body) throws ApiException {
        ApiResponse<InvoiceWorksheetLine> resp = addInvoiceWorksheetLineWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create an invoiceWorksheetLine
     * Inserts a new invoiceWorksheetLine using the specified data.
     * @param body InvoiceWorksheetLine to be inserted. (required)
     * @return ApiResponse&lt;InvoiceWorksheetLine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InvoiceWorksheetLine> addInvoiceWorksheetLineWithHttpInfo(InvoiceWorksheetLine body) throws ApiException {
        com.squareup.okhttp.Call call = addInvoiceWorksheetLineValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<InvoiceWorksheetLine>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an invoiceWorksheetLine (asynchronously)
     * Inserts a new invoiceWorksheetLine using the specified data.
     * @param body InvoiceWorksheetLine to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInvoiceWorksheetLineAsync(InvoiceWorksheetLine body, final ApiCallback<InvoiceWorksheetLine> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInvoiceWorksheetLineValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InvoiceWorksheetLine>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addInvoiceWorksheetLineAudit
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to add an audit to (required)
     * @param invoiceWorksheetLineAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInvoiceWorksheetLineAuditCall(Integer invoiceWorksheetLineId, String invoiceWorksheetLineAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheetLine/{invoiceWorksheetLineId}/audit/{invoiceWorksheetLineAudit}"
            .replaceAll("\\{" + "invoiceWorksheetLineId" + "\\}", apiClient.escapeString(invoiceWorksheetLineId.toString()))
            .replaceAll("\\{" + "invoiceWorksheetLineAudit" + "\\}", apiClient.escapeString(invoiceWorksheetLineAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInvoiceWorksheetLineAuditValidateBeforeCall(Integer invoiceWorksheetLineId, String invoiceWorksheetLineAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoiceWorksheetLineId' is set
        if (invoiceWorksheetLineId == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetLineId' when calling addInvoiceWorksheetLineAudit(Async)");
        }
        
        // verify the required parameter 'invoiceWorksheetLineAudit' is set
        if (invoiceWorksheetLineAudit == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetLineAudit' when calling addInvoiceWorksheetLineAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addInvoiceWorksheetLineAuditCall(invoiceWorksheetLineId, invoiceWorksheetLineAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for an invoiceWorksheetLine
     * Adds an audit to an existing invoiceWorksheetLine.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to add an audit to (required)
     * @param invoiceWorksheetLineAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addInvoiceWorksheetLineAudit(Integer invoiceWorksheetLineId, String invoiceWorksheetLineAudit) throws ApiException {
        addInvoiceWorksheetLineAuditWithHttpInfo(invoiceWorksheetLineId, invoiceWorksheetLineAudit);
    }

    /**
     * Add new audit for an invoiceWorksheetLine
     * Adds an audit to an existing invoiceWorksheetLine.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to add an audit to (required)
     * @param invoiceWorksheetLineAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addInvoiceWorksheetLineAuditWithHttpInfo(Integer invoiceWorksheetLineId, String invoiceWorksheetLineAudit) throws ApiException {
        com.squareup.okhttp.Call call = addInvoiceWorksheetLineAuditValidateBeforeCall(invoiceWorksheetLineId, invoiceWorksheetLineAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for an invoiceWorksheetLine (asynchronously)
     * Adds an audit to an existing invoiceWorksheetLine.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to add an audit to (required)
     * @param invoiceWorksheetLineAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInvoiceWorksheetLineAuditAsync(Integer invoiceWorksheetLineId, String invoiceWorksheetLineAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInvoiceWorksheetLineAuditValidateBeforeCall(invoiceWorksheetLineId, invoiceWorksheetLineAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addInvoiceWorksheetLineFile
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInvoiceWorksheetLineFileCall(Integer invoiceWorksheetLineId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheetLine/{invoiceWorksheetLineId}/file/{fileName}"
            .replaceAll("\\{" + "invoiceWorksheetLineId" + "\\}", apiClient.escapeString(invoiceWorksheetLineId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInvoiceWorksheetLineFileValidateBeforeCall(Integer invoiceWorksheetLineId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoiceWorksheetLineId' is set
        if (invoiceWorksheetLineId == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetLineId' when calling addInvoiceWorksheetLineFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addInvoiceWorksheetLineFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addInvoiceWorksheetLineFileCall(invoiceWorksheetLineId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an invoiceWorksheetLine
     * Adds a file to an existing invoiceWorksheetLine.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addInvoiceWorksheetLineFile(Integer invoiceWorksheetLineId, String fileName) throws ApiException {
        addInvoiceWorksheetLineFileWithHttpInfo(invoiceWorksheetLineId, fileName);
    }

    /**
     * Attach a file to an invoiceWorksheetLine
     * Adds a file to an existing invoiceWorksheetLine.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addInvoiceWorksheetLineFileWithHttpInfo(Integer invoiceWorksheetLineId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addInvoiceWorksheetLineFileValidateBeforeCall(invoiceWorksheetLineId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an invoiceWorksheetLine (asynchronously)
     * Adds a file to an existing invoiceWorksheetLine.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInvoiceWorksheetLineFileAsync(Integer invoiceWorksheetLineId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInvoiceWorksheetLineFileValidateBeforeCall(invoiceWorksheetLineId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addInvoiceWorksheetLineFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInvoiceWorksheetLineFileByURLCall(RecordFile body, Integer invoiceWorksheetLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheetLine/{invoiceWorksheetLineId}/file"
            .replaceAll("\\{" + "invoiceWorksheetLineId" + "\\}", apiClient.escapeString(invoiceWorksheetLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInvoiceWorksheetLineFileByURLValidateBeforeCall(RecordFile body, Integer invoiceWorksheetLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addInvoiceWorksheetLineFileByURL(Async)");
        }
        
        // verify the required parameter 'invoiceWorksheetLineId' is set
        if (invoiceWorksheetLineId == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetLineId' when calling addInvoiceWorksheetLineFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addInvoiceWorksheetLineFileByURLCall(body, invoiceWorksheetLineId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an invoiceWorksheetLine by URL.
     * Adds a file to an existing invoiceWorksheetLine by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addInvoiceWorksheetLineFileByURL(RecordFile body, Integer invoiceWorksheetLineId) throws ApiException {
        addInvoiceWorksheetLineFileByURLWithHttpInfo(body, invoiceWorksheetLineId);
    }

    /**
     * Attach a file to an invoiceWorksheetLine by URL.
     * Adds a file to an existing invoiceWorksheetLine by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addInvoiceWorksheetLineFileByURLWithHttpInfo(RecordFile body, Integer invoiceWorksheetLineId) throws ApiException {
        com.squareup.okhttp.Call call = addInvoiceWorksheetLineFileByURLValidateBeforeCall(body, invoiceWorksheetLineId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an invoiceWorksheetLine by URL. (asynchronously)
     * Adds a file to an existing invoiceWorksheetLine by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInvoiceWorksheetLineFileByURLAsync(RecordFile body, Integer invoiceWorksheetLineId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInvoiceWorksheetLineFileByURLValidateBeforeCall(body, invoiceWorksheetLineId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addInvoiceWorksheetLineTag
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to add a tag to (required)
     * @param invoiceWorksheetLineTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInvoiceWorksheetLineTagCall(Integer invoiceWorksheetLineId, String invoiceWorksheetLineTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheetLine/{invoiceWorksheetLineId}/tag/{invoiceWorksheetLineTag}"
            .replaceAll("\\{" + "invoiceWorksheetLineId" + "\\}", apiClient.escapeString(invoiceWorksheetLineId.toString()))
            .replaceAll("\\{" + "invoiceWorksheetLineTag" + "\\}", apiClient.escapeString(invoiceWorksheetLineTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInvoiceWorksheetLineTagValidateBeforeCall(Integer invoiceWorksheetLineId, String invoiceWorksheetLineTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoiceWorksheetLineId' is set
        if (invoiceWorksheetLineId == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetLineId' when calling addInvoiceWorksheetLineTag(Async)");
        }
        
        // verify the required parameter 'invoiceWorksheetLineTag' is set
        if (invoiceWorksheetLineTag == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetLineTag' when calling addInvoiceWorksheetLineTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addInvoiceWorksheetLineTagCall(invoiceWorksheetLineId, invoiceWorksheetLineTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for an invoiceWorksheetLine.
     * Adds a tag to an existing invoiceWorksheetLine.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to add a tag to (required)
     * @param invoiceWorksheetLineTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addInvoiceWorksheetLineTag(Integer invoiceWorksheetLineId, String invoiceWorksheetLineTag) throws ApiException {
        addInvoiceWorksheetLineTagWithHttpInfo(invoiceWorksheetLineId, invoiceWorksheetLineTag);
    }

    /**
     * Add new tags for an invoiceWorksheetLine.
     * Adds a tag to an existing invoiceWorksheetLine.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to add a tag to (required)
     * @param invoiceWorksheetLineTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addInvoiceWorksheetLineTagWithHttpInfo(Integer invoiceWorksheetLineId, String invoiceWorksheetLineTag) throws ApiException {
        com.squareup.okhttp.Call call = addInvoiceWorksheetLineTagValidateBeforeCall(invoiceWorksheetLineId, invoiceWorksheetLineTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for an invoiceWorksheetLine. (asynchronously)
     * Adds a tag to an existing invoiceWorksheetLine.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to add a tag to (required)
     * @param invoiceWorksheetLineTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInvoiceWorksheetLineTagAsync(Integer invoiceWorksheetLineId, String invoiceWorksheetLineTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInvoiceWorksheetLineTagValidateBeforeCall(invoiceWorksheetLineId, invoiceWorksheetLineTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteInvoiceWorksheetLine
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteInvoiceWorksheetLineCall(Integer invoiceWorksheetLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheetLine/{invoiceWorksheetLineId}"
            .replaceAll("\\{" + "invoiceWorksheetLineId" + "\\}", apiClient.escapeString(invoiceWorksheetLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteInvoiceWorksheetLineValidateBeforeCall(Integer invoiceWorksheetLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoiceWorksheetLineId' is set
        if (invoiceWorksheetLineId == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetLineId' when calling deleteInvoiceWorksheetLine(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteInvoiceWorksheetLineCall(invoiceWorksheetLineId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an invoiceWorksheetLine
     * Deletes the invoiceWorksheetLine identified by the specified id.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteInvoiceWorksheetLine(Integer invoiceWorksheetLineId) throws ApiException {
        deleteInvoiceWorksheetLineWithHttpInfo(invoiceWorksheetLineId);
    }

    /**
     * Delete an invoiceWorksheetLine
     * Deletes the invoiceWorksheetLine identified by the specified id.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteInvoiceWorksheetLineWithHttpInfo(Integer invoiceWorksheetLineId) throws ApiException {
        com.squareup.okhttp.Call call = deleteInvoiceWorksheetLineValidateBeforeCall(invoiceWorksheetLineId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an invoiceWorksheetLine (asynchronously)
     * Deletes the invoiceWorksheetLine identified by the specified id.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInvoiceWorksheetLineAsync(Integer invoiceWorksheetLineId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInvoiceWorksheetLineValidateBeforeCall(invoiceWorksheetLineId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteInvoiceWorksheetLineFile
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteInvoiceWorksheetLineFileCall(Integer invoiceWorksheetLineId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheetLine/{invoiceWorksheetLineId}/file/{fileId}"
            .replaceAll("\\{" + "invoiceWorksheetLineId" + "\\}", apiClient.escapeString(invoiceWorksheetLineId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteInvoiceWorksheetLineFileValidateBeforeCall(Integer invoiceWorksheetLineId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoiceWorksheetLineId' is set
        if (invoiceWorksheetLineId == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetLineId' when calling deleteInvoiceWorksheetLineFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteInvoiceWorksheetLineFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteInvoiceWorksheetLineFileCall(invoiceWorksheetLineId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for an invoiceWorksheetLine.
     * Deletes an existing invoiceWorksheetLine file using the specified data.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteInvoiceWorksheetLineFile(Integer invoiceWorksheetLineId, Integer fileId) throws ApiException {
        deleteInvoiceWorksheetLineFileWithHttpInfo(invoiceWorksheetLineId, fileId);
    }

    /**
     * Delete a file for an invoiceWorksheetLine.
     * Deletes an existing invoiceWorksheetLine file using the specified data.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteInvoiceWorksheetLineFileWithHttpInfo(Integer invoiceWorksheetLineId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteInvoiceWorksheetLineFileValidateBeforeCall(invoiceWorksheetLineId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for an invoiceWorksheetLine. (asynchronously)
     * Deletes an existing invoiceWorksheetLine file using the specified data.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInvoiceWorksheetLineFileAsync(Integer invoiceWorksheetLineId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInvoiceWorksheetLineFileValidateBeforeCall(invoiceWorksheetLineId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteInvoiceWorksheetLineTag
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to remove tag from (required)
     * @param invoiceWorksheetLineTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteInvoiceWorksheetLineTagCall(Integer invoiceWorksheetLineId, String invoiceWorksheetLineTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheetLine/{invoiceWorksheetLineId}/tag/{invoiceWorksheetLineTag}"
            .replaceAll("\\{" + "invoiceWorksheetLineId" + "\\}", apiClient.escapeString(invoiceWorksheetLineId.toString()))
            .replaceAll("\\{" + "invoiceWorksheetLineTag" + "\\}", apiClient.escapeString(invoiceWorksheetLineTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteInvoiceWorksheetLineTagValidateBeforeCall(Integer invoiceWorksheetLineId, String invoiceWorksheetLineTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoiceWorksheetLineId' is set
        if (invoiceWorksheetLineId == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetLineId' when calling deleteInvoiceWorksheetLineTag(Async)");
        }
        
        // verify the required parameter 'invoiceWorksheetLineTag' is set
        if (invoiceWorksheetLineTag == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetLineTag' when calling deleteInvoiceWorksheetLineTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteInvoiceWorksheetLineTagCall(invoiceWorksheetLineId, invoiceWorksheetLineTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for an invoiceWorksheetLine.
     * Deletes an existing invoiceWorksheetLine tag using the specified data.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to remove tag from (required)
     * @param invoiceWorksheetLineTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteInvoiceWorksheetLineTag(Integer invoiceWorksheetLineId, String invoiceWorksheetLineTag) throws ApiException {
        deleteInvoiceWorksheetLineTagWithHttpInfo(invoiceWorksheetLineId, invoiceWorksheetLineTag);
    }

    /**
     * Delete a tag for an invoiceWorksheetLine.
     * Deletes an existing invoiceWorksheetLine tag using the specified data.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to remove tag from (required)
     * @param invoiceWorksheetLineTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteInvoiceWorksheetLineTagWithHttpInfo(Integer invoiceWorksheetLineId, String invoiceWorksheetLineTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteInvoiceWorksheetLineTagValidateBeforeCall(invoiceWorksheetLineId, invoiceWorksheetLineTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for an invoiceWorksheetLine. (asynchronously)
     * Deletes an existing invoiceWorksheetLine tag using the specified data.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to remove tag from (required)
     * @param invoiceWorksheetLineTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInvoiceWorksheetLineTagAsync(Integer invoiceWorksheetLineId, String invoiceWorksheetLineTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInvoiceWorksheetLineTagValidateBeforeCall(invoiceWorksheetLineId, invoiceWorksheetLineTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateInvoiceWorksheetLineById
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateInvoiceWorksheetLineByIdCall(Integer invoiceWorksheetLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheetLine/duplicate/{invoiceWorksheetLineId}"
            .replaceAll("\\{" + "invoiceWorksheetLineId" + "\\}", apiClient.escapeString(invoiceWorksheetLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateInvoiceWorksheetLineByIdValidateBeforeCall(Integer invoiceWorksheetLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoiceWorksheetLineId' is set
        if (invoiceWorksheetLineId == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetLineId' when calling getDuplicateInvoiceWorksheetLineById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateInvoiceWorksheetLineByIdCall(invoiceWorksheetLineId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated an invoiceWorksheetLine by id
     * Returns a duplicated invoiceWorksheetLine identified by the specified id.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to be duplicated. (required)
     * @return InvoiceWorksheetLine
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InvoiceWorksheetLine getDuplicateInvoiceWorksheetLineById(Integer invoiceWorksheetLineId) throws ApiException {
        ApiResponse<InvoiceWorksheetLine> resp = getDuplicateInvoiceWorksheetLineByIdWithHttpInfo(invoiceWorksheetLineId);
        return resp.getData();
    }

    /**
     * Get a duplicated an invoiceWorksheetLine by id
     * Returns a duplicated invoiceWorksheetLine identified by the specified id.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to be duplicated. (required)
     * @return ApiResponse&lt;InvoiceWorksheetLine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InvoiceWorksheetLine> getDuplicateInvoiceWorksheetLineByIdWithHttpInfo(Integer invoiceWorksheetLineId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateInvoiceWorksheetLineByIdValidateBeforeCall(invoiceWorksheetLineId, null, null);
        Type localVarReturnType = new TypeToken<InvoiceWorksheetLine>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated an invoiceWorksheetLine by id (asynchronously)
     * Returns a duplicated invoiceWorksheetLine identified by the specified id.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateInvoiceWorksheetLineByIdAsync(Integer invoiceWorksheetLineId, final ApiCallback<InvoiceWorksheetLine> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateInvoiceWorksheetLineByIdValidateBeforeCall(invoiceWorksheetLineId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InvoiceWorksheetLine>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInvoiceWorksheetLineByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInvoiceWorksheetLineByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheetLine/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInvoiceWorksheetLineByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getInvoiceWorksheetLineByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search invoiceWorksheetLines by filter
     * Returns the list of invoiceWorksheetLines that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;InvoiceWorksheetLine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InvoiceWorksheetLine> getInvoiceWorksheetLineByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<InvoiceWorksheetLine>> resp = getInvoiceWorksheetLineByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search invoiceWorksheetLines by filter
     * Returns the list of invoiceWorksheetLines that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;InvoiceWorksheetLine&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InvoiceWorksheetLine>> getInvoiceWorksheetLineByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getInvoiceWorksheetLineByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<InvoiceWorksheetLine>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search invoiceWorksheetLines by filter (asynchronously)
     * Returns the list of invoiceWorksheetLines that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInvoiceWorksheetLineByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<InvoiceWorksheetLine>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInvoiceWorksheetLineByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InvoiceWorksheetLine>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInvoiceWorksheetLineById
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInvoiceWorksheetLineByIdCall(Integer invoiceWorksheetLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheetLine/{invoiceWorksheetLineId}"
            .replaceAll("\\{" + "invoiceWorksheetLineId" + "\\}", apiClient.escapeString(invoiceWorksheetLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInvoiceWorksheetLineByIdValidateBeforeCall(Integer invoiceWorksheetLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoiceWorksheetLineId' is set
        if (invoiceWorksheetLineId == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetLineId' when calling getInvoiceWorksheetLineById(Async)");
        }
        

        com.squareup.okhttp.Call call = getInvoiceWorksheetLineByIdCall(invoiceWorksheetLineId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an invoiceWorksheetLine by id
     * Returns the invoiceWorksheetLine identified by the specified id.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to be returned. (required)
     * @return InvoiceWorksheetLine
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InvoiceWorksheetLine getInvoiceWorksheetLineById(Integer invoiceWorksheetLineId) throws ApiException {
        ApiResponse<InvoiceWorksheetLine> resp = getInvoiceWorksheetLineByIdWithHttpInfo(invoiceWorksheetLineId);
        return resp.getData();
    }

    /**
     * Get an invoiceWorksheetLine by id
     * Returns the invoiceWorksheetLine identified by the specified id.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to be returned. (required)
     * @return ApiResponse&lt;InvoiceWorksheetLine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InvoiceWorksheetLine> getInvoiceWorksheetLineByIdWithHttpInfo(Integer invoiceWorksheetLineId) throws ApiException {
        com.squareup.okhttp.Call call = getInvoiceWorksheetLineByIdValidateBeforeCall(invoiceWorksheetLineId, null, null);
        Type localVarReturnType = new TypeToken<InvoiceWorksheetLine>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an invoiceWorksheetLine by id (asynchronously)
     * Returns the invoiceWorksheetLine identified by the specified id.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInvoiceWorksheetLineByIdAsync(Integer invoiceWorksheetLineId, final ApiCallback<InvoiceWorksheetLine> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInvoiceWorksheetLineByIdValidateBeforeCall(invoiceWorksheetLineId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InvoiceWorksheetLine>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInvoiceWorksheetLineFiles
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInvoiceWorksheetLineFilesCall(Integer invoiceWorksheetLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheetLine/{invoiceWorksheetLineId}/file"
            .replaceAll("\\{" + "invoiceWorksheetLineId" + "\\}", apiClient.escapeString(invoiceWorksheetLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInvoiceWorksheetLineFilesValidateBeforeCall(Integer invoiceWorksheetLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoiceWorksheetLineId' is set
        if (invoiceWorksheetLineId == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetLineId' when calling getInvoiceWorksheetLineFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getInvoiceWorksheetLineFilesCall(invoiceWorksheetLineId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for an invoiceWorksheetLine.
     * Get all existing invoiceWorksheetLine files.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getInvoiceWorksheetLineFiles(Integer invoiceWorksheetLineId) throws ApiException {
        getInvoiceWorksheetLineFilesWithHttpInfo(invoiceWorksheetLineId);
    }

    /**
     * Get the files for an invoiceWorksheetLine.
     * Get all existing invoiceWorksheetLine files.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getInvoiceWorksheetLineFilesWithHttpInfo(Integer invoiceWorksheetLineId) throws ApiException {
        com.squareup.okhttp.Call call = getInvoiceWorksheetLineFilesValidateBeforeCall(invoiceWorksheetLineId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for an invoiceWorksheetLine. (asynchronously)
     * Get all existing invoiceWorksheetLine files.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInvoiceWorksheetLineFilesAsync(Integer invoiceWorksheetLineId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInvoiceWorksheetLineFilesValidateBeforeCall(invoiceWorksheetLineId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getInvoiceWorksheetLineTags
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInvoiceWorksheetLineTagsCall(Integer invoiceWorksheetLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheetLine/{invoiceWorksheetLineId}/tag"
            .replaceAll("\\{" + "invoiceWorksheetLineId" + "\\}", apiClient.escapeString(invoiceWorksheetLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInvoiceWorksheetLineTagsValidateBeforeCall(Integer invoiceWorksheetLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoiceWorksheetLineId' is set
        if (invoiceWorksheetLineId == null) {
            throw new ApiException("Missing the required parameter 'invoiceWorksheetLineId' when calling getInvoiceWorksheetLineTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getInvoiceWorksheetLineTagsCall(invoiceWorksheetLineId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for an invoiceWorksheetLine.
     * Get all existing invoiceWorksheetLine tags.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getInvoiceWorksheetLineTags(Integer invoiceWorksheetLineId) throws ApiException {
        getInvoiceWorksheetLineTagsWithHttpInfo(invoiceWorksheetLineId);
    }

    /**
     * Get the tags for an invoiceWorksheetLine.
     * Get all existing invoiceWorksheetLine tags.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getInvoiceWorksheetLineTagsWithHttpInfo(Integer invoiceWorksheetLineId) throws ApiException {
        com.squareup.okhttp.Call call = getInvoiceWorksheetLineTagsValidateBeforeCall(invoiceWorksheetLineId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for an invoiceWorksheetLine. (asynchronously)
     * Get all existing invoiceWorksheetLine tags.
     * @param invoiceWorksheetLineId Id of the invoiceWorksheetLine to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInvoiceWorksheetLineTagsAsync(Integer invoiceWorksheetLineId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInvoiceWorksheetLineTagsValidateBeforeCall(invoiceWorksheetLineId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateInvoiceWorksheetLine
     * @param body InvoiceWorksheetLine to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateInvoiceWorksheetLineCall(InvoiceWorksheetLine body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/invoiceWorksheetLine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateInvoiceWorksheetLineValidateBeforeCall(InvoiceWorksheetLine body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateInvoiceWorksheetLine(Async)");
        }
        

        com.squareup.okhttp.Call call = updateInvoiceWorksheetLineCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an invoiceWorksheetLine
     * Updates an existing invoiceWorksheetLine using the specified data.
     * @param body InvoiceWorksheetLine to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateInvoiceWorksheetLine(InvoiceWorksheetLine body) throws ApiException {
        updateInvoiceWorksheetLineWithHttpInfo(body);
    }

    /**
     * Update an invoiceWorksheetLine
     * Updates an existing invoiceWorksheetLine using the specified data.
     * @param body InvoiceWorksheetLine to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateInvoiceWorksheetLineWithHttpInfo(InvoiceWorksheetLine body) throws ApiException {
        com.squareup.okhttp.Call call = updateInvoiceWorksheetLineValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an invoiceWorksheetLine (asynchronously)
     * Updates an existing invoiceWorksheetLine using the specified data.
     * @param body InvoiceWorksheetLine to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateInvoiceWorksheetLineAsync(InvoiceWorksheetLine body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateInvoiceWorksheetLineValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
