/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.FinanceSystemConnection;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FinanceSystemConnectionApi {
    private ApiClient apiClient;

    public FinanceSystemConnectionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FinanceSystemConnectionApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addFinanceSystemConnection
     * @param body FinanceSystemConnection to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFinanceSystemConnectionCall(FinanceSystemConnection body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/financeSystemConnection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFinanceSystemConnectionValidateBeforeCall(FinanceSystemConnection body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addFinanceSystemConnection(Async)");
        }
        

        com.squareup.okhttp.Call call = addFinanceSystemConnectionCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a financeSystemConnection
     * Inserts a new financeSystemConnection using the specified data.
     * @param body FinanceSystemConnection to be inserted. (required)
     * @return FinanceSystemConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FinanceSystemConnection addFinanceSystemConnection(FinanceSystemConnection body) throws ApiException {
        ApiResponse<FinanceSystemConnection> resp = addFinanceSystemConnectionWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a financeSystemConnection
     * Inserts a new financeSystemConnection using the specified data.
     * @param body FinanceSystemConnection to be inserted. (required)
     * @return ApiResponse&lt;FinanceSystemConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FinanceSystemConnection> addFinanceSystemConnectionWithHttpInfo(FinanceSystemConnection body) throws ApiException {
        com.squareup.okhttp.Call call = addFinanceSystemConnectionValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<FinanceSystemConnection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a financeSystemConnection (asynchronously)
     * Inserts a new financeSystemConnection using the specified data.
     * @param body FinanceSystemConnection to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFinanceSystemConnectionAsync(FinanceSystemConnection body, final ApiCallback<FinanceSystemConnection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFinanceSystemConnectionValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FinanceSystemConnection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addFinanceSystemConnectionAudit
     * @param financeSystemConnectionId Id of the financeSystemConnection to add an audit to (required)
     * @param financeSystemConnectionAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFinanceSystemConnectionAuditCall(Integer financeSystemConnectionId, String financeSystemConnectionAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}/audit/{financeSystemConnectionAudit}"
            .replaceAll("\\{" + "financeSystemConnectionId" + "\\}", apiClient.escapeString(financeSystemConnectionId.toString()))
            .replaceAll("\\{" + "financeSystemConnectionAudit" + "\\}", apiClient.escapeString(financeSystemConnectionAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFinanceSystemConnectionAuditValidateBeforeCall(Integer financeSystemConnectionId, String financeSystemConnectionAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'financeSystemConnectionId' is set
        if (financeSystemConnectionId == null) {
            throw new ApiException("Missing the required parameter 'financeSystemConnectionId' when calling addFinanceSystemConnectionAudit(Async)");
        }
        
        // verify the required parameter 'financeSystemConnectionAudit' is set
        if (financeSystemConnectionAudit == null) {
            throw new ApiException("Missing the required parameter 'financeSystemConnectionAudit' when calling addFinanceSystemConnectionAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addFinanceSystemConnectionAuditCall(financeSystemConnectionId, financeSystemConnectionAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a financeSystemConnection
     * Adds an audit to an existing financeSystemConnection.
     * @param financeSystemConnectionId Id of the financeSystemConnection to add an audit to (required)
     * @param financeSystemConnectionAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addFinanceSystemConnectionAudit(Integer financeSystemConnectionId, String financeSystemConnectionAudit) throws ApiException {
        addFinanceSystemConnectionAuditWithHttpInfo(financeSystemConnectionId, financeSystemConnectionAudit);
    }

    /**
     * Add new audit for a financeSystemConnection
     * Adds an audit to an existing financeSystemConnection.
     * @param financeSystemConnectionId Id of the financeSystemConnection to add an audit to (required)
     * @param financeSystemConnectionAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addFinanceSystemConnectionAuditWithHttpInfo(Integer financeSystemConnectionId, String financeSystemConnectionAudit) throws ApiException {
        com.squareup.okhttp.Call call = addFinanceSystemConnectionAuditValidateBeforeCall(financeSystemConnectionId, financeSystemConnectionAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a financeSystemConnection (asynchronously)
     * Adds an audit to an existing financeSystemConnection.
     * @param financeSystemConnectionId Id of the financeSystemConnection to add an audit to (required)
     * @param financeSystemConnectionAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFinanceSystemConnectionAuditAsync(Integer financeSystemConnectionId, String financeSystemConnectionAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFinanceSystemConnectionAuditValidateBeforeCall(financeSystemConnectionId, financeSystemConnectionAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addFinanceSystemConnectionFile
     * @param financeSystemConnectionId Id of the financeSystemConnection to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFinanceSystemConnectionFileCall(Integer financeSystemConnectionId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}/file/{fileName}"
            .replaceAll("\\{" + "financeSystemConnectionId" + "\\}", apiClient.escapeString(financeSystemConnectionId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFinanceSystemConnectionFileValidateBeforeCall(Integer financeSystemConnectionId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'financeSystemConnectionId' is set
        if (financeSystemConnectionId == null) {
            throw new ApiException("Missing the required parameter 'financeSystemConnectionId' when calling addFinanceSystemConnectionFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addFinanceSystemConnectionFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addFinanceSystemConnectionFileCall(financeSystemConnectionId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a financeSystemConnection
     * Adds a file to an existing financeSystemConnection.
     * @param financeSystemConnectionId Id of the financeSystemConnection to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addFinanceSystemConnectionFile(Integer financeSystemConnectionId, String fileName) throws ApiException {
        addFinanceSystemConnectionFileWithHttpInfo(financeSystemConnectionId, fileName);
    }

    /**
     * Attach a file to a financeSystemConnection
     * Adds a file to an existing financeSystemConnection.
     * @param financeSystemConnectionId Id of the financeSystemConnection to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addFinanceSystemConnectionFileWithHttpInfo(Integer financeSystemConnectionId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addFinanceSystemConnectionFileValidateBeforeCall(financeSystemConnectionId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a financeSystemConnection (asynchronously)
     * Adds a file to an existing financeSystemConnection.
     * @param financeSystemConnectionId Id of the financeSystemConnection to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFinanceSystemConnectionFileAsync(Integer financeSystemConnectionId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFinanceSystemConnectionFileValidateBeforeCall(financeSystemConnectionId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addFinanceSystemConnectionFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param financeSystemConnectionId Id of the financeSystemConnection to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFinanceSystemConnectionFileByURLCall(RecordFile body, Integer financeSystemConnectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}/file"
            .replaceAll("\\{" + "financeSystemConnectionId" + "\\}", apiClient.escapeString(financeSystemConnectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFinanceSystemConnectionFileByURLValidateBeforeCall(RecordFile body, Integer financeSystemConnectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addFinanceSystemConnectionFileByURL(Async)");
        }
        
        // verify the required parameter 'financeSystemConnectionId' is set
        if (financeSystemConnectionId == null) {
            throw new ApiException("Missing the required parameter 'financeSystemConnectionId' when calling addFinanceSystemConnectionFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addFinanceSystemConnectionFileByURLCall(body, financeSystemConnectionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a financeSystemConnection by URL.
     * Adds a file to an existing financeSystemConnection by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param financeSystemConnectionId Id of the financeSystemConnection to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addFinanceSystemConnectionFileByURL(RecordFile body, Integer financeSystemConnectionId) throws ApiException {
        addFinanceSystemConnectionFileByURLWithHttpInfo(body, financeSystemConnectionId);
    }

    /**
     * Attach a file to a financeSystemConnection by URL.
     * Adds a file to an existing financeSystemConnection by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param financeSystemConnectionId Id of the financeSystemConnection to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addFinanceSystemConnectionFileByURLWithHttpInfo(RecordFile body, Integer financeSystemConnectionId) throws ApiException {
        com.squareup.okhttp.Call call = addFinanceSystemConnectionFileByURLValidateBeforeCall(body, financeSystemConnectionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a financeSystemConnection by URL. (asynchronously)
     * Adds a file to an existing financeSystemConnection by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param financeSystemConnectionId Id of the financeSystemConnection to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFinanceSystemConnectionFileByURLAsync(RecordFile body, Integer financeSystemConnectionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFinanceSystemConnectionFileByURLValidateBeforeCall(body, financeSystemConnectionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addFinanceSystemConnectionTag
     * @param financeSystemConnectionId Id of the financeSystemConnection to add a tag to (required)
     * @param financeSystemConnectionTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFinanceSystemConnectionTagCall(Integer financeSystemConnectionId, String financeSystemConnectionTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}/tag/{financeSystemConnectionTag}"
            .replaceAll("\\{" + "financeSystemConnectionId" + "\\}", apiClient.escapeString(financeSystemConnectionId.toString()))
            .replaceAll("\\{" + "financeSystemConnectionTag" + "\\}", apiClient.escapeString(financeSystemConnectionTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFinanceSystemConnectionTagValidateBeforeCall(Integer financeSystemConnectionId, String financeSystemConnectionTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'financeSystemConnectionId' is set
        if (financeSystemConnectionId == null) {
            throw new ApiException("Missing the required parameter 'financeSystemConnectionId' when calling addFinanceSystemConnectionTag(Async)");
        }
        
        // verify the required parameter 'financeSystemConnectionTag' is set
        if (financeSystemConnectionTag == null) {
            throw new ApiException("Missing the required parameter 'financeSystemConnectionTag' when calling addFinanceSystemConnectionTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addFinanceSystemConnectionTagCall(financeSystemConnectionId, financeSystemConnectionTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a financeSystemConnection.
     * Adds a tag to an existing financeSystemConnection.
     * @param financeSystemConnectionId Id of the financeSystemConnection to add a tag to (required)
     * @param financeSystemConnectionTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addFinanceSystemConnectionTag(Integer financeSystemConnectionId, String financeSystemConnectionTag) throws ApiException {
        addFinanceSystemConnectionTagWithHttpInfo(financeSystemConnectionId, financeSystemConnectionTag);
    }

    /**
     * Add new tags for a financeSystemConnection.
     * Adds a tag to an existing financeSystemConnection.
     * @param financeSystemConnectionId Id of the financeSystemConnection to add a tag to (required)
     * @param financeSystemConnectionTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addFinanceSystemConnectionTagWithHttpInfo(Integer financeSystemConnectionId, String financeSystemConnectionTag) throws ApiException {
        com.squareup.okhttp.Call call = addFinanceSystemConnectionTagValidateBeforeCall(financeSystemConnectionId, financeSystemConnectionTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a financeSystemConnection. (asynchronously)
     * Adds a tag to an existing financeSystemConnection.
     * @param financeSystemConnectionId Id of the financeSystemConnection to add a tag to (required)
     * @param financeSystemConnectionTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFinanceSystemConnectionTagAsync(Integer financeSystemConnectionId, String financeSystemConnectionTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFinanceSystemConnectionTagValidateBeforeCall(financeSystemConnectionId, financeSystemConnectionTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteFinanceSystemConnection
     * @param financeSystemConnectionId Id of the financeSystemConnection to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFinanceSystemConnectionCall(Integer financeSystemConnectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}"
            .replaceAll("\\{" + "financeSystemConnectionId" + "\\}", apiClient.escapeString(financeSystemConnectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFinanceSystemConnectionValidateBeforeCall(Integer financeSystemConnectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'financeSystemConnectionId' is set
        if (financeSystemConnectionId == null) {
            throw new ApiException("Missing the required parameter 'financeSystemConnectionId' when calling deleteFinanceSystemConnection(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFinanceSystemConnectionCall(financeSystemConnectionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a financeSystemConnection
     * Deletes the financeSystemConnection identified by the specified id.
     * @param financeSystemConnectionId Id of the financeSystemConnection to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFinanceSystemConnection(Integer financeSystemConnectionId) throws ApiException {
        deleteFinanceSystemConnectionWithHttpInfo(financeSystemConnectionId);
    }

    /**
     * Delete a financeSystemConnection
     * Deletes the financeSystemConnection identified by the specified id.
     * @param financeSystemConnectionId Id of the financeSystemConnection to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFinanceSystemConnectionWithHttpInfo(Integer financeSystemConnectionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFinanceSystemConnectionValidateBeforeCall(financeSystemConnectionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a financeSystemConnection (asynchronously)
     * Deletes the financeSystemConnection identified by the specified id.
     * @param financeSystemConnectionId Id of the financeSystemConnection to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFinanceSystemConnectionAsync(Integer financeSystemConnectionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFinanceSystemConnectionValidateBeforeCall(financeSystemConnectionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteFinanceSystemConnectionFile
     * @param financeSystemConnectionId Id of the financeSystemConnection to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFinanceSystemConnectionFileCall(Integer financeSystemConnectionId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}/file/{fileId}"
            .replaceAll("\\{" + "financeSystemConnectionId" + "\\}", apiClient.escapeString(financeSystemConnectionId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFinanceSystemConnectionFileValidateBeforeCall(Integer financeSystemConnectionId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'financeSystemConnectionId' is set
        if (financeSystemConnectionId == null) {
            throw new ApiException("Missing the required parameter 'financeSystemConnectionId' when calling deleteFinanceSystemConnectionFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteFinanceSystemConnectionFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFinanceSystemConnectionFileCall(financeSystemConnectionId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a financeSystemConnection.
     * Deletes an existing financeSystemConnection file using the specified data.
     * @param financeSystemConnectionId Id of the financeSystemConnection to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFinanceSystemConnectionFile(Integer financeSystemConnectionId, Integer fileId) throws ApiException {
        deleteFinanceSystemConnectionFileWithHttpInfo(financeSystemConnectionId, fileId);
    }

    /**
     * Delete a file for a financeSystemConnection.
     * Deletes an existing financeSystemConnection file using the specified data.
     * @param financeSystemConnectionId Id of the financeSystemConnection to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFinanceSystemConnectionFileWithHttpInfo(Integer financeSystemConnectionId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFinanceSystemConnectionFileValidateBeforeCall(financeSystemConnectionId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a financeSystemConnection. (asynchronously)
     * Deletes an existing financeSystemConnection file using the specified data.
     * @param financeSystemConnectionId Id of the financeSystemConnection to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFinanceSystemConnectionFileAsync(Integer financeSystemConnectionId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFinanceSystemConnectionFileValidateBeforeCall(financeSystemConnectionId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteFinanceSystemConnectionTag
     * @param financeSystemConnectionId Id of the financeSystemConnection to remove tag from (required)
     * @param financeSystemConnectionTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFinanceSystemConnectionTagCall(Integer financeSystemConnectionId, String financeSystemConnectionTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}/tag/{financeSystemConnectionTag}"
            .replaceAll("\\{" + "financeSystemConnectionId" + "\\}", apiClient.escapeString(financeSystemConnectionId.toString()))
            .replaceAll("\\{" + "financeSystemConnectionTag" + "\\}", apiClient.escapeString(financeSystemConnectionTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFinanceSystemConnectionTagValidateBeforeCall(Integer financeSystemConnectionId, String financeSystemConnectionTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'financeSystemConnectionId' is set
        if (financeSystemConnectionId == null) {
            throw new ApiException("Missing the required parameter 'financeSystemConnectionId' when calling deleteFinanceSystemConnectionTag(Async)");
        }
        
        // verify the required parameter 'financeSystemConnectionTag' is set
        if (financeSystemConnectionTag == null) {
            throw new ApiException("Missing the required parameter 'financeSystemConnectionTag' when calling deleteFinanceSystemConnectionTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFinanceSystemConnectionTagCall(financeSystemConnectionId, financeSystemConnectionTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a financeSystemConnection.
     * Deletes an existing financeSystemConnection tag using the specified data.
     * @param financeSystemConnectionId Id of the financeSystemConnection to remove tag from (required)
     * @param financeSystemConnectionTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFinanceSystemConnectionTag(Integer financeSystemConnectionId, String financeSystemConnectionTag) throws ApiException {
        deleteFinanceSystemConnectionTagWithHttpInfo(financeSystemConnectionId, financeSystemConnectionTag);
    }

    /**
     * Delete a tag for a financeSystemConnection.
     * Deletes an existing financeSystemConnection tag using the specified data.
     * @param financeSystemConnectionId Id of the financeSystemConnection to remove tag from (required)
     * @param financeSystemConnectionTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFinanceSystemConnectionTagWithHttpInfo(Integer financeSystemConnectionId, String financeSystemConnectionTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteFinanceSystemConnectionTagValidateBeforeCall(financeSystemConnectionId, financeSystemConnectionTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a financeSystemConnection. (asynchronously)
     * Deletes an existing financeSystemConnection tag using the specified data.
     * @param financeSystemConnectionId Id of the financeSystemConnection to remove tag from (required)
     * @param financeSystemConnectionTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFinanceSystemConnectionTagAsync(Integer financeSystemConnectionId, String financeSystemConnectionTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFinanceSystemConnectionTagValidateBeforeCall(financeSystemConnectionId, financeSystemConnectionTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateFinanceSystemConnectionById
     * @param financeSystemConnectionId Id of the financeSystemConnection to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateFinanceSystemConnectionByIdCall(Integer financeSystemConnectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/financeSystemConnection/duplicate/{financeSystemConnectionId}"
            .replaceAll("\\{" + "financeSystemConnectionId" + "\\}", apiClient.escapeString(financeSystemConnectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateFinanceSystemConnectionByIdValidateBeforeCall(Integer financeSystemConnectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'financeSystemConnectionId' is set
        if (financeSystemConnectionId == null) {
            throw new ApiException("Missing the required parameter 'financeSystemConnectionId' when calling getDuplicateFinanceSystemConnectionById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateFinanceSystemConnectionByIdCall(financeSystemConnectionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a financeSystemConnection by id
     * Returns a duplicated financeSystemConnection identified by the specified id.
     * @param financeSystemConnectionId Id of the financeSystemConnection to be duplicated. (required)
     * @return FinanceSystemConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FinanceSystemConnection getDuplicateFinanceSystemConnectionById(Integer financeSystemConnectionId) throws ApiException {
        ApiResponse<FinanceSystemConnection> resp = getDuplicateFinanceSystemConnectionByIdWithHttpInfo(financeSystemConnectionId);
        return resp.getData();
    }

    /**
     * Get a duplicated a financeSystemConnection by id
     * Returns a duplicated financeSystemConnection identified by the specified id.
     * @param financeSystemConnectionId Id of the financeSystemConnection to be duplicated. (required)
     * @return ApiResponse&lt;FinanceSystemConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FinanceSystemConnection> getDuplicateFinanceSystemConnectionByIdWithHttpInfo(Integer financeSystemConnectionId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateFinanceSystemConnectionByIdValidateBeforeCall(financeSystemConnectionId, null, null);
        Type localVarReturnType = new TypeToken<FinanceSystemConnection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a financeSystemConnection by id (asynchronously)
     * Returns a duplicated financeSystemConnection identified by the specified id.
     * @param financeSystemConnectionId Id of the financeSystemConnection to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateFinanceSystemConnectionByIdAsync(Integer financeSystemConnectionId, final ApiCallback<FinanceSystemConnection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateFinanceSystemConnectionByIdValidateBeforeCall(financeSystemConnectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FinanceSystemConnection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFinanceSystemConnectionByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFinanceSystemConnectionByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/financeSystemConnection/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFinanceSystemConnectionByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getFinanceSystemConnectionByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search financeSystemConnections by filter
     * Returns the list of financeSystemConnections that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;FinanceSystemConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FinanceSystemConnection> getFinanceSystemConnectionByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<FinanceSystemConnection>> resp = getFinanceSystemConnectionByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search financeSystemConnections by filter
     * Returns the list of financeSystemConnections that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;FinanceSystemConnection&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FinanceSystemConnection>> getFinanceSystemConnectionByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getFinanceSystemConnectionByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<FinanceSystemConnection>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search financeSystemConnections by filter (asynchronously)
     * Returns the list of financeSystemConnections that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFinanceSystemConnectionByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<FinanceSystemConnection>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFinanceSystemConnectionByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FinanceSystemConnection>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFinanceSystemConnectionById
     * @param financeSystemConnectionId Id of the financeSystemConnection to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFinanceSystemConnectionByIdCall(Integer financeSystemConnectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}"
            .replaceAll("\\{" + "financeSystemConnectionId" + "\\}", apiClient.escapeString(financeSystemConnectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFinanceSystemConnectionByIdValidateBeforeCall(Integer financeSystemConnectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'financeSystemConnectionId' is set
        if (financeSystemConnectionId == null) {
            throw new ApiException("Missing the required parameter 'financeSystemConnectionId' when calling getFinanceSystemConnectionById(Async)");
        }
        

        com.squareup.okhttp.Call call = getFinanceSystemConnectionByIdCall(financeSystemConnectionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a financeSystemConnection by id
     * Returns the financeSystemConnection identified by the specified id.
     * @param financeSystemConnectionId Id of the financeSystemConnection to be returned. (required)
     * @return FinanceSystemConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FinanceSystemConnection getFinanceSystemConnectionById(Integer financeSystemConnectionId) throws ApiException {
        ApiResponse<FinanceSystemConnection> resp = getFinanceSystemConnectionByIdWithHttpInfo(financeSystemConnectionId);
        return resp.getData();
    }

    /**
     * Get a financeSystemConnection by id
     * Returns the financeSystemConnection identified by the specified id.
     * @param financeSystemConnectionId Id of the financeSystemConnection to be returned. (required)
     * @return ApiResponse&lt;FinanceSystemConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FinanceSystemConnection> getFinanceSystemConnectionByIdWithHttpInfo(Integer financeSystemConnectionId) throws ApiException {
        com.squareup.okhttp.Call call = getFinanceSystemConnectionByIdValidateBeforeCall(financeSystemConnectionId, null, null);
        Type localVarReturnType = new TypeToken<FinanceSystemConnection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a financeSystemConnection by id (asynchronously)
     * Returns the financeSystemConnection identified by the specified id.
     * @param financeSystemConnectionId Id of the financeSystemConnection to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFinanceSystemConnectionByIdAsync(Integer financeSystemConnectionId, final ApiCallback<FinanceSystemConnection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFinanceSystemConnectionByIdValidateBeforeCall(financeSystemConnectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FinanceSystemConnection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFinanceSystemConnectionFiles
     * @param financeSystemConnectionId Id of the financeSystemConnection to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFinanceSystemConnectionFilesCall(Integer financeSystemConnectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}/file"
            .replaceAll("\\{" + "financeSystemConnectionId" + "\\}", apiClient.escapeString(financeSystemConnectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFinanceSystemConnectionFilesValidateBeforeCall(Integer financeSystemConnectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'financeSystemConnectionId' is set
        if (financeSystemConnectionId == null) {
            throw new ApiException("Missing the required parameter 'financeSystemConnectionId' when calling getFinanceSystemConnectionFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getFinanceSystemConnectionFilesCall(financeSystemConnectionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a financeSystemConnection.
     * Get all existing financeSystemConnection files.
     * @param financeSystemConnectionId Id of the financeSystemConnection to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getFinanceSystemConnectionFiles(Integer financeSystemConnectionId) throws ApiException {
        getFinanceSystemConnectionFilesWithHttpInfo(financeSystemConnectionId);
    }

    /**
     * Get the files for a financeSystemConnection.
     * Get all existing financeSystemConnection files.
     * @param financeSystemConnectionId Id of the financeSystemConnection to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getFinanceSystemConnectionFilesWithHttpInfo(Integer financeSystemConnectionId) throws ApiException {
        com.squareup.okhttp.Call call = getFinanceSystemConnectionFilesValidateBeforeCall(financeSystemConnectionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a financeSystemConnection. (asynchronously)
     * Get all existing financeSystemConnection files.
     * @param financeSystemConnectionId Id of the financeSystemConnection to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFinanceSystemConnectionFilesAsync(Integer financeSystemConnectionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFinanceSystemConnectionFilesValidateBeforeCall(financeSystemConnectionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getFinanceSystemConnectionTags
     * @param financeSystemConnectionId Id of the financeSystemConnection to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFinanceSystemConnectionTagsCall(Integer financeSystemConnectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/financeSystemConnection/{financeSystemConnectionId}/tag"
            .replaceAll("\\{" + "financeSystemConnectionId" + "\\}", apiClient.escapeString(financeSystemConnectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFinanceSystemConnectionTagsValidateBeforeCall(Integer financeSystemConnectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'financeSystemConnectionId' is set
        if (financeSystemConnectionId == null) {
            throw new ApiException("Missing the required parameter 'financeSystemConnectionId' when calling getFinanceSystemConnectionTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getFinanceSystemConnectionTagsCall(financeSystemConnectionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a financeSystemConnection.
     * Get all existing financeSystemConnection tags.
     * @param financeSystemConnectionId Id of the financeSystemConnection to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getFinanceSystemConnectionTags(Integer financeSystemConnectionId) throws ApiException {
        getFinanceSystemConnectionTagsWithHttpInfo(financeSystemConnectionId);
    }

    /**
     * Get the tags for a financeSystemConnection.
     * Get all existing financeSystemConnection tags.
     * @param financeSystemConnectionId Id of the financeSystemConnection to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getFinanceSystemConnectionTagsWithHttpInfo(Integer financeSystemConnectionId) throws ApiException {
        com.squareup.okhttp.Call call = getFinanceSystemConnectionTagsValidateBeforeCall(financeSystemConnectionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a financeSystemConnection. (asynchronously)
     * Get all existing financeSystemConnection tags.
     * @param financeSystemConnectionId Id of the financeSystemConnection to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFinanceSystemConnectionTagsAsync(Integer financeSystemConnectionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFinanceSystemConnectionTagsValidateBeforeCall(financeSystemConnectionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateFinanceSystemConnection
     * @param body FinanceSystemConnection to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFinanceSystemConnectionCall(FinanceSystemConnection body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/financeSystemConnection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFinanceSystemConnectionValidateBeforeCall(FinanceSystemConnection body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateFinanceSystemConnection(Async)");
        }
        

        com.squareup.okhttp.Call call = updateFinanceSystemConnectionCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a financeSystemConnection
     * Updates an existing financeSystemConnection using the specified data.
     * @param body FinanceSystemConnection to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateFinanceSystemConnection(FinanceSystemConnection body) throws ApiException {
        updateFinanceSystemConnectionWithHttpInfo(body);
    }

    /**
     * Update a financeSystemConnection
     * Updates an existing financeSystemConnection using the specified data.
     * @param body FinanceSystemConnection to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateFinanceSystemConnectionWithHttpInfo(FinanceSystemConnection body) throws ApiException {
        com.squareup.okhttp.Call call = updateFinanceSystemConnectionValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a financeSystemConnection (asynchronously)
     * Updates an existing financeSystemConnection using the specified data.
     * @param body FinanceSystemConnection to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFinanceSystemConnectionAsync(FinanceSystemConnection body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFinanceSystemConnectionValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateFinanceSystemConnectionCustomFields
     * @param body FinanceSystemConnection to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFinanceSystemConnectionCustomFieldsCall(FinanceSystemConnection body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/financeSystemConnection/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFinanceSystemConnectionCustomFieldsValidateBeforeCall(FinanceSystemConnection body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateFinanceSystemConnectionCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateFinanceSystemConnectionCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a financeSystemConnection custom fields
     * Updates an existing financeSystemConnection custom fields using the specified data.
     * @param body FinanceSystemConnection to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateFinanceSystemConnectionCustomFields(FinanceSystemConnection body) throws ApiException {
        updateFinanceSystemConnectionCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a financeSystemConnection custom fields
     * Updates an existing financeSystemConnection custom fields using the specified data.
     * @param body FinanceSystemConnection to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateFinanceSystemConnectionCustomFieldsWithHttpInfo(FinanceSystemConnection body) throws ApiException {
        com.squareup.okhttp.Call call = updateFinanceSystemConnectionCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a financeSystemConnection custom fields (asynchronously)
     * Updates an existing financeSystemConnection custom fields using the specified data.
     * @param body FinanceSystemConnection to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFinanceSystemConnectionCustomFieldsAsync(FinanceSystemConnection body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFinanceSystemConnectionCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
