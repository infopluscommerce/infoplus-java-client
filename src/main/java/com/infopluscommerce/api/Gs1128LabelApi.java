/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.Gs1128Label;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Gs1128LabelApi {
    private ApiClient apiClient;

    public Gs1128LabelApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Gs1128LabelApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addGs1128LabelAudit
     * @param gs1128LabelId Id of the gs1128Label to add an audit to (required)
     * @param gs1128LabelAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addGs1128LabelAuditCall(Integer gs1128LabelId, String gs1128LabelAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/gs1128Label/{gs1128LabelId}/audit/{gs1128LabelAudit}"
            .replaceAll("\\{" + "gs1128LabelId" + "\\}", apiClient.escapeString(gs1128LabelId.toString()))
            .replaceAll("\\{" + "gs1128LabelAudit" + "\\}", apiClient.escapeString(gs1128LabelAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addGs1128LabelAuditValidateBeforeCall(Integer gs1128LabelId, String gs1128LabelAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gs1128LabelId' is set
        if (gs1128LabelId == null) {
            throw new ApiException("Missing the required parameter 'gs1128LabelId' when calling addGs1128LabelAudit(Async)");
        }
        
        // verify the required parameter 'gs1128LabelAudit' is set
        if (gs1128LabelAudit == null) {
            throw new ApiException("Missing the required parameter 'gs1128LabelAudit' when calling addGs1128LabelAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addGs1128LabelAuditCall(gs1128LabelId, gs1128LabelAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a gs1128Label
     * Adds an audit to an existing gs1128Label.
     * @param gs1128LabelId Id of the gs1128Label to add an audit to (required)
     * @param gs1128LabelAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addGs1128LabelAudit(Integer gs1128LabelId, String gs1128LabelAudit) throws ApiException {
        addGs1128LabelAuditWithHttpInfo(gs1128LabelId, gs1128LabelAudit);
    }

    /**
     * Add new audit for a gs1128Label
     * Adds an audit to an existing gs1128Label.
     * @param gs1128LabelId Id of the gs1128Label to add an audit to (required)
     * @param gs1128LabelAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addGs1128LabelAuditWithHttpInfo(Integer gs1128LabelId, String gs1128LabelAudit) throws ApiException {
        com.squareup.okhttp.Call call = addGs1128LabelAuditValidateBeforeCall(gs1128LabelId, gs1128LabelAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a gs1128Label (asynchronously)
     * Adds an audit to an existing gs1128Label.
     * @param gs1128LabelId Id of the gs1128Label to add an audit to (required)
     * @param gs1128LabelAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addGs1128LabelAuditAsync(Integer gs1128LabelId, String gs1128LabelAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addGs1128LabelAuditValidateBeforeCall(gs1128LabelId, gs1128LabelAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addGs1128LabelFile
     * @param gs1128LabelId Id of the gs1128Label to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addGs1128LabelFileCall(Integer gs1128LabelId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/gs1128Label/{gs1128LabelId}/file/{fileName}"
            .replaceAll("\\{" + "gs1128LabelId" + "\\}", apiClient.escapeString(gs1128LabelId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addGs1128LabelFileValidateBeforeCall(Integer gs1128LabelId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gs1128LabelId' is set
        if (gs1128LabelId == null) {
            throw new ApiException("Missing the required parameter 'gs1128LabelId' when calling addGs1128LabelFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addGs1128LabelFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addGs1128LabelFileCall(gs1128LabelId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a gs1128Label
     * Adds a file to an existing gs1128Label.
     * @param gs1128LabelId Id of the gs1128Label to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addGs1128LabelFile(Integer gs1128LabelId, String fileName) throws ApiException {
        addGs1128LabelFileWithHttpInfo(gs1128LabelId, fileName);
    }

    /**
     * Attach a file to a gs1128Label
     * Adds a file to an existing gs1128Label.
     * @param gs1128LabelId Id of the gs1128Label to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addGs1128LabelFileWithHttpInfo(Integer gs1128LabelId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addGs1128LabelFileValidateBeforeCall(gs1128LabelId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a gs1128Label (asynchronously)
     * Adds a file to an existing gs1128Label.
     * @param gs1128LabelId Id of the gs1128Label to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addGs1128LabelFileAsync(Integer gs1128LabelId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addGs1128LabelFileValidateBeforeCall(gs1128LabelId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addGs1128LabelFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param gs1128LabelId Id of the gs1128Label to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addGs1128LabelFileByURLCall(RecordFile body, Integer gs1128LabelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/gs1128Label/{gs1128LabelId}/file"
            .replaceAll("\\{" + "gs1128LabelId" + "\\}", apiClient.escapeString(gs1128LabelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addGs1128LabelFileByURLValidateBeforeCall(RecordFile body, Integer gs1128LabelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addGs1128LabelFileByURL(Async)");
        }
        
        // verify the required parameter 'gs1128LabelId' is set
        if (gs1128LabelId == null) {
            throw new ApiException("Missing the required parameter 'gs1128LabelId' when calling addGs1128LabelFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addGs1128LabelFileByURLCall(body, gs1128LabelId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a gs1128Label by URL.
     * Adds a file to an existing gs1128Label by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param gs1128LabelId Id of the gs1128Label to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addGs1128LabelFileByURL(RecordFile body, Integer gs1128LabelId) throws ApiException {
        addGs1128LabelFileByURLWithHttpInfo(body, gs1128LabelId);
    }

    /**
     * Attach a file to a gs1128Label by URL.
     * Adds a file to an existing gs1128Label by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param gs1128LabelId Id of the gs1128Label to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addGs1128LabelFileByURLWithHttpInfo(RecordFile body, Integer gs1128LabelId) throws ApiException {
        com.squareup.okhttp.Call call = addGs1128LabelFileByURLValidateBeforeCall(body, gs1128LabelId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a gs1128Label by URL. (asynchronously)
     * Adds a file to an existing gs1128Label by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param gs1128LabelId Id of the gs1128Label to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addGs1128LabelFileByURLAsync(RecordFile body, Integer gs1128LabelId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addGs1128LabelFileByURLValidateBeforeCall(body, gs1128LabelId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addGs1128LabelTag
     * @param gs1128LabelId Id of the gs1128Label to add a tag to (required)
     * @param gs1128LabelTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addGs1128LabelTagCall(Integer gs1128LabelId, String gs1128LabelTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/gs1128Label/{gs1128LabelId}/tag/{gs1128LabelTag}"
            .replaceAll("\\{" + "gs1128LabelId" + "\\}", apiClient.escapeString(gs1128LabelId.toString()))
            .replaceAll("\\{" + "gs1128LabelTag" + "\\}", apiClient.escapeString(gs1128LabelTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addGs1128LabelTagValidateBeforeCall(Integer gs1128LabelId, String gs1128LabelTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gs1128LabelId' is set
        if (gs1128LabelId == null) {
            throw new ApiException("Missing the required parameter 'gs1128LabelId' when calling addGs1128LabelTag(Async)");
        }
        
        // verify the required parameter 'gs1128LabelTag' is set
        if (gs1128LabelTag == null) {
            throw new ApiException("Missing the required parameter 'gs1128LabelTag' when calling addGs1128LabelTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addGs1128LabelTagCall(gs1128LabelId, gs1128LabelTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a gs1128Label.
     * Adds a tag to an existing gs1128Label.
     * @param gs1128LabelId Id of the gs1128Label to add a tag to (required)
     * @param gs1128LabelTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addGs1128LabelTag(Integer gs1128LabelId, String gs1128LabelTag) throws ApiException {
        addGs1128LabelTagWithHttpInfo(gs1128LabelId, gs1128LabelTag);
    }

    /**
     * Add new tags for a gs1128Label.
     * Adds a tag to an existing gs1128Label.
     * @param gs1128LabelId Id of the gs1128Label to add a tag to (required)
     * @param gs1128LabelTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addGs1128LabelTagWithHttpInfo(Integer gs1128LabelId, String gs1128LabelTag) throws ApiException {
        com.squareup.okhttp.Call call = addGs1128LabelTagValidateBeforeCall(gs1128LabelId, gs1128LabelTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a gs1128Label. (asynchronously)
     * Adds a tag to an existing gs1128Label.
     * @param gs1128LabelId Id of the gs1128Label to add a tag to (required)
     * @param gs1128LabelTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addGs1128LabelTagAsync(Integer gs1128LabelId, String gs1128LabelTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addGs1128LabelTagValidateBeforeCall(gs1128LabelId, gs1128LabelTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteGs1128Label
     * @param gs1128LabelId Id of the gs1128Label to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteGs1128LabelCall(Integer gs1128LabelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/gs1128Label/{gs1128LabelId}"
            .replaceAll("\\{" + "gs1128LabelId" + "\\}", apiClient.escapeString(gs1128LabelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteGs1128LabelValidateBeforeCall(Integer gs1128LabelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gs1128LabelId' is set
        if (gs1128LabelId == null) {
            throw new ApiException("Missing the required parameter 'gs1128LabelId' when calling deleteGs1128Label(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteGs1128LabelCall(gs1128LabelId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a gs1128Label
     * Deletes the gs1128Label identified by the specified id.
     * @param gs1128LabelId Id of the gs1128Label to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteGs1128Label(Integer gs1128LabelId) throws ApiException {
        deleteGs1128LabelWithHttpInfo(gs1128LabelId);
    }

    /**
     * Delete a gs1128Label
     * Deletes the gs1128Label identified by the specified id.
     * @param gs1128LabelId Id of the gs1128Label to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteGs1128LabelWithHttpInfo(Integer gs1128LabelId) throws ApiException {
        com.squareup.okhttp.Call call = deleteGs1128LabelValidateBeforeCall(gs1128LabelId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a gs1128Label (asynchronously)
     * Deletes the gs1128Label identified by the specified id.
     * @param gs1128LabelId Id of the gs1128Label to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteGs1128LabelAsync(Integer gs1128LabelId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteGs1128LabelValidateBeforeCall(gs1128LabelId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteGs1128LabelFile
     * @param gs1128LabelId Id of the gs1128Label to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteGs1128LabelFileCall(Integer gs1128LabelId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/gs1128Label/{gs1128LabelId}/file/{fileId}"
            .replaceAll("\\{" + "gs1128LabelId" + "\\}", apiClient.escapeString(gs1128LabelId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteGs1128LabelFileValidateBeforeCall(Integer gs1128LabelId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gs1128LabelId' is set
        if (gs1128LabelId == null) {
            throw new ApiException("Missing the required parameter 'gs1128LabelId' when calling deleteGs1128LabelFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteGs1128LabelFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteGs1128LabelFileCall(gs1128LabelId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a gs1128Label.
     * Deletes an existing gs1128Label file using the specified data.
     * @param gs1128LabelId Id of the gs1128Label to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteGs1128LabelFile(Integer gs1128LabelId, Integer fileId) throws ApiException {
        deleteGs1128LabelFileWithHttpInfo(gs1128LabelId, fileId);
    }

    /**
     * Delete a file for a gs1128Label.
     * Deletes an existing gs1128Label file using the specified data.
     * @param gs1128LabelId Id of the gs1128Label to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteGs1128LabelFileWithHttpInfo(Integer gs1128LabelId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteGs1128LabelFileValidateBeforeCall(gs1128LabelId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a gs1128Label. (asynchronously)
     * Deletes an existing gs1128Label file using the specified data.
     * @param gs1128LabelId Id of the gs1128Label to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteGs1128LabelFileAsync(Integer gs1128LabelId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteGs1128LabelFileValidateBeforeCall(gs1128LabelId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteGs1128LabelTag
     * @param gs1128LabelId Id of the gs1128Label to remove tag from (required)
     * @param gs1128LabelTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteGs1128LabelTagCall(Integer gs1128LabelId, String gs1128LabelTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/gs1128Label/{gs1128LabelId}/tag/{gs1128LabelTag}"
            .replaceAll("\\{" + "gs1128LabelId" + "\\}", apiClient.escapeString(gs1128LabelId.toString()))
            .replaceAll("\\{" + "gs1128LabelTag" + "\\}", apiClient.escapeString(gs1128LabelTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteGs1128LabelTagValidateBeforeCall(Integer gs1128LabelId, String gs1128LabelTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gs1128LabelId' is set
        if (gs1128LabelId == null) {
            throw new ApiException("Missing the required parameter 'gs1128LabelId' when calling deleteGs1128LabelTag(Async)");
        }
        
        // verify the required parameter 'gs1128LabelTag' is set
        if (gs1128LabelTag == null) {
            throw new ApiException("Missing the required parameter 'gs1128LabelTag' when calling deleteGs1128LabelTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteGs1128LabelTagCall(gs1128LabelId, gs1128LabelTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a gs1128Label.
     * Deletes an existing gs1128Label tag using the specified data.
     * @param gs1128LabelId Id of the gs1128Label to remove tag from (required)
     * @param gs1128LabelTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteGs1128LabelTag(Integer gs1128LabelId, String gs1128LabelTag) throws ApiException {
        deleteGs1128LabelTagWithHttpInfo(gs1128LabelId, gs1128LabelTag);
    }

    /**
     * Delete a tag for a gs1128Label.
     * Deletes an existing gs1128Label tag using the specified data.
     * @param gs1128LabelId Id of the gs1128Label to remove tag from (required)
     * @param gs1128LabelTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteGs1128LabelTagWithHttpInfo(Integer gs1128LabelId, String gs1128LabelTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteGs1128LabelTagValidateBeforeCall(gs1128LabelId, gs1128LabelTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a gs1128Label. (asynchronously)
     * Deletes an existing gs1128Label tag using the specified data.
     * @param gs1128LabelId Id of the gs1128Label to remove tag from (required)
     * @param gs1128LabelTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteGs1128LabelTagAsync(Integer gs1128LabelId, String gs1128LabelTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteGs1128LabelTagValidateBeforeCall(gs1128LabelId, gs1128LabelTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateGs1128LabelById
     * @param gs1128LabelId Id of the gs1128Label to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateGs1128LabelByIdCall(Integer gs1128LabelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/gs1128Label/duplicate/{gs1128LabelId}"
            .replaceAll("\\{" + "gs1128LabelId" + "\\}", apiClient.escapeString(gs1128LabelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateGs1128LabelByIdValidateBeforeCall(Integer gs1128LabelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gs1128LabelId' is set
        if (gs1128LabelId == null) {
            throw new ApiException("Missing the required parameter 'gs1128LabelId' when calling getDuplicateGs1128LabelById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateGs1128LabelByIdCall(gs1128LabelId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a gs1128Label by id
     * Returns a duplicated gs1128Label identified by the specified id.
     * @param gs1128LabelId Id of the gs1128Label to be duplicated. (required)
     * @return Gs1128Label
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Gs1128Label getDuplicateGs1128LabelById(Integer gs1128LabelId) throws ApiException {
        ApiResponse<Gs1128Label> resp = getDuplicateGs1128LabelByIdWithHttpInfo(gs1128LabelId);
        return resp.getData();
    }

    /**
     * Get a duplicated a gs1128Label by id
     * Returns a duplicated gs1128Label identified by the specified id.
     * @param gs1128LabelId Id of the gs1128Label to be duplicated. (required)
     * @return ApiResponse&lt;Gs1128Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Gs1128Label> getDuplicateGs1128LabelByIdWithHttpInfo(Integer gs1128LabelId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateGs1128LabelByIdValidateBeforeCall(gs1128LabelId, null, null);
        Type localVarReturnType = new TypeToken<Gs1128Label>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a gs1128Label by id (asynchronously)
     * Returns a duplicated gs1128Label identified by the specified id.
     * @param gs1128LabelId Id of the gs1128Label to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateGs1128LabelByIdAsync(Integer gs1128LabelId, final ApiCallback<Gs1128Label> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateGs1128LabelByIdValidateBeforeCall(gs1128LabelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Gs1128Label>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGs1128LabelByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGs1128LabelByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/gs1128Label/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGs1128LabelByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getGs1128LabelByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search gs1128Labels by filter
     * Returns the list of gs1128Labels that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;Gs1128Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Gs1128Label> getGs1128LabelByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<Gs1128Label>> resp = getGs1128LabelByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search gs1128Labels by filter
     * Returns the list of gs1128Labels that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;Gs1128Label&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Gs1128Label>> getGs1128LabelByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getGs1128LabelByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<Gs1128Label>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search gs1128Labels by filter (asynchronously)
     * Returns the list of gs1128Labels that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGs1128LabelByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<Gs1128Label>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGs1128LabelByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Gs1128Label>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGs1128LabelById
     * @param gs1128LabelId Id of the gs1128Label to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGs1128LabelByIdCall(Integer gs1128LabelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/gs1128Label/{gs1128LabelId}"
            .replaceAll("\\{" + "gs1128LabelId" + "\\}", apiClient.escapeString(gs1128LabelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGs1128LabelByIdValidateBeforeCall(Integer gs1128LabelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gs1128LabelId' is set
        if (gs1128LabelId == null) {
            throw new ApiException("Missing the required parameter 'gs1128LabelId' when calling getGs1128LabelById(Async)");
        }
        

        com.squareup.okhttp.Call call = getGs1128LabelByIdCall(gs1128LabelId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a gs1128Label by id
     * Returns the gs1128Label identified by the specified id.
     * @param gs1128LabelId Id of the gs1128Label to be returned. (required)
     * @return Gs1128Label
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Gs1128Label getGs1128LabelById(Integer gs1128LabelId) throws ApiException {
        ApiResponse<Gs1128Label> resp = getGs1128LabelByIdWithHttpInfo(gs1128LabelId);
        return resp.getData();
    }

    /**
     * Get a gs1128Label by id
     * Returns the gs1128Label identified by the specified id.
     * @param gs1128LabelId Id of the gs1128Label to be returned. (required)
     * @return ApiResponse&lt;Gs1128Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Gs1128Label> getGs1128LabelByIdWithHttpInfo(Integer gs1128LabelId) throws ApiException {
        com.squareup.okhttp.Call call = getGs1128LabelByIdValidateBeforeCall(gs1128LabelId, null, null);
        Type localVarReturnType = new TypeToken<Gs1128Label>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a gs1128Label by id (asynchronously)
     * Returns the gs1128Label identified by the specified id.
     * @param gs1128LabelId Id of the gs1128Label to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGs1128LabelByIdAsync(Integer gs1128LabelId, final ApiCallback<Gs1128Label> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGs1128LabelByIdValidateBeforeCall(gs1128LabelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Gs1128Label>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGs1128LabelFiles
     * @param gs1128LabelId Id of the gs1128Label to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGs1128LabelFilesCall(Integer gs1128LabelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/gs1128Label/{gs1128LabelId}/file"
            .replaceAll("\\{" + "gs1128LabelId" + "\\}", apiClient.escapeString(gs1128LabelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGs1128LabelFilesValidateBeforeCall(Integer gs1128LabelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gs1128LabelId' is set
        if (gs1128LabelId == null) {
            throw new ApiException("Missing the required parameter 'gs1128LabelId' when calling getGs1128LabelFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getGs1128LabelFilesCall(gs1128LabelId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a gs1128Label.
     * Get all existing gs1128Label files.
     * @param gs1128LabelId Id of the gs1128Label to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getGs1128LabelFiles(Integer gs1128LabelId) throws ApiException {
        getGs1128LabelFilesWithHttpInfo(gs1128LabelId);
    }

    /**
     * Get the files for a gs1128Label.
     * Get all existing gs1128Label files.
     * @param gs1128LabelId Id of the gs1128Label to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getGs1128LabelFilesWithHttpInfo(Integer gs1128LabelId) throws ApiException {
        com.squareup.okhttp.Call call = getGs1128LabelFilesValidateBeforeCall(gs1128LabelId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a gs1128Label. (asynchronously)
     * Get all existing gs1128Label files.
     * @param gs1128LabelId Id of the gs1128Label to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGs1128LabelFilesAsync(Integer gs1128LabelId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGs1128LabelFilesValidateBeforeCall(gs1128LabelId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getGs1128LabelTags
     * @param gs1128LabelId Id of the gs1128Label to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGs1128LabelTagsCall(Integer gs1128LabelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/gs1128Label/{gs1128LabelId}/tag"
            .replaceAll("\\{" + "gs1128LabelId" + "\\}", apiClient.escapeString(gs1128LabelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGs1128LabelTagsValidateBeforeCall(Integer gs1128LabelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gs1128LabelId' is set
        if (gs1128LabelId == null) {
            throw new ApiException("Missing the required parameter 'gs1128LabelId' when calling getGs1128LabelTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getGs1128LabelTagsCall(gs1128LabelId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a gs1128Label.
     * Get all existing gs1128Label tags.
     * @param gs1128LabelId Id of the gs1128Label to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getGs1128LabelTags(Integer gs1128LabelId) throws ApiException {
        getGs1128LabelTagsWithHttpInfo(gs1128LabelId);
    }

    /**
     * Get the tags for a gs1128Label.
     * Get all existing gs1128Label tags.
     * @param gs1128LabelId Id of the gs1128Label to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getGs1128LabelTagsWithHttpInfo(Integer gs1128LabelId) throws ApiException {
        com.squareup.okhttp.Call call = getGs1128LabelTagsValidateBeforeCall(gs1128LabelId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a gs1128Label. (asynchronously)
     * Get all existing gs1128Label tags.
     * @param gs1128LabelId Id of the gs1128Label to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGs1128LabelTagsAsync(Integer gs1128LabelId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGs1128LabelTagsValidateBeforeCall(gs1128LabelId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateGs1128LabelCustomFields
     * @param body Gs1128Label to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateGs1128LabelCustomFieldsCall(Gs1128Label body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/gs1128Label/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateGs1128LabelCustomFieldsValidateBeforeCall(Gs1128Label body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateGs1128LabelCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateGs1128LabelCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a gs1128Label custom fields
     * Updates an existing gs1128Label custom fields using the specified data.
     * @param body Gs1128Label to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateGs1128LabelCustomFields(Gs1128Label body) throws ApiException {
        updateGs1128LabelCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a gs1128Label custom fields
     * Updates an existing gs1128Label custom fields using the specified data.
     * @param body Gs1128Label to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateGs1128LabelCustomFieldsWithHttpInfo(Gs1128Label body) throws ApiException {
        com.squareup.okhttp.Call call = updateGs1128LabelCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a gs1128Label custom fields (asynchronously)
     * Updates an existing gs1128Label custom fields using the specified data.
     * @param body Gs1128Label to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateGs1128LabelCustomFieldsAsync(Gs1128Label body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateGs1128LabelCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
