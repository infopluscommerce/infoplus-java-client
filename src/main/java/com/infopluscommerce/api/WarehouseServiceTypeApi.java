/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;
import com.infopluscommerce.model.WarehouseServiceType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WarehouseServiceTypeApi {
    private ApiClient apiClient;

    public WarehouseServiceTypeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WarehouseServiceTypeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addWarehouseServiceType
     * @param body WarehouseServiceType to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addWarehouseServiceTypeCall(WarehouseServiceType body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/warehouseServiceType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addWarehouseServiceTypeValidateBeforeCall(WarehouseServiceType body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addWarehouseServiceType(Async)");
        }
        

        com.squareup.okhttp.Call call = addWarehouseServiceTypeCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a warehouseServiceType
     * Inserts a new warehouseServiceType using the specified data.
     * @param body WarehouseServiceType to be inserted. (required)
     * @return WarehouseServiceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WarehouseServiceType addWarehouseServiceType(WarehouseServiceType body) throws ApiException {
        ApiResponse<WarehouseServiceType> resp = addWarehouseServiceTypeWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a warehouseServiceType
     * Inserts a new warehouseServiceType using the specified data.
     * @param body WarehouseServiceType to be inserted. (required)
     * @return ApiResponse&lt;WarehouseServiceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WarehouseServiceType> addWarehouseServiceTypeWithHttpInfo(WarehouseServiceType body) throws ApiException {
        com.squareup.okhttp.Call call = addWarehouseServiceTypeValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<WarehouseServiceType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a warehouseServiceType (asynchronously)
     * Inserts a new warehouseServiceType using the specified data.
     * @param body WarehouseServiceType to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addWarehouseServiceTypeAsync(WarehouseServiceType body, final ApiCallback<WarehouseServiceType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addWarehouseServiceTypeValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WarehouseServiceType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addWarehouseServiceTypeAudit
     * @param warehouseServiceTypeId Id of the warehouseServiceType to add an audit to (required)
     * @param warehouseServiceTypeAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addWarehouseServiceTypeAuditCall(Integer warehouseServiceTypeId, String warehouseServiceTypeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}/audit/{warehouseServiceTypeAudit}"
            .replaceAll("\\{" + "warehouseServiceTypeId" + "\\}", apiClient.escapeString(warehouseServiceTypeId.toString()))
            .replaceAll("\\{" + "warehouseServiceTypeAudit" + "\\}", apiClient.escapeString(warehouseServiceTypeAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addWarehouseServiceTypeAuditValidateBeforeCall(Integer warehouseServiceTypeId, String warehouseServiceTypeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseServiceTypeId' is set
        if (warehouseServiceTypeId == null) {
            throw new ApiException("Missing the required parameter 'warehouseServiceTypeId' when calling addWarehouseServiceTypeAudit(Async)");
        }
        
        // verify the required parameter 'warehouseServiceTypeAudit' is set
        if (warehouseServiceTypeAudit == null) {
            throw new ApiException("Missing the required parameter 'warehouseServiceTypeAudit' when calling addWarehouseServiceTypeAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addWarehouseServiceTypeAuditCall(warehouseServiceTypeId, warehouseServiceTypeAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a warehouseServiceType
     * Adds an audit to an existing warehouseServiceType.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to add an audit to (required)
     * @param warehouseServiceTypeAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addWarehouseServiceTypeAudit(Integer warehouseServiceTypeId, String warehouseServiceTypeAudit) throws ApiException {
        addWarehouseServiceTypeAuditWithHttpInfo(warehouseServiceTypeId, warehouseServiceTypeAudit);
    }

    /**
     * Add new audit for a warehouseServiceType
     * Adds an audit to an existing warehouseServiceType.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to add an audit to (required)
     * @param warehouseServiceTypeAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addWarehouseServiceTypeAuditWithHttpInfo(Integer warehouseServiceTypeId, String warehouseServiceTypeAudit) throws ApiException {
        com.squareup.okhttp.Call call = addWarehouseServiceTypeAuditValidateBeforeCall(warehouseServiceTypeId, warehouseServiceTypeAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a warehouseServiceType (asynchronously)
     * Adds an audit to an existing warehouseServiceType.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to add an audit to (required)
     * @param warehouseServiceTypeAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addWarehouseServiceTypeAuditAsync(Integer warehouseServiceTypeId, String warehouseServiceTypeAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addWarehouseServiceTypeAuditValidateBeforeCall(warehouseServiceTypeId, warehouseServiceTypeAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addWarehouseServiceTypeFile
     * @param warehouseServiceTypeId Id of the warehouseServiceType to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addWarehouseServiceTypeFileCall(Integer warehouseServiceTypeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}/file/{fileName}"
            .replaceAll("\\{" + "warehouseServiceTypeId" + "\\}", apiClient.escapeString(warehouseServiceTypeId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addWarehouseServiceTypeFileValidateBeforeCall(Integer warehouseServiceTypeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseServiceTypeId' is set
        if (warehouseServiceTypeId == null) {
            throw new ApiException("Missing the required parameter 'warehouseServiceTypeId' when calling addWarehouseServiceTypeFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addWarehouseServiceTypeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addWarehouseServiceTypeFileCall(warehouseServiceTypeId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a warehouseServiceType
     * Adds a file to an existing warehouseServiceType.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addWarehouseServiceTypeFile(Integer warehouseServiceTypeId, String fileName) throws ApiException {
        addWarehouseServiceTypeFileWithHttpInfo(warehouseServiceTypeId, fileName);
    }

    /**
     * Attach a file to a warehouseServiceType
     * Adds a file to an existing warehouseServiceType.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addWarehouseServiceTypeFileWithHttpInfo(Integer warehouseServiceTypeId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addWarehouseServiceTypeFileValidateBeforeCall(warehouseServiceTypeId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a warehouseServiceType (asynchronously)
     * Adds a file to an existing warehouseServiceType.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addWarehouseServiceTypeFileAsync(Integer warehouseServiceTypeId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addWarehouseServiceTypeFileValidateBeforeCall(warehouseServiceTypeId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addWarehouseServiceTypeFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param warehouseServiceTypeId Id of the warehouseServiceType to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addWarehouseServiceTypeFileByURLCall(RecordFile body, Integer warehouseServiceTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}/file"
            .replaceAll("\\{" + "warehouseServiceTypeId" + "\\}", apiClient.escapeString(warehouseServiceTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addWarehouseServiceTypeFileByURLValidateBeforeCall(RecordFile body, Integer warehouseServiceTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addWarehouseServiceTypeFileByURL(Async)");
        }
        
        // verify the required parameter 'warehouseServiceTypeId' is set
        if (warehouseServiceTypeId == null) {
            throw new ApiException("Missing the required parameter 'warehouseServiceTypeId' when calling addWarehouseServiceTypeFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addWarehouseServiceTypeFileByURLCall(body, warehouseServiceTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a warehouseServiceType by URL.
     * Adds a file to an existing warehouseServiceType by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param warehouseServiceTypeId Id of the warehouseServiceType to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addWarehouseServiceTypeFileByURL(RecordFile body, Integer warehouseServiceTypeId) throws ApiException {
        addWarehouseServiceTypeFileByURLWithHttpInfo(body, warehouseServiceTypeId);
    }

    /**
     * Attach a file to a warehouseServiceType by URL.
     * Adds a file to an existing warehouseServiceType by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param warehouseServiceTypeId Id of the warehouseServiceType to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addWarehouseServiceTypeFileByURLWithHttpInfo(RecordFile body, Integer warehouseServiceTypeId) throws ApiException {
        com.squareup.okhttp.Call call = addWarehouseServiceTypeFileByURLValidateBeforeCall(body, warehouseServiceTypeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a warehouseServiceType by URL. (asynchronously)
     * Adds a file to an existing warehouseServiceType by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param warehouseServiceTypeId Id of the warehouseServiceType to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addWarehouseServiceTypeFileByURLAsync(RecordFile body, Integer warehouseServiceTypeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addWarehouseServiceTypeFileByURLValidateBeforeCall(body, warehouseServiceTypeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addWarehouseServiceTypeTag
     * @param warehouseServiceTypeId Id of the warehouseServiceType to add a tag to (required)
     * @param warehouseServiceTypeTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addWarehouseServiceTypeTagCall(Integer warehouseServiceTypeId, String warehouseServiceTypeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}/tag/{warehouseServiceTypeTag}"
            .replaceAll("\\{" + "warehouseServiceTypeId" + "\\}", apiClient.escapeString(warehouseServiceTypeId.toString()))
            .replaceAll("\\{" + "warehouseServiceTypeTag" + "\\}", apiClient.escapeString(warehouseServiceTypeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addWarehouseServiceTypeTagValidateBeforeCall(Integer warehouseServiceTypeId, String warehouseServiceTypeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseServiceTypeId' is set
        if (warehouseServiceTypeId == null) {
            throw new ApiException("Missing the required parameter 'warehouseServiceTypeId' when calling addWarehouseServiceTypeTag(Async)");
        }
        
        // verify the required parameter 'warehouseServiceTypeTag' is set
        if (warehouseServiceTypeTag == null) {
            throw new ApiException("Missing the required parameter 'warehouseServiceTypeTag' when calling addWarehouseServiceTypeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addWarehouseServiceTypeTagCall(warehouseServiceTypeId, warehouseServiceTypeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a warehouseServiceType.
     * Adds a tag to an existing warehouseServiceType.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to add a tag to (required)
     * @param warehouseServiceTypeTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addWarehouseServiceTypeTag(Integer warehouseServiceTypeId, String warehouseServiceTypeTag) throws ApiException {
        addWarehouseServiceTypeTagWithHttpInfo(warehouseServiceTypeId, warehouseServiceTypeTag);
    }

    /**
     * Add new tags for a warehouseServiceType.
     * Adds a tag to an existing warehouseServiceType.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to add a tag to (required)
     * @param warehouseServiceTypeTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addWarehouseServiceTypeTagWithHttpInfo(Integer warehouseServiceTypeId, String warehouseServiceTypeTag) throws ApiException {
        com.squareup.okhttp.Call call = addWarehouseServiceTypeTagValidateBeforeCall(warehouseServiceTypeId, warehouseServiceTypeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a warehouseServiceType. (asynchronously)
     * Adds a tag to an existing warehouseServiceType.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to add a tag to (required)
     * @param warehouseServiceTypeTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addWarehouseServiceTypeTagAsync(Integer warehouseServiceTypeId, String warehouseServiceTypeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addWarehouseServiceTypeTagValidateBeforeCall(warehouseServiceTypeId, warehouseServiceTypeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteWarehouseServiceType
     * @param warehouseServiceTypeId Id of the warehouseServiceType to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteWarehouseServiceTypeCall(Integer warehouseServiceTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}"
            .replaceAll("\\{" + "warehouseServiceTypeId" + "\\}", apiClient.escapeString(warehouseServiceTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteWarehouseServiceTypeValidateBeforeCall(Integer warehouseServiceTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseServiceTypeId' is set
        if (warehouseServiceTypeId == null) {
            throw new ApiException("Missing the required parameter 'warehouseServiceTypeId' when calling deleteWarehouseServiceType(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteWarehouseServiceTypeCall(warehouseServiceTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a warehouseServiceType
     * Deletes the warehouseServiceType identified by the specified id.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteWarehouseServiceType(Integer warehouseServiceTypeId) throws ApiException {
        deleteWarehouseServiceTypeWithHttpInfo(warehouseServiceTypeId);
    }

    /**
     * Delete a warehouseServiceType
     * Deletes the warehouseServiceType identified by the specified id.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteWarehouseServiceTypeWithHttpInfo(Integer warehouseServiceTypeId) throws ApiException {
        com.squareup.okhttp.Call call = deleteWarehouseServiceTypeValidateBeforeCall(warehouseServiceTypeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a warehouseServiceType (asynchronously)
     * Deletes the warehouseServiceType identified by the specified id.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteWarehouseServiceTypeAsync(Integer warehouseServiceTypeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteWarehouseServiceTypeValidateBeforeCall(warehouseServiceTypeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteWarehouseServiceTypeFile
     * @param warehouseServiceTypeId Id of the warehouseServiceType to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteWarehouseServiceTypeFileCall(Integer warehouseServiceTypeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}/file/{fileId}"
            .replaceAll("\\{" + "warehouseServiceTypeId" + "\\}", apiClient.escapeString(warehouseServiceTypeId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteWarehouseServiceTypeFileValidateBeforeCall(Integer warehouseServiceTypeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseServiceTypeId' is set
        if (warehouseServiceTypeId == null) {
            throw new ApiException("Missing the required parameter 'warehouseServiceTypeId' when calling deleteWarehouseServiceTypeFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteWarehouseServiceTypeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteWarehouseServiceTypeFileCall(warehouseServiceTypeId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a warehouseServiceType.
     * Deletes an existing warehouseServiceType file using the specified data.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteWarehouseServiceTypeFile(Integer warehouseServiceTypeId, Integer fileId) throws ApiException {
        deleteWarehouseServiceTypeFileWithHttpInfo(warehouseServiceTypeId, fileId);
    }

    /**
     * Delete a file for a warehouseServiceType.
     * Deletes an existing warehouseServiceType file using the specified data.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteWarehouseServiceTypeFileWithHttpInfo(Integer warehouseServiceTypeId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteWarehouseServiceTypeFileValidateBeforeCall(warehouseServiceTypeId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a warehouseServiceType. (asynchronously)
     * Deletes an existing warehouseServiceType file using the specified data.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteWarehouseServiceTypeFileAsync(Integer warehouseServiceTypeId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteWarehouseServiceTypeFileValidateBeforeCall(warehouseServiceTypeId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteWarehouseServiceTypeTag
     * @param warehouseServiceTypeId Id of the warehouseServiceType to remove tag from (required)
     * @param warehouseServiceTypeTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteWarehouseServiceTypeTagCall(Integer warehouseServiceTypeId, String warehouseServiceTypeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}/tag/{warehouseServiceTypeTag}"
            .replaceAll("\\{" + "warehouseServiceTypeId" + "\\}", apiClient.escapeString(warehouseServiceTypeId.toString()))
            .replaceAll("\\{" + "warehouseServiceTypeTag" + "\\}", apiClient.escapeString(warehouseServiceTypeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteWarehouseServiceTypeTagValidateBeforeCall(Integer warehouseServiceTypeId, String warehouseServiceTypeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseServiceTypeId' is set
        if (warehouseServiceTypeId == null) {
            throw new ApiException("Missing the required parameter 'warehouseServiceTypeId' when calling deleteWarehouseServiceTypeTag(Async)");
        }
        
        // verify the required parameter 'warehouseServiceTypeTag' is set
        if (warehouseServiceTypeTag == null) {
            throw new ApiException("Missing the required parameter 'warehouseServiceTypeTag' when calling deleteWarehouseServiceTypeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteWarehouseServiceTypeTagCall(warehouseServiceTypeId, warehouseServiceTypeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a warehouseServiceType.
     * Deletes an existing warehouseServiceType tag using the specified data.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to remove tag from (required)
     * @param warehouseServiceTypeTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteWarehouseServiceTypeTag(Integer warehouseServiceTypeId, String warehouseServiceTypeTag) throws ApiException {
        deleteWarehouseServiceTypeTagWithHttpInfo(warehouseServiceTypeId, warehouseServiceTypeTag);
    }

    /**
     * Delete a tag for a warehouseServiceType.
     * Deletes an existing warehouseServiceType tag using the specified data.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to remove tag from (required)
     * @param warehouseServiceTypeTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteWarehouseServiceTypeTagWithHttpInfo(Integer warehouseServiceTypeId, String warehouseServiceTypeTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteWarehouseServiceTypeTagValidateBeforeCall(warehouseServiceTypeId, warehouseServiceTypeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a warehouseServiceType. (asynchronously)
     * Deletes an existing warehouseServiceType tag using the specified data.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to remove tag from (required)
     * @param warehouseServiceTypeTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteWarehouseServiceTypeTagAsync(Integer warehouseServiceTypeId, String warehouseServiceTypeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteWarehouseServiceTypeTagValidateBeforeCall(warehouseServiceTypeId, warehouseServiceTypeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateWarehouseServiceTypeById
     * @param warehouseServiceTypeId Id of the warehouseServiceType to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateWarehouseServiceTypeByIdCall(Integer warehouseServiceTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseServiceType/duplicate/{warehouseServiceTypeId}"
            .replaceAll("\\{" + "warehouseServiceTypeId" + "\\}", apiClient.escapeString(warehouseServiceTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateWarehouseServiceTypeByIdValidateBeforeCall(Integer warehouseServiceTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseServiceTypeId' is set
        if (warehouseServiceTypeId == null) {
            throw new ApiException("Missing the required parameter 'warehouseServiceTypeId' when calling getDuplicateWarehouseServiceTypeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateWarehouseServiceTypeByIdCall(warehouseServiceTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a warehouseServiceType by id
     * Returns a duplicated warehouseServiceType identified by the specified id.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to be duplicated. (required)
     * @return WarehouseServiceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WarehouseServiceType getDuplicateWarehouseServiceTypeById(Integer warehouseServiceTypeId) throws ApiException {
        ApiResponse<WarehouseServiceType> resp = getDuplicateWarehouseServiceTypeByIdWithHttpInfo(warehouseServiceTypeId);
        return resp.getData();
    }

    /**
     * Get a duplicated a warehouseServiceType by id
     * Returns a duplicated warehouseServiceType identified by the specified id.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to be duplicated. (required)
     * @return ApiResponse&lt;WarehouseServiceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WarehouseServiceType> getDuplicateWarehouseServiceTypeByIdWithHttpInfo(Integer warehouseServiceTypeId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateWarehouseServiceTypeByIdValidateBeforeCall(warehouseServiceTypeId, null, null);
        Type localVarReturnType = new TypeToken<WarehouseServiceType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a warehouseServiceType by id (asynchronously)
     * Returns a duplicated warehouseServiceType identified by the specified id.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateWarehouseServiceTypeByIdAsync(Integer warehouseServiceTypeId, final ApiCallback<WarehouseServiceType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateWarehouseServiceTypeByIdValidateBeforeCall(warehouseServiceTypeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WarehouseServiceType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWarehouseServiceTypeByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWarehouseServiceTypeByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseServiceType/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWarehouseServiceTypeByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getWarehouseServiceTypeByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search warehouseServiceTypes by filter
     * Returns the list of warehouseServiceTypes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;WarehouseServiceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<WarehouseServiceType> getWarehouseServiceTypeByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<WarehouseServiceType>> resp = getWarehouseServiceTypeByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search warehouseServiceTypes by filter
     * Returns the list of warehouseServiceTypes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;WarehouseServiceType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<WarehouseServiceType>> getWarehouseServiceTypeByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getWarehouseServiceTypeByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<WarehouseServiceType>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search warehouseServiceTypes by filter (asynchronously)
     * Returns the list of warehouseServiceTypes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWarehouseServiceTypeByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<WarehouseServiceType>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWarehouseServiceTypeByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<WarehouseServiceType>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWarehouseServiceTypeById
     * @param warehouseServiceTypeId Id of the warehouseServiceType to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWarehouseServiceTypeByIdCall(Integer warehouseServiceTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}"
            .replaceAll("\\{" + "warehouseServiceTypeId" + "\\}", apiClient.escapeString(warehouseServiceTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWarehouseServiceTypeByIdValidateBeforeCall(Integer warehouseServiceTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseServiceTypeId' is set
        if (warehouseServiceTypeId == null) {
            throw new ApiException("Missing the required parameter 'warehouseServiceTypeId' when calling getWarehouseServiceTypeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getWarehouseServiceTypeByIdCall(warehouseServiceTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a warehouseServiceType by id
     * Returns the warehouseServiceType identified by the specified id.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to be returned. (required)
     * @return WarehouseServiceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WarehouseServiceType getWarehouseServiceTypeById(Integer warehouseServiceTypeId) throws ApiException {
        ApiResponse<WarehouseServiceType> resp = getWarehouseServiceTypeByIdWithHttpInfo(warehouseServiceTypeId);
        return resp.getData();
    }

    /**
     * Get a warehouseServiceType by id
     * Returns the warehouseServiceType identified by the specified id.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to be returned. (required)
     * @return ApiResponse&lt;WarehouseServiceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WarehouseServiceType> getWarehouseServiceTypeByIdWithHttpInfo(Integer warehouseServiceTypeId) throws ApiException {
        com.squareup.okhttp.Call call = getWarehouseServiceTypeByIdValidateBeforeCall(warehouseServiceTypeId, null, null);
        Type localVarReturnType = new TypeToken<WarehouseServiceType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a warehouseServiceType by id (asynchronously)
     * Returns the warehouseServiceType identified by the specified id.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWarehouseServiceTypeByIdAsync(Integer warehouseServiceTypeId, final ApiCallback<WarehouseServiceType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWarehouseServiceTypeByIdValidateBeforeCall(warehouseServiceTypeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WarehouseServiceType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWarehouseServiceTypeFiles
     * @param warehouseServiceTypeId Id of the warehouseServiceType to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWarehouseServiceTypeFilesCall(Integer warehouseServiceTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}/file"
            .replaceAll("\\{" + "warehouseServiceTypeId" + "\\}", apiClient.escapeString(warehouseServiceTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWarehouseServiceTypeFilesValidateBeforeCall(Integer warehouseServiceTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseServiceTypeId' is set
        if (warehouseServiceTypeId == null) {
            throw new ApiException("Missing the required parameter 'warehouseServiceTypeId' when calling getWarehouseServiceTypeFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getWarehouseServiceTypeFilesCall(warehouseServiceTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a warehouseServiceType.
     * Get all existing warehouseServiceType files.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getWarehouseServiceTypeFiles(Integer warehouseServiceTypeId) throws ApiException {
        getWarehouseServiceTypeFilesWithHttpInfo(warehouseServiceTypeId);
    }

    /**
     * Get the files for a warehouseServiceType.
     * Get all existing warehouseServiceType files.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getWarehouseServiceTypeFilesWithHttpInfo(Integer warehouseServiceTypeId) throws ApiException {
        com.squareup.okhttp.Call call = getWarehouseServiceTypeFilesValidateBeforeCall(warehouseServiceTypeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a warehouseServiceType. (asynchronously)
     * Get all existing warehouseServiceType files.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWarehouseServiceTypeFilesAsync(Integer warehouseServiceTypeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWarehouseServiceTypeFilesValidateBeforeCall(warehouseServiceTypeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getWarehouseServiceTypeTags
     * @param warehouseServiceTypeId Id of the warehouseServiceType to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWarehouseServiceTypeTagsCall(Integer warehouseServiceTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/warehouseServiceType/{warehouseServiceTypeId}/tag"
            .replaceAll("\\{" + "warehouseServiceTypeId" + "\\}", apiClient.escapeString(warehouseServiceTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWarehouseServiceTypeTagsValidateBeforeCall(Integer warehouseServiceTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'warehouseServiceTypeId' is set
        if (warehouseServiceTypeId == null) {
            throw new ApiException("Missing the required parameter 'warehouseServiceTypeId' when calling getWarehouseServiceTypeTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getWarehouseServiceTypeTagsCall(warehouseServiceTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a warehouseServiceType.
     * Get all existing warehouseServiceType tags.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getWarehouseServiceTypeTags(Integer warehouseServiceTypeId) throws ApiException {
        getWarehouseServiceTypeTagsWithHttpInfo(warehouseServiceTypeId);
    }

    /**
     * Get the tags for a warehouseServiceType.
     * Get all existing warehouseServiceType tags.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getWarehouseServiceTypeTagsWithHttpInfo(Integer warehouseServiceTypeId) throws ApiException {
        com.squareup.okhttp.Call call = getWarehouseServiceTypeTagsValidateBeforeCall(warehouseServiceTypeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a warehouseServiceType. (asynchronously)
     * Get all existing warehouseServiceType tags.
     * @param warehouseServiceTypeId Id of the warehouseServiceType to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWarehouseServiceTypeTagsAsync(Integer warehouseServiceTypeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWarehouseServiceTypeTagsValidateBeforeCall(warehouseServiceTypeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateWarehouseServiceType
     * @param body WarehouseServiceType to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateWarehouseServiceTypeCall(WarehouseServiceType body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/warehouseServiceType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateWarehouseServiceTypeValidateBeforeCall(WarehouseServiceType body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateWarehouseServiceType(Async)");
        }
        

        com.squareup.okhttp.Call call = updateWarehouseServiceTypeCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a warehouseServiceType
     * Updates an existing warehouseServiceType using the specified data.
     * @param body WarehouseServiceType to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateWarehouseServiceType(WarehouseServiceType body) throws ApiException {
        updateWarehouseServiceTypeWithHttpInfo(body);
    }

    /**
     * Update a warehouseServiceType
     * Updates an existing warehouseServiceType using the specified data.
     * @param body WarehouseServiceType to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateWarehouseServiceTypeWithHttpInfo(WarehouseServiceType body) throws ApiException {
        com.squareup.okhttp.Call call = updateWarehouseServiceTypeValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a warehouseServiceType (asynchronously)
     * Updates an existing warehouseServiceType using the specified data.
     * @param body WarehouseServiceType to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateWarehouseServiceTypeAsync(WarehouseServiceType body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateWarehouseServiceTypeValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateWarehouseServiceTypeCustomFields
     * @param body WarehouseServiceType to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateWarehouseServiceTypeCustomFieldsCall(WarehouseServiceType body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/warehouseServiceType/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateWarehouseServiceTypeCustomFieldsValidateBeforeCall(WarehouseServiceType body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateWarehouseServiceTypeCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateWarehouseServiceTypeCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a warehouseServiceType custom fields
     * Updates an existing warehouseServiceType custom fields using the specified data.
     * @param body WarehouseServiceType to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateWarehouseServiceTypeCustomFields(WarehouseServiceType body) throws ApiException {
        updateWarehouseServiceTypeCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a warehouseServiceType custom fields
     * Updates an existing warehouseServiceType custom fields using the specified data.
     * @param body WarehouseServiceType to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateWarehouseServiceTypeCustomFieldsWithHttpInfo(WarehouseServiceType body) throws ApiException {
        com.squareup.okhttp.Call call = updateWarehouseServiceTypeCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a warehouseServiceType custom fields (asynchronously)
     * Updates an existing warehouseServiceType custom fields using the specified data.
     * @param body WarehouseServiceType to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateWarehouseServiceTypeCustomFieldsAsync(WarehouseServiceType body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateWarehouseServiceTypeCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
