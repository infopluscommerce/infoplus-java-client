/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ItemSummaryCode;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ItemSummaryCodeApi {
    private ApiClient apiClient;

    public ItemSummaryCodeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ItemSummaryCodeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addItemSummaryCode
     * @param body ItemSummaryCode to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemSummaryCodeCall(ItemSummaryCode body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/itemSummaryCode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemSummaryCodeValidateBeforeCall(ItemSummaryCode body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addItemSummaryCode(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemSummaryCodeCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an itemSummaryCode
     * Inserts a new itemSummaryCode using the specified data.
     * @param body ItemSummaryCode to be inserted. (required)
     * @return ItemSummaryCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemSummaryCode addItemSummaryCode(ItemSummaryCode body) throws ApiException {
        ApiResponse<ItemSummaryCode> resp = addItemSummaryCodeWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create an itemSummaryCode
     * Inserts a new itemSummaryCode using the specified data.
     * @param body ItemSummaryCode to be inserted. (required)
     * @return ApiResponse&lt;ItemSummaryCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemSummaryCode> addItemSummaryCodeWithHttpInfo(ItemSummaryCode body) throws ApiException {
        com.squareup.okhttp.Call call = addItemSummaryCodeValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ItemSummaryCode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an itemSummaryCode (asynchronously)
     * Inserts a new itemSummaryCode using the specified data.
     * @param body ItemSummaryCode to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemSummaryCodeAsync(ItemSummaryCode body, final ApiCallback<ItemSummaryCode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemSummaryCodeValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemSummaryCode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addItemSummaryCodeAudit
     * @param itemSummaryCodeId Id of the itemSummaryCode to add an audit to (required)
     * @param itemSummaryCodeAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemSummaryCodeAuditCall(Integer itemSummaryCodeId, String itemSummaryCodeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSummaryCode/{itemSummaryCodeId}/audit/{itemSummaryCodeAudit}"
            .replaceAll("\\{" + "itemSummaryCodeId" + "\\}", apiClient.escapeString(itemSummaryCodeId.toString()))
            .replaceAll("\\{" + "itemSummaryCodeAudit" + "\\}", apiClient.escapeString(itemSummaryCodeAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemSummaryCodeAuditValidateBeforeCall(Integer itemSummaryCodeId, String itemSummaryCodeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSummaryCodeId' is set
        if (itemSummaryCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemSummaryCodeId' when calling addItemSummaryCodeAudit(Async)");
        }
        
        // verify the required parameter 'itemSummaryCodeAudit' is set
        if (itemSummaryCodeAudit == null) {
            throw new ApiException("Missing the required parameter 'itemSummaryCodeAudit' when calling addItemSummaryCodeAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemSummaryCodeAuditCall(itemSummaryCodeId, itemSummaryCodeAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for an itemSummaryCode
     * Adds an audit to an existing itemSummaryCode.
     * @param itemSummaryCodeId Id of the itemSummaryCode to add an audit to (required)
     * @param itemSummaryCodeAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemSummaryCodeAudit(Integer itemSummaryCodeId, String itemSummaryCodeAudit) throws ApiException {
        addItemSummaryCodeAuditWithHttpInfo(itemSummaryCodeId, itemSummaryCodeAudit);
    }

    /**
     * Add new audit for an itemSummaryCode
     * Adds an audit to an existing itemSummaryCode.
     * @param itemSummaryCodeId Id of the itemSummaryCode to add an audit to (required)
     * @param itemSummaryCodeAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemSummaryCodeAuditWithHttpInfo(Integer itemSummaryCodeId, String itemSummaryCodeAudit) throws ApiException {
        com.squareup.okhttp.Call call = addItemSummaryCodeAuditValidateBeforeCall(itemSummaryCodeId, itemSummaryCodeAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for an itemSummaryCode (asynchronously)
     * Adds an audit to an existing itemSummaryCode.
     * @param itemSummaryCodeId Id of the itemSummaryCode to add an audit to (required)
     * @param itemSummaryCodeAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemSummaryCodeAuditAsync(Integer itemSummaryCodeId, String itemSummaryCodeAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemSummaryCodeAuditValidateBeforeCall(itemSummaryCodeId, itemSummaryCodeAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemSummaryCodeFile
     * @param itemSummaryCodeId Id of the itemSummaryCode to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemSummaryCodeFileCall(Integer itemSummaryCodeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSummaryCode/{itemSummaryCodeId}/file/{fileName}"
            .replaceAll("\\{" + "itemSummaryCodeId" + "\\}", apiClient.escapeString(itemSummaryCodeId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemSummaryCodeFileValidateBeforeCall(Integer itemSummaryCodeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSummaryCodeId' is set
        if (itemSummaryCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemSummaryCodeId' when calling addItemSummaryCodeFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addItemSummaryCodeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemSummaryCodeFileCall(itemSummaryCodeId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an itemSummaryCode
     * Adds a file to an existing itemSummaryCode.
     * @param itemSummaryCodeId Id of the itemSummaryCode to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemSummaryCodeFile(Integer itemSummaryCodeId, String fileName) throws ApiException {
        addItemSummaryCodeFileWithHttpInfo(itemSummaryCodeId, fileName);
    }

    /**
     * Attach a file to an itemSummaryCode
     * Adds a file to an existing itemSummaryCode.
     * @param itemSummaryCodeId Id of the itemSummaryCode to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemSummaryCodeFileWithHttpInfo(Integer itemSummaryCodeId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addItemSummaryCodeFileValidateBeforeCall(itemSummaryCodeId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an itemSummaryCode (asynchronously)
     * Adds a file to an existing itemSummaryCode.
     * @param itemSummaryCodeId Id of the itemSummaryCode to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemSummaryCodeFileAsync(Integer itemSummaryCodeId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemSummaryCodeFileValidateBeforeCall(itemSummaryCodeId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemSummaryCodeFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param itemSummaryCodeId Id of the itemSummaryCode to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemSummaryCodeFileByURLCall(RecordFile body, Integer itemSummaryCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/itemSummaryCode/{itemSummaryCodeId}/file"
            .replaceAll("\\{" + "itemSummaryCodeId" + "\\}", apiClient.escapeString(itemSummaryCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemSummaryCodeFileByURLValidateBeforeCall(RecordFile body, Integer itemSummaryCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addItemSummaryCodeFileByURL(Async)");
        }
        
        // verify the required parameter 'itemSummaryCodeId' is set
        if (itemSummaryCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemSummaryCodeId' when calling addItemSummaryCodeFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemSummaryCodeFileByURLCall(body, itemSummaryCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an itemSummaryCode by URL.
     * Adds a file to an existing itemSummaryCode by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param itemSummaryCodeId Id of the itemSummaryCode to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemSummaryCodeFileByURL(RecordFile body, Integer itemSummaryCodeId) throws ApiException {
        addItemSummaryCodeFileByURLWithHttpInfo(body, itemSummaryCodeId);
    }

    /**
     * Attach a file to an itemSummaryCode by URL.
     * Adds a file to an existing itemSummaryCode by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param itemSummaryCodeId Id of the itemSummaryCode to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemSummaryCodeFileByURLWithHttpInfo(RecordFile body, Integer itemSummaryCodeId) throws ApiException {
        com.squareup.okhttp.Call call = addItemSummaryCodeFileByURLValidateBeforeCall(body, itemSummaryCodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an itemSummaryCode by URL. (asynchronously)
     * Adds a file to an existing itemSummaryCode by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param itemSummaryCodeId Id of the itemSummaryCode to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemSummaryCodeFileByURLAsync(RecordFile body, Integer itemSummaryCodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemSummaryCodeFileByURLValidateBeforeCall(body, itemSummaryCodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemSummaryCodeTag
     * @param itemSummaryCodeId Id of the itemSummaryCode to add a tag to (required)
     * @param itemSummaryCodeTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemSummaryCodeTagCall(Integer itemSummaryCodeId, String itemSummaryCodeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSummaryCode/{itemSummaryCodeId}/tag/{itemSummaryCodeTag}"
            .replaceAll("\\{" + "itemSummaryCodeId" + "\\}", apiClient.escapeString(itemSummaryCodeId.toString()))
            .replaceAll("\\{" + "itemSummaryCodeTag" + "\\}", apiClient.escapeString(itemSummaryCodeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemSummaryCodeTagValidateBeforeCall(Integer itemSummaryCodeId, String itemSummaryCodeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSummaryCodeId' is set
        if (itemSummaryCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemSummaryCodeId' when calling addItemSummaryCodeTag(Async)");
        }
        
        // verify the required parameter 'itemSummaryCodeTag' is set
        if (itemSummaryCodeTag == null) {
            throw new ApiException("Missing the required parameter 'itemSummaryCodeTag' when calling addItemSummaryCodeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemSummaryCodeTagCall(itemSummaryCodeId, itemSummaryCodeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for an itemSummaryCode.
     * Adds a tag to an existing itemSummaryCode.
     * @param itemSummaryCodeId Id of the itemSummaryCode to add a tag to (required)
     * @param itemSummaryCodeTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemSummaryCodeTag(Integer itemSummaryCodeId, String itemSummaryCodeTag) throws ApiException {
        addItemSummaryCodeTagWithHttpInfo(itemSummaryCodeId, itemSummaryCodeTag);
    }

    /**
     * Add new tags for an itemSummaryCode.
     * Adds a tag to an existing itemSummaryCode.
     * @param itemSummaryCodeId Id of the itemSummaryCode to add a tag to (required)
     * @param itemSummaryCodeTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemSummaryCodeTagWithHttpInfo(Integer itemSummaryCodeId, String itemSummaryCodeTag) throws ApiException {
        com.squareup.okhttp.Call call = addItemSummaryCodeTagValidateBeforeCall(itemSummaryCodeId, itemSummaryCodeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for an itemSummaryCode. (asynchronously)
     * Adds a tag to an existing itemSummaryCode.
     * @param itemSummaryCodeId Id of the itemSummaryCode to add a tag to (required)
     * @param itemSummaryCodeTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemSummaryCodeTagAsync(Integer itemSummaryCodeId, String itemSummaryCodeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemSummaryCodeTagValidateBeforeCall(itemSummaryCodeId, itemSummaryCodeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemSummaryCode
     * @param itemSummaryCodeId Id of the itemSummaryCode to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemSummaryCodeCall(Integer itemSummaryCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSummaryCode/{itemSummaryCodeId}"
            .replaceAll("\\{" + "itemSummaryCodeId" + "\\}", apiClient.escapeString(itemSummaryCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemSummaryCodeValidateBeforeCall(Integer itemSummaryCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSummaryCodeId' is set
        if (itemSummaryCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemSummaryCodeId' when calling deleteItemSummaryCode(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemSummaryCodeCall(itemSummaryCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an itemSummaryCode
     * Deletes the itemSummaryCode identified by the specified id.
     * @param itemSummaryCodeId Id of the itemSummaryCode to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemSummaryCode(Integer itemSummaryCodeId) throws ApiException {
        deleteItemSummaryCodeWithHttpInfo(itemSummaryCodeId);
    }

    /**
     * Delete an itemSummaryCode
     * Deletes the itemSummaryCode identified by the specified id.
     * @param itemSummaryCodeId Id of the itemSummaryCode to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemSummaryCodeWithHttpInfo(Integer itemSummaryCodeId) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemSummaryCodeValidateBeforeCall(itemSummaryCodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an itemSummaryCode (asynchronously)
     * Deletes the itemSummaryCode identified by the specified id.
     * @param itemSummaryCodeId Id of the itemSummaryCode to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemSummaryCodeAsync(Integer itemSummaryCodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemSummaryCodeValidateBeforeCall(itemSummaryCodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemSummaryCodeFile
     * @param itemSummaryCodeId Id of the itemSummaryCode to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemSummaryCodeFileCall(Integer itemSummaryCodeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSummaryCode/{itemSummaryCodeId}/file/{fileId}"
            .replaceAll("\\{" + "itemSummaryCodeId" + "\\}", apiClient.escapeString(itemSummaryCodeId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemSummaryCodeFileValidateBeforeCall(Integer itemSummaryCodeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSummaryCodeId' is set
        if (itemSummaryCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemSummaryCodeId' when calling deleteItemSummaryCodeFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteItemSummaryCodeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemSummaryCodeFileCall(itemSummaryCodeId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for an itemSummaryCode.
     * Deletes an existing itemSummaryCode file using the specified data.
     * @param itemSummaryCodeId Id of the itemSummaryCode to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemSummaryCodeFile(Integer itemSummaryCodeId, Integer fileId) throws ApiException {
        deleteItemSummaryCodeFileWithHttpInfo(itemSummaryCodeId, fileId);
    }

    /**
     * Delete a file for an itemSummaryCode.
     * Deletes an existing itemSummaryCode file using the specified data.
     * @param itemSummaryCodeId Id of the itemSummaryCode to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemSummaryCodeFileWithHttpInfo(Integer itemSummaryCodeId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemSummaryCodeFileValidateBeforeCall(itemSummaryCodeId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for an itemSummaryCode. (asynchronously)
     * Deletes an existing itemSummaryCode file using the specified data.
     * @param itemSummaryCodeId Id of the itemSummaryCode to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemSummaryCodeFileAsync(Integer itemSummaryCodeId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemSummaryCodeFileValidateBeforeCall(itemSummaryCodeId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemSummaryCodeTag
     * @param itemSummaryCodeId Id of the itemSummaryCode to remove tag from (required)
     * @param itemSummaryCodeTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemSummaryCodeTagCall(Integer itemSummaryCodeId, String itemSummaryCodeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSummaryCode/{itemSummaryCodeId}/tag/{itemSummaryCodeTag}"
            .replaceAll("\\{" + "itemSummaryCodeId" + "\\}", apiClient.escapeString(itemSummaryCodeId.toString()))
            .replaceAll("\\{" + "itemSummaryCodeTag" + "\\}", apiClient.escapeString(itemSummaryCodeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemSummaryCodeTagValidateBeforeCall(Integer itemSummaryCodeId, String itemSummaryCodeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSummaryCodeId' is set
        if (itemSummaryCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemSummaryCodeId' when calling deleteItemSummaryCodeTag(Async)");
        }
        
        // verify the required parameter 'itemSummaryCodeTag' is set
        if (itemSummaryCodeTag == null) {
            throw new ApiException("Missing the required parameter 'itemSummaryCodeTag' when calling deleteItemSummaryCodeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemSummaryCodeTagCall(itemSummaryCodeId, itemSummaryCodeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for an itemSummaryCode.
     * Deletes an existing itemSummaryCode tag using the specified data.
     * @param itemSummaryCodeId Id of the itemSummaryCode to remove tag from (required)
     * @param itemSummaryCodeTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemSummaryCodeTag(Integer itemSummaryCodeId, String itemSummaryCodeTag) throws ApiException {
        deleteItemSummaryCodeTagWithHttpInfo(itemSummaryCodeId, itemSummaryCodeTag);
    }

    /**
     * Delete a tag for an itemSummaryCode.
     * Deletes an existing itemSummaryCode tag using the specified data.
     * @param itemSummaryCodeId Id of the itemSummaryCode to remove tag from (required)
     * @param itemSummaryCodeTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemSummaryCodeTagWithHttpInfo(Integer itemSummaryCodeId, String itemSummaryCodeTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemSummaryCodeTagValidateBeforeCall(itemSummaryCodeId, itemSummaryCodeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for an itemSummaryCode. (asynchronously)
     * Deletes an existing itemSummaryCode tag using the specified data.
     * @param itemSummaryCodeId Id of the itemSummaryCode to remove tag from (required)
     * @param itemSummaryCodeTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemSummaryCodeTagAsync(Integer itemSummaryCodeId, String itemSummaryCodeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemSummaryCodeTagValidateBeforeCall(itemSummaryCodeId, itemSummaryCodeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateItemSummaryCodeById
     * @param itemSummaryCodeId Id of the itemSummaryCode to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateItemSummaryCodeByIdCall(Integer itemSummaryCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSummaryCode/duplicate/{itemSummaryCodeId}"
            .replaceAll("\\{" + "itemSummaryCodeId" + "\\}", apiClient.escapeString(itemSummaryCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateItemSummaryCodeByIdValidateBeforeCall(Integer itemSummaryCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSummaryCodeId' is set
        if (itemSummaryCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemSummaryCodeId' when calling getDuplicateItemSummaryCodeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateItemSummaryCodeByIdCall(itemSummaryCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated an itemSummaryCode by id
     * Returns a duplicated itemSummaryCode identified by the specified id.
     * @param itemSummaryCodeId Id of the itemSummaryCode to be duplicated. (required)
     * @return ItemSummaryCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemSummaryCode getDuplicateItemSummaryCodeById(Integer itemSummaryCodeId) throws ApiException {
        ApiResponse<ItemSummaryCode> resp = getDuplicateItemSummaryCodeByIdWithHttpInfo(itemSummaryCodeId);
        return resp.getData();
    }

    /**
     * Get a duplicated an itemSummaryCode by id
     * Returns a duplicated itemSummaryCode identified by the specified id.
     * @param itemSummaryCodeId Id of the itemSummaryCode to be duplicated. (required)
     * @return ApiResponse&lt;ItemSummaryCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemSummaryCode> getDuplicateItemSummaryCodeByIdWithHttpInfo(Integer itemSummaryCodeId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateItemSummaryCodeByIdValidateBeforeCall(itemSummaryCodeId, null, null);
        Type localVarReturnType = new TypeToken<ItemSummaryCode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated an itemSummaryCode by id (asynchronously)
     * Returns a duplicated itemSummaryCode identified by the specified id.
     * @param itemSummaryCodeId Id of the itemSummaryCode to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateItemSummaryCodeByIdAsync(Integer itemSummaryCodeId, final ApiCallback<ItemSummaryCode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateItemSummaryCodeByIdValidateBeforeCall(itemSummaryCodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemSummaryCode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemSummaryCodeByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemSummaryCodeByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSummaryCode/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemSummaryCodeByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getItemSummaryCodeByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search itemSummaryCodes by filter
     * Returns the list of itemSummaryCodes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;ItemSummaryCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ItemSummaryCode> getItemSummaryCodeByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<ItemSummaryCode>> resp = getItemSummaryCodeByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search itemSummaryCodes by filter
     * Returns the list of itemSummaryCodes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;ItemSummaryCode&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ItemSummaryCode>> getItemSummaryCodeByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getItemSummaryCodeByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<ItemSummaryCode>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search itemSummaryCodes by filter (asynchronously)
     * Returns the list of itemSummaryCodes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemSummaryCodeByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<ItemSummaryCode>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemSummaryCodeByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ItemSummaryCode>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemSummaryCodeById
     * @param itemSummaryCodeId Id of the itemSummaryCode to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemSummaryCodeByIdCall(Integer itemSummaryCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSummaryCode/{itemSummaryCodeId}"
            .replaceAll("\\{" + "itemSummaryCodeId" + "\\}", apiClient.escapeString(itemSummaryCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemSummaryCodeByIdValidateBeforeCall(Integer itemSummaryCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSummaryCodeId' is set
        if (itemSummaryCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemSummaryCodeId' when calling getItemSummaryCodeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemSummaryCodeByIdCall(itemSummaryCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an itemSummaryCode by id
     * Returns the itemSummaryCode identified by the specified id.
     * @param itemSummaryCodeId Id of the itemSummaryCode to be returned. (required)
     * @return ItemSummaryCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemSummaryCode getItemSummaryCodeById(Integer itemSummaryCodeId) throws ApiException {
        ApiResponse<ItemSummaryCode> resp = getItemSummaryCodeByIdWithHttpInfo(itemSummaryCodeId);
        return resp.getData();
    }

    /**
     * Get an itemSummaryCode by id
     * Returns the itemSummaryCode identified by the specified id.
     * @param itemSummaryCodeId Id of the itemSummaryCode to be returned. (required)
     * @return ApiResponse&lt;ItemSummaryCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemSummaryCode> getItemSummaryCodeByIdWithHttpInfo(Integer itemSummaryCodeId) throws ApiException {
        com.squareup.okhttp.Call call = getItemSummaryCodeByIdValidateBeforeCall(itemSummaryCodeId, null, null);
        Type localVarReturnType = new TypeToken<ItemSummaryCode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an itemSummaryCode by id (asynchronously)
     * Returns the itemSummaryCode identified by the specified id.
     * @param itemSummaryCodeId Id of the itemSummaryCode to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemSummaryCodeByIdAsync(Integer itemSummaryCodeId, final ApiCallback<ItemSummaryCode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemSummaryCodeByIdValidateBeforeCall(itemSummaryCodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemSummaryCode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemSummaryCodeFiles
     * @param itemSummaryCodeId Id of the itemSummaryCode to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemSummaryCodeFilesCall(Integer itemSummaryCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSummaryCode/{itemSummaryCodeId}/file"
            .replaceAll("\\{" + "itemSummaryCodeId" + "\\}", apiClient.escapeString(itemSummaryCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemSummaryCodeFilesValidateBeforeCall(Integer itemSummaryCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSummaryCodeId' is set
        if (itemSummaryCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemSummaryCodeId' when calling getItemSummaryCodeFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemSummaryCodeFilesCall(itemSummaryCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for an itemSummaryCode.
     * Get all existing itemSummaryCode files.
     * @param itemSummaryCodeId Id of the itemSummaryCode to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getItemSummaryCodeFiles(Integer itemSummaryCodeId) throws ApiException {
        getItemSummaryCodeFilesWithHttpInfo(itemSummaryCodeId);
    }

    /**
     * Get the files for an itemSummaryCode.
     * Get all existing itemSummaryCode files.
     * @param itemSummaryCodeId Id of the itemSummaryCode to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getItemSummaryCodeFilesWithHttpInfo(Integer itemSummaryCodeId) throws ApiException {
        com.squareup.okhttp.Call call = getItemSummaryCodeFilesValidateBeforeCall(itemSummaryCodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for an itemSummaryCode. (asynchronously)
     * Get all existing itemSummaryCode files.
     * @param itemSummaryCodeId Id of the itemSummaryCode to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemSummaryCodeFilesAsync(Integer itemSummaryCodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemSummaryCodeFilesValidateBeforeCall(itemSummaryCodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getItemSummaryCodeTags
     * @param itemSummaryCodeId Id of the itemSummaryCode to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemSummaryCodeTagsCall(Integer itemSummaryCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSummaryCode/{itemSummaryCodeId}/tag"
            .replaceAll("\\{" + "itemSummaryCodeId" + "\\}", apiClient.escapeString(itemSummaryCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemSummaryCodeTagsValidateBeforeCall(Integer itemSummaryCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSummaryCodeId' is set
        if (itemSummaryCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemSummaryCodeId' when calling getItemSummaryCodeTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemSummaryCodeTagsCall(itemSummaryCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for an itemSummaryCode.
     * Get all existing itemSummaryCode tags.
     * @param itemSummaryCodeId Id of the itemSummaryCode to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getItemSummaryCodeTags(Integer itemSummaryCodeId) throws ApiException {
        getItemSummaryCodeTagsWithHttpInfo(itemSummaryCodeId);
    }

    /**
     * Get the tags for an itemSummaryCode.
     * Get all existing itemSummaryCode tags.
     * @param itemSummaryCodeId Id of the itemSummaryCode to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getItemSummaryCodeTagsWithHttpInfo(Integer itemSummaryCodeId) throws ApiException {
        com.squareup.okhttp.Call call = getItemSummaryCodeTagsValidateBeforeCall(itemSummaryCodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for an itemSummaryCode. (asynchronously)
     * Get all existing itemSummaryCode tags.
     * @param itemSummaryCodeId Id of the itemSummaryCode to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemSummaryCodeTagsAsync(Integer itemSummaryCodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemSummaryCodeTagsValidateBeforeCall(itemSummaryCodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateItemSummaryCode
     * @param body ItemSummaryCode to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateItemSummaryCodeCall(ItemSummaryCode body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/itemSummaryCode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateItemSummaryCodeValidateBeforeCall(ItemSummaryCode body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateItemSummaryCode(Async)");
        }
        

        com.squareup.okhttp.Call call = updateItemSummaryCodeCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an itemSummaryCode
     * Updates an existing itemSummaryCode using the specified data.
     * @param body ItemSummaryCode to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateItemSummaryCode(ItemSummaryCode body) throws ApiException {
        updateItemSummaryCodeWithHttpInfo(body);
    }

    /**
     * Update an itemSummaryCode
     * Updates an existing itemSummaryCode using the specified data.
     * @param body ItemSummaryCode to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateItemSummaryCodeWithHttpInfo(ItemSummaryCode body) throws ApiException {
        com.squareup.okhttp.Call call = updateItemSummaryCodeValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an itemSummaryCode (asynchronously)
     * Updates an existing itemSummaryCode using the specified data.
     * @param body ItemSummaryCode to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateItemSummaryCodeAsync(ItemSummaryCode body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateItemSummaryCodeValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
