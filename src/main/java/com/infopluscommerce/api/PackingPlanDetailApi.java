/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.PackingPlanDetail;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PackingPlanDetailApi {
    private ApiClient apiClient;

    public PackingPlanDetailApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PackingPlanDetailApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addPackingPlanDetailAudit
     * @param packingPlanDetailId Id of the packingPlanDetail to add an audit to (required)
     * @param packingPlanDetailAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPackingPlanDetailAuditCall(Integer packingPlanDetailId, String packingPlanDetailAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/packingPlanDetail/{packingPlanDetailId}/audit/{packingPlanDetailAudit}"
            .replaceAll("\\{" + "packingPlanDetailId" + "\\}", apiClient.escapeString(packingPlanDetailId.toString()))
            .replaceAll("\\{" + "packingPlanDetailAudit" + "\\}", apiClient.escapeString(packingPlanDetailAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPackingPlanDetailAuditValidateBeforeCall(Integer packingPlanDetailId, String packingPlanDetailAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'packingPlanDetailId' is set
        if (packingPlanDetailId == null) {
            throw new ApiException("Missing the required parameter 'packingPlanDetailId' when calling addPackingPlanDetailAudit(Async)");
        }
        
        // verify the required parameter 'packingPlanDetailAudit' is set
        if (packingPlanDetailAudit == null) {
            throw new ApiException("Missing the required parameter 'packingPlanDetailAudit' when calling addPackingPlanDetailAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addPackingPlanDetailAuditCall(packingPlanDetailId, packingPlanDetailAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a packingPlanDetail
     * Adds an audit to an existing packingPlanDetail.
     * @param packingPlanDetailId Id of the packingPlanDetail to add an audit to (required)
     * @param packingPlanDetailAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addPackingPlanDetailAudit(Integer packingPlanDetailId, String packingPlanDetailAudit) throws ApiException {
        addPackingPlanDetailAuditWithHttpInfo(packingPlanDetailId, packingPlanDetailAudit);
    }

    /**
     * Add new audit for a packingPlanDetail
     * Adds an audit to an existing packingPlanDetail.
     * @param packingPlanDetailId Id of the packingPlanDetail to add an audit to (required)
     * @param packingPlanDetailAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addPackingPlanDetailAuditWithHttpInfo(Integer packingPlanDetailId, String packingPlanDetailAudit) throws ApiException {
        com.squareup.okhttp.Call call = addPackingPlanDetailAuditValidateBeforeCall(packingPlanDetailId, packingPlanDetailAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a packingPlanDetail (asynchronously)
     * Adds an audit to an existing packingPlanDetail.
     * @param packingPlanDetailId Id of the packingPlanDetail to add an audit to (required)
     * @param packingPlanDetailAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPackingPlanDetailAuditAsync(Integer packingPlanDetailId, String packingPlanDetailAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPackingPlanDetailAuditValidateBeforeCall(packingPlanDetailId, packingPlanDetailAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addPackingPlanDetailFile
     * @param packingPlanDetailId Id of the packingPlanDetail to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPackingPlanDetailFileCall(Integer packingPlanDetailId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/packingPlanDetail/{packingPlanDetailId}/file/{fileName}"
            .replaceAll("\\{" + "packingPlanDetailId" + "\\}", apiClient.escapeString(packingPlanDetailId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPackingPlanDetailFileValidateBeforeCall(Integer packingPlanDetailId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'packingPlanDetailId' is set
        if (packingPlanDetailId == null) {
            throw new ApiException("Missing the required parameter 'packingPlanDetailId' when calling addPackingPlanDetailFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addPackingPlanDetailFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addPackingPlanDetailFileCall(packingPlanDetailId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a packingPlanDetail
     * Adds a file to an existing packingPlanDetail.
     * @param packingPlanDetailId Id of the packingPlanDetail to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addPackingPlanDetailFile(Integer packingPlanDetailId, String fileName) throws ApiException {
        addPackingPlanDetailFileWithHttpInfo(packingPlanDetailId, fileName);
    }

    /**
     * Attach a file to a packingPlanDetail
     * Adds a file to an existing packingPlanDetail.
     * @param packingPlanDetailId Id of the packingPlanDetail to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addPackingPlanDetailFileWithHttpInfo(Integer packingPlanDetailId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addPackingPlanDetailFileValidateBeforeCall(packingPlanDetailId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a packingPlanDetail (asynchronously)
     * Adds a file to an existing packingPlanDetail.
     * @param packingPlanDetailId Id of the packingPlanDetail to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPackingPlanDetailFileAsync(Integer packingPlanDetailId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPackingPlanDetailFileValidateBeforeCall(packingPlanDetailId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addPackingPlanDetailFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param packingPlanDetailId Id of the packingPlanDetail to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPackingPlanDetailFileByURLCall(RecordFile body, Integer packingPlanDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/packingPlanDetail/{packingPlanDetailId}/file"
            .replaceAll("\\{" + "packingPlanDetailId" + "\\}", apiClient.escapeString(packingPlanDetailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPackingPlanDetailFileByURLValidateBeforeCall(RecordFile body, Integer packingPlanDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addPackingPlanDetailFileByURL(Async)");
        }
        
        // verify the required parameter 'packingPlanDetailId' is set
        if (packingPlanDetailId == null) {
            throw new ApiException("Missing the required parameter 'packingPlanDetailId' when calling addPackingPlanDetailFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addPackingPlanDetailFileByURLCall(body, packingPlanDetailId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a packingPlanDetail by URL.
     * Adds a file to an existing packingPlanDetail by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param packingPlanDetailId Id of the packingPlanDetail to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addPackingPlanDetailFileByURL(RecordFile body, Integer packingPlanDetailId) throws ApiException {
        addPackingPlanDetailFileByURLWithHttpInfo(body, packingPlanDetailId);
    }

    /**
     * Attach a file to a packingPlanDetail by URL.
     * Adds a file to an existing packingPlanDetail by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param packingPlanDetailId Id of the packingPlanDetail to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addPackingPlanDetailFileByURLWithHttpInfo(RecordFile body, Integer packingPlanDetailId) throws ApiException {
        com.squareup.okhttp.Call call = addPackingPlanDetailFileByURLValidateBeforeCall(body, packingPlanDetailId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a packingPlanDetail by URL. (asynchronously)
     * Adds a file to an existing packingPlanDetail by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param packingPlanDetailId Id of the packingPlanDetail to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPackingPlanDetailFileByURLAsync(RecordFile body, Integer packingPlanDetailId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPackingPlanDetailFileByURLValidateBeforeCall(body, packingPlanDetailId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addPackingPlanDetailTag
     * @param packingPlanDetailId Id of the packingPlanDetail to add a tag to (required)
     * @param packingPlanDetailTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPackingPlanDetailTagCall(Integer packingPlanDetailId, String packingPlanDetailTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/packingPlanDetail/{packingPlanDetailId}/tag/{packingPlanDetailTag}"
            .replaceAll("\\{" + "packingPlanDetailId" + "\\}", apiClient.escapeString(packingPlanDetailId.toString()))
            .replaceAll("\\{" + "packingPlanDetailTag" + "\\}", apiClient.escapeString(packingPlanDetailTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPackingPlanDetailTagValidateBeforeCall(Integer packingPlanDetailId, String packingPlanDetailTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'packingPlanDetailId' is set
        if (packingPlanDetailId == null) {
            throw new ApiException("Missing the required parameter 'packingPlanDetailId' when calling addPackingPlanDetailTag(Async)");
        }
        
        // verify the required parameter 'packingPlanDetailTag' is set
        if (packingPlanDetailTag == null) {
            throw new ApiException("Missing the required parameter 'packingPlanDetailTag' when calling addPackingPlanDetailTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addPackingPlanDetailTagCall(packingPlanDetailId, packingPlanDetailTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a packingPlanDetail.
     * Adds a tag to an existing packingPlanDetail.
     * @param packingPlanDetailId Id of the packingPlanDetail to add a tag to (required)
     * @param packingPlanDetailTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addPackingPlanDetailTag(Integer packingPlanDetailId, String packingPlanDetailTag) throws ApiException {
        addPackingPlanDetailTagWithHttpInfo(packingPlanDetailId, packingPlanDetailTag);
    }

    /**
     * Add new tags for a packingPlanDetail.
     * Adds a tag to an existing packingPlanDetail.
     * @param packingPlanDetailId Id of the packingPlanDetail to add a tag to (required)
     * @param packingPlanDetailTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addPackingPlanDetailTagWithHttpInfo(Integer packingPlanDetailId, String packingPlanDetailTag) throws ApiException {
        com.squareup.okhttp.Call call = addPackingPlanDetailTagValidateBeforeCall(packingPlanDetailId, packingPlanDetailTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a packingPlanDetail. (asynchronously)
     * Adds a tag to an existing packingPlanDetail.
     * @param packingPlanDetailId Id of the packingPlanDetail to add a tag to (required)
     * @param packingPlanDetailTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPackingPlanDetailTagAsync(Integer packingPlanDetailId, String packingPlanDetailTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPackingPlanDetailTagValidateBeforeCall(packingPlanDetailId, packingPlanDetailTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePackingPlanDetailFile
     * @param packingPlanDetailId Id of the packingPlanDetail to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePackingPlanDetailFileCall(Integer packingPlanDetailId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/packingPlanDetail/{packingPlanDetailId}/file/{fileId}"
            .replaceAll("\\{" + "packingPlanDetailId" + "\\}", apiClient.escapeString(packingPlanDetailId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePackingPlanDetailFileValidateBeforeCall(Integer packingPlanDetailId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'packingPlanDetailId' is set
        if (packingPlanDetailId == null) {
            throw new ApiException("Missing the required parameter 'packingPlanDetailId' when calling deletePackingPlanDetailFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deletePackingPlanDetailFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePackingPlanDetailFileCall(packingPlanDetailId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a packingPlanDetail.
     * Deletes an existing packingPlanDetail file using the specified data.
     * @param packingPlanDetailId Id of the packingPlanDetail to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePackingPlanDetailFile(Integer packingPlanDetailId, Integer fileId) throws ApiException {
        deletePackingPlanDetailFileWithHttpInfo(packingPlanDetailId, fileId);
    }

    /**
     * Delete a file for a packingPlanDetail.
     * Deletes an existing packingPlanDetail file using the specified data.
     * @param packingPlanDetailId Id of the packingPlanDetail to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePackingPlanDetailFileWithHttpInfo(Integer packingPlanDetailId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deletePackingPlanDetailFileValidateBeforeCall(packingPlanDetailId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a packingPlanDetail. (asynchronously)
     * Deletes an existing packingPlanDetail file using the specified data.
     * @param packingPlanDetailId Id of the packingPlanDetail to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePackingPlanDetailFileAsync(Integer packingPlanDetailId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePackingPlanDetailFileValidateBeforeCall(packingPlanDetailId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePackingPlanDetailTag
     * @param packingPlanDetailId Id of the packingPlanDetail to remove tag from (required)
     * @param packingPlanDetailTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePackingPlanDetailTagCall(Integer packingPlanDetailId, String packingPlanDetailTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/packingPlanDetail/{packingPlanDetailId}/tag/{packingPlanDetailTag}"
            .replaceAll("\\{" + "packingPlanDetailId" + "\\}", apiClient.escapeString(packingPlanDetailId.toString()))
            .replaceAll("\\{" + "packingPlanDetailTag" + "\\}", apiClient.escapeString(packingPlanDetailTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePackingPlanDetailTagValidateBeforeCall(Integer packingPlanDetailId, String packingPlanDetailTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'packingPlanDetailId' is set
        if (packingPlanDetailId == null) {
            throw new ApiException("Missing the required parameter 'packingPlanDetailId' when calling deletePackingPlanDetailTag(Async)");
        }
        
        // verify the required parameter 'packingPlanDetailTag' is set
        if (packingPlanDetailTag == null) {
            throw new ApiException("Missing the required parameter 'packingPlanDetailTag' when calling deletePackingPlanDetailTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePackingPlanDetailTagCall(packingPlanDetailId, packingPlanDetailTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a packingPlanDetail.
     * Deletes an existing packingPlanDetail tag using the specified data.
     * @param packingPlanDetailId Id of the packingPlanDetail to remove tag from (required)
     * @param packingPlanDetailTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePackingPlanDetailTag(Integer packingPlanDetailId, String packingPlanDetailTag) throws ApiException {
        deletePackingPlanDetailTagWithHttpInfo(packingPlanDetailId, packingPlanDetailTag);
    }

    /**
     * Delete a tag for a packingPlanDetail.
     * Deletes an existing packingPlanDetail tag using the specified data.
     * @param packingPlanDetailId Id of the packingPlanDetail to remove tag from (required)
     * @param packingPlanDetailTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePackingPlanDetailTagWithHttpInfo(Integer packingPlanDetailId, String packingPlanDetailTag) throws ApiException {
        com.squareup.okhttp.Call call = deletePackingPlanDetailTagValidateBeforeCall(packingPlanDetailId, packingPlanDetailTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a packingPlanDetail. (asynchronously)
     * Deletes an existing packingPlanDetail tag using the specified data.
     * @param packingPlanDetailId Id of the packingPlanDetail to remove tag from (required)
     * @param packingPlanDetailTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePackingPlanDetailTagAsync(Integer packingPlanDetailId, String packingPlanDetailTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePackingPlanDetailTagValidateBeforeCall(packingPlanDetailId, packingPlanDetailTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicatePackingPlanDetailById
     * @param packingPlanDetailId Id of the packingPlanDetail to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicatePackingPlanDetailByIdCall(Integer packingPlanDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/packingPlanDetail/duplicate/{packingPlanDetailId}"
            .replaceAll("\\{" + "packingPlanDetailId" + "\\}", apiClient.escapeString(packingPlanDetailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicatePackingPlanDetailByIdValidateBeforeCall(Integer packingPlanDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'packingPlanDetailId' is set
        if (packingPlanDetailId == null) {
            throw new ApiException("Missing the required parameter 'packingPlanDetailId' when calling getDuplicatePackingPlanDetailById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicatePackingPlanDetailByIdCall(packingPlanDetailId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a packingPlanDetail by id
     * Returns a duplicated packingPlanDetail identified by the specified id.
     * @param packingPlanDetailId Id of the packingPlanDetail to be duplicated. (required)
     * @return PackingPlanDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PackingPlanDetail getDuplicatePackingPlanDetailById(Integer packingPlanDetailId) throws ApiException {
        ApiResponse<PackingPlanDetail> resp = getDuplicatePackingPlanDetailByIdWithHttpInfo(packingPlanDetailId);
        return resp.getData();
    }

    /**
     * Get a duplicated a packingPlanDetail by id
     * Returns a duplicated packingPlanDetail identified by the specified id.
     * @param packingPlanDetailId Id of the packingPlanDetail to be duplicated. (required)
     * @return ApiResponse&lt;PackingPlanDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PackingPlanDetail> getDuplicatePackingPlanDetailByIdWithHttpInfo(Integer packingPlanDetailId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicatePackingPlanDetailByIdValidateBeforeCall(packingPlanDetailId, null, null);
        Type localVarReturnType = new TypeToken<PackingPlanDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a packingPlanDetail by id (asynchronously)
     * Returns a duplicated packingPlanDetail identified by the specified id.
     * @param packingPlanDetailId Id of the packingPlanDetail to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicatePackingPlanDetailByIdAsync(Integer packingPlanDetailId, final ApiCallback<PackingPlanDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicatePackingPlanDetailByIdValidateBeforeCall(packingPlanDetailId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PackingPlanDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPackingPlanDetailByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPackingPlanDetailByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/packingPlanDetail/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPackingPlanDetailByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPackingPlanDetailByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search packingPlanDetails by filter
     * Returns the list of packingPlanDetails that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;PackingPlanDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PackingPlanDetail> getPackingPlanDetailByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<PackingPlanDetail>> resp = getPackingPlanDetailByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search packingPlanDetails by filter
     * Returns the list of packingPlanDetails that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;PackingPlanDetail&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PackingPlanDetail>> getPackingPlanDetailByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getPackingPlanDetailByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<PackingPlanDetail>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search packingPlanDetails by filter (asynchronously)
     * Returns the list of packingPlanDetails that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPackingPlanDetailByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<PackingPlanDetail>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPackingPlanDetailByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PackingPlanDetail>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPackingPlanDetailById
     * @param packingPlanDetailId Id of the packingPlanDetail to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPackingPlanDetailByIdCall(Integer packingPlanDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/packingPlanDetail/{packingPlanDetailId}"
            .replaceAll("\\{" + "packingPlanDetailId" + "\\}", apiClient.escapeString(packingPlanDetailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPackingPlanDetailByIdValidateBeforeCall(Integer packingPlanDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'packingPlanDetailId' is set
        if (packingPlanDetailId == null) {
            throw new ApiException("Missing the required parameter 'packingPlanDetailId' when calling getPackingPlanDetailById(Async)");
        }
        

        com.squareup.okhttp.Call call = getPackingPlanDetailByIdCall(packingPlanDetailId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a packingPlanDetail by id
     * Returns the packingPlanDetail identified by the specified id.
     * @param packingPlanDetailId Id of the packingPlanDetail to be returned. (required)
     * @return PackingPlanDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PackingPlanDetail getPackingPlanDetailById(Integer packingPlanDetailId) throws ApiException {
        ApiResponse<PackingPlanDetail> resp = getPackingPlanDetailByIdWithHttpInfo(packingPlanDetailId);
        return resp.getData();
    }

    /**
     * Get a packingPlanDetail by id
     * Returns the packingPlanDetail identified by the specified id.
     * @param packingPlanDetailId Id of the packingPlanDetail to be returned. (required)
     * @return ApiResponse&lt;PackingPlanDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PackingPlanDetail> getPackingPlanDetailByIdWithHttpInfo(Integer packingPlanDetailId) throws ApiException {
        com.squareup.okhttp.Call call = getPackingPlanDetailByIdValidateBeforeCall(packingPlanDetailId, null, null);
        Type localVarReturnType = new TypeToken<PackingPlanDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a packingPlanDetail by id (asynchronously)
     * Returns the packingPlanDetail identified by the specified id.
     * @param packingPlanDetailId Id of the packingPlanDetail to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPackingPlanDetailByIdAsync(Integer packingPlanDetailId, final ApiCallback<PackingPlanDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPackingPlanDetailByIdValidateBeforeCall(packingPlanDetailId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PackingPlanDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPackingPlanDetailFiles
     * @param packingPlanDetailId Id of the packingPlanDetail to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPackingPlanDetailFilesCall(Integer packingPlanDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/packingPlanDetail/{packingPlanDetailId}/file"
            .replaceAll("\\{" + "packingPlanDetailId" + "\\}", apiClient.escapeString(packingPlanDetailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPackingPlanDetailFilesValidateBeforeCall(Integer packingPlanDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'packingPlanDetailId' is set
        if (packingPlanDetailId == null) {
            throw new ApiException("Missing the required parameter 'packingPlanDetailId' when calling getPackingPlanDetailFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getPackingPlanDetailFilesCall(packingPlanDetailId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a packingPlanDetail.
     * Get all existing packingPlanDetail files.
     * @param packingPlanDetailId Id of the packingPlanDetail to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getPackingPlanDetailFiles(Integer packingPlanDetailId) throws ApiException {
        getPackingPlanDetailFilesWithHttpInfo(packingPlanDetailId);
    }

    /**
     * Get the files for a packingPlanDetail.
     * Get all existing packingPlanDetail files.
     * @param packingPlanDetailId Id of the packingPlanDetail to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getPackingPlanDetailFilesWithHttpInfo(Integer packingPlanDetailId) throws ApiException {
        com.squareup.okhttp.Call call = getPackingPlanDetailFilesValidateBeforeCall(packingPlanDetailId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a packingPlanDetail. (asynchronously)
     * Get all existing packingPlanDetail files.
     * @param packingPlanDetailId Id of the packingPlanDetail to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPackingPlanDetailFilesAsync(Integer packingPlanDetailId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPackingPlanDetailFilesValidateBeforeCall(packingPlanDetailId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getPackingPlanDetailTags
     * @param packingPlanDetailId Id of the packingPlanDetail to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPackingPlanDetailTagsCall(Integer packingPlanDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/packingPlanDetail/{packingPlanDetailId}/tag"
            .replaceAll("\\{" + "packingPlanDetailId" + "\\}", apiClient.escapeString(packingPlanDetailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPackingPlanDetailTagsValidateBeforeCall(Integer packingPlanDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'packingPlanDetailId' is set
        if (packingPlanDetailId == null) {
            throw new ApiException("Missing the required parameter 'packingPlanDetailId' when calling getPackingPlanDetailTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getPackingPlanDetailTagsCall(packingPlanDetailId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a packingPlanDetail.
     * Get all existing packingPlanDetail tags.
     * @param packingPlanDetailId Id of the packingPlanDetail to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getPackingPlanDetailTags(Integer packingPlanDetailId) throws ApiException {
        getPackingPlanDetailTagsWithHttpInfo(packingPlanDetailId);
    }

    /**
     * Get the tags for a packingPlanDetail.
     * Get all existing packingPlanDetail tags.
     * @param packingPlanDetailId Id of the packingPlanDetail to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getPackingPlanDetailTagsWithHttpInfo(Integer packingPlanDetailId) throws ApiException {
        com.squareup.okhttp.Call call = getPackingPlanDetailTagsValidateBeforeCall(packingPlanDetailId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a packingPlanDetail. (asynchronously)
     * Get all existing packingPlanDetail tags.
     * @param packingPlanDetailId Id of the packingPlanDetail to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPackingPlanDetailTagsAsync(Integer packingPlanDetailId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPackingPlanDetailTagsValidateBeforeCall(packingPlanDetailId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updatePackingPlanDetailCustomFields
     * @param body PackingPlanDetail to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePackingPlanDetailCustomFieldsCall(PackingPlanDetail body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/packingPlanDetail/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePackingPlanDetailCustomFieldsValidateBeforeCall(PackingPlanDetail body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePackingPlanDetailCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePackingPlanDetailCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a packingPlanDetail custom fields
     * Updates an existing packingPlanDetail custom fields using the specified data.
     * @param body PackingPlanDetail to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updatePackingPlanDetailCustomFields(PackingPlanDetail body) throws ApiException {
        updatePackingPlanDetailCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a packingPlanDetail custom fields
     * Updates an existing packingPlanDetail custom fields using the specified data.
     * @param body PackingPlanDetail to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updatePackingPlanDetailCustomFieldsWithHttpInfo(PackingPlanDetail body) throws ApiException {
        com.squareup.okhttp.Call call = updatePackingPlanDetailCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a packingPlanDetail custom fields (asynchronously)
     * Updates an existing packingPlanDetail custom fields using the specified data.
     * @param body PackingPlanDetail to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePackingPlanDetailCustomFieldsAsync(PackingPlanDetail body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePackingPlanDetailCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
