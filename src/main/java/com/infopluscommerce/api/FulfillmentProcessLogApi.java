/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.FulfillmentProcessLog;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FulfillmentProcessLogApi {
    private ApiClient apiClient;

    public FulfillmentProcessLogApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FulfillmentProcessLogApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addFulfillmentProcessLogAudit
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to add an audit to (required)
     * @param fulfillmentProcessLogAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentProcessLogAuditCall(Integer fulfillmentProcessLogId, String fulfillmentProcessLogAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/audit/{fulfillmentProcessLogAudit}"
            .replaceAll("\\{" + "fulfillmentProcessLogId" + "\\}", apiClient.escapeString(fulfillmentProcessLogId.toString()))
            .replaceAll("\\{" + "fulfillmentProcessLogAudit" + "\\}", apiClient.escapeString(fulfillmentProcessLogAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFulfillmentProcessLogAuditValidateBeforeCall(Integer fulfillmentProcessLogId, String fulfillmentProcessLogAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentProcessLogId' is set
        if (fulfillmentProcessLogId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentProcessLogId' when calling addFulfillmentProcessLogAudit(Async)");
        }
        
        // verify the required parameter 'fulfillmentProcessLogAudit' is set
        if (fulfillmentProcessLogAudit == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentProcessLogAudit' when calling addFulfillmentProcessLogAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addFulfillmentProcessLogAuditCall(fulfillmentProcessLogId, fulfillmentProcessLogAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a fulfillmentProcessLog
     * Adds an audit to an existing fulfillmentProcessLog.
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to add an audit to (required)
     * @param fulfillmentProcessLogAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addFulfillmentProcessLogAudit(Integer fulfillmentProcessLogId, String fulfillmentProcessLogAudit) throws ApiException {
        addFulfillmentProcessLogAuditWithHttpInfo(fulfillmentProcessLogId, fulfillmentProcessLogAudit);
    }

    /**
     * Add new audit for a fulfillmentProcessLog
     * Adds an audit to an existing fulfillmentProcessLog.
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to add an audit to (required)
     * @param fulfillmentProcessLogAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addFulfillmentProcessLogAuditWithHttpInfo(Integer fulfillmentProcessLogId, String fulfillmentProcessLogAudit) throws ApiException {
        com.squareup.okhttp.Call call = addFulfillmentProcessLogAuditValidateBeforeCall(fulfillmentProcessLogId, fulfillmentProcessLogAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a fulfillmentProcessLog (asynchronously)
     * Adds an audit to an existing fulfillmentProcessLog.
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to add an audit to (required)
     * @param fulfillmentProcessLogAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentProcessLogAuditAsync(Integer fulfillmentProcessLogId, String fulfillmentProcessLogAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFulfillmentProcessLogAuditValidateBeforeCall(fulfillmentProcessLogId, fulfillmentProcessLogAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addFulfillmentProcessLogFile
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentProcessLogFileCall(Integer fulfillmentProcessLogId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/file/{fileName}"
            .replaceAll("\\{" + "fulfillmentProcessLogId" + "\\}", apiClient.escapeString(fulfillmentProcessLogId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFulfillmentProcessLogFileValidateBeforeCall(Integer fulfillmentProcessLogId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentProcessLogId' is set
        if (fulfillmentProcessLogId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentProcessLogId' when calling addFulfillmentProcessLogFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addFulfillmentProcessLogFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addFulfillmentProcessLogFileCall(fulfillmentProcessLogId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a fulfillmentProcessLog
     * Adds a file to an existing fulfillmentProcessLog.
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addFulfillmentProcessLogFile(Integer fulfillmentProcessLogId, String fileName) throws ApiException {
        addFulfillmentProcessLogFileWithHttpInfo(fulfillmentProcessLogId, fileName);
    }

    /**
     * Attach a file to a fulfillmentProcessLog
     * Adds a file to an existing fulfillmentProcessLog.
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addFulfillmentProcessLogFileWithHttpInfo(Integer fulfillmentProcessLogId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addFulfillmentProcessLogFileValidateBeforeCall(fulfillmentProcessLogId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a fulfillmentProcessLog (asynchronously)
     * Adds a file to an existing fulfillmentProcessLog.
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentProcessLogFileAsync(Integer fulfillmentProcessLogId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFulfillmentProcessLogFileValidateBeforeCall(fulfillmentProcessLogId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addFulfillmentProcessLogFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentProcessLogFileByURLCall(RecordFile body, Integer fulfillmentProcessLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/file"
            .replaceAll("\\{" + "fulfillmentProcessLogId" + "\\}", apiClient.escapeString(fulfillmentProcessLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFulfillmentProcessLogFileByURLValidateBeforeCall(RecordFile body, Integer fulfillmentProcessLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addFulfillmentProcessLogFileByURL(Async)");
        }
        
        // verify the required parameter 'fulfillmentProcessLogId' is set
        if (fulfillmentProcessLogId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentProcessLogId' when calling addFulfillmentProcessLogFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addFulfillmentProcessLogFileByURLCall(body, fulfillmentProcessLogId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a fulfillmentProcessLog by URL.
     * Adds a file to an existing fulfillmentProcessLog by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addFulfillmentProcessLogFileByURL(RecordFile body, Integer fulfillmentProcessLogId) throws ApiException {
        addFulfillmentProcessLogFileByURLWithHttpInfo(body, fulfillmentProcessLogId);
    }

    /**
     * Attach a file to a fulfillmentProcessLog by URL.
     * Adds a file to an existing fulfillmentProcessLog by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addFulfillmentProcessLogFileByURLWithHttpInfo(RecordFile body, Integer fulfillmentProcessLogId) throws ApiException {
        com.squareup.okhttp.Call call = addFulfillmentProcessLogFileByURLValidateBeforeCall(body, fulfillmentProcessLogId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a fulfillmentProcessLog by URL. (asynchronously)
     * Adds a file to an existing fulfillmentProcessLog by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentProcessLogFileByURLAsync(RecordFile body, Integer fulfillmentProcessLogId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFulfillmentProcessLogFileByURLValidateBeforeCall(body, fulfillmentProcessLogId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addFulfillmentProcessLogTag
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to add a tag to (required)
     * @param fulfillmentProcessLogTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentProcessLogTagCall(Integer fulfillmentProcessLogId, String fulfillmentProcessLogTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/tag/{fulfillmentProcessLogTag}"
            .replaceAll("\\{" + "fulfillmentProcessLogId" + "\\}", apiClient.escapeString(fulfillmentProcessLogId.toString()))
            .replaceAll("\\{" + "fulfillmentProcessLogTag" + "\\}", apiClient.escapeString(fulfillmentProcessLogTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFulfillmentProcessLogTagValidateBeforeCall(Integer fulfillmentProcessLogId, String fulfillmentProcessLogTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentProcessLogId' is set
        if (fulfillmentProcessLogId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentProcessLogId' when calling addFulfillmentProcessLogTag(Async)");
        }
        
        // verify the required parameter 'fulfillmentProcessLogTag' is set
        if (fulfillmentProcessLogTag == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentProcessLogTag' when calling addFulfillmentProcessLogTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addFulfillmentProcessLogTagCall(fulfillmentProcessLogId, fulfillmentProcessLogTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a fulfillmentProcessLog.
     * Adds a tag to an existing fulfillmentProcessLog.
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to add a tag to (required)
     * @param fulfillmentProcessLogTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addFulfillmentProcessLogTag(Integer fulfillmentProcessLogId, String fulfillmentProcessLogTag) throws ApiException {
        addFulfillmentProcessLogTagWithHttpInfo(fulfillmentProcessLogId, fulfillmentProcessLogTag);
    }

    /**
     * Add new tags for a fulfillmentProcessLog.
     * Adds a tag to an existing fulfillmentProcessLog.
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to add a tag to (required)
     * @param fulfillmentProcessLogTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addFulfillmentProcessLogTagWithHttpInfo(Integer fulfillmentProcessLogId, String fulfillmentProcessLogTag) throws ApiException {
        com.squareup.okhttp.Call call = addFulfillmentProcessLogTagValidateBeforeCall(fulfillmentProcessLogId, fulfillmentProcessLogTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a fulfillmentProcessLog. (asynchronously)
     * Adds a tag to an existing fulfillmentProcessLog.
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to add a tag to (required)
     * @param fulfillmentProcessLogTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentProcessLogTagAsync(Integer fulfillmentProcessLogId, String fulfillmentProcessLogTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFulfillmentProcessLogTagValidateBeforeCall(fulfillmentProcessLogId, fulfillmentProcessLogTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteFulfillmentProcessLogFile
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFulfillmentProcessLogFileCall(Integer fulfillmentProcessLogId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/file/{fileId}"
            .replaceAll("\\{" + "fulfillmentProcessLogId" + "\\}", apiClient.escapeString(fulfillmentProcessLogId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFulfillmentProcessLogFileValidateBeforeCall(Integer fulfillmentProcessLogId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentProcessLogId' is set
        if (fulfillmentProcessLogId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentProcessLogId' when calling deleteFulfillmentProcessLogFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteFulfillmentProcessLogFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFulfillmentProcessLogFileCall(fulfillmentProcessLogId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a fulfillmentProcessLog.
     * Deletes an existing fulfillmentProcessLog file using the specified data.
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFulfillmentProcessLogFile(Integer fulfillmentProcessLogId, Integer fileId) throws ApiException {
        deleteFulfillmentProcessLogFileWithHttpInfo(fulfillmentProcessLogId, fileId);
    }

    /**
     * Delete a file for a fulfillmentProcessLog.
     * Deletes an existing fulfillmentProcessLog file using the specified data.
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFulfillmentProcessLogFileWithHttpInfo(Integer fulfillmentProcessLogId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFulfillmentProcessLogFileValidateBeforeCall(fulfillmentProcessLogId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a fulfillmentProcessLog. (asynchronously)
     * Deletes an existing fulfillmentProcessLog file using the specified data.
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFulfillmentProcessLogFileAsync(Integer fulfillmentProcessLogId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFulfillmentProcessLogFileValidateBeforeCall(fulfillmentProcessLogId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteFulfillmentProcessLogTag
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to remove tag from (required)
     * @param fulfillmentProcessLogTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFulfillmentProcessLogTagCall(Integer fulfillmentProcessLogId, String fulfillmentProcessLogTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/tag/{fulfillmentProcessLogTag}"
            .replaceAll("\\{" + "fulfillmentProcessLogId" + "\\}", apiClient.escapeString(fulfillmentProcessLogId.toString()))
            .replaceAll("\\{" + "fulfillmentProcessLogTag" + "\\}", apiClient.escapeString(fulfillmentProcessLogTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFulfillmentProcessLogTagValidateBeforeCall(Integer fulfillmentProcessLogId, String fulfillmentProcessLogTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentProcessLogId' is set
        if (fulfillmentProcessLogId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentProcessLogId' when calling deleteFulfillmentProcessLogTag(Async)");
        }
        
        // verify the required parameter 'fulfillmentProcessLogTag' is set
        if (fulfillmentProcessLogTag == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentProcessLogTag' when calling deleteFulfillmentProcessLogTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFulfillmentProcessLogTagCall(fulfillmentProcessLogId, fulfillmentProcessLogTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a fulfillmentProcessLog.
     * Deletes an existing fulfillmentProcessLog tag using the specified data.
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to remove tag from (required)
     * @param fulfillmentProcessLogTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFulfillmentProcessLogTag(Integer fulfillmentProcessLogId, String fulfillmentProcessLogTag) throws ApiException {
        deleteFulfillmentProcessLogTagWithHttpInfo(fulfillmentProcessLogId, fulfillmentProcessLogTag);
    }

    /**
     * Delete a tag for a fulfillmentProcessLog.
     * Deletes an existing fulfillmentProcessLog tag using the specified data.
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to remove tag from (required)
     * @param fulfillmentProcessLogTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFulfillmentProcessLogTagWithHttpInfo(Integer fulfillmentProcessLogId, String fulfillmentProcessLogTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteFulfillmentProcessLogTagValidateBeforeCall(fulfillmentProcessLogId, fulfillmentProcessLogTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a fulfillmentProcessLog. (asynchronously)
     * Deletes an existing fulfillmentProcessLog tag using the specified data.
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to remove tag from (required)
     * @param fulfillmentProcessLogTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFulfillmentProcessLogTagAsync(Integer fulfillmentProcessLogId, String fulfillmentProcessLogTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFulfillmentProcessLogTagValidateBeforeCall(fulfillmentProcessLogId, fulfillmentProcessLogTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateFulfillmentProcessLogById
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateFulfillmentProcessLogByIdCall(Integer fulfillmentProcessLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentProcessLog/duplicate/{fulfillmentProcessLogId}"
            .replaceAll("\\{" + "fulfillmentProcessLogId" + "\\}", apiClient.escapeString(fulfillmentProcessLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateFulfillmentProcessLogByIdValidateBeforeCall(Integer fulfillmentProcessLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentProcessLogId' is set
        if (fulfillmentProcessLogId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentProcessLogId' when calling getDuplicateFulfillmentProcessLogById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateFulfillmentProcessLogByIdCall(fulfillmentProcessLogId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a fulfillmentProcessLog by id
     * Returns a duplicated fulfillmentProcessLog identified by the specified id.
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to be duplicated. (required)
     * @return FulfillmentProcessLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FulfillmentProcessLog getDuplicateFulfillmentProcessLogById(Integer fulfillmentProcessLogId) throws ApiException {
        ApiResponse<FulfillmentProcessLog> resp = getDuplicateFulfillmentProcessLogByIdWithHttpInfo(fulfillmentProcessLogId);
        return resp.getData();
    }

    /**
     * Get a duplicated a fulfillmentProcessLog by id
     * Returns a duplicated fulfillmentProcessLog identified by the specified id.
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to be duplicated. (required)
     * @return ApiResponse&lt;FulfillmentProcessLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FulfillmentProcessLog> getDuplicateFulfillmentProcessLogByIdWithHttpInfo(Integer fulfillmentProcessLogId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateFulfillmentProcessLogByIdValidateBeforeCall(fulfillmentProcessLogId, null, null);
        Type localVarReturnType = new TypeToken<FulfillmentProcessLog>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a fulfillmentProcessLog by id (asynchronously)
     * Returns a duplicated fulfillmentProcessLog identified by the specified id.
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateFulfillmentProcessLogByIdAsync(Integer fulfillmentProcessLogId, final ApiCallback<FulfillmentProcessLog> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateFulfillmentProcessLogByIdValidateBeforeCall(fulfillmentProcessLogId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FulfillmentProcessLog>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFulfillmentProcessLogByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentProcessLogByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentProcessLog/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFulfillmentProcessLogByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getFulfillmentProcessLogByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search fulfillmentProcessLogs by filter
     * Returns the list of fulfillmentProcessLogs that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;FulfillmentProcessLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FulfillmentProcessLog> getFulfillmentProcessLogByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<FulfillmentProcessLog>> resp = getFulfillmentProcessLogByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search fulfillmentProcessLogs by filter
     * Returns the list of fulfillmentProcessLogs that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;FulfillmentProcessLog&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FulfillmentProcessLog>> getFulfillmentProcessLogByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getFulfillmentProcessLogByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<FulfillmentProcessLog>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search fulfillmentProcessLogs by filter (asynchronously)
     * Returns the list of fulfillmentProcessLogs that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentProcessLogByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<FulfillmentProcessLog>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFulfillmentProcessLogByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FulfillmentProcessLog>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFulfillmentProcessLogById
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentProcessLogByIdCall(Integer fulfillmentProcessLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}"
            .replaceAll("\\{" + "fulfillmentProcessLogId" + "\\}", apiClient.escapeString(fulfillmentProcessLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFulfillmentProcessLogByIdValidateBeforeCall(Integer fulfillmentProcessLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentProcessLogId' is set
        if (fulfillmentProcessLogId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentProcessLogId' when calling getFulfillmentProcessLogById(Async)");
        }
        

        com.squareup.okhttp.Call call = getFulfillmentProcessLogByIdCall(fulfillmentProcessLogId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a fulfillmentProcessLog by id
     * Returns the fulfillmentProcessLog identified by the specified id.
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to be returned. (required)
     * @return FulfillmentProcessLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FulfillmentProcessLog getFulfillmentProcessLogById(Integer fulfillmentProcessLogId) throws ApiException {
        ApiResponse<FulfillmentProcessLog> resp = getFulfillmentProcessLogByIdWithHttpInfo(fulfillmentProcessLogId);
        return resp.getData();
    }

    /**
     * Get a fulfillmentProcessLog by id
     * Returns the fulfillmentProcessLog identified by the specified id.
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to be returned. (required)
     * @return ApiResponse&lt;FulfillmentProcessLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FulfillmentProcessLog> getFulfillmentProcessLogByIdWithHttpInfo(Integer fulfillmentProcessLogId) throws ApiException {
        com.squareup.okhttp.Call call = getFulfillmentProcessLogByIdValidateBeforeCall(fulfillmentProcessLogId, null, null);
        Type localVarReturnType = new TypeToken<FulfillmentProcessLog>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a fulfillmentProcessLog by id (asynchronously)
     * Returns the fulfillmentProcessLog identified by the specified id.
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentProcessLogByIdAsync(Integer fulfillmentProcessLogId, final ApiCallback<FulfillmentProcessLog> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFulfillmentProcessLogByIdValidateBeforeCall(fulfillmentProcessLogId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FulfillmentProcessLog>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFulfillmentProcessLogFiles
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentProcessLogFilesCall(Integer fulfillmentProcessLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/file"
            .replaceAll("\\{" + "fulfillmentProcessLogId" + "\\}", apiClient.escapeString(fulfillmentProcessLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFulfillmentProcessLogFilesValidateBeforeCall(Integer fulfillmentProcessLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentProcessLogId' is set
        if (fulfillmentProcessLogId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentProcessLogId' when calling getFulfillmentProcessLogFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getFulfillmentProcessLogFilesCall(fulfillmentProcessLogId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a fulfillmentProcessLog.
     * Get all existing fulfillmentProcessLog files.
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getFulfillmentProcessLogFiles(Integer fulfillmentProcessLogId) throws ApiException {
        getFulfillmentProcessLogFilesWithHttpInfo(fulfillmentProcessLogId);
    }

    /**
     * Get the files for a fulfillmentProcessLog.
     * Get all existing fulfillmentProcessLog files.
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getFulfillmentProcessLogFilesWithHttpInfo(Integer fulfillmentProcessLogId) throws ApiException {
        com.squareup.okhttp.Call call = getFulfillmentProcessLogFilesValidateBeforeCall(fulfillmentProcessLogId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a fulfillmentProcessLog. (asynchronously)
     * Get all existing fulfillmentProcessLog files.
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentProcessLogFilesAsync(Integer fulfillmentProcessLogId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFulfillmentProcessLogFilesValidateBeforeCall(fulfillmentProcessLogId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getFulfillmentProcessLogTags
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentProcessLogTagsCall(Integer fulfillmentProcessLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/tag"
            .replaceAll("\\{" + "fulfillmentProcessLogId" + "\\}", apiClient.escapeString(fulfillmentProcessLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFulfillmentProcessLogTagsValidateBeforeCall(Integer fulfillmentProcessLogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentProcessLogId' is set
        if (fulfillmentProcessLogId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentProcessLogId' when calling getFulfillmentProcessLogTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getFulfillmentProcessLogTagsCall(fulfillmentProcessLogId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a fulfillmentProcessLog.
     * Get all existing fulfillmentProcessLog tags.
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getFulfillmentProcessLogTags(Integer fulfillmentProcessLogId) throws ApiException {
        getFulfillmentProcessLogTagsWithHttpInfo(fulfillmentProcessLogId);
    }

    /**
     * Get the tags for a fulfillmentProcessLog.
     * Get all existing fulfillmentProcessLog tags.
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getFulfillmentProcessLogTagsWithHttpInfo(Integer fulfillmentProcessLogId) throws ApiException {
        com.squareup.okhttp.Call call = getFulfillmentProcessLogTagsValidateBeforeCall(fulfillmentProcessLogId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a fulfillmentProcessLog. (asynchronously)
     * Get all existing fulfillmentProcessLog tags.
     * @param fulfillmentProcessLogId Id of the fulfillmentProcessLog to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentProcessLogTagsAsync(Integer fulfillmentProcessLogId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFulfillmentProcessLogTagsValidateBeforeCall(fulfillmentProcessLogId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
