/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ExecuteQuickReceiptInputAPIModel;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.ProcessOutputAPIModel;
import com.infopluscommerce.model.QuickReceipt;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QuickReceiptApi {
    private ApiClient apiClient;

    public QuickReceiptApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QuickReceiptApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addQuickReceipt
     * @param body QuickReceipt to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addQuickReceiptCall(QuickReceipt body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/quickReceipt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addQuickReceiptValidateBeforeCall(QuickReceipt body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addQuickReceipt(Async)");
        }
        

        com.squareup.okhttp.Call call = addQuickReceiptCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a quickReceipt
     * Inserts a new quickReceipt using the specified data.
     * @param body QuickReceipt to be inserted. (required)
     * @return QuickReceipt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QuickReceipt addQuickReceipt(QuickReceipt body) throws ApiException {
        ApiResponse<QuickReceipt> resp = addQuickReceiptWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a quickReceipt
     * Inserts a new quickReceipt using the specified data.
     * @param body QuickReceipt to be inserted. (required)
     * @return ApiResponse&lt;QuickReceipt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QuickReceipt> addQuickReceiptWithHttpInfo(QuickReceipt body) throws ApiException {
        com.squareup.okhttp.Call call = addQuickReceiptValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<QuickReceipt>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a quickReceipt (asynchronously)
     * Inserts a new quickReceipt using the specified data.
     * @param body QuickReceipt to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addQuickReceiptAsync(QuickReceipt body, final ApiCallback<QuickReceipt> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addQuickReceiptValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QuickReceipt>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addQuickReceiptAudit
     * @param quickReceiptId Id of the quickReceipt to add an audit to (required)
     * @param quickReceiptAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addQuickReceiptAuditCall(Integer quickReceiptId, String quickReceiptAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/quickReceipt/{quickReceiptId}/audit/{quickReceiptAudit}"
            .replaceAll("\\{" + "quickReceiptId" + "\\}", apiClient.escapeString(quickReceiptId.toString()))
            .replaceAll("\\{" + "quickReceiptAudit" + "\\}", apiClient.escapeString(quickReceiptAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addQuickReceiptAuditValidateBeforeCall(Integer quickReceiptId, String quickReceiptAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quickReceiptId' is set
        if (quickReceiptId == null) {
            throw new ApiException("Missing the required parameter 'quickReceiptId' when calling addQuickReceiptAudit(Async)");
        }
        
        // verify the required parameter 'quickReceiptAudit' is set
        if (quickReceiptAudit == null) {
            throw new ApiException("Missing the required parameter 'quickReceiptAudit' when calling addQuickReceiptAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addQuickReceiptAuditCall(quickReceiptId, quickReceiptAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a quickReceipt
     * Adds an audit to an existing quickReceipt.
     * @param quickReceiptId Id of the quickReceipt to add an audit to (required)
     * @param quickReceiptAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addQuickReceiptAudit(Integer quickReceiptId, String quickReceiptAudit) throws ApiException {
        addQuickReceiptAuditWithHttpInfo(quickReceiptId, quickReceiptAudit);
    }

    /**
     * Add new audit for a quickReceipt
     * Adds an audit to an existing quickReceipt.
     * @param quickReceiptId Id of the quickReceipt to add an audit to (required)
     * @param quickReceiptAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addQuickReceiptAuditWithHttpInfo(Integer quickReceiptId, String quickReceiptAudit) throws ApiException {
        com.squareup.okhttp.Call call = addQuickReceiptAuditValidateBeforeCall(quickReceiptId, quickReceiptAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a quickReceipt (asynchronously)
     * Adds an audit to an existing quickReceipt.
     * @param quickReceiptId Id of the quickReceipt to add an audit to (required)
     * @param quickReceiptAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addQuickReceiptAuditAsync(Integer quickReceiptId, String quickReceiptAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addQuickReceiptAuditValidateBeforeCall(quickReceiptId, quickReceiptAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addQuickReceiptFile
     * @param quickReceiptId Id of the quickReceipt to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addQuickReceiptFileCall(Integer quickReceiptId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/quickReceipt/{quickReceiptId}/file/{fileName}"
            .replaceAll("\\{" + "quickReceiptId" + "\\}", apiClient.escapeString(quickReceiptId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addQuickReceiptFileValidateBeforeCall(Integer quickReceiptId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quickReceiptId' is set
        if (quickReceiptId == null) {
            throw new ApiException("Missing the required parameter 'quickReceiptId' when calling addQuickReceiptFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addQuickReceiptFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addQuickReceiptFileCall(quickReceiptId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a quickReceipt
     * Adds a file to an existing quickReceipt.
     * @param quickReceiptId Id of the quickReceipt to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addQuickReceiptFile(Integer quickReceiptId, String fileName) throws ApiException {
        addQuickReceiptFileWithHttpInfo(quickReceiptId, fileName);
    }

    /**
     * Attach a file to a quickReceipt
     * Adds a file to an existing quickReceipt.
     * @param quickReceiptId Id of the quickReceipt to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addQuickReceiptFileWithHttpInfo(Integer quickReceiptId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addQuickReceiptFileValidateBeforeCall(quickReceiptId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a quickReceipt (asynchronously)
     * Adds a file to an existing quickReceipt.
     * @param quickReceiptId Id of the quickReceipt to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addQuickReceiptFileAsync(Integer quickReceiptId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addQuickReceiptFileValidateBeforeCall(quickReceiptId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addQuickReceiptFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param quickReceiptId Id of the quickReceipt to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addQuickReceiptFileByURLCall(RecordFile body, Integer quickReceiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/quickReceipt/{quickReceiptId}/file"
            .replaceAll("\\{" + "quickReceiptId" + "\\}", apiClient.escapeString(quickReceiptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addQuickReceiptFileByURLValidateBeforeCall(RecordFile body, Integer quickReceiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addQuickReceiptFileByURL(Async)");
        }
        
        // verify the required parameter 'quickReceiptId' is set
        if (quickReceiptId == null) {
            throw new ApiException("Missing the required parameter 'quickReceiptId' when calling addQuickReceiptFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addQuickReceiptFileByURLCall(body, quickReceiptId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a quickReceipt by URL.
     * Adds a file to an existing quickReceipt by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param quickReceiptId Id of the quickReceipt to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addQuickReceiptFileByURL(RecordFile body, Integer quickReceiptId) throws ApiException {
        addQuickReceiptFileByURLWithHttpInfo(body, quickReceiptId);
    }

    /**
     * Attach a file to a quickReceipt by URL.
     * Adds a file to an existing quickReceipt by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param quickReceiptId Id of the quickReceipt to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addQuickReceiptFileByURLWithHttpInfo(RecordFile body, Integer quickReceiptId) throws ApiException {
        com.squareup.okhttp.Call call = addQuickReceiptFileByURLValidateBeforeCall(body, quickReceiptId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a quickReceipt by URL. (asynchronously)
     * Adds a file to an existing quickReceipt by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param quickReceiptId Id of the quickReceipt to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addQuickReceiptFileByURLAsync(RecordFile body, Integer quickReceiptId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addQuickReceiptFileByURLValidateBeforeCall(body, quickReceiptId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addQuickReceiptTag
     * @param quickReceiptId Id of the quickReceipt to add a tag to (required)
     * @param quickReceiptTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addQuickReceiptTagCall(Integer quickReceiptId, String quickReceiptTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/quickReceipt/{quickReceiptId}/tag/{quickReceiptTag}"
            .replaceAll("\\{" + "quickReceiptId" + "\\}", apiClient.escapeString(quickReceiptId.toString()))
            .replaceAll("\\{" + "quickReceiptTag" + "\\}", apiClient.escapeString(quickReceiptTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addQuickReceiptTagValidateBeforeCall(Integer quickReceiptId, String quickReceiptTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quickReceiptId' is set
        if (quickReceiptId == null) {
            throw new ApiException("Missing the required parameter 'quickReceiptId' when calling addQuickReceiptTag(Async)");
        }
        
        // verify the required parameter 'quickReceiptTag' is set
        if (quickReceiptTag == null) {
            throw new ApiException("Missing the required parameter 'quickReceiptTag' when calling addQuickReceiptTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addQuickReceiptTagCall(quickReceiptId, quickReceiptTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a quickReceipt.
     * Adds a tag to an existing quickReceipt.
     * @param quickReceiptId Id of the quickReceipt to add a tag to (required)
     * @param quickReceiptTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addQuickReceiptTag(Integer quickReceiptId, String quickReceiptTag) throws ApiException {
        addQuickReceiptTagWithHttpInfo(quickReceiptId, quickReceiptTag);
    }

    /**
     * Add new tags for a quickReceipt.
     * Adds a tag to an existing quickReceipt.
     * @param quickReceiptId Id of the quickReceipt to add a tag to (required)
     * @param quickReceiptTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addQuickReceiptTagWithHttpInfo(Integer quickReceiptId, String quickReceiptTag) throws ApiException {
        com.squareup.okhttp.Call call = addQuickReceiptTagValidateBeforeCall(quickReceiptId, quickReceiptTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a quickReceipt. (asynchronously)
     * Adds a tag to an existing quickReceipt.
     * @param quickReceiptId Id of the quickReceipt to add a tag to (required)
     * @param quickReceiptTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addQuickReceiptTagAsync(Integer quickReceiptId, String quickReceiptTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addQuickReceiptTagValidateBeforeCall(quickReceiptId, quickReceiptTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteQuickReceipt
     * @param quickReceiptId Id of the quickReceipt to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteQuickReceiptCall(Integer quickReceiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/quickReceipt/{quickReceiptId}"
            .replaceAll("\\{" + "quickReceiptId" + "\\}", apiClient.escapeString(quickReceiptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteQuickReceiptValidateBeforeCall(Integer quickReceiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quickReceiptId' is set
        if (quickReceiptId == null) {
            throw new ApiException("Missing the required parameter 'quickReceiptId' when calling deleteQuickReceipt(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteQuickReceiptCall(quickReceiptId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a quickReceipt
     * Deletes the quickReceipt identified by the specified id.
     * @param quickReceiptId Id of the quickReceipt to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteQuickReceipt(Integer quickReceiptId) throws ApiException {
        deleteQuickReceiptWithHttpInfo(quickReceiptId);
    }

    /**
     * Delete a quickReceipt
     * Deletes the quickReceipt identified by the specified id.
     * @param quickReceiptId Id of the quickReceipt to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteQuickReceiptWithHttpInfo(Integer quickReceiptId) throws ApiException {
        com.squareup.okhttp.Call call = deleteQuickReceiptValidateBeforeCall(quickReceiptId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a quickReceipt (asynchronously)
     * Deletes the quickReceipt identified by the specified id.
     * @param quickReceiptId Id of the quickReceipt to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteQuickReceiptAsync(Integer quickReceiptId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteQuickReceiptValidateBeforeCall(quickReceiptId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteQuickReceiptFile
     * @param quickReceiptId Id of the quickReceipt to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteQuickReceiptFileCall(Integer quickReceiptId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/quickReceipt/{quickReceiptId}/file/{fileId}"
            .replaceAll("\\{" + "quickReceiptId" + "\\}", apiClient.escapeString(quickReceiptId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteQuickReceiptFileValidateBeforeCall(Integer quickReceiptId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quickReceiptId' is set
        if (quickReceiptId == null) {
            throw new ApiException("Missing the required parameter 'quickReceiptId' when calling deleteQuickReceiptFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteQuickReceiptFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteQuickReceiptFileCall(quickReceiptId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a quickReceipt.
     * Deletes an existing quickReceipt file using the specified data.
     * @param quickReceiptId Id of the quickReceipt to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteQuickReceiptFile(Integer quickReceiptId, Integer fileId) throws ApiException {
        deleteQuickReceiptFileWithHttpInfo(quickReceiptId, fileId);
    }

    /**
     * Delete a file for a quickReceipt.
     * Deletes an existing quickReceipt file using the specified data.
     * @param quickReceiptId Id of the quickReceipt to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteQuickReceiptFileWithHttpInfo(Integer quickReceiptId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteQuickReceiptFileValidateBeforeCall(quickReceiptId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a quickReceipt. (asynchronously)
     * Deletes an existing quickReceipt file using the specified data.
     * @param quickReceiptId Id of the quickReceipt to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteQuickReceiptFileAsync(Integer quickReceiptId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteQuickReceiptFileValidateBeforeCall(quickReceiptId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteQuickReceiptTag
     * @param quickReceiptId Id of the quickReceipt to remove tag from (required)
     * @param quickReceiptTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteQuickReceiptTagCall(Integer quickReceiptId, String quickReceiptTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/quickReceipt/{quickReceiptId}/tag/{quickReceiptTag}"
            .replaceAll("\\{" + "quickReceiptId" + "\\}", apiClient.escapeString(quickReceiptId.toString()))
            .replaceAll("\\{" + "quickReceiptTag" + "\\}", apiClient.escapeString(quickReceiptTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteQuickReceiptTagValidateBeforeCall(Integer quickReceiptId, String quickReceiptTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quickReceiptId' is set
        if (quickReceiptId == null) {
            throw new ApiException("Missing the required parameter 'quickReceiptId' when calling deleteQuickReceiptTag(Async)");
        }
        
        // verify the required parameter 'quickReceiptTag' is set
        if (quickReceiptTag == null) {
            throw new ApiException("Missing the required parameter 'quickReceiptTag' when calling deleteQuickReceiptTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteQuickReceiptTagCall(quickReceiptId, quickReceiptTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a quickReceipt.
     * Deletes an existing quickReceipt tag using the specified data.
     * @param quickReceiptId Id of the quickReceipt to remove tag from (required)
     * @param quickReceiptTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteQuickReceiptTag(Integer quickReceiptId, String quickReceiptTag) throws ApiException {
        deleteQuickReceiptTagWithHttpInfo(quickReceiptId, quickReceiptTag);
    }

    /**
     * Delete a tag for a quickReceipt.
     * Deletes an existing quickReceipt tag using the specified data.
     * @param quickReceiptId Id of the quickReceipt to remove tag from (required)
     * @param quickReceiptTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteQuickReceiptTagWithHttpInfo(Integer quickReceiptId, String quickReceiptTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteQuickReceiptTagValidateBeforeCall(quickReceiptId, quickReceiptTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a quickReceipt. (asynchronously)
     * Deletes an existing quickReceipt tag using the specified data.
     * @param quickReceiptId Id of the quickReceipt to remove tag from (required)
     * @param quickReceiptTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteQuickReceiptTagAsync(Integer quickReceiptId, String quickReceiptTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteQuickReceiptTagValidateBeforeCall(quickReceiptId, quickReceiptTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for executeQuickReceipt
     * @param body Input data for ExecuteQuickReceipt process. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeQuickReceiptCall(ExecuteQuickReceiptInputAPIModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/quickReceipt/executeQuickReceipt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call executeQuickReceiptValidateBeforeCall(ExecuteQuickReceiptInputAPIModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling executeQuickReceipt(Async)");
        }
        

        com.squareup.okhttp.Call call = executeQuickReceiptCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Run the ExecuteQuickReceipt process.
     * 
     * @param body Input data for ExecuteQuickReceipt process. (required)
     * @return List&lt;ProcessOutputAPIModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ProcessOutputAPIModel> executeQuickReceipt(ExecuteQuickReceiptInputAPIModel body) throws ApiException {
        ApiResponse<List<ProcessOutputAPIModel>> resp = executeQuickReceiptWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Run the ExecuteQuickReceipt process.
     * 
     * @param body Input data for ExecuteQuickReceipt process. (required)
     * @return ApiResponse&lt;List&lt;ProcessOutputAPIModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ProcessOutputAPIModel>> executeQuickReceiptWithHttpInfo(ExecuteQuickReceiptInputAPIModel body) throws ApiException {
        com.squareup.okhttp.Call call = executeQuickReceiptValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<List<ProcessOutputAPIModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Run the ExecuteQuickReceipt process. (asynchronously)
     * 
     * @param body Input data for ExecuteQuickReceipt process. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeQuickReceiptAsync(ExecuteQuickReceiptInputAPIModel body, final ApiCallback<List<ProcessOutputAPIModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeQuickReceiptValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ProcessOutputAPIModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDuplicateQuickReceiptById
     * @param quickReceiptId Id of the quickReceipt to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateQuickReceiptByIdCall(Integer quickReceiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/quickReceipt/duplicate/{quickReceiptId}"
            .replaceAll("\\{" + "quickReceiptId" + "\\}", apiClient.escapeString(quickReceiptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateQuickReceiptByIdValidateBeforeCall(Integer quickReceiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quickReceiptId' is set
        if (quickReceiptId == null) {
            throw new ApiException("Missing the required parameter 'quickReceiptId' when calling getDuplicateQuickReceiptById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateQuickReceiptByIdCall(quickReceiptId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a quickReceipt by id
     * Returns a duplicated quickReceipt identified by the specified id.
     * @param quickReceiptId Id of the quickReceipt to be duplicated. (required)
     * @return QuickReceipt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QuickReceipt getDuplicateQuickReceiptById(Integer quickReceiptId) throws ApiException {
        ApiResponse<QuickReceipt> resp = getDuplicateQuickReceiptByIdWithHttpInfo(quickReceiptId);
        return resp.getData();
    }

    /**
     * Get a duplicated a quickReceipt by id
     * Returns a duplicated quickReceipt identified by the specified id.
     * @param quickReceiptId Id of the quickReceipt to be duplicated. (required)
     * @return ApiResponse&lt;QuickReceipt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QuickReceipt> getDuplicateQuickReceiptByIdWithHttpInfo(Integer quickReceiptId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateQuickReceiptByIdValidateBeforeCall(quickReceiptId, null, null);
        Type localVarReturnType = new TypeToken<QuickReceipt>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a quickReceipt by id (asynchronously)
     * Returns a duplicated quickReceipt identified by the specified id.
     * @param quickReceiptId Id of the quickReceipt to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateQuickReceiptByIdAsync(Integer quickReceiptId, final ApiCallback<QuickReceipt> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateQuickReceiptByIdValidateBeforeCall(quickReceiptId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QuickReceipt>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getQuickReceiptByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getQuickReceiptByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/quickReceipt/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQuickReceiptByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getQuickReceiptByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search quickReceipts by filter
     * Returns the list of quickReceipts that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;QuickReceipt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<QuickReceipt> getQuickReceiptByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<QuickReceipt>> resp = getQuickReceiptByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search quickReceipts by filter
     * Returns the list of quickReceipts that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;QuickReceipt&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<QuickReceipt>> getQuickReceiptByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getQuickReceiptByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<QuickReceipt>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search quickReceipts by filter (asynchronously)
     * Returns the list of quickReceipts that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQuickReceiptByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<QuickReceipt>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuickReceiptByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<QuickReceipt>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getQuickReceiptById
     * @param quickReceiptId Id of the quickReceipt to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getQuickReceiptByIdCall(Integer quickReceiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/quickReceipt/{quickReceiptId}"
            .replaceAll("\\{" + "quickReceiptId" + "\\}", apiClient.escapeString(quickReceiptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQuickReceiptByIdValidateBeforeCall(Integer quickReceiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quickReceiptId' is set
        if (quickReceiptId == null) {
            throw new ApiException("Missing the required parameter 'quickReceiptId' when calling getQuickReceiptById(Async)");
        }
        

        com.squareup.okhttp.Call call = getQuickReceiptByIdCall(quickReceiptId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a quickReceipt by id
     * Returns the quickReceipt identified by the specified id.
     * @param quickReceiptId Id of the quickReceipt to be returned. (required)
     * @return QuickReceipt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QuickReceipt getQuickReceiptById(Integer quickReceiptId) throws ApiException {
        ApiResponse<QuickReceipt> resp = getQuickReceiptByIdWithHttpInfo(quickReceiptId);
        return resp.getData();
    }

    /**
     * Get a quickReceipt by id
     * Returns the quickReceipt identified by the specified id.
     * @param quickReceiptId Id of the quickReceipt to be returned. (required)
     * @return ApiResponse&lt;QuickReceipt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QuickReceipt> getQuickReceiptByIdWithHttpInfo(Integer quickReceiptId) throws ApiException {
        com.squareup.okhttp.Call call = getQuickReceiptByIdValidateBeforeCall(quickReceiptId, null, null);
        Type localVarReturnType = new TypeToken<QuickReceipt>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a quickReceipt by id (asynchronously)
     * Returns the quickReceipt identified by the specified id.
     * @param quickReceiptId Id of the quickReceipt to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQuickReceiptByIdAsync(Integer quickReceiptId, final ApiCallback<QuickReceipt> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuickReceiptByIdValidateBeforeCall(quickReceiptId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QuickReceipt>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getQuickReceiptFiles
     * @param quickReceiptId Id of the quickReceipt to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getQuickReceiptFilesCall(Integer quickReceiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/quickReceipt/{quickReceiptId}/file"
            .replaceAll("\\{" + "quickReceiptId" + "\\}", apiClient.escapeString(quickReceiptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQuickReceiptFilesValidateBeforeCall(Integer quickReceiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quickReceiptId' is set
        if (quickReceiptId == null) {
            throw new ApiException("Missing the required parameter 'quickReceiptId' when calling getQuickReceiptFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getQuickReceiptFilesCall(quickReceiptId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a quickReceipt.
     * Get all existing quickReceipt files.
     * @param quickReceiptId Id of the quickReceipt to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getQuickReceiptFiles(Integer quickReceiptId) throws ApiException {
        getQuickReceiptFilesWithHttpInfo(quickReceiptId);
    }

    /**
     * Get the files for a quickReceipt.
     * Get all existing quickReceipt files.
     * @param quickReceiptId Id of the quickReceipt to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getQuickReceiptFilesWithHttpInfo(Integer quickReceiptId) throws ApiException {
        com.squareup.okhttp.Call call = getQuickReceiptFilesValidateBeforeCall(quickReceiptId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a quickReceipt. (asynchronously)
     * Get all existing quickReceipt files.
     * @param quickReceiptId Id of the quickReceipt to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQuickReceiptFilesAsync(Integer quickReceiptId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuickReceiptFilesValidateBeforeCall(quickReceiptId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getQuickReceiptTags
     * @param quickReceiptId Id of the quickReceipt to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getQuickReceiptTagsCall(Integer quickReceiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/quickReceipt/{quickReceiptId}/tag"
            .replaceAll("\\{" + "quickReceiptId" + "\\}", apiClient.escapeString(quickReceiptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQuickReceiptTagsValidateBeforeCall(Integer quickReceiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quickReceiptId' is set
        if (quickReceiptId == null) {
            throw new ApiException("Missing the required parameter 'quickReceiptId' when calling getQuickReceiptTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getQuickReceiptTagsCall(quickReceiptId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a quickReceipt.
     * Get all existing quickReceipt tags.
     * @param quickReceiptId Id of the quickReceipt to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getQuickReceiptTags(Integer quickReceiptId) throws ApiException {
        getQuickReceiptTagsWithHttpInfo(quickReceiptId);
    }

    /**
     * Get the tags for a quickReceipt.
     * Get all existing quickReceipt tags.
     * @param quickReceiptId Id of the quickReceipt to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getQuickReceiptTagsWithHttpInfo(Integer quickReceiptId) throws ApiException {
        com.squareup.okhttp.Call call = getQuickReceiptTagsValidateBeforeCall(quickReceiptId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a quickReceipt. (asynchronously)
     * Get all existing quickReceipt tags.
     * @param quickReceiptId Id of the quickReceipt to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQuickReceiptTagsAsync(Integer quickReceiptId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuickReceiptTagsValidateBeforeCall(quickReceiptId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateQuickReceipt
     * @param body QuickReceipt to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateQuickReceiptCall(QuickReceipt body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/quickReceipt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateQuickReceiptValidateBeforeCall(QuickReceipt body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateQuickReceipt(Async)");
        }
        

        com.squareup.okhttp.Call call = updateQuickReceiptCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a quickReceipt
     * Updates an existing quickReceipt using the specified data.
     * @param body QuickReceipt to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateQuickReceipt(QuickReceipt body) throws ApiException {
        updateQuickReceiptWithHttpInfo(body);
    }

    /**
     * Update a quickReceipt
     * Updates an existing quickReceipt using the specified data.
     * @param body QuickReceipt to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateQuickReceiptWithHttpInfo(QuickReceipt body) throws ApiException {
        com.squareup.okhttp.Call call = updateQuickReceiptValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a quickReceipt (asynchronously)
     * Updates an existing quickReceipt using the specified data.
     * @param body QuickReceipt to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateQuickReceiptAsync(QuickReceipt body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateQuickReceiptValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateQuickReceiptCustomFields
     * @param body QuickReceipt to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateQuickReceiptCustomFieldsCall(QuickReceipt body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/quickReceipt/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateQuickReceiptCustomFieldsValidateBeforeCall(QuickReceipt body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateQuickReceiptCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateQuickReceiptCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a quickReceipt custom fields
     * Updates an existing quickReceipt custom fields using the specified data.
     * @param body QuickReceipt to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateQuickReceiptCustomFields(QuickReceipt body) throws ApiException {
        updateQuickReceiptCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a quickReceipt custom fields
     * Updates an existing quickReceipt custom fields using the specified data.
     * @param body QuickReceipt to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateQuickReceiptCustomFieldsWithHttpInfo(QuickReceipt body) throws ApiException {
        com.squareup.okhttp.Call call = updateQuickReceiptCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a quickReceipt custom fields (asynchronously)
     * Updates an existing quickReceipt custom fields using the specified data.
     * @param body QuickReceipt to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateQuickReceiptCustomFieldsAsync(QuickReceipt body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateQuickReceiptCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
