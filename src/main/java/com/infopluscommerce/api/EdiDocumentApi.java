/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.EdiDocument;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EdiDocumentApi {
    private ApiClient apiClient;

    public EdiDocumentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EdiDocumentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addEdiDocument
     * @param body EdiDocument to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addEdiDocumentCall(EdiDocument body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/ediDocument";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addEdiDocumentValidateBeforeCall(EdiDocument body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addEdiDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = addEdiDocumentCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an ediDocument
     * Inserts a new ediDocument using the specified data.
     * @param body EdiDocument to be inserted. (required)
     * @return EdiDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EdiDocument addEdiDocument(EdiDocument body) throws ApiException {
        ApiResponse<EdiDocument> resp = addEdiDocumentWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create an ediDocument
     * Inserts a new ediDocument using the specified data.
     * @param body EdiDocument to be inserted. (required)
     * @return ApiResponse&lt;EdiDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EdiDocument> addEdiDocumentWithHttpInfo(EdiDocument body) throws ApiException {
        com.squareup.okhttp.Call call = addEdiDocumentValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<EdiDocument>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an ediDocument (asynchronously)
     * Inserts a new ediDocument using the specified data.
     * @param body EdiDocument to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addEdiDocumentAsync(EdiDocument body, final ApiCallback<EdiDocument> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addEdiDocumentValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EdiDocument>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addEdiDocumentAudit
     * @param ediDocumentId Id of the ediDocument to add an audit to (required)
     * @param ediDocumentAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addEdiDocumentAuditCall(Integer ediDocumentId, String ediDocumentAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/ediDocument/{ediDocumentId}/audit/{ediDocumentAudit}"
            .replaceAll("\\{" + "ediDocumentId" + "\\}", apiClient.escapeString(ediDocumentId.toString()))
            .replaceAll("\\{" + "ediDocumentAudit" + "\\}", apiClient.escapeString(ediDocumentAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addEdiDocumentAuditValidateBeforeCall(Integer ediDocumentId, String ediDocumentAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ediDocumentId' is set
        if (ediDocumentId == null) {
            throw new ApiException("Missing the required parameter 'ediDocumentId' when calling addEdiDocumentAudit(Async)");
        }
        
        // verify the required parameter 'ediDocumentAudit' is set
        if (ediDocumentAudit == null) {
            throw new ApiException("Missing the required parameter 'ediDocumentAudit' when calling addEdiDocumentAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addEdiDocumentAuditCall(ediDocumentId, ediDocumentAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for an ediDocument
     * Adds an audit to an existing ediDocument.
     * @param ediDocumentId Id of the ediDocument to add an audit to (required)
     * @param ediDocumentAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addEdiDocumentAudit(Integer ediDocumentId, String ediDocumentAudit) throws ApiException {
        addEdiDocumentAuditWithHttpInfo(ediDocumentId, ediDocumentAudit);
    }

    /**
     * Add new audit for an ediDocument
     * Adds an audit to an existing ediDocument.
     * @param ediDocumentId Id of the ediDocument to add an audit to (required)
     * @param ediDocumentAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addEdiDocumentAuditWithHttpInfo(Integer ediDocumentId, String ediDocumentAudit) throws ApiException {
        com.squareup.okhttp.Call call = addEdiDocumentAuditValidateBeforeCall(ediDocumentId, ediDocumentAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for an ediDocument (asynchronously)
     * Adds an audit to an existing ediDocument.
     * @param ediDocumentId Id of the ediDocument to add an audit to (required)
     * @param ediDocumentAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addEdiDocumentAuditAsync(Integer ediDocumentId, String ediDocumentAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addEdiDocumentAuditValidateBeforeCall(ediDocumentId, ediDocumentAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addEdiDocumentFile
     * @param ediDocumentId Id of the ediDocument to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addEdiDocumentFileCall(Integer ediDocumentId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/ediDocument/{ediDocumentId}/file/{fileName}"
            .replaceAll("\\{" + "ediDocumentId" + "\\}", apiClient.escapeString(ediDocumentId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addEdiDocumentFileValidateBeforeCall(Integer ediDocumentId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ediDocumentId' is set
        if (ediDocumentId == null) {
            throw new ApiException("Missing the required parameter 'ediDocumentId' when calling addEdiDocumentFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addEdiDocumentFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addEdiDocumentFileCall(ediDocumentId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an ediDocument
     * Adds a file to an existing ediDocument.
     * @param ediDocumentId Id of the ediDocument to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addEdiDocumentFile(Integer ediDocumentId, String fileName) throws ApiException {
        addEdiDocumentFileWithHttpInfo(ediDocumentId, fileName);
    }

    /**
     * Attach a file to an ediDocument
     * Adds a file to an existing ediDocument.
     * @param ediDocumentId Id of the ediDocument to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addEdiDocumentFileWithHttpInfo(Integer ediDocumentId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addEdiDocumentFileValidateBeforeCall(ediDocumentId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an ediDocument (asynchronously)
     * Adds a file to an existing ediDocument.
     * @param ediDocumentId Id of the ediDocument to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addEdiDocumentFileAsync(Integer ediDocumentId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addEdiDocumentFileValidateBeforeCall(ediDocumentId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addEdiDocumentFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param ediDocumentId Id of the ediDocument to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addEdiDocumentFileByURLCall(RecordFile body, Integer ediDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/ediDocument/{ediDocumentId}/file"
            .replaceAll("\\{" + "ediDocumentId" + "\\}", apiClient.escapeString(ediDocumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addEdiDocumentFileByURLValidateBeforeCall(RecordFile body, Integer ediDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addEdiDocumentFileByURL(Async)");
        }
        
        // verify the required parameter 'ediDocumentId' is set
        if (ediDocumentId == null) {
            throw new ApiException("Missing the required parameter 'ediDocumentId' when calling addEdiDocumentFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addEdiDocumentFileByURLCall(body, ediDocumentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an ediDocument by URL.
     * Adds a file to an existing ediDocument by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param ediDocumentId Id of the ediDocument to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addEdiDocumentFileByURL(RecordFile body, Integer ediDocumentId) throws ApiException {
        addEdiDocumentFileByURLWithHttpInfo(body, ediDocumentId);
    }

    /**
     * Attach a file to an ediDocument by URL.
     * Adds a file to an existing ediDocument by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param ediDocumentId Id of the ediDocument to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addEdiDocumentFileByURLWithHttpInfo(RecordFile body, Integer ediDocumentId) throws ApiException {
        com.squareup.okhttp.Call call = addEdiDocumentFileByURLValidateBeforeCall(body, ediDocumentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an ediDocument by URL. (asynchronously)
     * Adds a file to an existing ediDocument by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param ediDocumentId Id of the ediDocument to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addEdiDocumentFileByURLAsync(RecordFile body, Integer ediDocumentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addEdiDocumentFileByURLValidateBeforeCall(body, ediDocumentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addEdiDocumentTag
     * @param ediDocumentId Id of the ediDocument to add a tag to (required)
     * @param ediDocumentTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addEdiDocumentTagCall(Integer ediDocumentId, String ediDocumentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/ediDocument/{ediDocumentId}/tag/{ediDocumentTag}"
            .replaceAll("\\{" + "ediDocumentId" + "\\}", apiClient.escapeString(ediDocumentId.toString()))
            .replaceAll("\\{" + "ediDocumentTag" + "\\}", apiClient.escapeString(ediDocumentTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addEdiDocumentTagValidateBeforeCall(Integer ediDocumentId, String ediDocumentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ediDocumentId' is set
        if (ediDocumentId == null) {
            throw new ApiException("Missing the required parameter 'ediDocumentId' when calling addEdiDocumentTag(Async)");
        }
        
        // verify the required parameter 'ediDocumentTag' is set
        if (ediDocumentTag == null) {
            throw new ApiException("Missing the required parameter 'ediDocumentTag' when calling addEdiDocumentTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addEdiDocumentTagCall(ediDocumentId, ediDocumentTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for an ediDocument.
     * Adds a tag to an existing ediDocument.
     * @param ediDocumentId Id of the ediDocument to add a tag to (required)
     * @param ediDocumentTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addEdiDocumentTag(Integer ediDocumentId, String ediDocumentTag) throws ApiException {
        addEdiDocumentTagWithHttpInfo(ediDocumentId, ediDocumentTag);
    }

    /**
     * Add new tags for an ediDocument.
     * Adds a tag to an existing ediDocument.
     * @param ediDocumentId Id of the ediDocument to add a tag to (required)
     * @param ediDocumentTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addEdiDocumentTagWithHttpInfo(Integer ediDocumentId, String ediDocumentTag) throws ApiException {
        com.squareup.okhttp.Call call = addEdiDocumentTagValidateBeforeCall(ediDocumentId, ediDocumentTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for an ediDocument. (asynchronously)
     * Adds a tag to an existing ediDocument.
     * @param ediDocumentId Id of the ediDocument to add a tag to (required)
     * @param ediDocumentTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addEdiDocumentTagAsync(Integer ediDocumentId, String ediDocumentTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addEdiDocumentTagValidateBeforeCall(ediDocumentId, ediDocumentTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteEdiDocumentFile
     * @param ediDocumentId Id of the ediDocument to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEdiDocumentFileCall(Integer ediDocumentId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/ediDocument/{ediDocumentId}/file/{fileId}"
            .replaceAll("\\{" + "ediDocumentId" + "\\}", apiClient.escapeString(ediDocumentId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEdiDocumentFileValidateBeforeCall(Integer ediDocumentId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ediDocumentId' is set
        if (ediDocumentId == null) {
            throw new ApiException("Missing the required parameter 'ediDocumentId' when calling deleteEdiDocumentFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteEdiDocumentFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteEdiDocumentFileCall(ediDocumentId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for an ediDocument.
     * Deletes an existing ediDocument file using the specified data.
     * @param ediDocumentId Id of the ediDocument to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteEdiDocumentFile(Integer ediDocumentId, Integer fileId) throws ApiException {
        deleteEdiDocumentFileWithHttpInfo(ediDocumentId, fileId);
    }

    /**
     * Delete a file for an ediDocument.
     * Deletes an existing ediDocument file using the specified data.
     * @param ediDocumentId Id of the ediDocument to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteEdiDocumentFileWithHttpInfo(Integer ediDocumentId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteEdiDocumentFileValidateBeforeCall(ediDocumentId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for an ediDocument. (asynchronously)
     * Deletes an existing ediDocument file using the specified data.
     * @param ediDocumentId Id of the ediDocument to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEdiDocumentFileAsync(Integer ediDocumentId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEdiDocumentFileValidateBeforeCall(ediDocumentId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteEdiDocumentTag
     * @param ediDocumentId Id of the ediDocument to remove tag from (required)
     * @param ediDocumentTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEdiDocumentTagCall(Integer ediDocumentId, String ediDocumentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/ediDocument/{ediDocumentId}/tag/{ediDocumentTag}"
            .replaceAll("\\{" + "ediDocumentId" + "\\}", apiClient.escapeString(ediDocumentId.toString()))
            .replaceAll("\\{" + "ediDocumentTag" + "\\}", apiClient.escapeString(ediDocumentTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEdiDocumentTagValidateBeforeCall(Integer ediDocumentId, String ediDocumentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ediDocumentId' is set
        if (ediDocumentId == null) {
            throw new ApiException("Missing the required parameter 'ediDocumentId' when calling deleteEdiDocumentTag(Async)");
        }
        
        // verify the required parameter 'ediDocumentTag' is set
        if (ediDocumentTag == null) {
            throw new ApiException("Missing the required parameter 'ediDocumentTag' when calling deleteEdiDocumentTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteEdiDocumentTagCall(ediDocumentId, ediDocumentTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for an ediDocument.
     * Deletes an existing ediDocument tag using the specified data.
     * @param ediDocumentId Id of the ediDocument to remove tag from (required)
     * @param ediDocumentTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteEdiDocumentTag(Integer ediDocumentId, String ediDocumentTag) throws ApiException {
        deleteEdiDocumentTagWithHttpInfo(ediDocumentId, ediDocumentTag);
    }

    /**
     * Delete a tag for an ediDocument.
     * Deletes an existing ediDocument tag using the specified data.
     * @param ediDocumentId Id of the ediDocument to remove tag from (required)
     * @param ediDocumentTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteEdiDocumentTagWithHttpInfo(Integer ediDocumentId, String ediDocumentTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteEdiDocumentTagValidateBeforeCall(ediDocumentId, ediDocumentTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for an ediDocument. (asynchronously)
     * Deletes an existing ediDocument tag using the specified data.
     * @param ediDocumentId Id of the ediDocument to remove tag from (required)
     * @param ediDocumentTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEdiDocumentTagAsync(Integer ediDocumentId, String ediDocumentTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEdiDocumentTagValidateBeforeCall(ediDocumentId, ediDocumentTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateEdiDocumentById
     * @param ediDocumentId Id of the ediDocument to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateEdiDocumentByIdCall(Integer ediDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/ediDocument/duplicate/{ediDocumentId}"
            .replaceAll("\\{" + "ediDocumentId" + "\\}", apiClient.escapeString(ediDocumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateEdiDocumentByIdValidateBeforeCall(Integer ediDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ediDocumentId' is set
        if (ediDocumentId == null) {
            throw new ApiException("Missing the required parameter 'ediDocumentId' when calling getDuplicateEdiDocumentById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateEdiDocumentByIdCall(ediDocumentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated an ediDocument by id
     * Returns a duplicated ediDocument identified by the specified id.
     * @param ediDocumentId Id of the ediDocument to be duplicated. (required)
     * @return EdiDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EdiDocument getDuplicateEdiDocumentById(Integer ediDocumentId) throws ApiException {
        ApiResponse<EdiDocument> resp = getDuplicateEdiDocumentByIdWithHttpInfo(ediDocumentId);
        return resp.getData();
    }

    /**
     * Get a duplicated an ediDocument by id
     * Returns a duplicated ediDocument identified by the specified id.
     * @param ediDocumentId Id of the ediDocument to be duplicated. (required)
     * @return ApiResponse&lt;EdiDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EdiDocument> getDuplicateEdiDocumentByIdWithHttpInfo(Integer ediDocumentId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateEdiDocumentByIdValidateBeforeCall(ediDocumentId, null, null);
        Type localVarReturnType = new TypeToken<EdiDocument>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated an ediDocument by id (asynchronously)
     * Returns a duplicated ediDocument identified by the specified id.
     * @param ediDocumentId Id of the ediDocument to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateEdiDocumentByIdAsync(Integer ediDocumentId, final ApiCallback<EdiDocument> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateEdiDocumentByIdValidateBeforeCall(ediDocumentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EdiDocument>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEdiDocumentByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEdiDocumentByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/ediDocument/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEdiDocumentByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getEdiDocumentByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search ediDocuments by filter
     * Returns the list of ediDocuments that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;EdiDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EdiDocument> getEdiDocumentByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<EdiDocument>> resp = getEdiDocumentByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search ediDocuments by filter
     * Returns the list of ediDocuments that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;EdiDocument&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EdiDocument>> getEdiDocumentByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getEdiDocumentByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<EdiDocument>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search ediDocuments by filter (asynchronously)
     * Returns the list of ediDocuments that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEdiDocumentByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<EdiDocument>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEdiDocumentByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EdiDocument>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEdiDocumentById
     * @param ediDocumentId Id of the ediDocument to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEdiDocumentByIdCall(Integer ediDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/ediDocument/{ediDocumentId}"
            .replaceAll("\\{" + "ediDocumentId" + "\\}", apiClient.escapeString(ediDocumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEdiDocumentByIdValidateBeforeCall(Integer ediDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ediDocumentId' is set
        if (ediDocumentId == null) {
            throw new ApiException("Missing the required parameter 'ediDocumentId' when calling getEdiDocumentById(Async)");
        }
        

        com.squareup.okhttp.Call call = getEdiDocumentByIdCall(ediDocumentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an ediDocument by id
     * Returns the ediDocument identified by the specified id.
     * @param ediDocumentId Id of the ediDocument to be returned. (required)
     * @return EdiDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EdiDocument getEdiDocumentById(Integer ediDocumentId) throws ApiException {
        ApiResponse<EdiDocument> resp = getEdiDocumentByIdWithHttpInfo(ediDocumentId);
        return resp.getData();
    }

    /**
     * Get an ediDocument by id
     * Returns the ediDocument identified by the specified id.
     * @param ediDocumentId Id of the ediDocument to be returned. (required)
     * @return ApiResponse&lt;EdiDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EdiDocument> getEdiDocumentByIdWithHttpInfo(Integer ediDocumentId) throws ApiException {
        com.squareup.okhttp.Call call = getEdiDocumentByIdValidateBeforeCall(ediDocumentId, null, null);
        Type localVarReturnType = new TypeToken<EdiDocument>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an ediDocument by id (asynchronously)
     * Returns the ediDocument identified by the specified id.
     * @param ediDocumentId Id of the ediDocument to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEdiDocumentByIdAsync(Integer ediDocumentId, final ApiCallback<EdiDocument> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEdiDocumentByIdValidateBeforeCall(ediDocumentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EdiDocument>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEdiDocumentFiles
     * @param ediDocumentId Id of the ediDocument to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEdiDocumentFilesCall(Integer ediDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/ediDocument/{ediDocumentId}/file"
            .replaceAll("\\{" + "ediDocumentId" + "\\}", apiClient.escapeString(ediDocumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEdiDocumentFilesValidateBeforeCall(Integer ediDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ediDocumentId' is set
        if (ediDocumentId == null) {
            throw new ApiException("Missing the required parameter 'ediDocumentId' when calling getEdiDocumentFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getEdiDocumentFilesCall(ediDocumentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for an ediDocument.
     * Get all existing ediDocument files.
     * @param ediDocumentId Id of the ediDocument to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getEdiDocumentFiles(Integer ediDocumentId) throws ApiException {
        getEdiDocumentFilesWithHttpInfo(ediDocumentId);
    }

    /**
     * Get the files for an ediDocument.
     * Get all existing ediDocument files.
     * @param ediDocumentId Id of the ediDocument to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getEdiDocumentFilesWithHttpInfo(Integer ediDocumentId) throws ApiException {
        com.squareup.okhttp.Call call = getEdiDocumentFilesValidateBeforeCall(ediDocumentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for an ediDocument. (asynchronously)
     * Get all existing ediDocument files.
     * @param ediDocumentId Id of the ediDocument to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEdiDocumentFilesAsync(Integer ediDocumentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEdiDocumentFilesValidateBeforeCall(ediDocumentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getEdiDocumentTags
     * @param ediDocumentId Id of the ediDocument to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEdiDocumentTagsCall(Integer ediDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/ediDocument/{ediDocumentId}/tag"
            .replaceAll("\\{" + "ediDocumentId" + "\\}", apiClient.escapeString(ediDocumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEdiDocumentTagsValidateBeforeCall(Integer ediDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ediDocumentId' is set
        if (ediDocumentId == null) {
            throw new ApiException("Missing the required parameter 'ediDocumentId' when calling getEdiDocumentTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getEdiDocumentTagsCall(ediDocumentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for an ediDocument.
     * Get all existing ediDocument tags.
     * @param ediDocumentId Id of the ediDocument to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getEdiDocumentTags(Integer ediDocumentId) throws ApiException {
        getEdiDocumentTagsWithHttpInfo(ediDocumentId);
    }

    /**
     * Get the tags for an ediDocument.
     * Get all existing ediDocument tags.
     * @param ediDocumentId Id of the ediDocument to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getEdiDocumentTagsWithHttpInfo(Integer ediDocumentId) throws ApiException {
        com.squareup.okhttp.Call call = getEdiDocumentTagsValidateBeforeCall(ediDocumentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for an ediDocument. (asynchronously)
     * Get all existing ediDocument tags.
     * @param ediDocumentId Id of the ediDocument to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEdiDocumentTagsAsync(Integer ediDocumentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEdiDocumentTagsValidateBeforeCall(ediDocumentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
