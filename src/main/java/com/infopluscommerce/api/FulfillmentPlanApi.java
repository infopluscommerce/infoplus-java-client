/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.FulfillmentPlan;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FulfillmentPlanApi {
    private ApiClient apiClient;

    public FulfillmentPlanApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FulfillmentPlanApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addFulfillmentPlan
     * @param body FulfillmentPlan to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentPlanCall(FulfillmentPlan body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentPlan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFulfillmentPlanValidateBeforeCall(FulfillmentPlan body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addFulfillmentPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = addFulfillmentPlanCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a fulfillmentPlan
     * Inserts a new fulfillmentPlan using the specified data.
     * @param body FulfillmentPlan to be inserted. (required)
     * @return FulfillmentPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FulfillmentPlan addFulfillmentPlan(FulfillmentPlan body) throws ApiException {
        ApiResponse<FulfillmentPlan> resp = addFulfillmentPlanWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a fulfillmentPlan
     * Inserts a new fulfillmentPlan using the specified data.
     * @param body FulfillmentPlan to be inserted. (required)
     * @return ApiResponse&lt;FulfillmentPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FulfillmentPlan> addFulfillmentPlanWithHttpInfo(FulfillmentPlan body) throws ApiException {
        com.squareup.okhttp.Call call = addFulfillmentPlanValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<FulfillmentPlan>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a fulfillmentPlan (asynchronously)
     * Inserts a new fulfillmentPlan using the specified data.
     * @param body FulfillmentPlan to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentPlanAsync(FulfillmentPlan body, final ApiCallback<FulfillmentPlan> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFulfillmentPlanValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FulfillmentPlan>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addFulfillmentPlanAudit
     * @param fulfillmentPlanId Id of the fulfillmentPlan to add an audit to (required)
     * @param fulfillmentPlanAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentPlanAuditCall(Integer fulfillmentPlanId, String fulfillmentPlanAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentPlan/{fulfillmentPlanId}/audit/{fulfillmentPlanAudit}"
            .replaceAll("\\{" + "fulfillmentPlanId" + "\\}", apiClient.escapeString(fulfillmentPlanId.toString()))
            .replaceAll("\\{" + "fulfillmentPlanAudit" + "\\}", apiClient.escapeString(fulfillmentPlanAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFulfillmentPlanAuditValidateBeforeCall(Integer fulfillmentPlanId, String fulfillmentPlanAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentPlanId' is set
        if (fulfillmentPlanId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentPlanId' when calling addFulfillmentPlanAudit(Async)");
        }
        
        // verify the required parameter 'fulfillmentPlanAudit' is set
        if (fulfillmentPlanAudit == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentPlanAudit' when calling addFulfillmentPlanAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addFulfillmentPlanAuditCall(fulfillmentPlanId, fulfillmentPlanAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a fulfillmentPlan
     * Adds an audit to an existing fulfillmentPlan.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to add an audit to (required)
     * @param fulfillmentPlanAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addFulfillmentPlanAudit(Integer fulfillmentPlanId, String fulfillmentPlanAudit) throws ApiException {
        addFulfillmentPlanAuditWithHttpInfo(fulfillmentPlanId, fulfillmentPlanAudit);
    }

    /**
     * Add new audit for a fulfillmentPlan
     * Adds an audit to an existing fulfillmentPlan.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to add an audit to (required)
     * @param fulfillmentPlanAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addFulfillmentPlanAuditWithHttpInfo(Integer fulfillmentPlanId, String fulfillmentPlanAudit) throws ApiException {
        com.squareup.okhttp.Call call = addFulfillmentPlanAuditValidateBeforeCall(fulfillmentPlanId, fulfillmentPlanAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a fulfillmentPlan (asynchronously)
     * Adds an audit to an existing fulfillmentPlan.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to add an audit to (required)
     * @param fulfillmentPlanAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentPlanAuditAsync(Integer fulfillmentPlanId, String fulfillmentPlanAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFulfillmentPlanAuditValidateBeforeCall(fulfillmentPlanId, fulfillmentPlanAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addFulfillmentPlanFile
     * @param fulfillmentPlanId Id of the fulfillmentPlan to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentPlanFileCall(Integer fulfillmentPlanId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentPlan/{fulfillmentPlanId}/file/{fileName}"
            .replaceAll("\\{" + "fulfillmentPlanId" + "\\}", apiClient.escapeString(fulfillmentPlanId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFulfillmentPlanFileValidateBeforeCall(Integer fulfillmentPlanId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentPlanId' is set
        if (fulfillmentPlanId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentPlanId' when calling addFulfillmentPlanFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addFulfillmentPlanFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addFulfillmentPlanFileCall(fulfillmentPlanId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a fulfillmentPlan
     * Adds a file to an existing fulfillmentPlan.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addFulfillmentPlanFile(Integer fulfillmentPlanId, String fileName) throws ApiException {
        addFulfillmentPlanFileWithHttpInfo(fulfillmentPlanId, fileName);
    }

    /**
     * Attach a file to a fulfillmentPlan
     * Adds a file to an existing fulfillmentPlan.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addFulfillmentPlanFileWithHttpInfo(Integer fulfillmentPlanId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addFulfillmentPlanFileValidateBeforeCall(fulfillmentPlanId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a fulfillmentPlan (asynchronously)
     * Adds a file to an existing fulfillmentPlan.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentPlanFileAsync(Integer fulfillmentPlanId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFulfillmentPlanFileValidateBeforeCall(fulfillmentPlanId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addFulfillmentPlanFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param fulfillmentPlanId Id of the fulfillmentPlan to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentPlanFileByURLCall(RecordFile body, Integer fulfillmentPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentPlan/{fulfillmentPlanId}/file"
            .replaceAll("\\{" + "fulfillmentPlanId" + "\\}", apiClient.escapeString(fulfillmentPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFulfillmentPlanFileByURLValidateBeforeCall(RecordFile body, Integer fulfillmentPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addFulfillmentPlanFileByURL(Async)");
        }
        
        // verify the required parameter 'fulfillmentPlanId' is set
        if (fulfillmentPlanId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentPlanId' when calling addFulfillmentPlanFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addFulfillmentPlanFileByURLCall(body, fulfillmentPlanId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a fulfillmentPlan by URL.
     * Adds a file to an existing fulfillmentPlan by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param fulfillmentPlanId Id of the fulfillmentPlan to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addFulfillmentPlanFileByURL(RecordFile body, Integer fulfillmentPlanId) throws ApiException {
        addFulfillmentPlanFileByURLWithHttpInfo(body, fulfillmentPlanId);
    }

    /**
     * Attach a file to a fulfillmentPlan by URL.
     * Adds a file to an existing fulfillmentPlan by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param fulfillmentPlanId Id of the fulfillmentPlan to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addFulfillmentPlanFileByURLWithHttpInfo(RecordFile body, Integer fulfillmentPlanId) throws ApiException {
        com.squareup.okhttp.Call call = addFulfillmentPlanFileByURLValidateBeforeCall(body, fulfillmentPlanId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a fulfillmentPlan by URL. (asynchronously)
     * Adds a file to an existing fulfillmentPlan by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param fulfillmentPlanId Id of the fulfillmentPlan to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentPlanFileByURLAsync(RecordFile body, Integer fulfillmentPlanId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFulfillmentPlanFileByURLValidateBeforeCall(body, fulfillmentPlanId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addFulfillmentPlanTag
     * @param fulfillmentPlanId Id of the fulfillmentPlan to add a tag to (required)
     * @param fulfillmentPlanTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentPlanTagCall(Integer fulfillmentPlanId, String fulfillmentPlanTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentPlan/{fulfillmentPlanId}/tag/{fulfillmentPlanTag}"
            .replaceAll("\\{" + "fulfillmentPlanId" + "\\}", apiClient.escapeString(fulfillmentPlanId.toString()))
            .replaceAll("\\{" + "fulfillmentPlanTag" + "\\}", apiClient.escapeString(fulfillmentPlanTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFulfillmentPlanTagValidateBeforeCall(Integer fulfillmentPlanId, String fulfillmentPlanTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentPlanId' is set
        if (fulfillmentPlanId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentPlanId' when calling addFulfillmentPlanTag(Async)");
        }
        
        // verify the required parameter 'fulfillmentPlanTag' is set
        if (fulfillmentPlanTag == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentPlanTag' when calling addFulfillmentPlanTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addFulfillmentPlanTagCall(fulfillmentPlanId, fulfillmentPlanTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a fulfillmentPlan.
     * Adds a tag to an existing fulfillmentPlan.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to add a tag to (required)
     * @param fulfillmentPlanTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addFulfillmentPlanTag(Integer fulfillmentPlanId, String fulfillmentPlanTag) throws ApiException {
        addFulfillmentPlanTagWithHttpInfo(fulfillmentPlanId, fulfillmentPlanTag);
    }

    /**
     * Add new tags for a fulfillmentPlan.
     * Adds a tag to an existing fulfillmentPlan.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to add a tag to (required)
     * @param fulfillmentPlanTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addFulfillmentPlanTagWithHttpInfo(Integer fulfillmentPlanId, String fulfillmentPlanTag) throws ApiException {
        com.squareup.okhttp.Call call = addFulfillmentPlanTagValidateBeforeCall(fulfillmentPlanId, fulfillmentPlanTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a fulfillmentPlan. (asynchronously)
     * Adds a tag to an existing fulfillmentPlan.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to add a tag to (required)
     * @param fulfillmentPlanTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentPlanTagAsync(Integer fulfillmentPlanId, String fulfillmentPlanTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFulfillmentPlanTagValidateBeforeCall(fulfillmentPlanId, fulfillmentPlanTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteFulfillmentPlan
     * @param fulfillmentPlanId Id of the fulfillmentPlan to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFulfillmentPlanCall(Integer fulfillmentPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentPlan/{fulfillmentPlanId}"
            .replaceAll("\\{" + "fulfillmentPlanId" + "\\}", apiClient.escapeString(fulfillmentPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFulfillmentPlanValidateBeforeCall(Integer fulfillmentPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentPlanId' is set
        if (fulfillmentPlanId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentPlanId' when calling deleteFulfillmentPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFulfillmentPlanCall(fulfillmentPlanId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a fulfillmentPlan
     * Deletes the fulfillmentPlan identified by the specified id.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFulfillmentPlan(Integer fulfillmentPlanId) throws ApiException {
        deleteFulfillmentPlanWithHttpInfo(fulfillmentPlanId);
    }

    /**
     * Delete a fulfillmentPlan
     * Deletes the fulfillmentPlan identified by the specified id.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFulfillmentPlanWithHttpInfo(Integer fulfillmentPlanId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFulfillmentPlanValidateBeforeCall(fulfillmentPlanId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a fulfillmentPlan (asynchronously)
     * Deletes the fulfillmentPlan identified by the specified id.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFulfillmentPlanAsync(Integer fulfillmentPlanId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFulfillmentPlanValidateBeforeCall(fulfillmentPlanId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteFulfillmentPlanFile
     * @param fulfillmentPlanId Id of the fulfillmentPlan to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFulfillmentPlanFileCall(Integer fulfillmentPlanId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentPlan/{fulfillmentPlanId}/file/{fileId}"
            .replaceAll("\\{" + "fulfillmentPlanId" + "\\}", apiClient.escapeString(fulfillmentPlanId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFulfillmentPlanFileValidateBeforeCall(Integer fulfillmentPlanId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentPlanId' is set
        if (fulfillmentPlanId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentPlanId' when calling deleteFulfillmentPlanFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteFulfillmentPlanFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFulfillmentPlanFileCall(fulfillmentPlanId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a fulfillmentPlan.
     * Deletes an existing fulfillmentPlan file using the specified data.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFulfillmentPlanFile(Integer fulfillmentPlanId, Integer fileId) throws ApiException {
        deleteFulfillmentPlanFileWithHttpInfo(fulfillmentPlanId, fileId);
    }

    /**
     * Delete a file for a fulfillmentPlan.
     * Deletes an existing fulfillmentPlan file using the specified data.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFulfillmentPlanFileWithHttpInfo(Integer fulfillmentPlanId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFulfillmentPlanFileValidateBeforeCall(fulfillmentPlanId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a fulfillmentPlan. (asynchronously)
     * Deletes an existing fulfillmentPlan file using the specified data.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFulfillmentPlanFileAsync(Integer fulfillmentPlanId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFulfillmentPlanFileValidateBeforeCall(fulfillmentPlanId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteFulfillmentPlanTag
     * @param fulfillmentPlanId Id of the fulfillmentPlan to remove tag from (required)
     * @param fulfillmentPlanTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFulfillmentPlanTagCall(Integer fulfillmentPlanId, String fulfillmentPlanTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentPlan/{fulfillmentPlanId}/tag/{fulfillmentPlanTag}"
            .replaceAll("\\{" + "fulfillmentPlanId" + "\\}", apiClient.escapeString(fulfillmentPlanId.toString()))
            .replaceAll("\\{" + "fulfillmentPlanTag" + "\\}", apiClient.escapeString(fulfillmentPlanTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFulfillmentPlanTagValidateBeforeCall(Integer fulfillmentPlanId, String fulfillmentPlanTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentPlanId' is set
        if (fulfillmentPlanId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentPlanId' when calling deleteFulfillmentPlanTag(Async)");
        }
        
        // verify the required parameter 'fulfillmentPlanTag' is set
        if (fulfillmentPlanTag == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentPlanTag' when calling deleteFulfillmentPlanTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFulfillmentPlanTagCall(fulfillmentPlanId, fulfillmentPlanTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a fulfillmentPlan.
     * Deletes an existing fulfillmentPlan tag using the specified data.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to remove tag from (required)
     * @param fulfillmentPlanTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFulfillmentPlanTag(Integer fulfillmentPlanId, String fulfillmentPlanTag) throws ApiException {
        deleteFulfillmentPlanTagWithHttpInfo(fulfillmentPlanId, fulfillmentPlanTag);
    }

    /**
     * Delete a tag for a fulfillmentPlan.
     * Deletes an existing fulfillmentPlan tag using the specified data.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to remove tag from (required)
     * @param fulfillmentPlanTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFulfillmentPlanTagWithHttpInfo(Integer fulfillmentPlanId, String fulfillmentPlanTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteFulfillmentPlanTagValidateBeforeCall(fulfillmentPlanId, fulfillmentPlanTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a fulfillmentPlan. (asynchronously)
     * Deletes an existing fulfillmentPlan tag using the specified data.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to remove tag from (required)
     * @param fulfillmentPlanTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFulfillmentPlanTagAsync(Integer fulfillmentPlanId, String fulfillmentPlanTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFulfillmentPlanTagValidateBeforeCall(fulfillmentPlanId, fulfillmentPlanTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateFulfillmentPlanById
     * @param fulfillmentPlanId Id of the fulfillmentPlan to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateFulfillmentPlanByIdCall(Integer fulfillmentPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentPlan/duplicate/{fulfillmentPlanId}"
            .replaceAll("\\{" + "fulfillmentPlanId" + "\\}", apiClient.escapeString(fulfillmentPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateFulfillmentPlanByIdValidateBeforeCall(Integer fulfillmentPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentPlanId' is set
        if (fulfillmentPlanId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentPlanId' when calling getDuplicateFulfillmentPlanById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateFulfillmentPlanByIdCall(fulfillmentPlanId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a fulfillmentPlan by id
     * Returns a duplicated fulfillmentPlan identified by the specified id.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to be duplicated. (required)
     * @return FulfillmentPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FulfillmentPlan getDuplicateFulfillmentPlanById(Integer fulfillmentPlanId) throws ApiException {
        ApiResponse<FulfillmentPlan> resp = getDuplicateFulfillmentPlanByIdWithHttpInfo(fulfillmentPlanId);
        return resp.getData();
    }

    /**
     * Get a duplicated a fulfillmentPlan by id
     * Returns a duplicated fulfillmentPlan identified by the specified id.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to be duplicated. (required)
     * @return ApiResponse&lt;FulfillmentPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FulfillmentPlan> getDuplicateFulfillmentPlanByIdWithHttpInfo(Integer fulfillmentPlanId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateFulfillmentPlanByIdValidateBeforeCall(fulfillmentPlanId, null, null);
        Type localVarReturnType = new TypeToken<FulfillmentPlan>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a fulfillmentPlan by id (asynchronously)
     * Returns a duplicated fulfillmentPlan identified by the specified id.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateFulfillmentPlanByIdAsync(Integer fulfillmentPlanId, final ApiCallback<FulfillmentPlan> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateFulfillmentPlanByIdValidateBeforeCall(fulfillmentPlanId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FulfillmentPlan>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFulfillmentPlanByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentPlanByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentPlan/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFulfillmentPlanByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getFulfillmentPlanByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search fulfillmentPlans by filter
     * Returns the list of fulfillmentPlans that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;FulfillmentPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FulfillmentPlan> getFulfillmentPlanByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<FulfillmentPlan>> resp = getFulfillmentPlanByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search fulfillmentPlans by filter
     * Returns the list of fulfillmentPlans that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;FulfillmentPlan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FulfillmentPlan>> getFulfillmentPlanByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getFulfillmentPlanByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<FulfillmentPlan>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search fulfillmentPlans by filter (asynchronously)
     * Returns the list of fulfillmentPlans that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentPlanByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<FulfillmentPlan>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFulfillmentPlanByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FulfillmentPlan>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFulfillmentPlanById
     * @param fulfillmentPlanId Id of the fulfillmentPlan to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentPlanByIdCall(Integer fulfillmentPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentPlan/{fulfillmentPlanId}"
            .replaceAll("\\{" + "fulfillmentPlanId" + "\\}", apiClient.escapeString(fulfillmentPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFulfillmentPlanByIdValidateBeforeCall(Integer fulfillmentPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentPlanId' is set
        if (fulfillmentPlanId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentPlanId' when calling getFulfillmentPlanById(Async)");
        }
        

        com.squareup.okhttp.Call call = getFulfillmentPlanByIdCall(fulfillmentPlanId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a fulfillmentPlan by id
     * Returns the fulfillmentPlan identified by the specified id.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to be returned. (required)
     * @return FulfillmentPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FulfillmentPlan getFulfillmentPlanById(Integer fulfillmentPlanId) throws ApiException {
        ApiResponse<FulfillmentPlan> resp = getFulfillmentPlanByIdWithHttpInfo(fulfillmentPlanId);
        return resp.getData();
    }

    /**
     * Get a fulfillmentPlan by id
     * Returns the fulfillmentPlan identified by the specified id.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to be returned. (required)
     * @return ApiResponse&lt;FulfillmentPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FulfillmentPlan> getFulfillmentPlanByIdWithHttpInfo(Integer fulfillmentPlanId) throws ApiException {
        com.squareup.okhttp.Call call = getFulfillmentPlanByIdValidateBeforeCall(fulfillmentPlanId, null, null);
        Type localVarReturnType = new TypeToken<FulfillmentPlan>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a fulfillmentPlan by id (asynchronously)
     * Returns the fulfillmentPlan identified by the specified id.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentPlanByIdAsync(Integer fulfillmentPlanId, final ApiCallback<FulfillmentPlan> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFulfillmentPlanByIdValidateBeforeCall(fulfillmentPlanId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FulfillmentPlan>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFulfillmentPlanFiles
     * @param fulfillmentPlanId Id of the fulfillmentPlan to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentPlanFilesCall(Integer fulfillmentPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentPlan/{fulfillmentPlanId}/file"
            .replaceAll("\\{" + "fulfillmentPlanId" + "\\}", apiClient.escapeString(fulfillmentPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFulfillmentPlanFilesValidateBeforeCall(Integer fulfillmentPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentPlanId' is set
        if (fulfillmentPlanId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentPlanId' when calling getFulfillmentPlanFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getFulfillmentPlanFilesCall(fulfillmentPlanId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a fulfillmentPlan.
     * Get all existing fulfillmentPlan files.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getFulfillmentPlanFiles(Integer fulfillmentPlanId) throws ApiException {
        getFulfillmentPlanFilesWithHttpInfo(fulfillmentPlanId);
    }

    /**
     * Get the files for a fulfillmentPlan.
     * Get all existing fulfillmentPlan files.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getFulfillmentPlanFilesWithHttpInfo(Integer fulfillmentPlanId) throws ApiException {
        com.squareup.okhttp.Call call = getFulfillmentPlanFilesValidateBeforeCall(fulfillmentPlanId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a fulfillmentPlan. (asynchronously)
     * Get all existing fulfillmentPlan files.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentPlanFilesAsync(Integer fulfillmentPlanId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFulfillmentPlanFilesValidateBeforeCall(fulfillmentPlanId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getFulfillmentPlanTags
     * @param fulfillmentPlanId Id of the fulfillmentPlan to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentPlanTagsCall(Integer fulfillmentPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentPlan/{fulfillmentPlanId}/tag"
            .replaceAll("\\{" + "fulfillmentPlanId" + "\\}", apiClient.escapeString(fulfillmentPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFulfillmentPlanTagsValidateBeforeCall(Integer fulfillmentPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentPlanId' is set
        if (fulfillmentPlanId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentPlanId' when calling getFulfillmentPlanTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getFulfillmentPlanTagsCall(fulfillmentPlanId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a fulfillmentPlan.
     * Get all existing fulfillmentPlan tags.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getFulfillmentPlanTags(Integer fulfillmentPlanId) throws ApiException {
        getFulfillmentPlanTagsWithHttpInfo(fulfillmentPlanId);
    }

    /**
     * Get the tags for a fulfillmentPlan.
     * Get all existing fulfillmentPlan tags.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getFulfillmentPlanTagsWithHttpInfo(Integer fulfillmentPlanId) throws ApiException {
        com.squareup.okhttp.Call call = getFulfillmentPlanTagsValidateBeforeCall(fulfillmentPlanId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a fulfillmentPlan. (asynchronously)
     * Get all existing fulfillmentPlan tags.
     * @param fulfillmentPlanId Id of the fulfillmentPlan to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentPlanTagsAsync(Integer fulfillmentPlanId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFulfillmentPlanTagsValidateBeforeCall(fulfillmentPlanId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateFulfillmentPlan
     * @param body FulfillmentPlan to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFulfillmentPlanCall(FulfillmentPlan body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentPlan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFulfillmentPlanValidateBeforeCall(FulfillmentPlan body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateFulfillmentPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = updateFulfillmentPlanCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a fulfillmentPlan
     * Updates an existing fulfillmentPlan using the specified data.
     * @param body FulfillmentPlan to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateFulfillmentPlan(FulfillmentPlan body) throws ApiException {
        updateFulfillmentPlanWithHttpInfo(body);
    }

    /**
     * Update a fulfillmentPlan
     * Updates an existing fulfillmentPlan using the specified data.
     * @param body FulfillmentPlan to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateFulfillmentPlanWithHttpInfo(FulfillmentPlan body) throws ApiException {
        com.squareup.okhttp.Call call = updateFulfillmentPlanValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a fulfillmentPlan (asynchronously)
     * Updates an existing fulfillmentPlan using the specified data.
     * @param body FulfillmentPlan to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFulfillmentPlanAsync(FulfillmentPlan body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFulfillmentPlanValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateFulfillmentPlanCustomFields
     * @param body FulfillmentPlan to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFulfillmentPlanCustomFieldsCall(FulfillmentPlan body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentPlan/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFulfillmentPlanCustomFieldsValidateBeforeCall(FulfillmentPlan body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateFulfillmentPlanCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateFulfillmentPlanCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a fulfillmentPlan custom fields
     * Updates an existing fulfillmentPlan custom fields using the specified data.
     * @param body FulfillmentPlan to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateFulfillmentPlanCustomFields(FulfillmentPlan body) throws ApiException {
        updateFulfillmentPlanCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a fulfillmentPlan custom fields
     * Updates an existing fulfillmentPlan custom fields using the specified data.
     * @param body FulfillmentPlan to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateFulfillmentPlanCustomFieldsWithHttpInfo(FulfillmentPlan body) throws ApiException {
        com.squareup.okhttp.Call call = updateFulfillmentPlanCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a fulfillmentPlan custom fields (asynchronously)
     * Updates an existing fulfillmentPlan custom fields using the specified data.
     * @param body FulfillmentPlan to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFulfillmentPlanCustomFieldsAsync(FulfillmentPlan body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFulfillmentPlanCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
