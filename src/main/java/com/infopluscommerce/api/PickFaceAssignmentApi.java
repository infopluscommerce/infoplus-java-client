/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.PickFaceAssignment;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PickFaceAssignmentApi {
    private ApiClient apiClient;

    public PickFaceAssignmentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PickFaceAssignmentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addPickFaceAssignment
     * @param body PickFaceAssignment to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPickFaceAssignmentCall(PickFaceAssignment body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/pickFaceAssignment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPickFaceAssignmentValidateBeforeCall(PickFaceAssignment body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addPickFaceAssignment(Async)");
        }
        

        com.squareup.okhttp.Call call = addPickFaceAssignmentCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a pickFaceAssignment
     * Inserts a new pickFaceAssignment using the specified data.
     * @param body PickFaceAssignment to be inserted. (required)
     * @return PickFaceAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PickFaceAssignment addPickFaceAssignment(PickFaceAssignment body) throws ApiException {
        ApiResponse<PickFaceAssignment> resp = addPickFaceAssignmentWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a pickFaceAssignment
     * Inserts a new pickFaceAssignment using the specified data.
     * @param body PickFaceAssignment to be inserted. (required)
     * @return ApiResponse&lt;PickFaceAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PickFaceAssignment> addPickFaceAssignmentWithHttpInfo(PickFaceAssignment body) throws ApiException {
        com.squareup.okhttp.Call call = addPickFaceAssignmentValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<PickFaceAssignment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a pickFaceAssignment (asynchronously)
     * Inserts a new pickFaceAssignment using the specified data.
     * @param body PickFaceAssignment to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPickFaceAssignmentAsync(PickFaceAssignment body, final ApiCallback<PickFaceAssignment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPickFaceAssignmentValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PickFaceAssignment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addPickFaceAssignmentAudit
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to add an audit to (required)
     * @param pickFaceAssignmentAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPickFaceAssignmentAuditCall(Integer pickFaceAssignmentId, String pickFaceAssignmentAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/pickFaceAssignment/{pickFaceAssignmentId}/audit/{pickFaceAssignmentAudit}"
            .replaceAll("\\{" + "pickFaceAssignmentId" + "\\}", apiClient.escapeString(pickFaceAssignmentId.toString()))
            .replaceAll("\\{" + "pickFaceAssignmentAudit" + "\\}", apiClient.escapeString(pickFaceAssignmentAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPickFaceAssignmentAuditValidateBeforeCall(Integer pickFaceAssignmentId, String pickFaceAssignmentAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pickFaceAssignmentId' is set
        if (pickFaceAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'pickFaceAssignmentId' when calling addPickFaceAssignmentAudit(Async)");
        }
        
        // verify the required parameter 'pickFaceAssignmentAudit' is set
        if (pickFaceAssignmentAudit == null) {
            throw new ApiException("Missing the required parameter 'pickFaceAssignmentAudit' when calling addPickFaceAssignmentAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addPickFaceAssignmentAuditCall(pickFaceAssignmentId, pickFaceAssignmentAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a pickFaceAssignment
     * Adds an audit to an existing pickFaceAssignment.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to add an audit to (required)
     * @param pickFaceAssignmentAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addPickFaceAssignmentAudit(Integer pickFaceAssignmentId, String pickFaceAssignmentAudit) throws ApiException {
        addPickFaceAssignmentAuditWithHttpInfo(pickFaceAssignmentId, pickFaceAssignmentAudit);
    }

    /**
     * Add new audit for a pickFaceAssignment
     * Adds an audit to an existing pickFaceAssignment.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to add an audit to (required)
     * @param pickFaceAssignmentAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addPickFaceAssignmentAuditWithHttpInfo(Integer pickFaceAssignmentId, String pickFaceAssignmentAudit) throws ApiException {
        com.squareup.okhttp.Call call = addPickFaceAssignmentAuditValidateBeforeCall(pickFaceAssignmentId, pickFaceAssignmentAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a pickFaceAssignment (asynchronously)
     * Adds an audit to an existing pickFaceAssignment.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to add an audit to (required)
     * @param pickFaceAssignmentAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPickFaceAssignmentAuditAsync(Integer pickFaceAssignmentId, String pickFaceAssignmentAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPickFaceAssignmentAuditValidateBeforeCall(pickFaceAssignmentId, pickFaceAssignmentAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addPickFaceAssignmentFile
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPickFaceAssignmentFileCall(Integer pickFaceAssignmentId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/pickFaceAssignment/{pickFaceAssignmentId}/file/{fileName}"
            .replaceAll("\\{" + "pickFaceAssignmentId" + "\\}", apiClient.escapeString(pickFaceAssignmentId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPickFaceAssignmentFileValidateBeforeCall(Integer pickFaceAssignmentId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pickFaceAssignmentId' is set
        if (pickFaceAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'pickFaceAssignmentId' when calling addPickFaceAssignmentFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addPickFaceAssignmentFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addPickFaceAssignmentFileCall(pickFaceAssignmentId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a pickFaceAssignment
     * Adds a file to an existing pickFaceAssignment.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addPickFaceAssignmentFile(Integer pickFaceAssignmentId, String fileName) throws ApiException {
        addPickFaceAssignmentFileWithHttpInfo(pickFaceAssignmentId, fileName);
    }

    /**
     * Attach a file to a pickFaceAssignment
     * Adds a file to an existing pickFaceAssignment.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addPickFaceAssignmentFileWithHttpInfo(Integer pickFaceAssignmentId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addPickFaceAssignmentFileValidateBeforeCall(pickFaceAssignmentId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a pickFaceAssignment (asynchronously)
     * Adds a file to an existing pickFaceAssignment.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPickFaceAssignmentFileAsync(Integer pickFaceAssignmentId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPickFaceAssignmentFileValidateBeforeCall(pickFaceAssignmentId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addPickFaceAssignmentFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPickFaceAssignmentFileByURLCall(RecordFile body, Integer pickFaceAssignmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/pickFaceAssignment/{pickFaceAssignmentId}/file"
            .replaceAll("\\{" + "pickFaceAssignmentId" + "\\}", apiClient.escapeString(pickFaceAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPickFaceAssignmentFileByURLValidateBeforeCall(RecordFile body, Integer pickFaceAssignmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addPickFaceAssignmentFileByURL(Async)");
        }
        
        // verify the required parameter 'pickFaceAssignmentId' is set
        if (pickFaceAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'pickFaceAssignmentId' when calling addPickFaceAssignmentFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addPickFaceAssignmentFileByURLCall(body, pickFaceAssignmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a pickFaceAssignment by URL.
     * Adds a file to an existing pickFaceAssignment by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addPickFaceAssignmentFileByURL(RecordFile body, Integer pickFaceAssignmentId) throws ApiException {
        addPickFaceAssignmentFileByURLWithHttpInfo(body, pickFaceAssignmentId);
    }

    /**
     * Attach a file to a pickFaceAssignment by URL.
     * Adds a file to an existing pickFaceAssignment by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addPickFaceAssignmentFileByURLWithHttpInfo(RecordFile body, Integer pickFaceAssignmentId) throws ApiException {
        com.squareup.okhttp.Call call = addPickFaceAssignmentFileByURLValidateBeforeCall(body, pickFaceAssignmentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a pickFaceAssignment by URL. (asynchronously)
     * Adds a file to an existing pickFaceAssignment by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPickFaceAssignmentFileByURLAsync(RecordFile body, Integer pickFaceAssignmentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPickFaceAssignmentFileByURLValidateBeforeCall(body, pickFaceAssignmentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addPickFaceAssignmentTag
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to add a tag to (required)
     * @param pickFaceAssignmentTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPickFaceAssignmentTagCall(Integer pickFaceAssignmentId, String pickFaceAssignmentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/pickFaceAssignment/{pickFaceAssignmentId}/tag/{pickFaceAssignmentTag}"
            .replaceAll("\\{" + "pickFaceAssignmentId" + "\\}", apiClient.escapeString(pickFaceAssignmentId.toString()))
            .replaceAll("\\{" + "pickFaceAssignmentTag" + "\\}", apiClient.escapeString(pickFaceAssignmentTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPickFaceAssignmentTagValidateBeforeCall(Integer pickFaceAssignmentId, String pickFaceAssignmentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pickFaceAssignmentId' is set
        if (pickFaceAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'pickFaceAssignmentId' when calling addPickFaceAssignmentTag(Async)");
        }
        
        // verify the required parameter 'pickFaceAssignmentTag' is set
        if (pickFaceAssignmentTag == null) {
            throw new ApiException("Missing the required parameter 'pickFaceAssignmentTag' when calling addPickFaceAssignmentTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addPickFaceAssignmentTagCall(pickFaceAssignmentId, pickFaceAssignmentTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a pickFaceAssignment.
     * Adds a tag to an existing pickFaceAssignment.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to add a tag to (required)
     * @param pickFaceAssignmentTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addPickFaceAssignmentTag(Integer pickFaceAssignmentId, String pickFaceAssignmentTag) throws ApiException {
        addPickFaceAssignmentTagWithHttpInfo(pickFaceAssignmentId, pickFaceAssignmentTag);
    }

    /**
     * Add new tags for a pickFaceAssignment.
     * Adds a tag to an existing pickFaceAssignment.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to add a tag to (required)
     * @param pickFaceAssignmentTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addPickFaceAssignmentTagWithHttpInfo(Integer pickFaceAssignmentId, String pickFaceAssignmentTag) throws ApiException {
        com.squareup.okhttp.Call call = addPickFaceAssignmentTagValidateBeforeCall(pickFaceAssignmentId, pickFaceAssignmentTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a pickFaceAssignment. (asynchronously)
     * Adds a tag to an existing pickFaceAssignment.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to add a tag to (required)
     * @param pickFaceAssignmentTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPickFaceAssignmentTagAsync(Integer pickFaceAssignmentId, String pickFaceAssignmentTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPickFaceAssignmentTagValidateBeforeCall(pickFaceAssignmentId, pickFaceAssignmentTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePickFaceAssignment
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePickFaceAssignmentCall(Integer pickFaceAssignmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/pickFaceAssignment/{pickFaceAssignmentId}"
            .replaceAll("\\{" + "pickFaceAssignmentId" + "\\}", apiClient.escapeString(pickFaceAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePickFaceAssignmentValidateBeforeCall(Integer pickFaceAssignmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pickFaceAssignmentId' is set
        if (pickFaceAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'pickFaceAssignmentId' when calling deletePickFaceAssignment(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePickFaceAssignmentCall(pickFaceAssignmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a pickFaceAssignment
     * Deletes the pickFaceAssignment identified by the specified id.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePickFaceAssignment(Integer pickFaceAssignmentId) throws ApiException {
        deletePickFaceAssignmentWithHttpInfo(pickFaceAssignmentId);
    }

    /**
     * Delete a pickFaceAssignment
     * Deletes the pickFaceAssignment identified by the specified id.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePickFaceAssignmentWithHttpInfo(Integer pickFaceAssignmentId) throws ApiException {
        com.squareup.okhttp.Call call = deletePickFaceAssignmentValidateBeforeCall(pickFaceAssignmentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a pickFaceAssignment (asynchronously)
     * Deletes the pickFaceAssignment identified by the specified id.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePickFaceAssignmentAsync(Integer pickFaceAssignmentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePickFaceAssignmentValidateBeforeCall(pickFaceAssignmentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePickFaceAssignmentFile
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePickFaceAssignmentFileCall(Integer pickFaceAssignmentId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/pickFaceAssignment/{pickFaceAssignmentId}/file/{fileId}"
            .replaceAll("\\{" + "pickFaceAssignmentId" + "\\}", apiClient.escapeString(pickFaceAssignmentId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePickFaceAssignmentFileValidateBeforeCall(Integer pickFaceAssignmentId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pickFaceAssignmentId' is set
        if (pickFaceAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'pickFaceAssignmentId' when calling deletePickFaceAssignmentFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deletePickFaceAssignmentFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePickFaceAssignmentFileCall(pickFaceAssignmentId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a pickFaceAssignment.
     * Deletes an existing pickFaceAssignment file using the specified data.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePickFaceAssignmentFile(Integer pickFaceAssignmentId, Integer fileId) throws ApiException {
        deletePickFaceAssignmentFileWithHttpInfo(pickFaceAssignmentId, fileId);
    }

    /**
     * Delete a file for a pickFaceAssignment.
     * Deletes an existing pickFaceAssignment file using the specified data.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePickFaceAssignmentFileWithHttpInfo(Integer pickFaceAssignmentId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deletePickFaceAssignmentFileValidateBeforeCall(pickFaceAssignmentId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a pickFaceAssignment. (asynchronously)
     * Deletes an existing pickFaceAssignment file using the specified data.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePickFaceAssignmentFileAsync(Integer pickFaceAssignmentId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePickFaceAssignmentFileValidateBeforeCall(pickFaceAssignmentId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePickFaceAssignmentTag
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to remove tag from (required)
     * @param pickFaceAssignmentTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePickFaceAssignmentTagCall(Integer pickFaceAssignmentId, String pickFaceAssignmentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/pickFaceAssignment/{pickFaceAssignmentId}/tag/{pickFaceAssignmentTag}"
            .replaceAll("\\{" + "pickFaceAssignmentId" + "\\}", apiClient.escapeString(pickFaceAssignmentId.toString()))
            .replaceAll("\\{" + "pickFaceAssignmentTag" + "\\}", apiClient.escapeString(pickFaceAssignmentTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePickFaceAssignmentTagValidateBeforeCall(Integer pickFaceAssignmentId, String pickFaceAssignmentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pickFaceAssignmentId' is set
        if (pickFaceAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'pickFaceAssignmentId' when calling deletePickFaceAssignmentTag(Async)");
        }
        
        // verify the required parameter 'pickFaceAssignmentTag' is set
        if (pickFaceAssignmentTag == null) {
            throw new ApiException("Missing the required parameter 'pickFaceAssignmentTag' when calling deletePickFaceAssignmentTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePickFaceAssignmentTagCall(pickFaceAssignmentId, pickFaceAssignmentTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a pickFaceAssignment.
     * Deletes an existing pickFaceAssignment tag using the specified data.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to remove tag from (required)
     * @param pickFaceAssignmentTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePickFaceAssignmentTag(Integer pickFaceAssignmentId, String pickFaceAssignmentTag) throws ApiException {
        deletePickFaceAssignmentTagWithHttpInfo(pickFaceAssignmentId, pickFaceAssignmentTag);
    }

    /**
     * Delete a tag for a pickFaceAssignment.
     * Deletes an existing pickFaceAssignment tag using the specified data.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to remove tag from (required)
     * @param pickFaceAssignmentTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePickFaceAssignmentTagWithHttpInfo(Integer pickFaceAssignmentId, String pickFaceAssignmentTag) throws ApiException {
        com.squareup.okhttp.Call call = deletePickFaceAssignmentTagValidateBeforeCall(pickFaceAssignmentId, pickFaceAssignmentTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a pickFaceAssignment. (asynchronously)
     * Deletes an existing pickFaceAssignment tag using the specified data.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to remove tag from (required)
     * @param pickFaceAssignmentTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePickFaceAssignmentTagAsync(Integer pickFaceAssignmentId, String pickFaceAssignmentTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePickFaceAssignmentTagValidateBeforeCall(pickFaceAssignmentId, pickFaceAssignmentTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicatePickFaceAssignmentById
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicatePickFaceAssignmentByIdCall(Integer pickFaceAssignmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/pickFaceAssignment/duplicate/{pickFaceAssignmentId}"
            .replaceAll("\\{" + "pickFaceAssignmentId" + "\\}", apiClient.escapeString(pickFaceAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicatePickFaceAssignmentByIdValidateBeforeCall(Integer pickFaceAssignmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pickFaceAssignmentId' is set
        if (pickFaceAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'pickFaceAssignmentId' when calling getDuplicatePickFaceAssignmentById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicatePickFaceAssignmentByIdCall(pickFaceAssignmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a pickFaceAssignment by id
     * Returns a duplicated pickFaceAssignment identified by the specified id.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to be duplicated. (required)
     * @return PickFaceAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PickFaceAssignment getDuplicatePickFaceAssignmentById(Integer pickFaceAssignmentId) throws ApiException {
        ApiResponse<PickFaceAssignment> resp = getDuplicatePickFaceAssignmentByIdWithHttpInfo(pickFaceAssignmentId);
        return resp.getData();
    }

    /**
     * Get a duplicated a pickFaceAssignment by id
     * Returns a duplicated pickFaceAssignment identified by the specified id.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to be duplicated. (required)
     * @return ApiResponse&lt;PickFaceAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PickFaceAssignment> getDuplicatePickFaceAssignmentByIdWithHttpInfo(Integer pickFaceAssignmentId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicatePickFaceAssignmentByIdValidateBeforeCall(pickFaceAssignmentId, null, null);
        Type localVarReturnType = new TypeToken<PickFaceAssignment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a pickFaceAssignment by id (asynchronously)
     * Returns a duplicated pickFaceAssignment identified by the specified id.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicatePickFaceAssignmentByIdAsync(Integer pickFaceAssignmentId, final ApiCallback<PickFaceAssignment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicatePickFaceAssignmentByIdValidateBeforeCall(pickFaceAssignmentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PickFaceAssignment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPickFaceAssignmentByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPickFaceAssignmentByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/pickFaceAssignment/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPickFaceAssignmentByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPickFaceAssignmentByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search pickFaceAssignments by filter
     * Returns the list of pickFaceAssignments that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;PickFaceAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PickFaceAssignment> getPickFaceAssignmentByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<PickFaceAssignment>> resp = getPickFaceAssignmentByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search pickFaceAssignments by filter
     * Returns the list of pickFaceAssignments that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;PickFaceAssignment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PickFaceAssignment>> getPickFaceAssignmentByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getPickFaceAssignmentByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<PickFaceAssignment>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search pickFaceAssignments by filter (asynchronously)
     * Returns the list of pickFaceAssignments that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPickFaceAssignmentByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<PickFaceAssignment>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPickFaceAssignmentByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PickFaceAssignment>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPickFaceAssignmentById
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPickFaceAssignmentByIdCall(Integer pickFaceAssignmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/pickFaceAssignment/{pickFaceAssignmentId}"
            .replaceAll("\\{" + "pickFaceAssignmentId" + "\\}", apiClient.escapeString(pickFaceAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPickFaceAssignmentByIdValidateBeforeCall(Integer pickFaceAssignmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pickFaceAssignmentId' is set
        if (pickFaceAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'pickFaceAssignmentId' when calling getPickFaceAssignmentById(Async)");
        }
        

        com.squareup.okhttp.Call call = getPickFaceAssignmentByIdCall(pickFaceAssignmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a pickFaceAssignment by id
     * Returns the pickFaceAssignment identified by the specified id.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to be returned. (required)
     * @return PickFaceAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PickFaceAssignment getPickFaceAssignmentById(Integer pickFaceAssignmentId) throws ApiException {
        ApiResponse<PickFaceAssignment> resp = getPickFaceAssignmentByIdWithHttpInfo(pickFaceAssignmentId);
        return resp.getData();
    }

    /**
     * Get a pickFaceAssignment by id
     * Returns the pickFaceAssignment identified by the specified id.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to be returned. (required)
     * @return ApiResponse&lt;PickFaceAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PickFaceAssignment> getPickFaceAssignmentByIdWithHttpInfo(Integer pickFaceAssignmentId) throws ApiException {
        com.squareup.okhttp.Call call = getPickFaceAssignmentByIdValidateBeforeCall(pickFaceAssignmentId, null, null);
        Type localVarReturnType = new TypeToken<PickFaceAssignment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a pickFaceAssignment by id (asynchronously)
     * Returns the pickFaceAssignment identified by the specified id.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPickFaceAssignmentByIdAsync(Integer pickFaceAssignmentId, final ApiCallback<PickFaceAssignment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPickFaceAssignmentByIdValidateBeforeCall(pickFaceAssignmentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PickFaceAssignment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPickFaceAssignmentFiles
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPickFaceAssignmentFilesCall(Integer pickFaceAssignmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/pickFaceAssignment/{pickFaceAssignmentId}/file"
            .replaceAll("\\{" + "pickFaceAssignmentId" + "\\}", apiClient.escapeString(pickFaceAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPickFaceAssignmentFilesValidateBeforeCall(Integer pickFaceAssignmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pickFaceAssignmentId' is set
        if (pickFaceAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'pickFaceAssignmentId' when calling getPickFaceAssignmentFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getPickFaceAssignmentFilesCall(pickFaceAssignmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a pickFaceAssignment.
     * Get all existing pickFaceAssignment files.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getPickFaceAssignmentFiles(Integer pickFaceAssignmentId) throws ApiException {
        getPickFaceAssignmentFilesWithHttpInfo(pickFaceAssignmentId);
    }

    /**
     * Get the files for a pickFaceAssignment.
     * Get all existing pickFaceAssignment files.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getPickFaceAssignmentFilesWithHttpInfo(Integer pickFaceAssignmentId) throws ApiException {
        com.squareup.okhttp.Call call = getPickFaceAssignmentFilesValidateBeforeCall(pickFaceAssignmentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a pickFaceAssignment. (asynchronously)
     * Get all existing pickFaceAssignment files.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPickFaceAssignmentFilesAsync(Integer pickFaceAssignmentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPickFaceAssignmentFilesValidateBeforeCall(pickFaceAssignmentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getPickFaceAssignmentTags
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPickFaceAssignmentTagsCall(Integer pickFaceAssignmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/pickFaceAssignment/{pickFaceAssignmentId}/tag"
            .replaceAll("\\{" + "pickFaceAssignmentId" + "\\}", apiClient.escapeString(pickFaceAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPickFaceAssignmentTagsValidateBeforeCall(Integer pickFaceAssignmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pickFaceAssignmentId' is set
        if (pickFaceAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'pickFaceAssignmentId' when calling getPickFaceAssignmentTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getPickFaceAssignmentTagsCall(pickFaceAssignmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a pickFaceAssignment.
     * Get all existing pickFaceAssignment tags.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getPickFaceAssignmentTags(Integer pickFaceAssignmentId) throws ApiException {
        getPickFaceAssignmentTagsWithHttpInfo(pickFaceAssignmentId);
    }

    /**
     * Get the tags for a pickFaceAssignment.
     * Get all existing pickFaceAssignment tags.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getPickFaceAssignmentTagsWithHttpInfo(Integer pickFaceAssignmentId) throws ApiException {
        com.squareup.okhttp.Call call = getPickFaceAssignmentTagsValidateBeforeCall(pickFaceAssignmentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a pickFaceAssignment. (asynchronously)
     * Get all existing pickFaceAssignment tags.
     * @param pickFaceAssignmentId Id of the pickFaceAssignment to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPickFaceAssignmentTagsAsync(Integer pickFaceAssignmentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPickFaceAssignmentTagsValidateBeforeCall(pickFaceAssignmentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updatePickFaceAssignment
     * @param body PickFaceAssignment to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePickFaceAssignmentCall(PickFaceAssignment body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/pickFaceAssignment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePickFaceAssignmentValidateBeforeCall(PickFaceAssignment body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePickFaceAssignment(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePickFaceAssignmentCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a pickFaceAssignment
     * Updates an existing pickFaceAssignment using the specified data.
     * @param body PickFaceAssignment to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updatePickFaceAssignment(PickFaceAssignment body) throws ApiException {
        updatePickFaceAssignmentWithHttpInfo(body);
    }

    /**
     * Update a pickFaceAssignment
     * Updates an existing pickFaceAssignment using the specified data.
     * @param body PickFaceAssignment to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updatePickFaceAssignmentWithHttpInfo(PickFaceAssignment body) throws ApiException {
        com.squareup.okhttp.Call call = updatePickFaceAssignmentValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a pickFaceAssignment (asynchronously)
     * Updates an existing pickFaceAssignment using the specified data.
     * @param body PickFaceAssignment to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePickFaceAssignmentAsync(PickFaceAssignment body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePickFaceAssignmentValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updatePickFaceAssignmentCustomFields
     * @param body PickFaceAssignment to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePickFaceAssignmentCustomFieldsCall(PickFaceAssignment body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/pickFaceAssignment/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePickFaceAssignmentCustomFieldsValidateBeforeCall(PickFaceAssignment body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePickFaceAssignmentCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePickFaceAssignmentCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a pickFaceAssignment custom fields
     * Updates an existing pickFaceAssignment custom fields using the specified data.
     * @param body PickFaceAssignment to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updatePickFaceAssignmentCustomFields(PickFaceAssignment body) throws ApiException {
        updatePickFaceAssignmentCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a pickFaceAssignment custom fields
     * Updates an existing pickFaceAssignment custom fields using the specified data.
     * @param body PickFaceAssignment to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updatePickFaceAssignmentCustomFieldsWithHttpInfo(PickFaceAssignment body) throws ApiException {
        com.squareup.okhttp.Call call = updatePickFaceAssignmentCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a pickFaceAssignment custom fields (asynchronously)
     * Updates an existing pickFaceAssignment custom fields using the specified data.
     * @param body PickFaceAssignment to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePickFaceAssignmentCustomFieldsAsync(PickFaceAssignment body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePickFaceAssignmentCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
