/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ItemAccountCode;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ItemAccountCodeApi {
    private ApiClient apiClient;

    public ItemAccountCodeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ItemAccountCodeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addItemAccountCode
     * @param body ItemAccountCode to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemAccountCodeCall(ItemAccountCode body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/itemAccountCode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemAccountCodeValidateBeforeCall(ItemAccountCode body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addItemAccountCode(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemAccountCodeCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an itemAccountCode
     * Inserts a new itemAccountCode using the specified data.
     * @param body ItemAccountCode to be inserted. (required)
     * @return ItemAccountCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemAccountCode addItemAccountCode(ItemAccountCode body) throws ApiException {
        ApiResponse<ItemAccountCode> resp = addItemAccountCodeWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create an itemAccountCode
     * Inserts a new itemAccountCode using the specified data.
     * @param body ItemAccountCode to be inserted. (required)
     * @return ApiResponse&lt;ItemAccountCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemAccountCode> addItemAccountCodeWithHttpInfo(ItemAccountCode body) throws ApiException {
        com.squareup.okhttp.Call call = addItemAccountCodeValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ItemAccountCode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an itemAccountCode (asynchronously)
     * Inserts a new itemAccountCode using the specified data.
     * @param body ItemAccountCode to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemAccountCodeAsync(ItemAccountCode body, final ApiCallback<ItemAccountCode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemAccountCodeValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemAccountCode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addItemAccountCodeAudit
     * @param itemAccountCodeId Id of the itemAccountCode to add an audit to (required)
     * @param itemAccountCodeAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemAccountCodeAuditCall(Integer itemAccountCodeId, String itemAccountCodeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemAccountCode/{itemAccountCodeId}/audit/{itemAccountCodeAudit}"
            .replaceAll("\\{" + "itemAccountCodeId" + "\\}", apiClient.escapeString(itemAccountCodeId.toString()))
            .replaceAll("\\{" + "itemAccountCodeAudit" + "\\}", apiClient.escapeString(itemAccountCodeAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemAccountCodeAuditValidateBeforeCall(Integer itemAccountCodeId, String itemAccountCodeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemAccountCodeId' is set
        if (itemAccountCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemAccountCodeId' when calling addItemAccountCodeAudit(Async)");
        }
        
        // verify the required parameter 'itemAccountCodeAudit' is set
        if (itemAccountCodeAudit == null) {
            throw new ApiException("Missing the required parameter 'itemAccountCodeAudit' when calling addItemAccountCodeAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemAccountCodeAuditCall(itemAccountCodeId, itemAccountCodeAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for an itemAccountCode
     * Adds an audit to an existing itemAccountCode.
     * @param itemAccountCodeId Id of the itemAccountCode to add an audit to (required)
     * @param itemAccountCodeAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemAccountCodeAudit(Integer itemAccountCodeId, String itemAccountCodeAudit) throws ApiException {
        addItemAccountCodeAuditWithHttpInfo(itemAccountCodeId, itemAccountCodeAudit);
    }

    /**
     * Add new audit for an itemAccountCode
     * Adds an audit to an existing itemAccountCode.
     * @param itemAccountCodeId Id of the itemAccountCode to add an audit to (required)
     * @param itemAccountCodeAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemAccountCodeAuditWithHttpInfo(Integer itemAccountCodeId, String itemAccountCodeAudit) throws ApiException {
        com.squareup.okhttp.Call call = addItemAccountCodeAuditValidateBeforeCall(itemAccountCodeId, itemAccountCodeAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for an itemAccountCode (asynchronously)
     * Adds an audit to an existing itemAccountCode.
     * @param itemAccountCodeId Id of the itemAccountCode to add an audit to (required)
     * @param itemAccountCodeAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemAccountCodeAuditAsync(Integer itemAccountCodeId, String itemAccountCodeAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemAccountCodeAuditValidateBeforeCall(itemAccountCodeId, itemAccountCodeAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemAccountCodeFile
     * @param itemAccountCodeId Id of the itemAccountCode to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemAccountCodeFileCall(Integer itemAccountCodeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemAccountCode/{itemAccountCodeId}/file/{fileName}"
            .replaceAll("\\{" + "itemAccountCodeId" + "\\}", apiClient.escapeString(itemAccountCodeId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemAccountCodeFileValidateBeforeCall(Integer itemAccountCodeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemAccountCodeId' is set
        if (itemAccountCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemAccountCodeId' when calling addItemAccountCodeFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addItemAccountCodeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemAccountCodeFileCall(itemAccountCodeId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an itemAccountCode
     * Adds a file to an existing itemAccountCode.
     * @param itemAccountCodeId Id of the itemAccountCode to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemAccountCodeFile(Integer itemAccountCodeId, String fileName) throws ApiException {
        addItemAccountCodeFileWithHttpInfo(itemAccountCodeId, fileName);
    }

    /**
     * Attach a file to an itemAccountCode
     * Adds a file to an existing itemAccountCode.
     * @param itemAccountCodeId Id of the itemAccountCode to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemAccountCodeFileWithHttpInfo(Integer itemAccountCodeId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addItemAccountCodeFileValidateBeforeCall(itemAccountCodeId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an itemAccountCode (asynchronously)
     * Adds a file to an existing itemAccountCode.
     * @param itemAccountCodeId Id of the itemAccountCode to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemAccountCodeFileAsync(Integer itemAccountCodeId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemAccountCodeFileValidateBeforeCall(itemAccountCodeId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemAccountCodeFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param itemAccountCodeId Id of the itemAccountCode to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemAccountCodeFileByURLCall(RecordFile body, Integer itemAccountCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/itemAccountCode/{itemAccountCodeId}/file"
            .replaceAll("\\{" + "itemAccountCodeId" + "\\}", apiClient.escapeString(itemAccountCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemAccountCodeFileByURLValidateBeforeCall(RecordFile body, Integer itemAccountCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addItemAccountCodeFileByURL(Async)");
        }
        
        // verify the required parameter 'itemAccountCodeId' is set
        if (itemAccountCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemAccountCodeId' when calling addItemAccountCodeFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemAccountCodeFileByURLCall(body, itemAccountCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an itemAccountCode by URL.
     * Adds a file to an existing itemAccountCode by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param itemAccountCodeId Id of the itemAccountCode to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemAccountCodeFileByURL(RecordFile body, Integer itemAccountCodeId) throws ApiException {
        addItemAccountCodeFileByURLWithHttpInfo(body, itemAccountCodeId);
    }

    /**
     * Attach a file to an itemAccountCode by URL.
     * Adds a file to an existing itemAccountCode by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param itemAccountCodeId Id of the itemAccountCode to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemAccountCodeFileByURLWithHttpInfo(RecordFile body, Integer itemAccountCodeId) throws ApiException {
        com.squareup.okhttp.Call call = addItemAccountCodeFileByURLValidateBeforeCall(body, itemAccountCodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an itemAccountCode by URL. (asynchronously)
     * Adds a file to an existing itemAccountCode by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param itemAccountCodeId Id of the itemAccountCode to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemAccountCodeFileByURLAsync(RecordFile body, Integer itemAccountCodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemAccountCodeFileByURLValidateBeforeCall(body, itemAccountCodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemAccountCodeTag
     * @param itemAccountCodeId Id of the itemAccountCode to add a tag to (required)
     * @param itemAccountCodeTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemAccountCodeTagCall(Integer itemAccountCodeId, String itemAccountCodeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemAccountCode/{itemAccountCodeId}/tag/{itemAccountCodeTag}"
            .replaceAll("\\{" + "itemAccountCodeId" + "\\}", apiClient.escapeString(itemAccountCodeId.toString()))
            .replaceAll("\\{" + "itemAccountCodeTag" + "\\}", apiClient.escapeString(itemAccountCodeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemAccountCodeTagValidateBeforeCall(Integer itemAccountCodeId, String itemAccountCodeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemAccountCodeId' is set
        if (itemAccountCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemAccountCodeId' when calling addItemAccountCodeTag(Async)");
        }
        
        // verify the required parameter 'itemAccountCodeTag' is set
        if (itemAccountCodeTag == null) {
            throw new ApiException("Missing the required parameter 'itemAccountCodeTag' when calling addItemAccountCodeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemAccountCodeTagCall(itemAccountCodeId, itemAccountCodeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for an itemAccountCode.
     * Adds a tag to an existing itemAccountCode.
     * @param itemAccountCodeId Id of the itemAccountCode to add a tag to (required)
     * @param itemAccountCodeTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemAccountCodeTag(Integer itemAccountCodeId, String itemAccountCodeTag) throws ApiException {
        addItemAccountCodeTagWithHttpInfo(itemAccountCodeId, itemAccountCodeTag);
    }

    /**
     * Add new tags for an itemAccountCode.
     * Adds a tag to an existing itemAccountCode.
     * @param itemAccountCodeId Id of the itemAccountCode to add a tag to (required)
     * @param itemAccountCodeTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemAccountCodeTagWithHttpInfo(Integer itemAccountCodeId, String itemAccountCodeTag) throws ApiException {
        com.squareup.okhttp.Call call = addItemAccountCodeTagValidateBeforeCall(itemAccountCodeId, itemAccountCodeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for an itemAccountCode. (asynchronously)
     * Adds a tag to an existing itemAccountCode.
     * @param itemAccountCodeId Id of the itemAccountCode to add a tag to (required)
     * @param itemAccountCodeTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemAccountCodeTagAsync(Integer itemAccountCodeId, String itemAccountCodeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemAccountCodeTagValidateBeforeCall(itemAccountCodeId, itemAccountCodeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemAccountCode
     * @param itemAccountCodeId Id of the itemAccountCode to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemAccountCodeCall(Integer itemAccountCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemAccountCode/{itemAccountCodeId}"
            .replaceAll("\\{" + "itemAccountCodeId" + "\\}", apiClient.escapeString(itemAccountCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemAccountCodeValidateBeforeCall(Integer itemAccountCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemAccountCodeId' is set
        if (itemAccountCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemAccountCodeId' when calling deleteItemAccountCode(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemAccountCodeCall(itemAccountCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an itemAccountCode
     * Deletes the itemAccountCode identified by the specified id.
     * @param itemAccountCodeId Id of the itemAccountCode to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemAccountCode(Integer itemAccountCodeId) throws ApiException {
        deleteItemAccountCodeWithHttpInfo(itemAccountCodeId);
    }

    /**
     * Delete an itemAccountCode
     * Deletes the itemAccountCode identified by the specified id.
     * @param itemAccountCodeId Id of the itemAccountCode to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemAccountCodeWithHttpInfo(Integer itemAccountCodeId) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemAccountCodeValidateBeforeCall(itemAccountCodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an itemAccountCode (asynchronously)
     * Deletes the itemAccountCode identified by the specified id.
     * @param itemAccountCodeId Id of the itemAccountCode to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemAccountCodeAsync(Integer itemAccountCodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemAccountCodeValidateBeforeCall(itemAccountCodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemAccountCodeFile
     * @param itemAccountCodeId Id of the itemAccountCode to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemAccountCodeFileCall(Integer itemAccountCodeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemAccountCode/{itemAccountCodeId}/file/{fileId}"
            .replaceAll("\\{" + "itemAccountCodeId" + "\\}", apiClient.escapeString(itemAccountCodeId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemAccountCodeFileValidateBeforeCall(Integer itemAccountCodeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemAccountCodeId' is set
        if (itemAccountCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemAccountCodeId' when calling deleteItemAccountCodeFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteItemAccountCodeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemAccountCodeFileCall(itemAccountCodeId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for an itemAccountCode.
     * Deletes an existing itemAccountCode file using the specified data.
     * @param itemAccountCodeId Id of the itemAccountCode to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemAccountCodeFile(Integer itemAccountCodeId, Integer fileId) throws ApiException {
        deleteItemAccountCodeFileWithHttpInfo(itemAccountCodeId, fileId);
    }

    /**
     * Delete a file for an itemAccountCode.
     * Deletes an existing itemAccountCode file using the specified data.
     * @param itemAccountCodeId Id of the itemAccountCode to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemAccountCodeFileWithHttpInfo(Integer itemAccountCodeId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemAccountCodeFileValidateBeforeCall(itemAccountCodeId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for an itemAccountCode. (asynchronously)
     * Deletes an existing itemAccountCode file using the specified data.
     * @param itemAccountCodeId Id of the itemAccountCode to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemAccountCodeFileAsync(Integer itemAccountCodeId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemAccountCodeFileValidateBeforeCall(itemAccountCodeId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemAccountCodeTag
     * @param itemAccountCodeId Id of the itemAccountCode to remove tag from (required)
     * @param itemAccountCodeTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemAccountCodeTagCall(Integer itemAccountCodeId, String itemAccountCodeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemAccountCode/{itemAccountCodeId}/tag/{itemAccountCodeTag}"
            .replaceAll("\\{" + "itemAccountCodeId" + "\\}", apiClient.escapeString(itemAccountCodeId.toString()))
            .replaceAll("\\{" + "itemAccountCodeTag" + "\\}", apiClient.escapeString(itemAccountCodeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemAccountCodeTagValidateBeforeCall(Integer itemAccountCodeId, String itemAccountCodeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemAccountCodeId' is set
        if (itemAccountCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemAccountCodeId' when calling deleteItemAccountCodeTag(Async)");
        }
        
        // verify the required parameter 'itemAccountCodeTag' is set
        if (itemAccountCodeTag == null) {
            throw new ApiException("Missing the required parameter 'itemAccountCodeTag' when calling deleteItemAccountCodeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemAccountCodeTagCall(itemAccountCodeId, itemAccountCodeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for an itemAccountCode.
     * Deletes an existing itemAccountCode tag using the specified data.
     * @param itemAccountCodeId Id of the itemAccountCode to remove tag from (required)
     * @param itemAccountCodeTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemAccountCodeTag(Integer itemAccountCodeId, String itemAccountCodeTag) throws ApiException {
        deleteItemAccountCodeTagWithHttpInfo(itemAccountCodeId, itemAccountCodeTag);
    }

    /**
     * Delete a tag for an itemAccountCode.
     * Deletes an existing itemAccountCode tag using the specified data.
     * @param itemAccountCodeId Id of the itemAccountCode to remove tag from (required)
     * @param itemAccountCodeTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemAccountCodeTagWithHttpInfo(Integer itemAccountCodeId, String itemAccountCodeTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemAccountCodeTagValidateBeforeCall(itemAccountCodeId, itemAccountCodeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for an itemAccountCode. (asynchronously)
     * Deletes an existing itemAccountCode tag using the specified data.
     * @param itemAccountCodeId Id of the itemAccountCode to remove tag from (required)
     * @param itemAccountCodeTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemAccountCodeTagAsync(Integer itemAccountCodeId, String itemAccountCodeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemAccountCodeTagValidateBeforeCall(itemAccountCodeId, itemAccountCodeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateItemAccountCodeById
     * @param itemAccountCodeId Id of the itemAccountCode to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateItemAccountCodeByIdCall(Integer itemAccountCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemAccountCode/duplicate/{itemAccountCodeId}"
            .replaceAll("\\{" + "itemAccountCodeId" + "\\}", apiClient.escapeString(itemAccountCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateItemAccountCodeByIdValidateBeforeCall(Integer itemAccountCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemAccountCodeId' is set
        if (itemAccountCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemAccountCodeId' when calling getDuplicateItemAccountCodeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateItemAccountCodeByIdCall(itemAccountCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated an itemAccountCode by id
     * Returns a duplicated itemAccountCode identified by the specified id.
     * @param itemAccountCodeId Id of the itemAccountCode to be duplicated. (required)
     * @return ItemAccountCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemAccountCode getDuplicateItemAccountCodeById(Integer itemAccountCodeId) throws ApiException {
        ApiResponse<ItemAccountCode> resp = getDuplicateItemAccountCodeByIdWithHttpInfo(itemAccountCodeId);
        return resp.getData();
    }

    /**
     * Get a duplicated an itemAccountCode by id
     * Returns a duplicated itemAccountCode identified by the specified id.
     * @param itemAccountCodeId Id of the itemAccountCode to be duplicated. (required)
     * @return ApiResponse&lt;ItemAccountCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemAccountCode> getDuplicateItemAccountCodeByIdWithHttpInfo(Integer itemAccountCodeId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateItemAccountCodeByIdValidateBeforeCall(itemAccountCodeId, null, null);
        Type localVarReturnType = new TypeToken<ItemAccountCode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated an itemAccountCode by id (asynchronously)
     * Returns a duplicated itemAccountCode identified by the specified id.
     * @param itemAccountCodeId Id of the itemAccountCode to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateItemAccountCodeByIdAsync(Integer itemAccountCodeId, final ApiCallback<ItemAccountCode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateItemAccountCodeByIdValidateBeforeCall(itemAccountCodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemAccountCode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemAccountCodeByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemAccountCodeByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemAccountCode/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemAccountCodeByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getItemAccountCodeByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search itemAccountCodes by filter
     * Returns the list of itemAccountCodes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;ItemAccountCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ItemAccountCode> getItemAccountCodeByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<ItemAccountCode>> resp = getItemAccountCodeByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search itemAccountCodes by filter
     * Returns the list of itemAccountCodes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;ItemAccountCode&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ItemAccountCode>> getItemAccountCodeByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getItemAccountCodeByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<ItemAccountCode>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search itemAccountCodes by filter (asynchronously)
     * Returns the list of itemAccountCodes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemAccountCodeByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<ItemAccountCode>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemAccountCodeByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ItemAccountCode>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemAccountCodeById
     * @param itemAccountCodeId Id of the itemAccountCode to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemAccountCodeByIdCall(Integer itemAccountCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemAccountCode/{itemAccountCodeId}"
            .replaceAll("\\{" + "itemAccountCodeId" + "\\}", apiClient.escapeString(itemAccountCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemAccountCodeByIdValidateBeforeCall(Integer itemAccountCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemAccountCodeId' is set
        if (itemAccountCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemAccountCodeId' when calling getItemAccountCodeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemAccountCodeByIdCall(itemAccountCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an itemAccountCode by id
     * Returns the itemAccountCode identified by the specified id.
     * @param itemAccountCodeId Id of the itemAccountCode to be returned. (required)
     * @return ItemAccountCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemAccountCode getItemAccountCodeById(Integer itemAccountCodeId) throws ApiException {
        ApiResponse<ItemAccountCode> resp = getItemAccountCodeByIdWithHttpInfo(itemAccountCodeId);
        return resp.getData();
    }

    /**
     * Get an itemAccountCode by id
     * Returns the itemAccountCode identified by the specified id.
     * @param itemAccountCodeId Id of the itemAccountCode to be returned. (required)
     * @return ApiResponse&lt;ItemAccountCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemAccountCode> getItemAccountCodeByIdWithHttpInfo(Integer itemAccountCodeId) throws ApiException {
        com.squareup.okhttp.Call call = getItemAccountCodeByIdValidateBeforeCall(itemAccountCodeId, null, null);
        Type localVarReturnType = new TypeToken<ItemAccountCode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an itemAccountCode by id (asynchronously)
     * Returns the itemAccountCode identified by the specified id.
     * @param itemAccountCodeId Id of the itemAccountCode to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemAccountCodeByIdAsync(Integer itemAccountCodeId, final ApiCallback<ItemAccountCode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemAccountCodeByIdValidateBeforeCall(itemAccountCodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemAccountCode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemAccountCodeFiles
     * @param itemAccountCodeId Id of the itemAccountCode to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemAccountCodeFilesCall(Integer itemAccountCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemAccountCode/{itemAccountCodeId}/file"
            .replaceAll("\\{" + "itemAccountCodeId" + "\\}", apiClient.escapeString(itemAccountCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemAccountCodeFilesValidateBeforeCall(Integer itemAccountCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemAccountCodeId' is set
        if (itemAccountCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemAccountCodeId' when calling getItemAccountCodeFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemAccountCodeFilesCall(itemAccountCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for an itemAccountCode.
     * Get all existing itemAccountCode files.
     * @param itemAccountCodeId Id of the itemAccountCode to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getItemAccountCodeFiles(Integer itemAccountCodeId) throws ApiException {
        getItemAccountCodeFilesWithHttpInfo(itemAccountCodeId);
    }

    /**
     * Get the files for an itemAccountCode.
     * Get all existing itemAccountCode files.
     * @param itemAccountCodeId Id of the itemAccountCode to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getItemAccountCodeFilesWithHttpInfo(Integer itemAccountCodeId) throws ApiException {
        com.squareup.okhttp.Call call = getItemAccountCodeFilesValidateBeforeCall(itemAccountCodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for an itemAccountCode. (asynchronously)
     * Get all existing itemAccountCode files.
     * @param itemAccountCodeId Id of the itemAccountCode to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemAccountCodeFilesAsync(Integer itemAccountCodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemAccountCodeFilesValidateBeforeCall(itemAccountCodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getItemAccountCodeTags
     * @param itemAccountCodeId Id of the itemAccountCode to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemAccountCodeTagsCall(Integer itemAccountCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemAccountCode/{itemAccountCodeId}/tag"
            .replaceAll("\\{" + "itemAccountCodeId" + "\\}", apiClient.escapeString(itemAccountCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemAccountCodeTagsValidateBeforeCall(Integer itemAccountCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemAccountCodeId' is set
        if (itemAccountCodeId == null) {
            throw new ApiException("Missing the required parameter 'itemAccountCodeId' when calling getItemAccountCodeTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemAccountCodeTagsCall(itemAccountCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for an itemAccountCode.
     * Get all existing itemAccountCode tags.
     * @param itemAccountCodeId Id of the itemAccountCode to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getItemAccountCodeTags(Integer itemAccountCodeId) throws ApiException {
        getItemAccountCodeTagsWithHttpInfo(itemAccountCodeId);
    }

    /**
     * Get the tags for an itemAccountCode.
     * Get all existing itemAccountCode tags.
     * @param itemAccountCodeId Id of the itemAccountCode to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getItemAccountCodeTagsWithHttpInfo(Integer itemAccountCodeId) throws ApiException {
        com.squareup.okhttp.Call call = getItemAccountCodeTagsValidateBeforeCall(itemAccountCodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for an itemAccountCode. (asynchronously)
     * Get all existing itemAccountCode tags.
     * @param itemAccountCodeId Id of the itemAccountCode to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemAccountCodeTagsAsync(Integer itemAccountCodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemAccountCodeTagsValidateBeforeCall(itemAccountCodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateItemAccountCode
     * @param body ItemAccountCode to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateItemAccountCodeCall(ItemAccountCode body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/itemAccountCode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateItemAccountCodeValidateBeforeCall(ItemAccountCode body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateItemAccountCode(Async)");
        }
        

        com.squareup.okhttp.Call call = updateItemAccountCodeCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an itemAccountCode
     * Updates an existing itemAccountCode using the specified data.
     * @param body ItemAccountCode to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateItemAccountCode(ItemAccountCode body) throws ApiException {
        updateItemAccountCodeWithHttpInfo(body);
    }

    /**
     * Update an itemAccountCode
     * Updates an existing itemAccountCode using the specified data.
     * @param body ItemAccountCode to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateItemAccountCodeWithHttpInfo(ItemAccountCode body) throws ApiException {
        com.squareup.okhttp.Call call = updateItemAccountCodeValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an itemAccountCode (asynchronously)
     * Updates an existing itemAccountCode using the specified data.
     * @param body ItemAccountCode to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateItemAccountCodeAsync(ItemAccountCode body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateItemAccountCodeValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
