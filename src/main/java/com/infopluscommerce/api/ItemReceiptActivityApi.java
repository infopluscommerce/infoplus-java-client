/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ItemReceiptActivity;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ItemReceiptActivityApi {
    private ApiClient apiClient;

    public ItemReceiptActivityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ItemReceiptActivityApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addItemReceiptActivity
     * @param body ItemReceiptActivity to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemReceiptActivityCall(ItemReceiptActivity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/itemReceiptActivity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemReceiptActivityValidateBeforeCall(ItemReceiptActivity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addItemReceiptActivity(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemReceiptActivityCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an itemReceiptActivity
     * Inserts a new itemReceiptActivity using the specified data.
     * @param body ItemReceiptActivity to be inserted. (required)
     * @return ItemReceiptActivity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemReceiptActivity addItemReceiptActivity(ItemReceiptActivity body) throws ApiException {
        ApiResponse<ItemReceiptActivity> resp = addItemReceiptActivityWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create an itemReceiptActivity
     * Inserts a new itemReceiptActivity using the specified data.
     * @param body ItemReceiptActivity to be inserted. (required)
     * @return ApiResponse&lt;ItemReceiptActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemReceiptActivity> addItemReceiptActivityWithHttpInfo(ItemReceiptActivity body) throws ApiException {
        com.squareup.okhttp.Call call = addItemReceiptActivityValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ItemReceiptActivity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an itemReceiptActivity (asynchronously)
     * Inserts a new itemReceiptActivity using the specified data.
     * @param body ItemReceiptActivity to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemReceiptActivityAsync(ItemReceiptActivity body, final ApiCallback<ItemReceiptActivity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemReceiptActivityValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemReceiptActivity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addItemReceiptActivityAudit
     * @param itemReceiptActivityId Id of the itemReceiptActivity to add an audit to (required)
     * @param itemReceiptActivityAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemReceiptActivityAuditCall(Integer itemReceiptActivityId, String itemReceiptActivityAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemReceiptActivity/{itemReceiptActivityId}/audit/{itemReceiptActivityAudit}"
            .replaceAll("\\{" + "itemReceiptActivityId" + "\\}", apiClient.escapeString(itemReceiptActivityId.toString()))
            .replaceAll("\\{" + "itemReceiptActivityAudit" + "\\}", apiClient.escapeString(itemReceiptActivityAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemReceiptActivityAuditValidateBeforeCall(Integer itemReceiptActivityId, String itemReceiptActivityAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemReceiptActivityId' is set
        if (itemReceiptActivityId == null) {
            throw new ApiException("Missing the required parameter 'itemReceiptActivityId' when calling addItemReceiptActivityAudit(Async)");
        }
        
        // verify the required parameter 'itemReceiptActivityAudit' is set
        if (itemReceiptActivityAudit == null) {
            throw new ApiException("Missing the required parameter 'itemReceiptActivityAudit' when calling addItemReceiptActivityAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemReceiptActivityAuditCall(itemReceiptActivityId, itemReceiptActivityAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for an itemReceiptActivity
     * Adds an audit to an existing itemReceiptActivity.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to add an audit to (required)
     * @param itemReceiptActivityAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemReceiptActivityAudit(Integer itemReceiptActivityId, String itemReceiptActivityAudit) throws ApiException {
        addItemReceiptActivityAuditWithHttpInfo(itemReceiptActivityId, itemReceiptActivityAudit);
    }

    /**
     * Add new audit for an itemReceiptActivity
     * Adds an audit to an existing itemReceiptActivity.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to add an audit to (required)
     * @param itemReceiptActivityAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemReceiptActivityAuditWithHttpInfo(Integer itemReceiptActivityId, String itemReceiptActivityAudit) throws ApiException {
        com.squareup.okhttp.Call call = addItemReceiptActivityAuditValidateBeforeCall(itemReceiptActivityId, itemReceiptActivityAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for an itemReceiptActivity (asynchronously)
     * Adds an audit to an existing itemReceiptActivity.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to add an audit to (required)
     * @param itemReceiptActivityAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemReceiptActivityAuditAsync(Integer itemReceiptActivityId, String itemReceiptActivityAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemReceiptActivityAuditValidateBeforeCall(itemReceiptActivityId, itemReceiptActivityAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemReceiptActivityFile
     * @param itemReceiptActivityId Id of the itemReceiptActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemReceiptActivityFileCall(Integer itemReceiptActivityId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemReceiptActivity/{itemReceiptActivityId}/file/{fileName}"
            .replaceAll("\\{" + "itemReceiptActivityId" + "\\}", apiClient.escapeString(itemReceiptActivityId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemReceiptActivityFileValidateBeforeCall(Integer itemReceiptActivityId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemReceiptActivityId' is set
        if (itemReceiptActivityId == null) {
            throw new ApiException("Missing the required parameter 'itemReceiptActivityId' when calling addItemReceiptActivityFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addItemReceiptActivityFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemReceiptActivityFileCall(itemReceiptActivityId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an itemReceiptActivity
     * Adds a file to an existing itemReceiptActivity.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemReceiptActivityFile(Integer itemReceiptActivityId, String fileName) throws ApiException {
        addItemReceiptActivityFileWithHttpInfo(itemReceiptActivityId, fileName);
    }

    /**
     * Attach a file to an itemReceiptActivity
     * Adds a file to an existing itemReceiptActivity.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemReceiptActivityFileWithHttpInfo(Integer itemReceiptActivityId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addItemReceiptActivityFileValidateBeforeCall(itemReceiptActivityId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an itemReceiptActivity (asynchronously)
     * Adds a file to an existing itemReceiptActivity.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemReceiptActivityFileAsync(Integer itemReceiptActivityId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemReceiptActivityFileValidateBeforeCall(itemReceiptActivityId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemReceiptActivityFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param itemReceiptActivityId Id of the itemReceiptActivity to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemReceiptActivityFileByURLCall(RecordFile body, Integer itemReceiptActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/itemReceiptActivity/{itemReceiptActivityId}/file"
            .replaceAll("\\{" + "itemReceiptActivityId" + "\\}", apiClient.escapeString(itemReceiptActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemReceiptActivityFileByURLValidateBeforeCall(RecordFile body, Integer itemReceiptActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addItemReceiptActivityFileByURL(Async)");
        }
        
        // verify the required parameter 'itemReceiptActivityId' is set
        if (itemReceiptActivityId == null) {
            throw new ApiException("Missing the required parameter 'itemReceiptActivityId' when calling addItemReceiptActivityFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemReceiptActivityFileByURLCall(body, itemReceiptActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an itemReceiptActivity by URL.
     * Adds a file to an existing itemReceiptActivity by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param itemReceiptActivityId Id of the itemReceiptActivity to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemReceiptActivityFileByURL(RecordFile body, Integer itemReceiptActivityId) throws ApiException {
        addItemReceiptActivityFileByURLWithHttpInfo(body, itemReceiptActivityId);
    }

    /**
     * Attach a file to an itemReceiptActivity by URL.
     * Adds a file to an existing itemReceiptActivity by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param itemReceiptActivityId Id of the itemReceiptActivity to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemReceiptActivityFileByURLWithHttpInfo(RecordFile body, Integer itemReceiptActivityId) throws ApiException {
        com.squareup.okhttp.Call call = addItemReceiptActivityFileByURLValidateBeforeCall(body, itemReceiptActivityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an itemReceiptActivity by URL. (asynchronously)
     * Adds a file to an existing itemReceiptActivity by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param itemReceiptActivityId Id of the itemReceiptActivity to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemReceiptActivityFileByURLAsync(RecordFile body, Integer itemReceiptActivityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemReceiptActivityFileByURLValidateBeforeCall(body, itemReceiptActivityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemReceiptActivityTag
     * @param itemReceiptActivityId Id of the itemReceiptActivity to add a tag to (required)
     * @param itemReceiptActivityTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemReceiptActivityTagCall(Integer itemReceiptActivityId, String itemReceiptActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemReceiptActivity/{itemReceiptActivityId}/tag/{itemReceiptActivityTag}"
            .replaceAll("\\{" + "itemReceiptActivityId" + "\\}", apiClient.escapeString(itemReceiptActivityId.toString()))
            .replaceAll("\\{" + "itemReceiptActivityTag" + "\\}", apiClient.escapeString(itemReceiptActivityTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemReceiptActivityTagValidateBeforeCall(Integer itemReceiptActivityId, String itemReceiptActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemReceiptActivityId' is set
        if (itemReceiptActivityId == null) {
            throw new ApiException("Missing the required parameter 'itemReceiptActivityId' when calling addItemReceiptActivityTag(Async)");
        }
        
        // verify the required parameter 'itemReceiptActivityTag' is set
        if (itemReceiptActivityTag == null) {
            throw new ApiException("Missing the required parameter 'itemReceiptActivityTag' when calling addItemReceiptActivityTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemReceiptActivityTagCall(itemReceiptActivityId, itemReceiptActivityTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for an itemReceiptActivity.
     * Adds a tag to an existing itemReceiptActivity.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to add a tag to (required)
     * @param itemReceiptActivityTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemReceiptActivityTag(Integer itemReceiptActivityId, String itemReceiptActivityTag) throws ApiException {
        addItemReceiptActivityTagWithHttpInfo(itemReceiptActivityId, itemReceiptActivityTag);
    }

    /**
     * Add new tags for an itemReceiptActivity.
     * Adds a tag to an existing itemReceiptActivity.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to add a tag to (required)
     * @param itemReceiptActivityTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemReceiptActivityTagWithHttpInfo(Integer itemReceiptActivityId, String itemReceiptActivityTag) throws ApiException {
        com.squareup.okhttp.Call call = addItemReceiptActivityTagValidateBeforeCall(itemReceiptActivityId, itemReceiptActivityTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for an itemReceiptActivity. (asynchronously)
     * Adds a tag to an existing itemReceiptActivity.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to add a tag to (required)
     * @param itemReceiptActivityTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemReceiptActivityTagAsync(Integer itemReceiptActivityId, String itemReceiptActivityTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemReceiptActivityTagValidateBeforeCall(itemReceiptActivityId, itemReceiptActivityTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemReceiptActivity
     * @param itemReceiptActivityId Id of the itemReceiptActivity to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemReceiptActivityCall(Integer itemReceiptActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemReceiptActivity/{itemReceiptActivityId}"
            .replaceAll("\\{" + "itemReceiptActivityId" + "\\}", apiClient.escapeString(itemReceiptActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemReceiptActivityValidateBeforeCall(Integer itemReceiptActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemReceiptActivityId' is set
        if (itemReceiptActivityId == null) {
            throw new ApiException("Missing the required parameter 'itemReceiptActivityId' when calling deleteItemReceiptActivity(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemReceiptActivityCall(itemReceiptActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an itemReceiptActivity
     * Deletes the itemReceiptActivity identified by the specified id.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemReceiptActivity(Integer itemReceiptActivityId) throws ApiException {
        deleteItemReceiptActivityWithHttpInfo(itemReceiptActivityId);
    }

    /**
     * Delete an itemReceiptActivity
     * Deletes the itemReceiptActivity identified by the specified id.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemReceiptActivityWithHttpInfo(Integer itemReceiptActivityId) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemReceiptActivityValidateBeforeCall(itemReceiptActivityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an itemReceiptActivity (asynchronously)
     * Deletes the itemReceiptActivity identified by the specified id.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemReceiptActivityAsync(Integer itemReceiptActivityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemReceiptActivityValidateBeforeCall(itemReceiptActivityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemReceiptActivityFile
     * @param itemReceiptActivityId Id of the itemReceiptActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemReceiptActivityFileCall(Integer itemReceiptActivityId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemReceiptActivity/{itemReceiptActivityId}/file/{fileId}"
            .replaceAll("\\{" + "itemReceiptActivityId" + "\\}", apiClient.escapeString(itemReceiptActivityId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemReceiptActivityFileValidateBeforeCall(Integer itemReceiptActivityId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemReceiptActivityId' is set
        if (itemReceiptActivityId == null) {
            throw new ApiException("Missing the required parameter 'itemReceiptActivityId' when calling deleteItemReceiptActivityFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteItemReceiptActivityFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemReceiptActivityFileCall(itemReceiptActivityId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for an itemReceiptActivity.
     * Deletes an existing itemReceiptActivity file using the specified data.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemReceiptActivityFile(Integer itemReceiptActivityId, Integer fileId) throws ApiException {
        deleteItemReceiptActivityFileWithHttpInfo(itemReceiptActivityId, fileId);
    }

    /**
     * Delete a file for an itemReceiptActivity.
     * Deletes an existing itemReceiptActivity file using the specified data.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemReceiptActivityFileWithHttpInfo(Integer itemReceiptActivityId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemReceiptActivityFileValidateBeforeCall(itemReceiptActivityId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for an itemReceiptActivity. (asynchronously)
     * Deletes an existing itemReceiptActivity file using the specified data.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemReceiptActivityFileAsync(Integer itemReceiptActivityId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemReceiptActivityFileValidateBeforeCall(itemReceiptActivityId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemReceiptActivityTag
     * @param itemReceiptActivityId Id of the itemReceiptActivity to remove tag from (required)
     * @param itemReceiptActivityTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemReceiptActivityTagCall(Integer itemReceiptActivityId, String itemReceiptActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemReceiptActivity/{itemReceiptActivityId}/tag/{itemReceiptActivityTag}"
            .replaceAll("\\{" + "itemReceiptActivityId" + "\\}", apiClient.escapeString(itemReceiptActivityId.toString()))
            .replaceAll("\\{" + "itemReceiptActivityTag" + "\\}", apiClient.escapeString(itemReceiptActivityTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemReceiptActivityTagValidateBeforeCall(Integer itemReceiptActivityId, String itemReceiptActivityTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemReceiptActivityId' is set
        if (itemReceiptActivityId == null) {
            throw new ApiException("Missing the required parameter 'itemReceiptActivityId' when calling deleteItemReceiptActivityTag(Async)");
        }
        
        // verify the required parameter 'itemReceiptActivityTag' is set
        if (itemReceiptActivityTag == null) {
            throw new ApiException("Missing the required parameter 'itemReceiptActivityTag' when calling deleteItemReceiptActivityTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemReceiptActivityTagCall(itemReceiptActivityId, itemReceiptActivityTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for an itemReceiptActivity.
     * Deletes an existing itemReceiptActivity tag using the specified data.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to remove tag from (required)
     * @param itemReceiptActivityTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemReceiptActivityTag(Integer itemReceiptActivityId, String itemReceiptActivityTag) throws ApiException {
        deleteItemReceiptActivityTagWithHttpInfo(itemReceiptActivityId, itemReceiptActivityTag);
    }

    /**
     * Delete a tag for an itemReceiptActivity.
     * Deletes an existing itemReceiptActivity tag using the specified data.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to remove tag from (required)
     * @param itemReceiptActivityTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemReceiptActivityTagWithHttpInfo(Integer itemReceiptActivityId, String itemReceiptActivityTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemReceiptActivityTagValidateBeforeCall(itemReceiptActivityId, itemReceiptActivityTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for an itemReceiptActivity. (asynchronously)
     * Deletes an existing itemReceiptActivity tag using the specified data.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to remove tag from (required)
     * @param itemReceiptActivityTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemReceiptActivityTagAsync(Integer itemReceiptActivityId, String itemReceiptActivityTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemReceiptActivityTagValidateBeforeCall(itemReceiptActivityId, itemReceiptActivityTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateItemReceiptActivityById
     * @param itemReceiptActivityId Id of the itemReceiptActivity to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateItemReceiptActivityByIdCall(Integer itemReceiptActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemReceiptActivity/duplicate/{itemReceiptActivityId}"
            .replaceAll("\\{" + "itemReceiptActivityId" + "\\}", apiClient.escapeString(itemReceiptActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateItemReceiptActivityByIdValidateBeforeCall(Integer itemReceiptActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemReceiptActivityId' is set
        if (itemReceiptActivityId == null) {
            throw new ApiException("Missing the required parameter 'itemReceiptActivityId' when calling getDuplicateItemReceiptActivityById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateItemReceiptActivityByIdCall(itemReceiptActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated an itemReceiptActivity by id
     * Returns a duplicated itemReceiptActivity identified by the specified id.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to be duplicated. (required)
     * @return ItemReceiptActivity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemReceiptActivity getDuplicateItemReceiptActivityById(Integer itemReceiptActivityId) throws ApiException {
        ApiResponse<ItemReceiptActivity> resp = getDuplicateItemReceiptActivityByIdWithHttpInfo(itemReceiptActivityId);
        return resp.getData();
    }

    /**
     * Get a duplicated an itemReceiptActivity by id
     * Returns a duplicated itemReceiptActivity identified by the specified id.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to be duplicated. (required)
     * @return ApiResponse&lt;ItemReceiptActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemReceiptActivity> getDuplicateItemReceiptActivityByIdWithHttpInfo(Integer itemReceiptActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateItemReceiptActivityByIdValidateBeforeCall(itemReceiptActivityId, null, null);
        Type localVarReturnType = new TypeToken<ItemReceiptActivity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated an itemReceiptActivity by id (asynchronously)
     * Returns a duplicated itemReceiptActivity identified by the specified id.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateItemReceiptActivityByIdAsync(Integer itemReceiptActivityId, final ApiCallback<ItemReceiptActivity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateItemReceiptActivityByIdValidateBeforeCall(itemReceiptActivityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemReceiptActivity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemReceiptActivityByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemReceiptActivityByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemReceiptActivity/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemReceiptActivityByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getItemReceiptActivityByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search itemReceiptActivitys by filter
     * Returns the list of itemReceiptActivitys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;ItemReceiptActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ItemReceiptActivity> getItemReceiptActivityByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<ItemReceiptActivity>> resp = getItemReceiptActivityByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search itemReceiptActivitys by filter
     * Returns the list of itemReceiptActivitys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;ItemReceiptActivity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ItemReceiptActivity>> getItemReceiptActivityByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getItemReceiptActivityByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<ItemReceiptActivity>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search itemReceiptActivitys by filter (asynchronously)
     * Returns the list of itemReceiptActivitys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemReceiptActivityByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<ItemReceiptActivity>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemReceiptActivityByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ItemReceiptActivity>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemReceiptActivityById
     * @param itemReceiptActivityId Id of the itemReceiptActivity to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemReceiptActivityByIdCall(Integer itemReceiptActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemReceiptActivity/{itemReceiptActivityId}"
            .replaceAll("\\{" + "itemReceiptActivityId" + "\\}", apiClient.escapeString(itemReceiptActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemReceiptActivityByIdValidateBeforeCall(Integer itemReceiptActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemReceiptActivityId' is set
        if (itemReceiptActivityId == null) {
            throw new ApiException("Missing the required parameter 'itemReceiptActivityId' when calling getItemReceiptActivityById(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemReceiptActivityByIdCall(itemReceiptActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an itemReceiptActivity by id
     * Returns the itemReceiptActivity identified by the specified id.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to be returned. (required)
     * @return ItemReceiptActivity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemReceiptActivity getItemReceiptActivityById(Integer itemReceiptActivityId) throws ApiException {
        ApiResponse<ItemReceiptActivity> resp = getItemReceiptActivityByIdWithHttpInfo(itemReceiptActivityId);
        return resp.getData();
    }

    /**
     * Get an itemReceiptActivity by id
     * Returns the itemReceiptActivity identified by the specified id.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to be returned. (required)
     * @return ApiResponse&lt;ItemReceiptActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemReceiptActivity> getItemReceiptActivityByIdWithHttpInfo(Integer itemReceiptActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getItemReceiptActivityByIdValidateBeforeCall(itemReceiptActivityId, null, null);
        Type localVarReturnType = new TypeToken<ItemReceiptActivity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an itemReceiptActivity by id (asynchronously)
     * Returns the itemReceiptActivity identified by the specified id.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemReceiptActivityByIdAsync(Integer itemReceiptActivityId, final ApiCallback<ItemReceiptActivity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemReceiptActivityByIdValidateBeforeCall(itemReceiptActivityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemReceiptActivity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemReceiptActivityFiles
     * @param itemReceiptActivityId Id of the itemReceiptActivity to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemReceiptActivityFilesCall(Integer itemReceiptActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemReceiptActivity/{itemReceiptActivityId}/file"
            .replaceAll("\\{" + "itemReceiptActivityId" + "\\}", apiClient.escapeString(itemReceiptActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemReceiptActivityFilesValidateBeforeCall(Integer itemReceiptActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemReceiptActivityId' is set
        if (itemReceiptActivityId == null) {
            throw new ApiException("Missing the required parameter 'itemReceiptActivityId' when calling getItemReceiptActivityFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemReceiptActivityFilesCall(itemReceiptActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for an itemReceiptActivity.
     * Get all existing itemReceiptActivity files.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getItemReceiptActivityFiles(Integer itemReceiptActivityId) throws ApiException {
        getItemReceiptActivityFilesWithHttpInfo(itemReceiptActivityId);
    }

    /**
     * Get the files for an itemReceiptActivity.
     * Get all existing itemReceiptActivity files.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getItemReceiptActivityFilesWithHttpInfo(Integer itemReceiptActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getItemReceiptActivityFilesValidateBeforeCall(itemReceiptActivityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for an itemReceiptActivity. (asynchronously)
     * Get all existing itemReceiptActivity files.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemReceiptActivityFilesAsync(Integer itemReceiptActivityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemReceiptActivityFilesValidateBeforeCall(itemReceiptActivityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getItemReceiptActivityTags
     * @param itemReceiptActivityId Id of the itemReceiptActivity to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemReceiptActivityTagsCall(Integer itemReceiptActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemReceiptActivity/{itemReceiptActivityId}/tag"
            .replaceAll("\\{" + "itemReceiptActivityId" + "\\}", apiClient.escapeString(itemReceiptActivityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemReceiptActivityTagsValidateBeforeCall(Integer itemReceiptActivityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemReceiptActivityId' is set
        if (itemReceiptActivityId == null) {
            throw new ApiException("Missing the required parameter 'itemReceiptActivityId' when calling getItemReceiptActivityTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemReceiptActivityTagsCall(itemReceiptActivityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for an itemReceiptActivity.
     * Get all existing itemReceiptActivity tags.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getItemReceiptActivityTags(Integer itemReceiptActivityId) throws ApiException {
        getItemReceiptActivityTagsWithHttpInfo(itemReceiptActivityId);
    }

    /**
     * Get the tags for an itemReceiptActivity.
     * Get all existing itemReceiptActivity tags.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getItemReceiptActivityTagsWithHttpInfo(Integer itemReceiptActivityId) throws ApiException {
        com.squareup.okhttp.Call call = getItemReceiptActivityTagsValidateBeforeCall(itemReceiptActivityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for an itemReceiptActivity. (asynchronously)
     * Get all existing itemReceiptActivity tags.
     * @param itemReceiptActivityId Id of the itemReceiptActivity to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemReceiptActivityTagsAsync(Integer itemReceiptActivityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemReceiptActivityTagsValidateBeforeCall(itemReceiptActivityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateItemReceiptActivity
     * @param body ItemReceiptActivity to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateItemReceiptActivityCall(ItemReceiptActivity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/itemReceiptActivity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateItemReceiptActivityValidateBeforeCall(ItemReceiptActivity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateItemReceiptActivity(Async)");
        }
        

        com.squareup.okhttp.Call call = updateItemReceiptActivityCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an itemReceiptActivity
     * Updates an existing itemReceiptActivity using the specified data.
     * @param body ItemReceiptActivity to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateItemReceiptActivity(ItemReceiptActivity body) throws ApiException {
        updateItemReceiptActivityWithHttpInfo(body);
    }

    /**
     * Update an itemReceiptActivity
     * Updates an existing itemReceiptActivity using the specified data.
     * @param body ItemReceiptActivity to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateItemReceiptActivityWithHttpInfo(ItemReceiptActivity body) throws ApiException {
        com.squareup.okhttp.Call call = updateItemReceiptActivityValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an itemReceiptActivity (asynchronously)
     * Updates an existing itemReceiptActivity using the specified data.
     * @param body ItemReceiptActivity to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateItemReceiptActivityAsync(ItemReceiptActivity body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateItemReceiptActivityValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
