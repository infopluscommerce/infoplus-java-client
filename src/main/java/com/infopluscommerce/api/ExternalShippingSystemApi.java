/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ExternalShippingSystem;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExternalShippingSystemApi {
    private ApiClient apiClient;

    public ExternalShippingSystemApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExternalShippingSystemApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addExternalShippingSystem
     * @param body ExternalShippingSystem to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addExternalShippingSystemCall(ExternalShippingSystem body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/externalShippingSystem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addExternalShippingSystemValidateBeforeCall(ExternalShippingSystem body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addExternalShippingSystem(Async)");
        }
        

        com.squareup.okhttp.Call call = addExternalShippingSystemCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an externalShippingSystem
     * Inserts a new externalShippingSystem using the specified data.
     * @param body ExternalShippingSystem to be inserted. (required)
     * @return ExternalShippingSystem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExternalShippingSystem addExternalShippingSystem(ExternalShippingSystem body) throws ApiException {
        ApiResponse<ExternalShippingSystem> resp = addExternalShippingSystemWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create an externalShippingSystem
     * Inserts a new externalShippingSystem using the specified data.
     * @param body ExternalShippingSystem to be inserted. (required)
     * @return ApiResponse&lt;ExternalShippingSystem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExternalShippingSystem> addExternalShippingSystemWithHttpInfo(ExternalShippingSystem body) throws ApiException {
        com.squareup.okhttp.Call call = addExternalShippingSystemValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ExternalShippingSystem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an externalShippingSystem (asynchronously)
     * Inserts a new externalShippingSystem using the specified data.
     * @param body ExternalShippingSystem to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addExternalShippingSystemAsync(ExternalShippingSystem body, final ApiCallback<ExternalShippingSystem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addExternalShippingSystemValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExternalShippingSystem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addExternalShippingSystemAudit
     * @param externalShippingSystemId Id of the externalShippingSystem to add an audit to (required)
     * @param externalShippingSystemAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addExternalShippingSystemAuditCall(Integer externalShippingSystemId, String externalShippingSystemAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/externalShippingSystem/{externalShippingSystemId}/audit/{externalShippingSystemAudit}"
            .replaceAll("\\{" + "externalShippingSystemId" + "\\}", apiClient.escapeString(externalShippingSystemId.toString()))
            .replaceAll("\\{" + "externalShippingSystemAudit" + "\\}", apiClient.escapeString(externalShippingSystemAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addExternalShippingSystemAuditValidateBeforeCall(Integer externalShippingSystemId, String externalShippingSystemAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'externalShippingSystemId' is set
        if (externalShippingSystemId == null) {
            throw new ApiException("Missing the required parameter 'externalShippingSystemId' when calling addExternalShippingSystemAudit(Async)");
        }
        
        // verify the required parameter 'externalShippingSystemAudit' is set
        if (externalShippingSystemAudit == null) {
            throw new ApiException("Missing the required parameter 'externalShippingSystemAudit' when calling addExternalShippingSystemAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addExternalShippingSystemAuditCall(externalShippingSystemId, externalShippingSystemAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for an externalShippingSystem
     * Adds an audit to an existing externalShippingSystem.
     * @param externalShippingSystemId Id of the externalShippingSystem to add an audit to (required)
     * @param externalShippingSystemAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addExternalShippingSystemAudit(Integer externalShippingSystemId, String externalShippingSystemAudit) throws ApiException {
        addExternalShippingSystemAuditWithHttpInfo(externalShippingSystemId, externalShippingSystemAudit);
    }

    /**
     * Add new audit for an externalShippingSystem
     * Adds an audit to an existing externalShippingSystem.
     * @param externalShippingSystemId Id of the externalShippingSystem to add an audit to (required)
     * @param externalShippingSystemAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addExternalShippingSystemAuditWithHttpInfo(Integer externalShippingSystemId, String externalShippingSystemAudit) throws ApiException {
        com.squareup.okhttp.Call call = addExternalShippingSystemAuditValidateBeforeCall(externalShippingSystemId, externalShippingSystemAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for an externalShippingSystem (asynchronously)
     * Adds an audit to an existing externalShippingSystem.
     * @param externalShippingSystemId Id of the externalShippingSystem to add an audit to (required)
     * @param externalShippingSystemAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addExternalShippingSystemAuditAsync(Integer externalShippingSystemId, String externalShippingSystemAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addExternalShippingSystemAuditValidateBeforeCall(externalShippingSystemId, externalShippingSystemAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addExternalShippingSystemFile
     * @param externalShippingSystemId Id of the externalShippingSystem to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addExternalShippingSystemFileCall(Integer externalShippingSystemId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/externalShippingSystem/{externalShippingSystemId}/file/{fileName}"
            .replaceAll("\\{" + "externalShippingSystemId" + "\\}", apiClient.escapeString(externalShippingSystemId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addExternalShippingSystemFileValidateBeforeCall(Integer externalShippingSystemId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'externalShippingSystemId' is set
        if (externalShippingSystemId == null) {
            throw new ApiException("Missing the required parameter 'externalShippingSystemId' when calling addExternalShippingSystemFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addExternalShippingSystemFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addExternalShippingSystemFileCall(externalShippingSystemId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an externalShippingSystem
     * Adds a file to an existing externalShippingSystem.
     * @param externalShippingSystemId Id of the externalShippingSystem to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addExternalShippingSystemFile(Integer externalShippingSystemId, String fileName) throws ApiException {
        addExternalShippingSystemFileWithHttpInfo(externalShippingSystemId, fileName);
    }

    /**
     * Attach a file to an externalShippingSystem
     * Adds a file to an existing externalShippingSystem.
     * @param externalShippingSystemId Id of the externalShippingSystem to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addExternalShippingSystemFileWithHttpInfo(Integer externalShippingSystemId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addExternalShippingSystemFileValidateBeforeCall(externalShippingSystemId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an externalShippingSystem (asynchronously)
     * Adds a file to an existing externalShippingSystem.
     * @param externalShippingSystemId Id of the externalShippingSystem to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addExternalShippingSystemFileAsync(Integer externalShippingSystemId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addExternalShippingSystemFileValidateBeforeCall(externalShippingSystemId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addExternalShippingSystemFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param externalShippingSystemId Id of the externalShippingSystem to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addExternalShippingSystemFileByURLCall(RecordFile body, Integer externalShippingSystemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/externalShippingSystem/{externalShippingSystemId}/file"
            .replaceAll("\\{" + "externalShippingSystemId" + "\\}", apiClient.escapeString(externalShippingSystemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addExternalShippingSystemFileByURLValidateBeforeCall(RecordFile body, Integer externalShippingSystemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addExternalShippingSystemFileByURL(Async)");
        }
        
        // verify the required parameter 'externalShippingSystemId' is set
        if (externalShippingSystemId == null) {
            throw new ApiException("Missing the required parameter 'externalShippingSystemId' when calling addExternalShippingSystemFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addExternalShippingSystemFileByURLCall(body, externalShippingSystemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an externalShippingSystem by URL.
     * Adds a file to an existing externalShippingSystem by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param externalShippingSystemId Id of the externalShippingSystem to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addExternalShippingSystemFileByURL(RecordFile body, Integer externalShippingSystemId) throws ApiException {
        addExternalShippingSystemFileByURLWithHttpInfo(body, externalShippingSystemId);
    }

    /**
     * Attach a file to an externalShippingSystem by URL.
     * Adds a file to an existing externalShippingSystem by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param externalShippingSystemId Id of the externalShippingSystem to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addExternalShippingSystemFileByURLWithHttpInfo(RecordFile body, Integer externalShippingSystemId) throws ApiException {
        com.squareup.okhttp.Call call = addExternalShippingSystemFileByURLValidateBeforeCall(body, externalShippingSystemId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an externalShippingSystem by URL. (asynchronously)
     * Adds a file to an existing externalShippingSystem by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param externalShippingSystemId Id of the externalShippingSystem to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addExternalShippingSystemFileByURLAsync(RecordFile body, Integer externalShippingSystemId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addExternalShippingSystemFileByURLValidateBeforeCall(body, externalShippingSystemId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addExternalShippingSystemTag
     * @param externalShippingSystemId Id of the externalShippingSystem to add a tag to (required)
     * @param externalShippingSystemTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addExternalShippingSystemTagCall(Integer externalShippingSystemId, String externalShippingSystemTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/externalShippingSystem/{externalShippingSystemId}/tag/{externalShippingSystemTag}"
            .replaceAll("\\{" + "externalShippingSystemId" + "\\}", apiClient.escapeString(externalShippingSystemId.toString()))
            .replaceAll("\\{" + "externalShippingSystemTag" + "\\}", apiClient.escapeString(externalShippingSystemTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addExternalShippingSystemTagValidateBeforeCall(Integer externalShippingSystemId, String externalShippingSystemTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'externalShippingSystemId' is set
        if (externalShippingSystemId == null) {
            throw new ApiException("Missing the required parameter 'externalShippingSystemId' when calling addExternalShippingSystemTag(Async)");
        }
        
        // verify the required parameter 'externalShippingSystemTag' is set
        if (externalShippingSystemTag == null) {
            throw new ApiException("Missing the required parameter 'externalShippingSystemTag' when calling addExternalShippingSystemTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addExternalShippingSystemTagCall(externalShippingSystemId, externalShippingSystemTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for an externalShippingSystem.
     * Adds a tag to an existing externalShippingSystem.
     * @param externalShippingSystemId Id of the externalShippingSystem to add a tag to (required)
     * @param externalShippingSystemTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addExternalShippingSystemTag(Integer externalShippingSystemId, String externalShippingSystemTag) throws ApiException {
        addExternalShippingSystemTagWithHttpInfo(externalShippingSystemId, externalShippingSystemTag);
    }

    /**
     * Add new tags for an externalShippingSystem.
     * Adds a tag to an existing externalShippingSystem.
     * @param externalShippingSystemId Id of the externalShippingSystem to add a tag to (required)
     * @param externalShippingSystemTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addExternalShippingSystemTagWithHttpInfo(Integer externalShippingSystemId, String externalShippingSystemTag) throws ApiException {
        com.squareup.okhttp.Call call = addExternalShippingSystemTagValidateBeforeCall(externalShippingSystemId, externalShippingSystemTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for an externalShippingSystem. (asynchronously)
     * Adds a tag to an existing externalShippingSystem.
     * @param externalShippingSystemId Id of the externalShippingSystem to add a tag to (required)
     * @param externalShippingSystemTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addExternalShippingSystemTagAsync(Integer externalShippingSystemId, String externalShippingSystemTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addExternalShippingSystemTagValidateBeforeCall(externalShippingSystemId, externalShippingSystemTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteExternalShippingSystem
     * @param externalShippingSystemId Id of the externalShippingSystem to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteExternalShippingSystemCall(Integer externalShippingSystemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/externalShippingSystem/{externalShippingSystemId}"
            .replaceAll("\\{" + "externalShippingSystemId" + "\\}", apiClient.escapeString(externalShippingSystemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteExternalShippingSystemValidateBeforeCall(Integer externalShippingSystemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'externalShippingSystemId' is set
        if (externalShippingSystemId == null) {
            throw new ApiException("Missing the required parameter 'externalShippingSystemId' when calling deleteExternalShippingSystem(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteExternalShippingSystemCall(externalShippingSystemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an externalShippingSystem
     * Deletes the externalShippingSystem identified by the specified id.
     * @param externalShippingSystemId Id of the externalShippingSystem to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteExternalShippingSystem(Integer externalShippingSystemId) throws ApiException {
        deleteExternalShippingSystemWithHttpInfo(externalShippingSystemId);
    }

    /**
     * Delete an externalShippingSystem
     * Deletes the externalShippingSystem identified by the specified id.
     * @param externalShippingSystemId Id of the externalShippingSystem to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteExternalShippingSystemWithHttpInfo(Integer externalShippingSystemId) throws ApiException {
        com.squareup.okhttp.Call call = deleteExternalShippingSystemValidateBeforeCall(externalShippingSystemId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an externalShippingSystem (asynchronously)
     * Deletes the externalShippingSystem identified by the specified id.
     * @param externalShippingSystemId Id of the externalShippingSystem to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteExternalShippingSystemAsync(Integer externalShippingSystemId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteExternalShippingSystemValidateBeforeCall(externalShippingSystemId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteExternalShippingSystemFile
     * @param externalShippingSystemId Id of the externalShippingSystem to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteExternalShippingSystemFileCall(Integer externalShippingSystemId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/externalShippingSystem/{externalShippingSystemId}/file/{fileId}"
            .replaceAll("\\{" + "externalShippingSystemId" + "\\}", apiClient.escapeString(externalShippingSystemId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteExternalShippingSystemFileValidateBeforeCall(Integer externalShippingSystemId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'externalShippingSystemId' is set
        if (externalShippingSystemId == null) {
            throw new ApiException("Missing the required parameter 'externalShippingSystemId' when calling deleteExternalShippingSystemFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteExternalShippingSystemFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteExternalShippingSystemFileCall(externalShippingSystemId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for an externalShippingSystem.
     * Deletes an existing externalShippingSystem file using the specified data.
     * @param externalShippingSystemId Id of the externalShippingSystem to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteExternalShippingSystemFile(Integer externalShippingSystemId, Integer fileId) throws ApiException {
        deleteExternalShippingSystemFileWithHttpInfo(externalShippingSystemId, fileId);
    }

    /**
     * Delete a file for an externalShippingSystem.
     * Deletes an existing externalShippingSystem file using the specified data.
     * @param externalShippingSystemId Id of the externalShippingSystem to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteExternalShippingSystemFileWithHttpInfo(Integer externalShippingSystemId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteExternalShippingSystemFileValidateBeforeCall(externalShippingSystemId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for an externalShippingSystem. (asynchronously)
     * Deletes an existing externalShippingSystem file using the specified data.
     * @param externalShippingSystemId Id of the externalShippingSystem to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteExternalShippingSystemFileAsync(Integer externalShippingSystemId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteExternalShippingSystemFileValidateBeforeCall(externalShippingSystemId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteExternalShippingSystemTag
     * @param externalShippingSystemId Id of the externalShippingSystem to remove tag from (required)
     * @param externalShippingSystemTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteExternalShippingSystemTagCall(Integer externalShippingSystemId, String externalShippingSystemTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/externalShippingSystem/{externalShippingSystemId}/tag/{externalShippingSystemTag}"
            .replaceAll("\\{" + "externalShippingSystemId" + "\\}", apiClient.escapeString(externalShippingSystemId.toString()))
            .replaceAll("\\{" + "externalShippingSystemTag" + "\\}", apiClient.escapeString(externalShippingSystemTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteExternalShippingSystemTagValidateBeforeCall(Integer externalShippingSystemId, String externalShippingSystemTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'externalShippingSystemId' is set
        if (externalShippingSystemId == null) {
            throw new ApiException("Missing the required parameter 'externalShippingSystemId' when calling deleteExternalShippingSystemTag(Async)");
        }
        
        // verify the required parameter 'externalShippingSystemTag' is set
        if (externalShippingSystemTag == null) {
            throw new ApiException("Missing the required parameter 'externalShippingSystemTag' when calling deleteExternalShippingSystemTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteExternalShippingSystemTagCall(externalShippingSystemId, externalShippingSystemTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for an externalShippingSystem.
     * Deletes an existing externalShippingSystem tag using the specified data.
     * @param externalShippingSystemId Id of the externalShippingSystem to remove tag from (required)
     * @param externalShippingSystemTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteExternalShippingSystemTag(Integer externalShippingSystemId, String externalShippingSystemTag) throws ApiException {
        deleteExternalShippingSystemTagWithHttpInfo(externalShippingSystemId, externalShippingSystemTag);
    }

    /**
     * Delete a tag for an externalShippingSystem.
     * Deletes an existing externalShippingSystem tag using the specified data.
     * @param externalShippingSystemId Id of the externalShippingSystem to remove tag from (required)
     * @param externalShippingSystemTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteExternalShippingSystemTagWithHttpInfo(Integer externalShippingSystemId, String externalShippingSystemTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteExternalShippingSystemTagValidateBeforeCall(externalShippingSystemId, externalShippingSystemTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for an externalShippingSystem. (asynchronously)
     * Deletes an existing externalShippingSystem tag using the specified data.
     * @param externalShippingSystemId Id of the externalShippingSystem to remove tag from (required)
     * @param externalShippingSystemTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteExternalShippingSystemTagAsync(Integer externalShippingSystemId, String externalShippingSystemTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteExternalShippingSystemTagValidateBeforeCall(externalShippingSystemId, externalShippingSystemTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateExternalShippingSystemById
     * @param externalShippingSystemId Id of the externalShippingSystem to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateExternalShippingSystemByIdCall(Integer externalShippingSystemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/externalShippingSystem/duplicate/{externalShippingSystemId}"
            .replaceAll("\\{" + "externalShippingSystemId" + "\\}", apiClient.escapeString(externalShippingSystemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateExternalShippingSystemByIdValidateBeforeCall(Integer externalShippingSystemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'externalShippingSystemId' is set
        if (externalShippingSystemId == null) {
            throw new ApiException("Missing the required parameter 'externalShippingSystemId' when calling getDuplicateExternalShippingSystemById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateExternalShippingSystemByIdCall(externalShippingSystemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated an externalShippingSystem by id
     * Returns a duplicated externalShippingSystem identified by the specified id.
     * @param externalShippingSystemId Id of the externalShippingSystem to be duplicated. (required)
     * @return ExternalShippingSystem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExternalShippingSystem getDuplicateExternalShippingSystemById(Integer externalShippingSystemId) throws ApiException {
        ApiResponse<ExternalShippingSystem> resp = getDuplicateExternalShippingSystemByIdWithHttpInfo(externalShippingSystemId);
        return resp.getData();
    }

    /**
     * Get a duplicated an externalShippingSystem by id
     * Returns a duplicated externalShippingSystem identified by the specified id.
     * @param externalShippingSystemId Id of the externalShippingSystem to be duplicated. (required)
     * @return ApiResponse&lt;ExternalShippingSystem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExternalShippingSystem> getDuplicateExternalShippingSystemByIdWithHttpInfo(Integer externalShippingSystemId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateExternalShippingSystemByIdValidateBeforeCall(externalShippingSystemId, null, null);
        Type localVarReturnType = new TypeToken<ExternalShippingSystem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated an externalShippingSystem by id (asynchronously)
     * Returns a duplicated externalShippingSystem identified by the specified id.
     * @param externalShippingSystemId Id of the externalShippingSystem to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateExternalShippingSystemByIdAsync(Integer externalShippingSystemId, final ApiCallback<ExternalShippingSystem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateExternalShippingSystemByIdValidateBeforeCall(externalShippingSystemId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExternalShippingSystem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExternalShippingSystemByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExternalShippingSystemByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/externalShippingSystem/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExternalShippingSystemByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getExternalShippingSystemByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search externalShippingSystems by filter
     * Returns the list of externalShippingSystems that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;ExternalShippingSystem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ExternalShippingSystem> getExternalShippingSystemByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<ExternalShippingSystem>> resp = getExternalShippingSystemByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search externalShippingSystems by filter
     * Returns the list of externalShippingSystems that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;ExternalShippingSystem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ExternalShippingSystem>> getExternalShippingSystemByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getExternalShippingSystemByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<ExternalShippingSystem>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search externalShippingSystems by filter (asynchronously)
     * Returns the list of externalShippingSystems that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExternalShippingSystemByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<ExternalShippingSystem>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExternalShippingSystemByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ExternalShippingSystem>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExternalShippingSystemById
     * @param externalShippingSystemId Id of the externalShippingSystem to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExternalShippingSystemByIdCall(Integer externalShippingSystemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/externalShippingSystem/{externalShippingSystemId}"
            .replaceAll("\\{" + "externalShippingSystemId" + "\\}", apiClient.escapeString(externalShippingSystemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExternalShippingSystemByIdValidateBeforeCall(Integer externalShippingSystemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'externalShippingSystemId' is set
        if (externalShippingSystemId == null) {
            throw new ApiException("Missing the required parameter 'externalShippingSystemId' when calling getExternalShippingSystemById(Async)");
        }
        

        com.squareup.okhttp.Call call = getExternalShippingSystemByIdCall(externalShippingSystemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an externalShippingSystem by id
     * Returns the externalShippingSystem identified by the specified id.
     * @param externalShippingSystemId Id of the externalShippingSystem to be returned. (required)
     * @return ExternalShippingSystem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExternalShippingSystem getExternalShippingSystemById(Integer externalShippingSystemId) throws ApiException {
        ApiResponse<ExternalShippingSystem> resp = getExternalShippingSystemByIdWithHttpInfo(externalShippingSystemId);
        return resp.getData();
    }

    /**
     * Get an externalShippingSystem by id
     * Returns the externalShippingSystem identified by the specified id.
     * @param externalShippingSystemId Id of the externalShippingSystem to be returned. (required)
     * @return ApiResponse&lt;ExternalShippingSystem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExternalShippingSystem> getExternalShippingSystemByIdWithHttpInfo(Integer externalShippingSystemId) throws ApiException {
        com.squareup.okhttp.Call call = getExternalShippingSystemByIdValidateBeforeCall(externalShippingSystemId, null, null);
        Type localVarReturnType = new TypeToken<ExternalShippingSystem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an externalShippingSystem by id (asynchronously)
     * Returns the externalShippingSystem identified by the specified id.
     * @param externalShippingSystemId Id of the externalShippingSystem to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExternalShippingSystemByIdAsync(Integer externalShippingSystemId, final ApiCallback<ExternalShippingSystem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExternalShippingSystemByIdValidateBeforeCall(externalShippingSystemId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExternalShippingSystem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExternalShippingSystemFiles
     * @param externalShippingSystemId Id of the externalShippingSystem to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExternalShippingSystemFilesCall(Integer externalShippingSystemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/externalShippingSystem/{externalShippingSystemId}/file"
            .replaceAll("\\{" + "externalShippingSystemId" + "\\}", apiClient.escapeString(externalShippingSystemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExternalShippingSystemFilesValidateBeforeCall(Integer externalShippingSystemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'externalShippingSystemId' is set
        if (externalShippingSystemId == null) {
            throw new ApiException("Missing the required parameter 'externalShippingSystemId' when calling getExternalShippingSystemFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getExternalShippingSystemFilesCall(externalShippingSystemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for an externalShippingSystem.
     * Get all existing externalShippingSystem files.
     * @param externalShippingSystemId Id of the externalShippingSystem to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getExternalShippingSystemFiles(Integer externalShippingSystemId) throws ApiException {
        getExternalShippingSystemFilesWithHttpInfo(externalShippingSystemId);
    }

    /**
     * Get the files for an externalShippingSystem.
     * Get all existing externalShippingSystem files.
     * @param externalShippingSystemId Id of the externalShippingSystem to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getExternalShippingSystemFilesWithHttpInfo(Integer externalShippingSystemId) throws ApiException {
        com.squareup.okhttp.Call call = getExternalShippingSystemFilesValidateBeforeCall(externalShippingSystemId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for an externalShippingSystem. (asynchronously)
     * Get all existing externalShippingSystem files.
     * @param externalShippingSystemId Id of the externalShippingSystem to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExternalShippingSystemFilesAsync(Integer externalShippingSystemId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExternalShippingSystemFilesValidateBeforeCall(externalShippingSystemId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getExternalShippingSystemTags
     * @param externalShippingSystemId Id of the externalShippingSystem to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExternalShippingSystemTagsCall(Integer externalShippingSystemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/externalShippingSystem/{externalShippingSystemId}/tag"
            .replaceAll("\\{" + "externalShippingSystemId" + "\\}", apiClient.escapeString(externalShippingSystemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExternalShippingSystemTagsValidateBeforeCall(Integer externalShippingSystemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'externalShippingSystemId' is set
        if (externalShippingSystemId == null) {
            throw new ApiException("Missing the required parameter 'externalShippingSystemId' when calling getExternalShippingSystemTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getExternalShippingSystemTagsCall(externalShippingSystemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for an externalShippingSystem.
     * Get all existing externalShippingSystem tags.
     * @param externalShippingSystemId Id of the externalShippingSystem to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getExternalShippingSystemTags(Integer externalShippingSystemId) throws ApiException {
        getExternalShippingSystemTagsWithHttpInfo(externalShippingSystemId);
    }

    /**
     * Get the tags for an externalShippingSystem.
     * Get all existing externalShippingSystem tags.
     * @param externalShippingSystemId Id of the externalShippingSystem to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getExternalShippingSystemTagsWithHttpInfo(Integer externalShippingSystemId) throws ApiException {
        com.squareup.okhttp.Call call = getExternalShippingSystemTagsValidateBeforeCall(externalShippingSystemId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for an externalShippingSystem. (asynchronously)
     * Get all existing externalShippingSystem tags.
     * @param externalShippingSystemId Id of the externalShippingSystem to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExternalShippingSystemTagsAsync(Integer externalShippingSystemId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExternalShippingSystemTagsValidateBeforeCall(externalShippingSystemId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateExternalShippingSystem
     * @param body ExternalShippingSystem to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateExternalShippingSystemCall(ExternalShippingSystem body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/externalShippingSystem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateExternalShippingSystemValidateBeforeCall(ExternalShippingSystem body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateExternalShippingSystem(Async)");
        }
        

        com.squareup.okhttp.Call call = updateExternalShippingSystemCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an externalShippingSystem
     * Updates an existing externalShippingSystem using the specified data.
     * @param body ExternalShippingSystem to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateExternalShippingSystem(ExternalShippingSystem body) throws ApiException {
        updateExternalShippingSystemWithHttpInfo(body);
    }

    /**
     * Update an externalShippingSystem
     * Updates an existing externalShippingSystem using the specified data.
     * @param body ExternalShippingSystem to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateExternalShippingSystemWithHttpInfo(ExternalShippingSystem body) throws ApiException {
        com.squareup.okhttp.Call call = updateExternalShippingSystemValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an externalShippingSystem (asynchronously)
     * Updates an existing externalShippingSystem using the specified data.
     * @param body ExternalShippingSystem to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateExternalShippingSystemAsync(ExternalShippingSystem body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateExternalShippingSystemValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateExternalShippingSystemCustomFields
     * @param body ExternalShippingSystem to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateExternalShippingSystemCustomFieldsCall(ExternalShippingSystem body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/externalShippingSystem/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateExternalShippingSystemCustomFieldsValidateBeforeCall(ExternalShippingSystem body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateExternalShippingSystemCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateExternalShippingSystemCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an externalShippingSystem custom fields
     * Updates an existing externalShippingSystem custom fields using the specified data.
     * @param body ExternalShippingSystem to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateExternalShippingSystemCustomFields(ExternalShippingSystem body) throws ApiException {
        updateExternalShippingSystemCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update an externalShippingSystem custom fields
     * Updates an existing externalShippingSystem custom fields using the specified data.
     * @param body ExternalShippingSystem to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateExternalShippingSystemCustomFieldsWithHttpInfo(ExternalShippingSystem body) throws ApiException {
        com.squareup.okhttp.Call call = updateExternalShippingSystemCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an externalShippingSystem custom fields (asynchronously)
     * Updates an existing externalShippingSystem custom fields using the specified data.
     * @param body ExternalShippingSystem to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateExternalShippingSystemCustomFieldsAsync(ExternalShippingSystem body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateExternalShippingSystemCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
