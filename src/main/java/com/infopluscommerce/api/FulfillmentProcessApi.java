/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.FulfillmentProcess;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FulfillmentProcessApi {
    private ApiClient apiClient;

    public FulfillmentProcessApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FulfillmentProcessApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addFulfillmentProcessAudit
     * @param fulfillmentProcessId Id of the fulfillmentProcess to add an audit to (required)
     * @param fulfillmentProcessAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentProcessAuditCall(Integer fulfillmentProcessId, String fulfillmentProcessAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentProcess/{fulfillmentProcessId}/audit/{fulfillmentProcessAudit}"
            .replaceAll("\\{" + "fulfillmentProcessId" + "\\}", apiClient.escapeString(fulfillmentProcessId.toString()))
            .replaceAll("\\{" + "fulfillmentProcessAudit" + "\\}", apiClient.escapeString(fulfillmentProcessAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFulfillmentProcessAuditValidateBeforeCall(Integer fulfillmentProcessId, String fulfillmentProcessAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentProcessId' is set
        if (fulfillmentProcessId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentProcessId' when calling addFulfillmentProcessAudit(Async)");
        }
        
        // verify the required parameter 'fulfillmentProcessAudit' is set
        if (fulfillmentProcessAudit == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentProcessAudit' when calling addFulfillmentProcessAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addFulfillmentProcessAuditCall(fulfillmentProcessId, fulfillmentProcessAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a fulfillmentProcess
     * Adds an audit to an existing fulfillmentProcess.
     * @param fulfillmentProcessId Id of the fulfillmentProcess to add an audit to (required)
     * @param fulfillmentProcessAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addFulfillmentProcessAudit(Integer fulfillmentProcessId, String fulfillmentProcessAudit) throws ApiException {
        addFulfillmentProcessAuditWithHttpInfo(fulfillmentProcessId, fulfillmentProcessAudit);
    }

    /**
     * Add new audit for a fulfillmentProcess
     * Adds an audit to an existing fulfillmentProcess.
     * @param fulfillmentProcessId Id of the fulfillmentProcess to add an audit to (required)
     * @param fulfillmentProcessAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addFulfillmentProcessAuditWithHttpInfo(Integer fulfillmentProcessId, String fulfillmentProcessAudit) throws ApiException {
        com.squareup.okhttp.Call call = addFulfillmentProcessAuditValidateBeforeCall(fulfillmentProcessId, fulfillmentProcessAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a fulfillmentProcess (asynchronously)
     * Adds an audit to an existing fulfillmentProcess.
     * @param fulfillmentProcessId Id of the fulfillmentProcess to add an audit to (required)
     * @param fulfillmentProcessAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentProcessAuditAsync(Integer fulfillmentProcessId, String fulfillmentProcessAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFulfillmentProcessAuditValidateBeforeCall(fulfillmentProcessId, fulfillmentProcessAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addFulfillmentProcessFile
     * @param fulfillmentProcessId Id of the fulfillmentProcess to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentProcessFileCall(Integer fulfillmentProcessId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentProcess/{fulfillmentProcessId}/file/{fileName}"
            .replaceAll("\\{" + "fulfillmentProcessId" + "\\}", apiClient.escapeString(fulfillmentProcessId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFulfillmentProcessFileValidateBeforeCall(Integer fulfillmentProcessId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentProcessId' is set
        if (fulfillmentProcessId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentProcessId' when calling addFulfillmentProcessFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addFulfillmentProcessFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addFulfillmentProcessFileCall(fulfillmentProcessId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a fulfillmentProcess
     * Adds a file to an existing fulfillmentProcess.
     * @param fulfillmentProcessId Id of the fulfillmentProcess to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addFulfillmentProcessFile(Integer fulfillmentProcessId, String fileName) throws ApiException {
        addFulfillmentProcessFileWithHttpInfo(fulfillmentProcessId, fileName);
    }

    /**
     * Attach a file to a fulfillmentProcess
     * Adds a file to an existing fulfillmentProcess.
     * @param fulfillmentProcessId Id of the fulfillmentProcess to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addFulfillmentProcessFileWithHttpInfo(Integer fulfillmentProcessId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addFulfillmentProcessFileValidateBeforeCall(fulfillmentProcessId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a fulfillmentProcess (asynchronously)
     * Adds a file to an existing fulfillmentProcess.
     * @param fulfillmentProcessId Id of the fulfillmentProcess to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentProcessFileAsync(Integer fulfillmentProcessId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFulfillmentProcessFileValidateBeforeCall(fulfillmentProcessId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addFulfillmentProcessFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param fulfillmentProcessId Id of the fulfillmentProcess to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentProcessFileByURLCall(RecordFile body, Integer fulfillmentProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentProcess/{fulfillmentProcessId}/file"
            .replaceAll("\\{" + "fulfillmentProcessId" + "\\}", apiClient.escapeString(fulfillmentProcessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFulfillmentProcessFileByURLValidateBeforeCall(RecordFile body, Integer fulfillmentProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addFulfillmentProcessFileByURL(Async)");
        }
        
        // verify the required parameter 'fulfillmentProcessId' is set
        if (fulfillmentProcessId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentProcessId' when calling addFulfillmentProcessFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addFulfillmentProcessFileByURLCall(body, fulfillmentProcessId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a fulfillmentProcess by URL.
     * Adds a file to an existing fulfillmentProcess by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param fulfillmentProcessId Id of the fulfillmentProcess to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addFulfillmentProcessFileByURL(RecordFile body, Integer fulfillmentProcessId) throws ApiException {
        addFulfillmentProcessFileByURLWithHttpInfo(body, fulfillmentProcessId);
    }

    /**
     * Attach a file to a fulfillmentProcess by URL.
     * Adds a file to an existing fulfillmentProcess by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param fulfillmentProcessId Id of the fulfillmentProcess to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addFulfillmentProcessFileByURLWithHttpInfo(RecordFile body, Integer fulfillmentProcessId) throws ApiException {
        com.squareup.okhttp.Call call = addFulfillmentProcessFileByURLValidateBeforeCall(body, fulfillmentProcessId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a fulfillmentProcess by URL. (asynchronously)
     * Adds a file to an existing fulfillmentProcess by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param fulfillmentProcessId Id of the fulfillmentProcess to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentProcessFileByURLAsync(RecordFile body, Integer fulfillmentProcessId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFulfillmentProcessFileByURLValidateBeforeCall(body, fulfillmentProcessId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addFulfillmentProcessTag
     * @param fulfillmentProcessId Id of the fulfillmentProcess to add a tag to (required)
     * @param fulfillmentProcessTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentProcessTagCall(Integer fulfillmentProcessId, String fulfillmentProcessTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentProcess/{fulfillmentProcessId}/tag/{fulfillmentProcessTag}"
            .replaceAll("\\{" + "fulfillmentProcessId" + "\\}", apiClient.escapeString(fulfillmentProcessId.toString()))
            .replaceAll("\\{" + "fulfillmentProcessTag" + "\\}", apiClient.escapeString(fulfillmentProcessTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFulfillmentProcessTagValidateBeforeCall(Integer fulfillmentProcessId, String fulfillmentProcessTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentProcessId' is set
        if (fulfillmentProcessId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentProcessId' when calling addFulfillmentProcessTag(Async)");
        }
        
        // verify the required parameter 'fulfillmentProcessTag' is set
        if (fulfillmentProcessTag == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentProcessTag' when calling addFulfillmentProcessTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addFulfillmentProcessTagCall(fulfillmentProcessId, fulfillmentProcessTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a fulfillmentProcess.
     * Adds a tag to an existing fulfillmentProcess.
     * @param fulfillmentProcessId Id of the fulfillmentProcess to add a tag to (required)
     * @param fulfillmentProcessTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addFulfillmentProcessTag(Integer fulfillmentProcessId, String fulfillmentProcessTag) throws ApiException {
        addFulfillmentProcessTagWithHttpInfo(fulfillmentProcessId, fulfillmentProcessTag);
    }

    /**
     * Add new tags for a fulfillmentProcess.
     * Adds a tag to an existing fulfillmentProcess.
     * @param fulfillmentProcessId Id of the fulfillmentProcess to add a tag to (required)
     * @param fulfillmentProcessTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addFulfillmentProcessTagWithHttpInfo(Integer fulfillmentProcessId, String fulfillmentProcessTag) throws ApiException {
        com.squareup.okhttp.Call call = addFulfillmentProcessTagValidateBeforeCall(fulfillmentProcessId, fulfillmentProcessTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a fulfillmentProcess. (asynchronously)
     * Adds a tag to an existing fulfillmentProcess.
     * @param fulfillmentProcessId Id of the fulfillmentProcess to add a tag to (required)
     * @param fulfillmentProcessTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentProcessTagAsync(Integer fulfillmentProcessId, String fulfillmentProcessTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFulfillmentProcessTagValidateBeforeCall(fulfillmentProcessId, fulfillmentProcessTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteFulfillmentProcessFile
     * @param fulfillmentProcessId Id of the fulfillmentProcess to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFulfillmentProcessFileCall(Integer fulfillmentProcessId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentProcess/{fulfillmentProcessId}/file/{fileId}"
            .replaceAll("\\{" + "fulfillmentProcessId" + "\\}", apiClient.escapeString(fulfillmentProcessId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFulfillmentProcessFileValidateBeforeCall(Integer fulfillmentProcessId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentProcessId' is set
        if (fulfillmentProcessId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentProcessId' when calling deleteFulfillmentProcessFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteFulfillmentProcessFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFulfillmentProcessFileCall(fulfillmentProcessId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a fulfillmentProcess.
     * Deletes an existing fulfillmentProcess file using the specified data.
     * @param fulfillmentProcessId Id of the fulfillmentProcess to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFulfillmentProcessFile(Integer fulfillmentProcessId, Integer fileId) throws ApiException {
        deleteFulfillmentProcessFileWithHttpInfo(fulfillmentProcessId, fileId);
    }

    /**
     * Delete a file for a fulfillmentProcess.
     * Deletes an existing fulfillmentProcess file using the specified data.
     * @param fulfillmentProcessId Id of the fulfillmentProcess to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFulfillmentProcessFileWithHttpInfo(Integer fulfillmentProcessId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFulfillmentProcessFileValidateBeforeCall(fulfillmentProcessId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a fulfillmentProcess. (asynchronously)
     * Deletes an existing fulfillmentProcess file using the specified data.
     * @param fulfillmentProcessId Id of the fulfillmentProcess to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFulfillmentProcessFileAsync(Integer fulfillmentProcessId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFulfillmentProcessFileValidateBeforeCall(fulfillmentProcessId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteFulfillmentProcessTag
     * @param fulfillmentProcessId Id of the fulfillmentProcess to remove tag from (required)
     * @param fulfillmentProcessTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFulfillmentProcessTagCall(Integer fulfillmentProcessId, String fulfillmentProcessTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentProcess/{fulfillmentProcessId}/tag/{fulfillmentProcessTag}"
            .replaceAll("\\{" + "fulfillmentProcessId" + "\\}", apiClient.escapeString(fulfillmentProcessId.toString()))
            .replaceAll("\\{" + "fulfillmentProcessTag" + "\\}", apiClient.escapeString(fulfillmentProcessTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFulfillmentProcessTagValidateBeforeCall(Integer fulfillmentProcessId, String fulfillmentProcessTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentProcessId' is set
        if (fulfillmentProcessId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentProcessId' when calling deleteFulfillmentProcessTag(Async)");
        }
        
        // verify the required parameter 'fulfillmentProcessTag' is set
        if (fulfillmentProcessTag == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentProcessTag' when calling deleteFulfillmentProcessTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFulfillmentProcessTagCall(fulfillmentProcessId, fulfillmentProcessTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a fulfillmentProcess.
     * Deletes an existing fulfillmentProcess tag using the specified data.
     * @param fulfillmentProcessId Id of the fulfillmentProcess to remove tag from (required)
     * @param fulfillmentProcessTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFulfillmentProcessTag(Integer fulfillmentProcessId, String fulfillmentProcessTag) throws ApiException {
        deleteFulfillmentProcessTagWithHttpInfo(fulfillmentProcessId, fulfillmentProcessTag);
    }

    /**
     * Delete a tag for a fulfillmentProcess.
     * Deletes an existing fulfillmentProcess tag using the specified data.
     * @param fulfillmentProcessId Id of the fulfillmentProcess to remove tag from (required)
     * @param fulfillmentProcessTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFulfillmentProcessTagWithHttpInfo(Integer fulfillmentProcessId, String fulfillmentProcessTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteFulfillmentProcessTagValidateBeforeCall(fulfillmentProcessId, fulfillmentProcessTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a fulfillmentProcess. (asynchronously)
     * Deletes an existing fulfillmentProcess tag using the specified data.
     * @param fulfillmentProcessId Id of the fulfillmentProcess to remove tag from (required)
     * @param fulfillmentProcessTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFulfillmentProcessTagAsync(Integer fulfillmentProcessId, String fulfillmentProcessTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFulfillmentProcessTagValidateBeforeCall(fulfillmentProcessId, fulfillmentProcessTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateFulfillmentProcessById
     * @param fulfillmentProcessId Id of the fulfillmentProcess to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateFulfillmentProcessByIdCall(Integer fulfillmentProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentProcess/duplicate/{fulfillmentProcessId}"
            .replaceAll("\\{" + "fulfillmentProcessId" + "\\}", apiClient.escapeString(fulfillmentProcessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateFulfillmentProcessByIdValidateBeforeCall(Integer fulfillmentProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentProcessId' is set
        if (fulfillmentProcessId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentProcessId' when calling getDuplicateFulfillmentProcessById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateFulfillmentProcessByIdCall(fulfillmentProcessId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a fulfillmentProcess by id
     * Returns a duplicated fulfillmentProcess identified by the specified id.
     * @param fulfillmentProcessId Id of the fulfillmentProcess to be duplicated. (required)
     * @return FulfillmentProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FulfillmentProcess getDuplicateFulfillmentProcessById(Integer fulfillmentProcessId) throws ApiException {
        ApiResponse<FulfillmentProcess> resp = getDuplicateFulfillmentProcessByIdWithHttpInfo(fulfillmentProcessId);
        return resp.getData();
    }

    /**
     * Get a duplicated a fulfillmentProcess by id
     * Returns a duplicated fulfillmentProcess identified by the specified id.
     * @param fulfillmentProcessId Id of the fulfillmentProcess to be duplicated. (required)
     * @return ApiResponse&lt;FulfillmentProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FulfillmentProcess> getDuplicateFulfillmentProcessByIdWithHttpInfo(Integer fulfillmentProcessId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateFulfillmentProcessByIdValidateBeforeCall(fulfillmentProcessId, null, null);
        Type localVarReturnType = new TypeToken<FulfillmentProcess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a fulfillmentProcess by id (asynchronously)
     * Returns a duplicated fulfillmentProcess identified by the specified id.
     * @param fulfillmentProcessId Id of the fulfillmentProcess to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateFulfillmentProcessByIdAsync(Integer fulfillmentProcessId, final ApiCallback<FulfillmentProcess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateFulfillmentProcessByIdValidateBeforeCall(fulfillmentProcessId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FulfillmentProcess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFulfillmentProcessByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentProcessByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentProcess/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFulfillmentProcessByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getFulfillmentProcessByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search fulfillmentProcesses by filter
     * Returns the list of fulfillmentProcesses that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;FulfillmentProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FulfillmentProcess> getFulfillmentProcessByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<FulfillmentProcess>> resp = getFulfillmentProcessByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search fulfillmentProcesses by filter
     * Returns the list of fulfillmentProcesses that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;FulfillmentProcess&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FulfillmentProcess>> getFulfillmentProcessByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getFulfillmentProcessByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<FulfillmentProcess>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search fulfillmentProcesses by filter (asynchronously)
     * Returns the list of fulfillmentProcesses that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentProcessByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<FulfillmentProcess>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFulfillmentProcessByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FulfillmentProcess>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFulfillmentProcessById
     * @param fulfillmentProcessId Id of the fulfillmentProcess to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentProcessByIdCall(Integer fulfillmentProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentProcess/{fulfillmentProcessId}"
            .replaceAll("\\{" + "fulfillmentProcessId" + "\\}", apiClient.escapeString(fulfillmentProcessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFulfillmentProcessByIdValidateBeforeCall(Integer fulfillmentProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentProcessId' is set
        if (fulfillmentProcessId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentProcessId' when calling getFulfillmentProcessById(Async)");
        }
        

        com.squareup.okhttp.Call call = getFulfillmentProcessByIdCall(fulfillmentProcessId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a fulfillmentProcess by id
     * Returns the fulfillmentProcess identified by the specified id.
     * @param fulfillmentProcessId Id of the fulfillmentProcess to be returned. (required)
     * @return FulfillmentProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FulfillmentProcess getFulfillmentProcessById(Integer fulfillmentProcessId) throws ApiException {
        ApiResponse<FulfillmentProcess> resp = getFulfillmentProcessByIdWithHttpInfo(fulfillmentProcessId);
        return resp.getData();
    }

    /**
     * Get a fulfillmentProcess by id
     * Returns the fulfillmentProcess identified by the specified id.
     * @param fulfillmentProcessId Id of the fulfillmentProcess to be returned. (required)
     * @return ApiResponse&lt;FulfillmentProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FulfillmentProcess> getFulfillmentProcessByIdWithHttpInfo(Integer fulfillmentProcessId) throws ApiException {
        com.squareup.okhttp.Call call = getFulfillmentProcessByIdValidateBeforeCall(fulfillmentProcessId, null, null);
        Type localVarReturnType = new TypeToken<FulfillmentProcess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a fulfillmentProcess by id (asynchronously)
     * Returns the fulfillmentProcess identified by the specified id.
     * @param fulfillmentProcessId Id of the fulfillmentProcess to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentProcessByIdAsync(Integer fulfillmentProcessId, final ApiCallback<FulfillmentProcess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFulfillmentProcessByIdValidateBeforeCall(fulfillmentProcessId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FulfillmentProcess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFulfillmentProcessFiles
     * @param fulfillmentProcessId Id of the fulfillmentProcess to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentProcessFilesCall(Integer fulfillmentProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentProcess/{fulfillmentProcessId}/file"
            .replaceAll("\\{" + "fulfillmentProcessId" + "\\}", apiClient.escapeString(fulfillmentProcessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFulfillmentProcessFilesValidateBeforeCall(Integer fulfillmentProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentProcessId' is set
        if (fulfillmentProcessId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentProcessId' when calling getFulfillmentProcessFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getFulfillmentProcessFilesCall(fulfillmentProcessId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a fulfillmentProcess.
     * Get all existing fulfillmentProcess files.
     * @param fulfillmentProcessId Id of the fulfillmentProcess to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getFulfillmentProcessFiles(Integer fulfillmentProcessId) throws ApiException {
        getFulfillmentProcessFilesWithHttpInfo(fulfillmentProcessId);
    }

    /**
     * Get the files for a fulfillmentProcess.
     * Get all existing fulfillmentProcess files.
     * @param fulfillmentProcessId Id of the fulfillmentProcess to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getFulfillmentProcessFilesWithHttpInfo(Integer fulfillmentProcessId) throws ApiException {
        com.squareup.okhttp.Call call = getFulfillmentProcessFilesValidateBeforeCall(fulfillmentProcessId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a fulfillmentProcess. (asynchronously)
     * Get all existing fulfillmentProcess files.
     * @param fulfillmentProcessId Id of the fulfillmentProcess to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentProcessFilesAsync(Integer fulfillmentProcessId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFulfillmentProcessFilesValidateBeforeCall(fulfillmentProcessId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getFulfillmentProcessTags
     * @param fulfillmentProcessId Id of the fulfillmentProcess to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentProcessTagsCall(Integer fulfillmentProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentProcess/{fulfillmentProcessId}/tag"
            .replaceAll("\\{" + "fulfillmentProcessId" + "\\}", apiClient.escapeString(fulfillmentProcessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFulfillmentProcessTagsValidateBeforeCall(Integer fulfillmentProcessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentProcessId' is set
        if (fulfillmentProcessId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentProcessId' when calling getFulfillmentProcessTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getFulfillmentProcessTagsCall(fulfillmentProcessId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a fulfillmentProcess.
     * Get all existing fulfillmentProcess tags.
     * @param fulfillmentProcessId Id of the fulfillmentProcess to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getFulfillmentProcessTags(Integer fulfillmentProcessId) throws ApiException {
        getFulfillmentProcessTagsWithHttpInfo(fulfillmentProcessId);
    }

    /**
     * Get the tags for a fulfillmentProcess.
     * Get all existing fulfillmentProcess tags.
     * @param fulfillmentProcessId Id of the fulfillmentProcess to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getFulfillmentProcessTagsWithHttpInfo(Integer fulfillmentProcessId) throws ApiException {
        com.squareup.okhttp.Call call = getFulfillmentProcessTagsValidateBeforeCall(fulfillmentProcessId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a fulfillmentProcess. (asynchronously)
     * Get all existing fulfillmentProcess tags.
     * @param fulfillmentProcessId Id of the fulfillmentProcess to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentProcessTagsAsync(Integer fulfillmentProcessId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFulfillmentProcessTagsValidateBeforeCall(fulfillmentProcessId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateFulfillmentProcessCustomFields
     * @param body FulfillmentProcess to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFulfillmentProcessCustomFieldsCall(FulfillmentProcess body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentProcess/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFulfillmentProcessCustomFieldsValidateBeforeCall(FulfillmentProcess body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateFulfillmentProcessCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateFulfillmentProcessCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a fulfillmentProcess custom fields
     * Updates an existing fulfillmentProcess custom fields using the specified data.
     * @param body FulfillmentProcess to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateFulfillmentProcessCustomFields(FulfillmentProcess body) throws ApiException {
        updateFulfillmentProcessCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a fulfillmentProcess custom fields
     * Updates an existing fulfillmentProcess custom fields using the specified data.
     * @param body FulfillmentProcess to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateFulfillmentProcessCustomFieldsWithHttpInfo(FulfillmentProcess body) throws ApiException {
        com.squareup.okhttp.Call call = updateFulfillmentProcessCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a fulfillmentProcess custom fields (asynchronously)
     * Updates an existing fulfillmentProcess custom fields using the specified data.
     * @param body FulfillmentProcess to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFulfillmentProcessCustomFieldsAsync(FulfillmentProcess body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFulfillmentProcessCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
