/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;
import com.infopluscommerce.model.StandardBusinessDays;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StandardBusinessDaysApi {
    private ApiClient apiClient;

    public StandardBusinessDaysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StandardBusinessDaysApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addStandardBusinessDays
     * @param body StandardBusinessDays to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addStandardBusinessDaysCall(StandardBusinessDays body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/standardBusinessDays";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addStandardBusinessDaysValidateBeforeCall(StandardBusinessDays body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addStandardBusinessDays(Async)");
        }
        

        com.squareup.okhttp.Call call = addStandardBusinessDaysCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a standardBusinessDays
     * Inserts a new standardBusinessDays using the specified data.
     * @param body StandardBusinessDays to be inserted. (required)
     * @return StandardBusinessDays
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StandardBusinessDays addStandardBusinessDays(StandardBusinessDays body) throws ApiException {
        ApiResponse<StandardBusinessDays> resp = addStandardBusinessDaysWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a standardBusinessDays
     * Inserts a new standardBusinessDays using the specified data.
     * @param body StandardBusinessDays to be inserted. (required)
     * @return ApiResponse&lt;StandardBusinessDays&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StandardBusinessDays> addStandardBusinessDaysWithHttpInfo(StandardBusinessDays body) throws ApiException {
        com.squareup.okhttp.Call call = addStandardBusinessDaysValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<StandardBusinessDays>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a standardBusinessDays (asynchronously)
     * Inserts a new standardBusinessDays using the specified data.
     * @param body StandardBusinessDays to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addStandardBusinessDaysAsync(StandardBusinessDays body, final ApiCallback<StandardBusinessDays> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addStandardBusinessDaysValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StandardBusinessDays>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addStandardBusinessDaysAudit
     * @param standardBusinessDaysId Id of the standardBusinessDays to add an audit to (required)
     * @param standardBusinessDaysAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addStandardBusinessDaysAuditCall(Integer standardBusinessDaysId, String standardBusinessDaysAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}/audit/{standardBusinessDaysAudit}"
            .replaceAll("\\{" + "standardBusinessDaysId" + "\\}", apiClient.escapeString(standardBusinessDaysId.toString()))
            .replaceAll("\\{" + "standardBusinessDaysAudit" + "\\}", apiClient.escapeString(standardBusinessDaysAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addStandardBusinessDaysAuditValidateBeforeCall(Integer standardBusinessDaysId, String standardBusinessDaysAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'standardBusinessDaysId' is set
        if (standardBusinessDaysId == null) {
            throw new ApiException("Missing the required parameter 'standardBusinessDaysId' when calling addStandardBusinessDaysAudit(Async)");
        }
        
        // verify the required parameter 'standardBusinessDaysAudit' is set
        if (standardBusinessDaysAudit == null) {
            throw new ApiException("Missing the required parameter 'standardBusinessDaysAudit' when calling addStandardBusinessDaysAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addStandardBusinessDaysAuditCall(standardBusinessDaysId, standardBusinessDaysAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a standardBusinessDays
     * Adds an audit to an existing standardBusinessDays.
     * @param standardBusinessDaysId Id of the standardBusinessDays to add an audit to (required)
     * @param standardBusinessDaysAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addStandardBusinessDaysAudit(Integer standardBusinessDaysId, String standardBusinessDaysAudit) throws ApiException {
        addStandardBusinessDaysAuditWithHttpInfo(standardBusinessDaysId, standardBusinessDaysAudit);
    }

    /**
     * Add new audit for a standardBusinessDays
     * Adds an audit to an existing standardBusinessDays.
     * @param standardBusinessDaysId Id of the standardBusinessDays to add an audit to (required)
     * @param standardBusinessDaysAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addStandardBusinessDaysAuditWithHttpInfo(Integer standardBusinessDaysId, String standardBusinessDaysAudit) throws ApiException {
        com.squareup.okhttp.Call call = addStandardBusinessDaysAuditValidateBeforeCall(standardBusinessDaysId, standardBusinessDaysAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a standardBusinessDays (asynchronously)
     * Adds an audit to an existing standardBusinessDays.
     * @param standardBusinessDaysId Id of the standardBusinessDays to add an audit to (required)
     * @param standardBusinessDaysAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addStandardBusinessDaysAuditAsync(Integer standardBusinessDaysId, String standardBusinessDaysAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addStandardBusinessDaysAuditValidateBeforeCall(standardBusinessDaysId, standardBusinessDaysAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addStandardBusinessDaysFile
     * @param standardBusinessDaysId Id of the standardBusinessDays to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addStandardBusinessDaysFileCall(Integer standardBusinessDaysId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}/file/{fileName}"
            .replaceAll("\\{" + "standardBusinessDaysId" + "\\}", apiClient.escapeString(standardBusinessDaysId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addStandardBusinessDaysFileValidateBeforeCall(Integer standardBusinessDaysId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'standardBusinessDaysId' is set
        if (standardBusinessDaysId == null) {
            throw new ApiException("Missing the required parameter 'standardBusinessDaysId' when calling addStandardBusinessDaysFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addStandardBusinessDaysFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addStandardBusinessDaysFileCall(standardBusinessDaysId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a standardBusinessDays
     * Adds a file to an existing standardBusinessDays.
     * @param standardBusinessDaysId Id of the standardBusinessDays to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addStandardBusinessDaysFile(Integer standardBusinessDaysId, String fileName) throws ApiException {
        addStandardBusinessDaysFileWithHttpInfo(standardBusinessDaysId, fileName);
    }

    /**
     * Attach a file to a standardBusinessDays
     * Adds a file to an existing standardBusinessDays.
     * @param standardBusinessDaysId Id of the standardBusinessDays to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addStandardBusinessDaysFileWithHttpInfo(Integer standardBusinessDaysId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addStandardBusinessDaysFileValidateBeforeCall(standardBusinessDaysId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a standardBusinessDays (asynchronously)
     * Adds a file to an existing standardBusinessDays.
     * @param standardBusinessDaysId Id of the standardBusinessDays to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addStandardBusinessDaysFileAsync(Integer standardBusinessDaysId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addStandardBusinessDaysFileValidateBeforeCall(standardBusinessDaysId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addStandardBusinessDaysFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param standardBusinessDaysId Id of the standardBusinessDays to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addStandardBusinessDaysFileByURLCall(RecordFile body, Integer standardBusinessDaysId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}/file"
            .replaceAll("\\{" + "standardBusinessDaysId" + "\\}", apiClient.escapeString(standardBusinessDaysId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addStandardBusinessDaysFileByURLValidateBeforeCall(RecordFile body, Integer standardBusinessDaysId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addStandardBusinessDaysFileByURL(Async)");
        }
        
        // verify the required parameter 'standardBusinessDaysId' is set
        if (standardBusinessDaysId == null) {
            throw new ApiException("Missing the required parameter 'standardBusinessDaysId' when calling addStandardBusinessDaysFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addStandardBusinessDaysFileByURLCall(body, standardBusinessDaysId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a standardBusinessDays by URL.
     * Adds a file to an existing standardBusinessDays by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param standardBusinessDaysId Id of the standardBusinessDays to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addStandardBusinessDaysFileByURL(RecordFile body, Integer standardBusinessDaysId) throws ApiException {
        addStandardBusinessDaysFileByURLWithHttpInfo(body, standardBusinessDaysId);
    }

    /**
     * Attach a file to a standardBusinessDays by URL.
     * Adds a file to an existing standardBusinessDays by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param standardBusinessDaysId Id of the standardBusinessDays to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addStandardBusinessDaysFileByURLWithHttpInfo(RecordFile body, Integer standardBusinessDaysId) throws ApiException {
        com.squareup.okhttp.Call call = addStandardBusinessDaysFileByURLValidateBeforeCall(body, standardBusinessDaysId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a standardBusinessDays by URL. (asynchronously)
     * Adds a file to an existing standardBusinessDays by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param standardBusinessDaysId Id of the standardBusinessDays to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addStandardBusinessDaysFileByURLAsync(RecordFile body, Integer standardBusinessDaysId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addStandardBusinessDaysFileByURLValidateBeforeCall(body, standardBusinessDaysId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addStandardBusinessDaysTag
     * @param standardBusinessDaysId Id of the standardBusinessDays to add a tag to (required)
     * @param standardBusinessDaysTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addStandardBusinessDaysTagCall(Integer standardBusinessDaysId, String standardBusinessDaysTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}/tag/{standardBusinessDaysTag}"
            .replaceAll("\\{" + "standardBusinessDaysId" + "\\}", apiClient.escapeString(standardBusinessDaysId.toString()))
            .replaceAll("\\{" + "standardBusinessDaysTag" + "\\}", apiClient.escapeString(standardBusinessDaysTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addStandardBusinessDaysTagValidateBeforeCall(Integer standardBusinessDaysId, String standardBusinessDaysTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'standardBusinessDaysId' is set
        if (standardBusinessDaysId == null) {
            throw new ApiException("Missing the required parameter 'standardBusinessDaysId' when calling addStandardBusinessDaysTag(Async)");
        }
        
        // verify the required parameter 'standardBusinessDaysTag' is set
        if (standardBusinessDaysTag == null) {
            throw new ApiException("Missing the required parameter 'standardBusinessDaysTag' when calling addStandardBusinessDaysTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addStandardBusinessDaysTagCall(standardBusinessDaysId, standardBusinessDaysTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a standardBusinessDays.
     * Adds a tag to an existing standardBusinessDays.
     * @param standardBusinessDaysId Id of the standardBusinessDays to add a tag to (required)
     * @param standardBusinessDaysTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addStandardBusinessDaysTag(Integer standardBusinessDaysId, String standardBusinessDaysTag) throws ApiException {
        addStandardBusinessDaysTagWithHttpInfo(standardBusinessDaysId, standardBusinessDaysTag);
    }

    /**
     * Add new tags for a standardBusinessDays.
     * Adds a tag to an existing standardBusinessDays.
     * @param standardBusinessDaysId Id of the standardBusinessDays to add a tag to (required)
     * @param standardBusinessDaysTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addStandardBusinessDaysTagWithHttpInfo(Integer standardBusinessDaysId, String standardBusinessDaysTag) throws ApiException {
        com.squareup.okhttp.Call call = addStandardBusinessDaysTagValidateBeforeCall(standardBusinessDaysId, standardBusinessDaysTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a standardBusinessDays. (asynchronously)
     * Adds a tag to an existing standardBusinessDays.
     * @param standardBusinessDaysId Id of the standardBusinessDays to add a tag to (required)
     * @param standardBusinessDaysTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addStandardBusinessDaysTagAsync(Integer standardBusinessDaysId, String standardBusinessDaysTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addStandardBusinessDaysTagValidateBeforeCall(standardBusinessDaysId, standardBusinessDaysTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteStandardBusinessDays
     * @param standardBusinessDaysId Id of the standardBusinessDays to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteStandardBusinessDaysCall(Integer standardBusinessDaysId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}"
            .replaceAll("\\{" + "standardBusinessDaysId" + "\\}", apiClient.escapeString(standardBusinessDaysId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteStandardBusinessDaysValidateBeforeCall(Integer standardBusinessDaysId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'standardBusinessDaysId' is set
        if (standardBusinessDaysId == null) {
            throw new ApiException("Missing the required parameter 'standardBusinessDaysId' when calling deleteStandardBusinessDays(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteStandardBusinessDaysCall(standardBusinessDaysId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a standardBusinessDays
     * Deletes the standardBusinessDays identified by the specified id.
     * @param standardBusinessDaysId Id of the standardBusinessDays to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteStandardBusinessDays(Integer standardBusinessDaysId) throws ApiException {
        deleteStandardBusinessDaysWithHttpInfo(standardBusinessDaysId);
    }

    /**
     * Delete a standardBusinessDays
     * Deletes the standardBusinessDays identified by the specified id.
     * @param standardBusinessDaysId Id of the standardBusinessDays to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteStandardBusinessDaysWithHttpInfo(Integer standardBusinessDaysId) throws ApiException {
        com.squareup.okhttp.Call call = deleteStandardBusinessDaysValidateBeforeCall(standardBusinessDaysId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a standardBusinessDays (asynchronously)
     * Deletes the standardBusinessDays identified by the specified id.
     * @param standardBusinessDaysId Id of the standardBusinessDays to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteStandardBusinessDaysAsync(Integer standardBusinessDaysId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteStandardBusinessDaysValidateBeforeCall(standardBusinessDaysId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteStandardBusinessDaysFile
     * @param standardBusinessDaysId Id of the standardBusinessDays to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteStandardBusinessDaysFileCall(Integer standardBusinessDaysId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}/file/{fileId}"
            .replaceAll("\\{" + "standardBusinessDaysId" + "\\}", apiClient.escapeString(standardBusinessDaysId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteStandardBusinessDaysFileValidateBeforeCall(Integer standardBusinessDaysId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'standardBusinessDaysId' is set
        if (standardBusinessDaysId == null) {
            throw new ApiException("Missing the required parameter 'standardBusinessDaysId' when calling deleteStandardBusinessDaysFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteStandardBusinessDaysFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteStandardBusinessDaysFileCall(standardBusinessDaysId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a standardBusinessDays.
     * Deletes an existing standardBusinessDays file using the specified data.
     * @param standardBusinessDaysId Id of the standardBusinessDays to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteStandardBusinessDaysFile(Integer standardBusinessDaysId, Integer fileId) throws ApiException {
        deleteStandardBusinessDaysFileWithHttpInfo(standardBusinessDaysId, fileId);
    }

    /**
     * Delete a file for a standardBusinessDays.
     * Deletes an existing standardBusinessDays file using the specified data.
     * @param standardBusinessDaysId Id of the standardBusinessDays to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteStandardBusinessDaysFileWithHttpInfo(Integer standardBusinessDaysId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteStandardBusinessDaysFileValidateBeforeCall(standardBusinessDaysId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a standardBusinessDays. (asynchronously)
     * Deletes an existing standardBusinessDays file using the specified data.
     * @param standardBusinessDaysId Id of the standardBusinessDays to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteStandardBusinessDaysFileAsync(Integer standardBusinessDaysId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteStandardBusinessDaysFileValidateBeforeCall(standardBusinessDaysId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteStandardBusinessDaysTag
     * @param standardBusinessDaysId Id of the standardBusinessDays to remove tag from (required)
     * @param standardBusinessDaysTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteStandardBusinessDaysTagCall(Integer standardBusinessDaysId, String standardBusinessDaysTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}/tag/{standardBusinessDaysTag}"
            .replaceAll("\\{" + "standardBusinessDaysId" + "\\}", apiClient.escapeString(standardBusinessDaysId.toString()))
            .replaceAll("\\{" + "standardBusinessDaysTag" + "\\}", apiClient.escapeString(standardBusinessDaysTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteStandardBusinessDaysTagValidateBeforeCall(Integer standardBusinessDaysId, String standardBusinessDaysTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'standardBusinessDaysId' is set
        if (standardBusinessDaysId == null) {
            throw new ApiException("Missing the required parameter 'standardBusinessDaysId' when calling deleteStandardBusinessDaysTag(Async)");
        }
        
        // verify the required parameter 'standardBusinessDaysTag' is set
        if (standardBusinessDaysTag == null) {
            throw new ApiException("Missing the required parameter 'standardBusinessDaysTag' when calling deleteStandardBusinessDaysTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteStandardBusinessDaysTagCall(standardBusinessDaysId, standardBusinessDaysTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a standardBusinessDays.
     * Deletes an existing standardBusinessDays tag using the specified data.
     * @param standardBusinessDaysId Id of the standardBusinessDays to remove tag from (required)
     * @param standardBusinessDaysTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteStandardBusinessDaysTag(Integer standardBusinessDaysId, String standardBusinessDaysTag) throws ApiException {
        deleteStandardBusinessDaysTagWithHttpInfo(standardBusinessDaysId, standardBusinessDaysTag);
    }

    /**
     * Delete a tag for a standardBusinessDays.
     * Deletes an existing standardBusinessDays tag using the specified data.
     * @param standardBusinessDaysId Id of the standardBusinessDays to remove tag from (required)
     * @param standardBusinessDaysTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteStandardBusinessDaysTagWithHttpInfo(Integer standardBusinessDaysId, String standardBusinessDaysTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteStandardBusinessDaysTagValidateBeforeCall(standardBusinessDaysId, standardBusinessDaysTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a standardBusinessDays. (asynchronously)
     * Deletes an existing standardBusinessDays tag using the specified data.
     * @param standardBusinessDaysId Id of the standardBusinessDays to remove tag from (required)
     * @param standardBusinessDaysTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteStandardBusinessDaysTagAsync(Integer standardBusinessDaysId, String standardBusinessDaysTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteStandardBusinessDaysTagValidateBeforeCall(standardBusinessDaysId, standardBusinessDaysTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateStandardBusinessDaysById
     * @param standardBusinessDaysId Id of the standardBusinessDays to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateStandardBusinessDaysByIdCall(Integer standardBusinessDaysId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/standardBusinessDays/duplicate/{standardBusinessDaysId}"
            .replaceAll("\\{" + "standardBusinessDaysId" + "\\}", apiClient.escapeString(standardBusinessDaysId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateStandardBusinessDaysByIdValidateBeforeCall(Integer standardBusinessDaysId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'standardBusinessDaysId' is set
        if (standardBusinessDaysId == null) {
            throw new ApiException("Missing the required parameter 'standardBusinessDaysId' when calling getDuplicateStandardBusinessDaysById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateStandardBusinessDaysByIdCall(standardBusinessDaysId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a standardBusinessDays by id
     * Returns a duplicated standardBusinessDays identified by the specified id.
     * @param standardBusinessDaysId Id of the standardBusinessDays to be duplicated. (required)
     * @return StandardBusinessDays
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StandardBusinessDays getDuplicateStandardBusinessDaysById(Integer standardBusinessDaysId) throws ApiException {
        ApiResponse<StandardBusinessDays> resp = getDuplicateStandardBusinessDaysByIdWithHttpInfo(standardBusinessDaysId);
        return resp.getData();
    }

    /**
     * Get a duplicated a standardBusinessDays by id
     * Returns a duplicated standardBusinessDays identified by the specified id.
     * @param standardBusinessDaysId Id of the standardBusinessDays to be duplicated. (required)
     * @return ApiResponse&lt;StandardBusinessDays&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StandardBusinessDays> getDuplicateStandardBusinessDaysByIdWithHttpInfo(Integer standardBusinessDaysId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateStandardBusinessDaysByIdValidateBeforeCall(standardBusinessDaysId, null, null);
        Type localVarReturnType = new TypeToken<StandardBusinessDays>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a standardBusinessDays by id (asynchronously)
     * Returns a duplicated standardBusinessDays identified by the specified id.
     * @param standardBusinessDaysId Id of the standardBusinessDays to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateStandardBusinessDaysByIdAsync(Integer standardBusinessDaysId, final ApiCallback<StandardBusinessDays> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateStandardBusinessDaysByIdValidateBeforeCall(standardBusinessDaysId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StandardBusinessDays>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStandardBusinessDaysByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStandardBusinessDaysByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/standardBusinessDays/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStandardBusinessDaysByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getStandardBusinessDaysByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search standardBusinessDayses by filter
     * Returns the list of standardBusinessDayses that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;StandardBusinessDays&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<StandardBusinessDays> getStandardBusinessDaysByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<StandardBusinessDays>> resp = getStandardBusinessDaysByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search standardBusinessDayses by filter
     * Returns the list of standardBusinessDayses that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;StandardBusinessDays&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<StandardBusinessDays>> getStandardBusinessDaysByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getStandardBusinessDaysByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<StandardBusinessDays>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search standardBusinessDayses by filter (asynchronously)
     * Returns the list of standardBusinessDayses that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStandardBusinessDaysByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<StandardBusinessDays>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStandardBusinessDaysByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<StandardBusinessDays>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStandardBusinessDaysById
     * @param standardBusinessDaysId Id of the standardBusinessDays to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStandardBusinessDaysByIdCall(Integer standardBusinessDaysId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}"
            .replaceAll("\\{" + "standardBusinessDaysId" + "\\}", apiClient.escapeString(standardBusinessDaysId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStandardBusinessDaysByIdValidateBeforeCall(Integer standardBusinessDaysId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'standardBusinessDaysId' is set
        if (standardBusinessDaysId == null) {
            throw new ApiException("Missing the required parameter 'standardBusinessDaysId' when calling getStandardBusinessDaysById(Async)");
        }
        

        com.squareup.okhttp.Call call = getStandardBusinessDaysByIdCall(standardBusinessDaysId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a standardBusinessDays by id
     * Returns the standardBusinessDays identified by the specified id.
     * @param standardBusinessDaysId Id of the standardBusinessDays to be returned. (required)
     * @return StandardBusinessDays
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StandardBusinessDays getStandardBusinessDaysById(Integer standardBusinessDaysId) throws ApiException {
        ApiResponse<StandardBusinessDays> resp = getStandardBusinessDaysByIdWithHttpInfo(standardBusinessDaysId);
        return resp.getData();
    }

    /**
     * Get a standardBusinessDays by id
     * Returns the standardBusinessDays identified by the specified id.
     * @param standardBusinessDaysId Id of the standardBusinessDays to be returned. (required)
     * @return ApiResponse&lt;StandardBusinessDays&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StandardBusinessDays> getStandardBusinessDaysByIdWithHttpInfo(Integer standardBusinessDaysId) throws ApiException {
        com.squareup.okhttp.Call call = getStandardBusinessDaysByIdValidateBeforeCall(standardBusinessDaysId, null, null);
        Type localVarReturnType = new TypeToken<StandardBusinessDays>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a standardBusinessDays by id (asynchronously)
     * Returns the standardBusinessDays identified by the specified id.
     * @param standardBusinessDaysId Id of the standardBusinessDays to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStandardBusinessDaysByIdAsync(Integer standardBusinessDaysId, final ApiCallback<StandardBusinessDays> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStandardBusinessDaysByIdValidateBeforeCall(standardBusinessDaysId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StandardBusinessDays>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStandardBusinessDaysFiles
     * @param standardBusinessDaysId Id of the standardBusinessDays to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStandardBusinessDaysFilesCall(Integer standardBusinessDaysId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}/file"
            .replaceAll("\\{" + "standardBusinessDaysId" + "\\}", apiClient.escapeString(standardBusinessDaysId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStandardBusinessDaysFilesValidateBeforeCall(Integer standardBusinessDaysId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'standardBusinessDaysId' is set
        if (standardBusinessDaysId == null) {
            throw new ApiException("Missing the required parameter 'standardBusinessDaysId' when calling getStandardBusinessDaysFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getStandardBusinessDaysFilesCall(standardBusinessDaysId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a standardBusinessDays.
     * Get all existing standardBusinessDays files.
     * @param standardBusinessDaysId Id of the standardBusinessDays to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getStandardBusinessDaysFiles(Integer standardBusinessDaysId) throws ApiException {
        getStandardBusinessDaysFilesWithHttpInfo(standardBusinessDaysId);
    }

    /**
     * Get the files for a standardBusinessDays.
     * Get all existing standardBusinessDays files.
     * @param standardBusinessDaysId Id of the standardBusinessDays to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getStandardBusinessDaysFilesWithHttpInfo(Integer standardBusinessDaysId) throws ApiException {
        com.squareup.okhttp.Call call = getStandardBusinessDaysFilesValidateBeforeCall(standardBusinessDaysId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a standardBusinessDays. (asynchronously)
     * Get all existing standardBusinessDays files.
     * @param standardBusinessDaysId Id of the standardBusinessDays to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStandardBusinessDaysFilesAsync(Integer standardBusinessDaysId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStandardBusinessDaysFilesValidateBeforeCall(standardBusinessDaysId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getStandardBusinessDaysTags
     * @param standardBusinessDaysId Id of the standardBusinessDays to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStandardBusinessDaysTagsCall(Integer standardBusinessDaysId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/standardBusinessDays/{standardBusinessDaysId}/tag"
            .replaceAll("\\{" + "standardBusinessDaysId" + "\\}", apiClient.escapeString(standardBusinessDaysId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStandardBusinessDaysTagsValidateBeforeCall(Integer standardBusinessDaysId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'standardBusinessDaysId' is set
        if (standardBusinessDaysId == null) {
            throw new ApiException("Missing the required parameter 'standardBusinessDaysId' when calling getStandardBusinessDaysTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getStandardBusinessDaysTagsCall(standardBusinessDaysId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a standardBusinessDays.
     * Get all existing standardBusinessDays tags.
     * @param standardBusinessDaysId Id of the standardBusinessDays to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getStandardBusinessDaysTags(Integer standardBusinessDaysId) throws ApiException {
        getStandardBusinessDaysTagsWithHttpInfo(standardBusinessDaysId);
    }

    /**
     * Get the tags for a standardBusinessDays.
     * Get all existing standardBusinessDays tags.
     * @param standardBusinessDaysId Id of the standardBusinessDays to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getStandardBusinessDaysTagsWithHttpInfo(Integer standardBusinessDaysId) throws ApiException {
        com.squareup.okhttp.Call call = getStandardBusinessDaysTagsValidateBeforeCall(standardBusinessDaysId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a standardBusinessDays. (asynchronously)
     * Get all existing standardBusinessDays tags.
     * @param standardBusinessDaysId Id of the standardBusinessDays to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStandardBusinessDaysTagsAsync(Integer standardBusinessDaysId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStandardBusinessDaysTagsValidateBeforeCall(standardBusinessDaysId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateStandardBusinessDays
     * @param body StandardBusinessDays to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateStandardBusinessDaysCall(StandardBusinessDays body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/standardBusinessDays";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateStandardBusinessDaysValidateBeforeCall(StandardBusinessDays body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateStandardBusinessDays(Async)");
        }
        

        com.squareup.okhttp.Call call = updateStandardBusinessDaysCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a standardBusinessDays
     * Updates an existing standardBusinessDays using the specified data.
     * @param body StandardBusinessDays to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateStandardBusinessDays(StandardBusinessDays body) throws ApiException {
        updateStandardBusinessDaysWithHttpInfo(body);
    }

    /**
     * Update a standardBusinessDays
     * Updates an existing standardBusinessDays using the specified data.
     * @param body StandardBusinessDays to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateStandardBusinessDaysWithHttpInfo(StandardBusinessDays body) throws ApiException {
        com.squareup.okhttp.Call call = updateStandardBusinessDaysValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a standardBusinessDays (asynchronously)
     * Updates an existing standardBusinessDays using the specified data.
     * @param body StandardBusinessDays to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateStandardBusinessDaysAsync(StandardBusinessDays body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateStandardBusinessDaysValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
