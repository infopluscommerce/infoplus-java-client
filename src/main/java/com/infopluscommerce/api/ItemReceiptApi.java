/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ItemReceipt;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ItemReceiptApi {
    private ApiClient apiClient;

    public ItemReceiptApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ItemReceiptApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addItemReceiptAudit
     * @param itemReceiptId Id of the itemReceipt to add an audit to (required)
     * @param itemReceiptAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemReceiptAuditCall(Integer itemReceiptId, String itemReceiptAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemReceipt/{itemReceiptId}/audit/{itemReceiptAudit}"
            .replaceAll("\\{" + "itemReceiptId" + "\\}", apiClient.escapeString(itemReceiptId.toString()))
            .replaceAll("\\{" + "itemReceiptAudit" + "\\}", apiClient.escapeString(itemReceiptAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemReceiptAuditValidateBeforeCall(Integer itemReceiptId, String itemReceiptAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemReceiptId' is set
        if (itemReceiptId == null) {
            throw new ApiException("Missing the required parameter 'itemReceiptId' when calling addItemReceiptAudit(Async)");
        }
        
        // verify the required parameter 'itemReceiptAudit' is set
        if (itemReceiptAudit == null) {
            throw new ApiException("Missing the required parameter 'itemReceiptAudit' when calling addItemReceiptAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemReceiptAuditCall(itemReceiptId, itemReceiptAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for an itemReceipt
     * Adds an audit to an existing itemReceipt.
     * @param itemReceiptId Id of the itemReceipt to add an audit to (required)
     * @param itemReceiptAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemReceiptAudit(Integer itemReceiptId, String itemReceiptAudit) throws ApiException {
        addItemReceiptAuditWithHttpInfo(itemReceiptId, itemReceiptAudit);
    }

    /**
     * Add new audit for an itemReceipt
     * Adds an audit to an existing itemReceipt.
     * @param itemReceiptId Id of the itemReceipt to add an audit to (required)
     * @param itemReceiptAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemReceiptAuditWithHttpInfo(Integer itemReceiptId, String itemReceiptAudit) throws ApiException {
        com.squareup.okhttp.Call call = addItemReceiptAuditValidateBeforeCall(itemReceiptId, itemReceiptAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for an itemReceipt (asynchronously)
     * Adds an audit to an existing itemReceipt.
     * @param itemReceiptId Id of the itemReceipt to add an audit to (required)
     * @param itemReceiptAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemReceiptAuditAsync(Integer itemReceiptId, String itemReceiptAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemReceiptAuditValidateBeforeCall(itemReceiptId, itemReceiptAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemReceiptFile
     * @param itemReceiptId Id of the itemReceipt to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemReceiptFileCall(Integer itemReceiptId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemReceipt/{itemReceiptId}/file/{fileName}"
            .replaceAll("\\{" + "itemReceiptId" + "\\}", apiClient.escapeString(itemReceiptId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemReceiptFileValidateBeforeCall(Integer itemReceiptId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemReceiptId' is set
        if (itemReceiptId == null) {
            throw new ApiException("Missing the required parameter 'itemReceiptId' when calling addItemReceiptFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addItemReceiptFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemReceiptFileCall(itemReceiptId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an itemReceipt
     * Adds a file to an existing itemReceipt.
     * @param itemReceiptId Id of the itemReceipt to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemReceiptFile(Integer itemReceiptId, String fileName) throws ApiException {
        addItemReceiptFileWithHttpInfo(itemReceiptId, fileName);
    }

    /**
     * Attach a file to an itemReceipt
     * Adds a file to an existing itemReceipt.
     * @param itemReceiptId Id of the itemReceipt to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemReceiptFileWithHttpInfo(Integer itemReceiptId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addItemReceiptFileValidateBeforeCall(itemReceiptId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an itemReceipt (asynchronously)
     * Adds a file to an existing itemReceipt.
     * @param itemReceiptId Id of the itemReceipt to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemReceiptFileAsync(Integer itemReceiptId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemReceiptFileValidateBeforeCall(itemReceiptId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemReceiptFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param itemReceiptId Id of the itemReceipt to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemReceiptFileByURLCall(RecordFile body, Integer itemReceiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/itemReceipt/{itemReceiptId}/file"
            .replaceAll("\\{" + "itemReceiptId" + "\\}", apiClient.escapeString(itemReceiptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemReceiptFileByURLValidateBeforeCall(RecordFile body, Integer itemReceiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addItemReceiptFileByURL(Async)");
        }
        
        // verify the required parameter 'itemReceiptId' is set
        if (itemReceiptId == null) {
            throw new ApiException("Missing the required parameter 'itemReceiptId' when calling addItemReceiptFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemReceiptFileByURLCall(body, itemReceiptId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an itemReceipt by URL.
     * Adds a file to an existing itemReceipt by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param itemReceiptId Id of the itemReceipt to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemReceiptFileByURL(RecordFile body, Integer itemReceiptId) throws ApiException {
        addItemReceiptFileByURLWithHttpInfo(body, itemReceiptId);
    }

    /**
     * Attach a file to an itemReceipt by URL.
     * Adds a file to an existing itemReceipt by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param itemReceiptId Id of the itemReceipt to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemReceiptFileByURLWithHttpInfo(RecordFile body, Integer itemReceiptId) throws ApiException {
        com.squareup.okhttp.Call call = addItemReceiptFileByURLValidateBeforeCall(body, itemReceiptId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an itemReceipt by URL. (asynchronously)
     * Adds a file to an existing itemReceipt by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param itemReceiptId Id of the itemReceipt to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemReceiptFileByURLAsync(RecordFile body, Integer itemReceiptId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemReceiptFileByURLValidateBeforeCall(body, itemReceiptId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemReceiptTag
     * @param itemReceiptId Id of the itemReceipt to add a tag to (required)
     * @param itemReceiptTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemReceiptTagCall(Integer itemReceiptId, String itemReceiptTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemReceipt/{itemReceiptId}/tag/{itemReceiptTag}"
            .replaceAll("\\{" + "itemReceiptId" + "\\}", apiClient.escapeString(itemReceiptId.toString()))
            .replaceAll("\\{" + "itemReceiptTag" + "\\}", apiClient.escapeString(itemReceiptTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemReceiptTagValidateBeforeCall(Integer itemReceiptId, String itemReceiptTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemReceiptId' is set
        if (itemReceiptId == null) {
            throw new ApiException("Missing the required parameter 'itemReceiptId' when calling addItemReceiptTag(Async)");
        }
        
        // verify the required parameter 'itemReceiptTag' is set
        if (itemReceiptTag == null) {
            throw new ApiException("Missing the required parameter 'itemReceiptTag' when calling addItemReceiptTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemReceiptTagCall(itemReceiptId, itemReceiptTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for an itemReceipt.
     * Adds a tag to an existing itemReceipt.
     * @param itemReceiptId Id of the itemReceipt to add a tag to (required)
     * @param itemReceiptTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemReceiptTag(Integer itemReceiptId, String itemReceiptTag) throws ApiException {
        addItemReceiptTagWithHttpInfo(itemReceiptId, itemReceiptTag);
    }

    /**
     * Add new tags for an itemReceipt.
     * Adds a tag to an existing itemReceipt.
     * @param itemReceiptId Id of the itemReceipt to add a tag to (required)
     * @param itemReceiptTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemReceiptTagWithHttpInfo(Integer itemReceiptId, String itemReceiptTag) throws ApiException {
        com.squareup.okhttp.Call call = addItemReceiptTagValidateBeforeCall(itemReceiptId, itemReceiptTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for an itemReceipt. (asynchronously)
     * Adds a tag to an existing itemReceipt.
     * @param itemReceiptId Id of the itemReceipt to add a tag to (required)
     * @param itemReceiptTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemReceiptTagAsync(Integer itemReceiptId, String itemReceiptTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemReceiptTagValidateBeforeCall(itemReceiptId, itemReceiptTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemReceiptFile
     * @param itemReceiptId Id of the itemReceipt to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemReceiptFileCall(Integer itemReceiptId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemReceipt/{itemReceiptId}/file/{fileId}"
            .replaceAll("\\{" + "itemReceiptId" + "\\}", apiClient.escapeString(itemReceiptId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemReceiptFileValidateBeforeCall(Integer itemReceiptId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemReceiptId' is set
        if (itemReceiptId == null) {
            throw new ApiException("Missing the required parameter 'itemReceiptId' when calling deleteItemReceiptFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteItemReceiptFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemReceiptFileCall(itemReceiptId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for an itemReceipt.
     * Deletes an existing itemReceipt file using the specified data.
     * @param itemReceiptId Id of the itemReceipt to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemReceiptFile(Integer itemReceiptId, Integer fileId) throws ApiException {
        deleteItemReceiptFileWithHttpInfo(itemReceiptId, fileId);
    }

    /**
     * Delete a file for an itemReceipt.
     * Deletes an existing itemReceipt file using the specified data.
     * @param itemReceiptId Id of the itemReceipt to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemReceiptFileWithHttpInfo(Integer itemReceiptId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemReceiptFileValidateBeforeCall(itemReceiptId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for an itemReceipt. (asynchronously)
     * Deletes an existing itemReceipt file using the specified data.
     * @param itemReceiptId Id of the itemReceipt to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemReceiptFileAsync(Integer itemReceiptId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemReceiptFileValidateBeforeCall(itemReceiptId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemReceiptTag
     * @param itemReceiptId Id of the itemReceipt to remove tag from (required)
     * @param itemReceiptTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemReceiptTagCall(Integer itemReceiptId, String itemReceiptTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemReceipt/{itemReceiptId}/tag/{itemReceiptTag}"
            .replaceAll("\\{" + "itemReceiptId" + "\\}", apiClient.escapeString(itemReceiptId.toString()))
            .replaceAll("\\{" + "itemReceiptTag" + "\\}", apiClient.escapeString(itemReceiptTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemReceiptTagValidateBeforeCall(Integer itemReceiptId, String itemReceiptTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemReceiptId' is set
        if (itemReceiptId == null) {
            throw new ApiException("Missing the required parameter 'itemReceiptId' when calling deleteItemReceiptTag(Async)");
        }
        
        // verify the required parameter 'itemReceiptTag' is set
        if (itemReceiptTag == null) {
            throw new ApiException("Missing the required parameter 'itemReceiptTag' when calling deleteItemReceiptTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemReceiptTagCall(itemReceiptId, itemReceiptTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for an itemReceipt.
     * Deletes an existing itemReceipt tag using the specified data.
     * @param itemReceiptId Id of the itemReceipt to remove tag from (required)
     * @param itemReceiptTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemReceiptTag(Integer itemReceiptId, String itemReceiptTag) throws ApiException {
        deleteItemReceiptTagWithHttpInfo(itemReceiptId, itemReceiptTag);
    }

    /**
     * Delete a tag for an itemReceipt.
     * Deletes an existing itemReceipt tag using the specified data.
     * @param itemReceiptId Id of the itemReceipt to remove tag from (required)
     * @param itemReceiptTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemReceiptTagWithHttpInfo(Integer itemReceiptId, String itemReceiptTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemReceiptTagValidateBeforeCall(itemReceiptId, itemReceiptTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for an itemReceipt. (asynchronously)
     * Deletes an existing itemReceipt tag using the specified data.
     * @param itemReceiptId Id of the itemReceipt to remove tag from (required)
     * @param itemReceiptTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemReceiptTagAsync(Integer itemReceiptId, String itemReceiptTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemReceiptTagValidateBeforeCall(itemReceiptId, itemReceiptTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateItemReceiptById
     * @param itemReceiptId Id of the itemReceipt to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateItemReceiptByIdCall(Integer itemReceiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemReceipt/duplicate/{itemReceiptId}"
            .replaceAll("\\{" + "itemReceiptId" + "\\}", apiClient.escapeString(itemReceiptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateItemReceiptByIdValidateBeforeCall(Integer itemReceiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemReceiptId' is set
        if (itemReceiptId == null) {
            throw new ApiException("Missing the required parameter 'itemReceiptId' when calling getDuplicateItemReceiptById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateItemReceiptByIdCall(itemReceiptId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated an itemReceipt by id
     * Returns a duplicated itemReceipt identified by the specified id.
     * @param itemReceiptId Id of the itemReceipt to be duplicated. (required)
     * @return ItemReceipt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemReceipt getDuplicateItemReceiptById(Integer itemReceiptId) throws ApiException {
        ApiResponse<ItemReceipt> resp = getDuplicateItemReceiptByIdWithHttpInfo(itemReceiptId);
        return resp.getData();
    }

    /**
     * Get a duplicated an itemReceipt by id
     * Returns a duplicated itemReceipt identified by the specified id.
     * @param itemReceiptId Id of the itemReceipt to be duplicated. (required)
     * @return ApiResponse&lt;ItemReceipt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemReceipt> getDuplicateItemReceiptByIdWithHttpInfo(Integer itemReceiptId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateItemReceiptByIdValidateBeforeCall(itemReceiptId, null, null);
        Type localVarReturnType = new TypeToken<ItemReceipt>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated an itemReceipt by id (asynchronously)
     * Returns a duplicated itemReceipt identified by the specified id.
     * @param itemReceiptId Id of the itemReceipt to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateItemReceiptByIdAsync(Integer itemReceiptId, final ApiCallback<ItemReceipt> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateItemReceiptByIdValidateBeforeCall(itemReceiptId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemReceipt>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemReceiptByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemReceiptByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemReceipt/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemReceiptByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getItemReceiptByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search itemReceipts by filter
     * Returns the list of itemReceipts that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;ItemReceipt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ItemReceipt> getItemReceiptByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<ItemReceipt>> resp = getItemReceiptByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search itemReceipts by filter
     * Returns the list of itemReceipts that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;ItemReceipt&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ItemReceipt>> getItemReceiptByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getItemReceiptByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<ItemReceipt>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search itemReceipts by filter (asynchronously)
     * Returns the list of itemReceipts that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemReceiptByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<ItemReceipt>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemReceiptByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ItemReceipt>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemReceiptById
     * @param itemReceiptId Id of the itemReceipt to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemReceiptByIdCall(Integer itemReceiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemReceipt/{itemReceiptId}"
            .replaceAll("\\{" + "itemReceiptId" + "\\}", apiClient.escapeString(itemReceiptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemReceiptByIdValidateBeforeCall(Integer itemReceiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemReceiptId' is set
        if (itemReceiptId == null) {
            throw new ApiException("Missing the required parameter 'itemReceiptId' when calling getItemReceiptById(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemReceiptByIdCall(itemReceiptId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an itemReceipt by id
     * Returns the itemReceipt identified by the specified id.
     * @param itemReceiptId Id of the itemReceipt to be returned. (required)
     * @return ItemReceipt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemReceipt getItemReceiptById(Integer itemReceiptId) throws ApiException {
        ApiResponse<ItemReceipt> resp = getItemReceiptByIdWithHttpInfo(itemReceiptId);
        return resp.getData();
    }

    /**
     * Get an itemReceipt by id
     * Returns the itemReceipt identified by the specified id.
     * @param itemReceiptId Id of the itemReceipt to be returned. (required)
     * @return ApiResponse&lt;ItemReceipt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemReceipt> getItemReceiptByIdWithHttpInfo(Integer itemReceiptId) throws ApiException {
        com.squareup.okhttp.Call call = getItemReceiptByIdValidateBeforeCall(itemReceiptId, null, null);
        Type localVarReturnType = new TypeToken<ItemReceipt>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an itemReceipt by id (asynchronously)
     * Returns the itemReceipt identified by the specified id.
     * @param itemReceiptId Id of the itemReceipt to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemReceiptByIdAsync(Integer itemReceiptId, final ApiCallback<ItemReceipt> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemReceiptByIdValidateBeforeCall(itemReceiptId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemReceipt>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemReceiptFiles
     * @param itemReceiptId Id of the itemReceipt to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemReceiptFilesCall(Integer itemReceiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemReceipt/{itemReceiptId}/file"
            .replaceAll("\\{" + "itemReceiptId" + "\\}", apiClient.escapeString(itemReceiptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemReceiptFilesValidateBeforeCall(Integer itemReceiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemReceiptId' is set
        if (itemReceiptId == null) {
            throw new ApiException("Missing the required parameter 'itemReceiptId' when calling getItemReceiptFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemReceiptFilesCall(itemReceiptId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for an itemReceipt.
     * Get all existing itemReceipt files.
     * @param itemReceiptId Id of the itemReceipt to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getItemReceiptFiles(Integer itemReceiptId) throws ApiException {
        getItemReceiptFilesWithHttpInfo(itemReceiptId);
    }

    /**
     * Get the files for an itemReceipt.
     * Get all existing itemReceipt files.
     * @param itemReceiptId Id of the itemReceipt to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getItemReceiptFilesWithHttpInfo(Integer itemReceiptId) throws ApiException {
        com.squareup.okhttp.Call call = getItemReceiptFilesValidateBeforeCall(itemReceiptId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for an itemReceipt. (asynchronously)
     * Get all existing itemReceipt files.
     * @param itemReceiptId Id of the itemReceipt to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemReceiptFilesAsync(Integer itemReceiptId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemReceiptFilesValidateBeforeCall(itemReceiptId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getItemReceiptTags
     * @param itemReceiptId Id of the itemReceipt to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemReceiptTagsCall(Integer itemReceiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemReceipt/{itemReceiptId}/tag"
            .replaceAll("\\{" + "itemReceiptId" + "\\}", apiClient.escapeString(itemReceiptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemReceiptTagsValidateBeforeCall(Integer itemReceiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemReceiptId' is set
        if (itemReceiptId == null) {
            throw new ApiException("Missing the required parameter 'itemReceiptId' when calling getItemReceiptTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemReceiptTagsCall(itemReceiptId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for an itemReceipt.
     * Get all existing itemReceipt tags.
     * @param itemReceiptId Id of the itemReceipt to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getItemReceiptTags(Integer itemReceiptId) throws ApiException {
        getItemReceiptTagsWithHttpInfo(itemReceiptId);
    }

    /**
     * Get the tags for an itemReceipt.
     * Get all existing itemReceipt tags.
     * @param itemReceiptId Id of the itemReceipt to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getItemReceiptTagsWithHttpInfo(Integer itemReceiptId) throws ApiException {
        com.squareup.okhttp.Call call = getItemReceiptTagsValidateBeforeCall(itemReceiptId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for an itemReceipt. (asynchronously)
     * Get all existing itemReceipt tags.
     * @param itemReceiptId Id of the itemReceipt to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemReceiptTagsAsync(Integer itemReceiptId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemReceiptTagsValidateBeforeCall(itemReceiptId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateItemReceipt
     * @param body ItemReceipt to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateItemReceiptCall(ItemReceipt body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/itemReceipt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateItemReceiptValidateBeforeCall(ItemReceipt body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateItemReceipt(Async)");
        }
        

        com.squareup.okhttp.Call call = updateItemReceiptCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an itemReceipt
     * Updates an existing itemReceipt using the specified data.
     * @param body ItemReceipt to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateItemReceipt(ItemReceipt body) throws ApiException {
        updateItemReceiptWithHttpInfo(body);
    }

    /**
     * Update an itemReceipt
     * Updates an existing itemReceipt using the specified data.
     * @param body ItemReceipt to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateItemReceiptWithHttpInfo(ItemReceipt body) throws ApiException {
        com.squareup.okhttp.Call call = updateItemReceiptValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an itemReceipt (asynchronously)
     * Updates an existing itemReceipt using the specified data.
     * @param body ItemReceipt to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateItemReceiptAsync(ItemReceipt body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateItemReceiptValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateItemReceiptCustomFields
     * @param body ItemReceipt to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateItemReceiptCustomFieldsCall(ItemReceipt body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/itemReceipt/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateItemReceiptCustomFieldsValidateBeforeCall(ItemReceipt body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateItemReceiptCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateItemReceiptCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an itemReceipt custom fields
     * Updates an existing itemReceipt custom fields using the specified data.
     * @param body ItemReceipt to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateItemReceiptCustomFields(ItemReceipt body) throws ApiException {
        updateItemReceiptCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update an itemReceipt custom fields
     * Updates an existing itemReceipt custom fields using the specified data.
     * @param body ItemReceipt to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateItemReceiptCustomFieldsWithHttpInfo(ItemReceipt body) throws ApiException {
        com.squareup.okhttp.Call call = updateItemReceiptCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an itemReceipt custom fields (asynchronously)
     * Updates an existing itemReceipt custom fields using the specified data.
     * @param body ItemReceipt to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateItemReceiptCustomFieldsAsync(ItemReceipt body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateItemReceiptCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
