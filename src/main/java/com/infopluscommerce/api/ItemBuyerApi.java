/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ItemBuyer;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ItemBuyerApi {
    private ApiClient apiClient;

    public ItemBuyerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ItemBuyerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addItemBuyer
     * @param body ItemBuyer to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemBuyerCall(ItemBuyer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/itemBuyer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemBuyerValidateBeforeCall(ItemBuyer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addItemBuyer(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemBuyerCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an itemBuyer
     * Inserts a new itemBuyer using the specified data.
     * @param body ItemBuyer to be inserted. (required)
     * @return ItemBuyer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemBuyer addItemBuyer(ItemBuyer body) throws ApiException {
        ApiResponse<ItemBuyer> resp = addItemBuyerWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create an itemBuyer
     * Inserts a new itemBuyer using the specified data.
     * @param body ItemBuyer to be inserted. (required)
     * @return ApiResponse&lt;ItemBuyer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemBuyer> addItemBuyerWithHttpInfo(ItemBuyer body) throws ApiException {
        com.squareup.okhttp.Call call = addItemBuyerValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ItemBuyer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an itemBuyer (asynchronously)
     * Inserts a new itemBuyer using the specified data.
     * @param body ItemBuyer to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemBuyerAsync(ItemBuyer body, final ApiCallback<ItemBuyer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemBuyerValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemBuyer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addItemBuyerAudit
     * @param itemBuyerId Id of the itemBuyer to add an audit to (required)
     * @param itemBuyerAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemBuyerAuditCall(Integer itemBuyerId, String itemBuyerAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemBuyer/{itemBuyerId}/audit/{itemBuyerAudit}"
            .replaceAll("\\{" + "itemBuyerId" + "\\}", apiClient.escapeString(itemBuyerId.toString()))
            .replaceAll("\\{" + "itemBuyerAudit" + "\\}", apiClient.escapeString(itemBuyerAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemBuyerAuditValidateBeforeCall(Integer itemBuyerId, String itemBuyerAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemBuyerId' is set
        if (itemBuyerId == null) {
            throw new ApiException("Missing the required parameter 'itemBuyerId' when calling addItemBuyerAudit(Async)");
        }
        
        // verify the required parameter 'itemBuyerAudit' is set
        if (itemBuyerAudit == null) {
            throw new ApiException("Missing the required parameter 'itemBuyerAudit' when calling addItemBuyerAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemBuyerAuditCall(itemBuyerId, itemBuyerAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for an itemBuyer
     * Adds an audit to an existing itemBuyer.
     * @param itemBuyerId Id of the itemBuyer to add an audit to (required)
     * @param itemBuyerAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemBuyerAudit(Integer itemBuyerId, String itemBuyerAudit) throws ApiException {
        addItemBuyerAuditWithHttpInfo(itemBuyerId, itemBuyerAudit);
    }

    /**
     * Add new audit for an itemBuyer
     * Adds an audit to an existing itemBuyer.
     * @param itemBuyerId Id of the itemBuyer to add an audit to (required)
     * @param itemBuyerAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemBuyerAuditWithHttpInfo(Integer itemBuyerId, String itemBuyerAudit) throws ApiException {
        com.squareup.okhttp.Call call = addItemBuyerAuditValidateBeforeCall(itemBuyerId, itemBuyerAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for an itemBuyer (asynchronously)
     * Adds an audit to an existing itemBuyer.
     * @param itemBuyerId Id of the itemBuyer to add an audit to (required)
     * @param itemBuyerAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemBuyerAuditAsync(Integer itemBuyerId, String itemBuyerAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemBuyerAuditValidateBeforeCall(itemBuyerId, itemBuyerAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemBuyerFile
     * @param itemBuyerId Id of the itemBuyer to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemBuyerFileCall(Integer itemBuyerId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemBuyer/{itemBuyerId}/file/{fileName}"
            .replaceAll("\\{" + "itemBuyerId" + "\\}", apiClient.escapeString(itemBuyerId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemBuyerFileValidateBeforeCall(Integer itemBuyerId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemBuyerId' is set
        if (itemBuyerId == null) {
            throw new ApiException("Missing the required parameter 'itemBuyerId' when calling addItemBuyerFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addItemBuyerFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemBuyerFileCall(itemBuyerId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an itemBuyer
     * Adds a file to an existing itemBuyer.
     * @param itemBuyerId Id of the itemBuyer to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemBuyerFile(Integer itemBuyerId, String fileName) throws ApiException {
        addItemBuyerFileWithHttpInfo(itemBuyerId, fileName);
    }

    /**
     * Attach a file to an itemBuyer
     * Adds a file to an existing itemBuyer.
     * @param itemBuyerId Id of the itemBuyer to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemBuyerFileWithHttpInfo(Integer itemBuyerId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addItemBuyerFileValidateBeforeCall(itemBuyerId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an itemBuyer (asynchronously)
     * Adds a file to an existing itemBuyer.
     * @param itemBuyerId Id of the itemBuyer to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemBuyerFileAsync(Integer itemBuyerId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemBuyerFileValidateBeforeCall(itemBuyerId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemBuyerFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param itemBuyerId Id of the itemBuyer to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemBuyerFileByURLCall(RecordFile body, Integer itemBuyerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/itemBuyer/{itemBuyerId}/file"
            .replaceAll("\\{" + "itemBuyerId" + "\\}", apiClient.escapeString(itemBuyerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemBuyerFileByURLValidateBeforeCall(RecordFile body, Integer itemBuyerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addItemBuyerFileByURL(Async)");
        }
        
        // verify the required parameter 'itemBuyerId' is set
        if (itemBuyerId == null) {
            throw new ApiException("Missing the required parameter 'itemBuyerId' when calling addItemBuyerFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemBuyerFileByURLCall(body, itemBuyerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an itemBuyer by URL.
     * Adds a file to an existing itemBuyer by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param itemBuyerId Id of the itemBuyer to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemBuyerFileByURL(RecordFile body, Integer itemBuyerId) throws ApiException {
        addItemBuyerFileByURLWithHttpInfo(body, itemBuyerId);
    }

    /**
     * Attach a file to an itemBuyer by URL.
     * Adds a file to an existing itemBuyer by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param itemBuyerId Id of the itemBuyer to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemBuyerFileByURLWithHttpInfo(RecordFile body, Integer itemBuyerId) throws ApiException {
        com.squareup.okhttp.Call call = addItemBuyerFileByURLValidateBeforeCall(body, itemBuyerId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an itemBuyer by URL. (asynchronously)
     * Adds a file to an existing itemBuyer by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param itemBuyerId Id of the itemBuyer to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemBuyerFileByURLAsync(RecordFile body, Integer itemBuyerId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemBuyerFileByURLValidateBeforeCall(body, itemBuyerId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemBuyerTag
     * @param itemBuyerId Id of the itemBuyer to add a tag to (required)
     * @param itemBuyerTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemBuyerTagCall(Integer itemBuyerId, String itemBuyerTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemBuyer/{itemBuyerId}/tag/{itemBuyerTag}"
            .replaceAll("\\{" + "itemBuyerId" + "\\}", apiClient.escapeString(itemBuyerId.toString()))
            .replaceAll("\\{" + "itemBuyerTag" + "\\}", apiClient.escapeString(itemBuyerTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemBuyerTagValidateBeforeCall(Integer itemBuyerId, String itemBuyerTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemBuyerId' is set
        if (itemBuyerId == null) {
            throw new ApiException("Missing the required parameter 'itemBuyerId' when calling addItemBuyerTag(Async)");
        }
        
        // verify the required parameter 'itemBuyerTag' is set
        if (itemBuyerTag == null) {
            throw new ApiException("Missing the required parameter 'itemBuyerTag' when calling addItemBuyerTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemBuyerTagCall(itemBuyerId, itemBuyerTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for an itemBuyer.
     * Adds a tag to an existing itemBuyer.
     * @param itemBuyerId Id of the itemBuyer to add a tag to (required)
     * @param itemBuyerTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemBuyerTag(Integer itemBuyerId, String itemBuyerTag) throws ApiException {
        addItemBuyerTagWithHttpInfo(itemBuyerId, itemBuyerTag);
    }

    /**
     * Add new tags for an itemBuyer.
     * Adds a tag to an existing itemBuyer.
     * @param itemBuyerId Id of the itemBuyer to add a tag to (required)
     * @param itemBuyerTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemBuyerTagWithHttpInfo(Integer itemBuyerId, String itemBuyerTag) throws ApiException {
        com.squareup.okhttp.Call call = addItemBuyerTagValidateBeforeCall(itemBuyerId, itemBuyerTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for an itemBuyer. (asynchronously)
     * Adds a tag to an existing itemBuyer.
     * @param itemBuyerId Id of the itemBuyer to add a tag to (required)
     * @param itemBuyerTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemBuyerTagAsync(Integer itemBuyerId, String itemBuyerTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemBuyerTagValidateBeforeCall(itemBuyerId, itemBuyerTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemBuyer
     * @param itemBuyerId Id of the itemBuyer to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemBuyerCall(Integer itemBuyerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemBuyer/{itemBuyerId}"
            .replaceAll("\\{" + "itemBuyerId" + "\\}", apiClient.escapeString(itemBuyerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemBuyerValidateBeforeCall(Integer itemBuyerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemBuyerId' is set
        if (itemBuyerId == null) {
            throw new ApiException("Missing the required parameter 'itemBuyerId' when calling deleteItemBuyer(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemBuyerCall(itemBuyerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an itemBuyer
     * Deletes the itemBuyer identified by the specified id.
     * @param itemBuyerId Id of the itemBuyer to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemBuyer(Integer itemBuyerId) throws ApiException {
        deleteItemBuyerWithHttpInfo(itemBuyerId);
    }

    /**
     * Delete an itemBuyer
     * Deletes the itemBuyer identified by the specified id.
     * @param itemBuyerId Id of the itemBuyer to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemBuyerWithHttpInfo(Integer itemBuyerId) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemBuyerValidateBeforeCall(itemBuyerId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an itemBuyer (asynchronously)
     * Deletes the itemBuyer identified by the specified id.
     * @param itemBuyerId Id of the itemBuyer to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemBuyerAsync(Integer itemBuyerId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemBuyerValidateBeforeCall(itemBuyerId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemBuyerFile
     * @param itemBuyerId Id of the itemBuyer to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemBuyerFileCall(Integer itemBuyerId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemBuyer/{itemBuyerId}/file/{fileId}"
            .replaceAll("\\{" + "itemBuyerId" + "\\}", apiClient.escapeString(itemBuyerId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemBuyerFileValidateBeforeCall(Integer itemBuyerId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemBuyerId' is set
        if (itemBuyerId == null) {
            throw new ApiException("Missing the required parameter 'itemBuyerId' when calling deleteItemBuyerFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteItemBuyerFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemBuyerFileCall(itemBuyerId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for an itemBuyer.
     * Deletes an existing itemBuyer file using the specified data.
     * @param itemBuyerId Id of the itemBuyer to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemBuyerFile(Integer itemBuyerId, Integer fileId) throws ApiException {
        deleteItemBuyerFileWithHttpInfo(itemBuyerId, fileId);
    }

    /**
     * Delete a file for an itemBuyer.
     * Deletes an existing itemBuyer file using the specified data.
     * @param itemBuyerId Id of the itemBuyer to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemBuyerFileWithHttpInfo(Integer itemBuyerId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemBuyerFileValidateBeforeCall(itemBuyerId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for an itemBuyer. (asynchronously)
     * Deletes an existing itemBuyer file using the specified data.
     * @param itemBuyerId Id of the itemBuyer to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemBuyerFileAsync(Integer itemBuyerId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemBuyerFileValidateBeforeCall(itemBuyerId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemBuyerTag
     * @param itemBuyerId Id of the itemBuyer to remove tag from (required)
     * @param itemBuyerTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemBuyerTagCall(Integer itemBuyerId, String itemBuyerTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemBuyer/{itemBuyerId}/tag/{itemBuyerTag}"
            .replaceAll("\\{" + "itemBuyerId" + "\\}", apiClient.escapeString(itemBuyerId.toString()))
            .replaceAll("\\{" + "itemBuyerTag" + "\\}", apiClient.escapeString(itemBuyerTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemBuyerTagValidateBeforeCall(Integer itemBuyerId, String itemBuyerTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemBuyerId' is set
        if (itemBuyerId == null) {
            throw new ApiException("Missing the required parameter 'itemBuyerId' when calling deleteItemBuyerTag(Async)");
        }
        
        // verify the required parameter 'itemBuyerTag' is set
        if (itemBuyerTag == null) {
            throw new ApiException("Missing the required parameter 'itemBuyerTag' when calling deleteItemBuyerTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemBuyerTagCall(itemBuyerId, itemBuyerTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for an itemBuyer.
     * Deletes an existing itemBuyer tag using the specified data.
     * @param itemBuyerId Id of the itemBuyer to remove tag from (required)
     * @param itemBuyerTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemBuyerTag(Integer itemBuyerId, String itemBuyerTag) throws ApiException {
        deleteItemBuyerTagWithHttpInfo(itemBuyerId, itemBuyerTag);
    }

    /**
     * Delete a tag for an itemBuyer.
     * Deletes an existing itemBuyer tag using the specified data.
     * @param itemBuyerId Id of the itemBuyer to remove tag from (required)
     * @param itemBuyerTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemBuyerTagWithHttpInfo(Integer itemBuyerId, String itemBuyerTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemBuyerTagValidateBeforeCall(itemBuyerId, itemBuyerTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for an itemBuyer. (asynchronously)
     * Deletes an existing itemBuyer tag using the specified data.
     * @param itemBuyerId Id of the itemBuyer to remove tag from (required)
     * @param itemBuyerTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemBuyerTagAsync(Integer itemBuyerId, String itemBuyerTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemBuyerTagValidateBeforeCall(itemBuyerId, itemBuyerTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateItemBuyerById
     * @param itemBuyerId Id of the itemBuyer to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateItemBuyerByIdCall(Integer itemBuyerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemBuyer/duplicate/{itemBuyerId}"
            .replaceAll("\\{" + "itemBuyerId" + "\\}", apiClient.escapeString(itemBuyerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateItemBuyerByIdValidateBeforeCall(Integer itemBuyerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemBuyerId' is set
        if (itemBuyerId == null) {
            throw new ApiException("Missing the required parameter 'itemBuyerId' when calling getDuplicateItemBuyerById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateItemBuyerByIdCall(itemBuyerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated an itemBuyer by id
     * Returns a duplicated itemBuyer identified by the specified id.
     * @param itemBuyerId Id of the itemBuyer to be duplicated. (required)
     * @return ItemBuyer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemBuyer getDuplicateItemBuyerById(Integer itemBuyerId) throws ApiException {
        ApiResponse<ItemBuyer> resp = getDuplicateItemBuyerByIdWithHttpInfo(itemBuyerId);
        return resp.getData();
    }

    /**
     * Get a duplicated an itemBuyer by id
     * Returns a duplicated itemBuyer identified by the specified id.
     * @param itemBuyerId Id of the itemBuyer to be duplicated. (required)
     * @return ApiResponse&lt;ItemBuyer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemBuyer> getDuplicateItemBuyerByIdWithHttpInfo(Integer itemBuyerId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateItemBuyerByIdValidateBeforeCall(itemBuyerId, null, null);
        Type localVarReturnType = new TypeToken<ItemBuyer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated an itemBuyer by id (asynchronously)
     * Returns a duplicated itemBuyer identified by the specified id.
     * @param itemBuyerId Id of the itemBuyer to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateItemBuyerByIdAsync(Integer itemBuyerId, final ApiCallback<ItemBuyer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateItemBuyerByIdValidateBeforeCall(itemBuyerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemBuyer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemBuyerByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemBuyerByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemBuyer/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemBuyerByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getItemBuyerByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search itemBuyers by filter
     * Returns the list of itemBuyers that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;ItemBuyer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ItemBuyer> getItemBuyerByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<ItemBuyer>> resp = getItemBuyerByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search itemBuyers by filter
     * Returns the list of itemBuyers that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;ItemBuyer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ItemBuyer>> getItemBuyerByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getItemBuyerByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<ItemBuyer>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search itemBuyers by filter (asynchronously)
     * Returns the list of itemBuyers that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemBuyerByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<ItemBuyer>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemBuyerByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ItemBuyer>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemBuyerById
     * @param itemBuyerId Id of the itemBuyer to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemBuyerByIdCall(Integer itemBuyerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemBuyer/{itemBuyerId}"
            .replaceAll("\\{" + "itemBuyerId" + "\\}", apiClient.escapeString(itemBuyerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemBuyerByIdValidateBeforeCall(Integer itemBuyerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemBuyerId' is set
        if (itemBuyerId == null) {
            throw new ApiException("Missing the required parameter 'itemBuyerId' when calling getItemBuyerById(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemBuyerByIdCall(itemBuyerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an itemBuyer by id
     * Returns the itemBuyer identified by the specified id.
     * @param itemBuyerId Id of the itemBuyer to be returned. (required)
     * @return ItemBuyer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemBuyer getItemBuyerById(Integer itemBuyerId) throws ApiException {
        ApiResponse<ItemBuyer> resp = getItemBuyerByIdWithHttpInfo(itemBuyerId);
        return resp.getData();
    }

    /**
     * Get an itemBuyer by id
     * Returns the itemBuyer identified by the specified id.
     * @param itemBuyerId Id of the itemBuyer to be returned. (required)
     * @return ApiResponse&lt;ItemBuyer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemBuyer> getItemBuyerByIdWithHttpInfo(Integer itemBuyerId) throws ApiException {
        com.squareup.okhttp.Call call = getItemBuyerByIdValidateBeforeCall(itemBuyerId, null, null);
        Type localVarReturnType = new TypeToken<ItemBuyer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an itemBuyer by id (asynchronously)
     * Returns the itemBuyer identified by the specified id.
     * @param itemBuyerId Id of the itemBuyer to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemBuyerByIdAsync(Integer itemBuyerId, final ApiCallback<ItemBuyer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemBuyerByIdValidateBeforeCall(itemBuyerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemBuyer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemBuyerFiles
     * @param itemBuyerId Id of the itemBuyer to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemBuyerFilesCall(Integer itemBuyerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemBuyer/{itemBuyerId}/file"
            .replaceAll("\\{" + "itemBuyerId" + "\\}", apiClient.escapeString(itemBuyerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemBuyerFilesValidateBeforeCall(Integer itemBuyerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemBuyerId' is set
        if (itemBuyerId == null) {
            throw new ApiException("Missing the required parameter 'itemBuyerId' when calling getItemBuyerFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemBuyerFilesCall(itemBuyerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for an itemBuyer.
     * Get all existing itemBuyer files.
     * @param itemBuyerId Id of the itemBuyer to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getItemBuyerFiles(Integer itemBuyerId) throws ApiException {
        getItemBuyerFilesWithHttpInfo(itemBuyerId);
    }

    /**
     * Get the files for an itemBuyer.
     * Get all existing itemBuyer files.
     * @param itemBuyerId Id of the itemBuyer to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getItemBuyerFilesWithHttpInfo(Integer itemBuyerId) throws ApiException {
        com.squareup.okhttp.Call call = getItemBuyerFilesValidateBeforeCall(itemBuyerId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for an itemBuyer. (asynchronously)
     * Get all existing itemBuyer files.
     * @param itemBuyerId Id of the itemBuyer to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemBuyerFilesAsync(Integer itemBuyerId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemBuyerFilesValidateBeforeCall(itemBuyerId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getItemBuyerTags
     * @param itemBuyerId Id of the itemBuyer to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemBuyerTagsCall(Integer itemBuyerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemBuyer/{itemBuyerId}/tag"
            .replaceAll("\\{" + "itemBuyerId" + "\\}", apiClient.escapeString(itemBuyerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemBuyerTagsValidateBeforeCall(Integer itemBuyerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemBuyerId' is set
        if (itemBuyerId == null) {
            throw new ApiException("Missing the required parameter 'itemBuyerId' when calling getItemBuyerTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemBuyerTagsCall(itemBuyerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for an itemBuyer.
     * Get all existing itemBuyer tags.
     * @param itemBuyerId Id of the itemBuyer to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getItemBuyerTags(Integer itemBuyerId) throws ApiException {
        getItemBuyerTagsWithHttpInfo(itemBuyerId);
    }

    /**
     * Get the tags for an itemBuyer.
     * Get all existing itemBuyer tags.
     * @param itemBuyerId Id of the itemBuyer to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getItemBuyerTagsWithHttpInfo(Integer itemBuyerId) throws ApiException {
        com.squareup.okhttp.Call call = getItemBuyerTagsValidateBeforeCall(itemBuyerId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for an itemBuyer. (asynchronously)
     * Get all existing itemBuyer tags.
     * @param itemBuyerId Id of the itemBuyer to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemBuyerTagsAsync(Integer itemBuyerId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemBuyerTagsValidateBeforeCall(itemBuyerId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateItemBuyer
     * @param body ItemBuyer to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateItemBuyerCall(ItemBuyer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/itemBuyer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateItemBuyerValidateBeforeCall(ItemBuyer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateItemBuyer(Async)");
        }
        

        com.squareup.okhttp.Call call = updateItemBuyerCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an itemBuyer
     * Updates an existing itemBuyer using the specified data.
     * @param body ItemBuyer to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateItemBuyer(ItemBuyer body) throws ApiException {
        updateItemBuyerWithHttpInfo(body);
    }

    /**
     * Update an itemBuyer
     * Updates an existing itemBuyer using the specified data.
     * @param body ItemBuyer to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateItemBuyerWithHttpInfo(ItemBuyer body) throws ApiException {
        com.squareup.okhttp.Call call = updateItemBuyerValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an itemBuyer (asynchronously)
     * Updates an existing itemBuyer using the specified data.
     * @param body ItemBuyer to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateItemBuyerAsync(ItemBuyer body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateItemBuyerValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
