/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.LegacyLowstockContact;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LegacyLowstockContactApi {
    private ApiClient apiClient;

    public LegacyLowstockContactApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LegacyLowstockContactApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addLegacyLowstockContact
     * @param body LegacyLowstockContact to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLegacyLowstockContactCall(LegacyLowstockContact body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/legacyLowstockContact";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLegacyLowstockContactValidateBeforeCall(LegacyLowstockContact body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addLegacyLowstockContact(Async)");
        }
        

        com.squareup.okhttp.Call call = addLegacyLowstockContactCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a legacyLowstockContact
     * Inserts a new legacyLowstockContact using the specified data.
     * @param body LegacyLowstockContact to be inserted. (required)
     * @return LegacyLowstockContact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LegacyLowstockContact addLegacyLowstockContact(LegacyLowstockContact body) throws ApiException {
        ApiResponse<LegacyLowstockContact> resp = addLegacyLowstockContactWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a legacyLowstockContact
     * Inserts a new legacyLowstockContact using the specified data.
     * @param body LegacyLowstockContact to be inserted. (required)
     * @return ApiResponse&lt;LegacyLowstockContact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LegacyLowstockContact> addLegacyLowstockContactWithHttpInfo(LegacyLowstockContact body) throws ApiException {
        com.squareup.okhttp.Call call = addLegacyLowstockContactValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<LegacyLowstockContact>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a legacyLowstockContact (asynchronously)
     * Inserts a new legacyLowstockContact using the specified data.
     * @param body LegacyLowstockContact to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLegacyLowstockContactAsync(LegacyLowstockContact body, final ApiCallback<LegacyLowstockContact> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLegacyLowstockContactValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LegacyLowstockContact>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addLegacyLowstockContactAudit
     * @param legacyLowstockContactId Id of the legacyLowstockContact to add an audit to (required)
     * @param legacyLowstockContactAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLegacyLowstockContactAuditCall(Integer legacyLowstockContactId, String legacyLowstockContactAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/legacyLowstockContact/{legacyLowstockContactId}/audit/{legacyLowstockContactAudit}"
            .replaceAll("\\{" + "legacyLowstockContactId" + "\\}", apiClient.escapeString(legacyLowstockContactId.toString()))
            .replaceAll("\\{" + "legacyLowstockContactAudit" + "\\}", apiClient.escapeString(legacyLowstockContactAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLegacyLowstockContactAuditValidateBeforeCall(Integer legacyLowstockContactId, String legacyLowstockContactAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'legacyLowstockContactId' is set
        if (legacyLowstockContactId == null) {
            throw new ApiException("Missing the required parameter 'legacyLowstockContactId' when calling addLegacyLowstockContactAudit(Async)");
        }
        
        // verify the required parameter 'legacyLowstockContactAudit' is set
        if (legacyLowstockContactAudit == null) {
            throw new ApiException("Missing the required parameter 'legacyLowstockContactAudit' when calling addLegacyLowstockContactAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addLegacyLowstockContactAuditCall(legacyLowstockContactId, legacyLowstockContactAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a legacyLowstockContact
     * Adds an audit to an existing legacyLowstockContact.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to add an audit to (required)
     * @param legacyLowstockContactAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addLegacyLowstockContactAudit(Integer legacyLowstockContactId, String legacyLowstockContactAudit) throws ApiException {
        addLegacyLowstockContactAuditWithHttpInfo(legacyLowstockContactId, legacyLowstockContactAudit);
    }

    /**
     * Add new audit for a legacyLowstockContact
     * Adds an audit to an existing legacyLowstockContact.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to add an audit to (required)
     * @param legacyLowstockContactAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addLegacyLowstockContactAuditWithHttpInfo(Integer legacyLowstockContactId, String legacyLowstockContactAudit) throws ApiException {
        com.squareup.okhttp.Call call = addLegacyLowstockContactAuditValidateBeforeCall(legacyLowstockContactId, legacyLowstockContactAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a legacyLowstockContact (asynchronously)
     * Adds an audit to an existing legacyLowstockContact.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to add an audit to (required)
     * @param legacyLowstockContactAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLegacyLowstockContactAuditAsync(Integer legacyLowstockContactId, String legacyLowstockContactAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLegacyLowstockContactAuditValidateBeforeCall(legacyLowstockContactId, legacyLowstockContactAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addLegacyLowstockContactFile
     * @param legacyLowstockContactId Id of the legacyLowstockContact to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLegacyLowstockContactFileCall(Integer legacyLowstockContactId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/legacyLowstockContact/{legacyLowstockContactId}/file/{fileName}"
            .replaceAll("\\{" + "legacyLowstockContactId" + "\\}", apiClient.escapeString(legacyLowstockContactId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLegacyLowstockContactFileValidateBeforeCall(Integer legacyLowstockContactId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'legacyLowstockContactId' is set
        if (legacyLowstockContactId == null) {
            throw new ApiException("Missing the required parameter 'legacyLowstockContactId' when calling addLegacyLowstockContactFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addLegacyLowstockContactFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addLegacyLowstockContactFileCall(legacyLowstockContactId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a legacyLowstockContact
     * Adds a file to an existing legacyLowstockContact.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addLegacyLowstockContactFile(Integer legacyLowstockContactId, String fileName) throws ApiException {
        addLegacyLowstockContactFileWithHttpInfo(legacyLowstockContactId, fileName);
    }

    /**
     * Attach a file to a legacyLowstockContact
     * Adds a file to an existing legacyLowstockContact.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addLegacyLowstockContactFileWithHttpInfo(Integer legacyLowstockContactId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addLegacyLowstockContactFileValidateBeforeCall(legacyLowstockContactId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a legacyLowstockContact (asynchronously)
     * Adds a file to an existing legacyLowstockContact.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLegacyLowstockContactFileAsync(Integer legacyLowstockContactId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLegacyLowstockContactFileValidateBeforeCall(legacyLowstockContactId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addLegacyLowstockContactFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param legacyLowstockContactId Id of the legacyLowstockContact to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLegacyLowstockContactFileByURLCall(RecordFile body, Integer legacyLowstockContactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/legacyLowstockContact/{legacyLowstockContactId}/file"
            .replaceAll("\\{" + "legacyLowstockContactId" + "\\}", apiClient.escapeString(legacyLowstockContactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLegacyLowstockContactFileByURLValidateBeforeCall(RecordFile body, Integer legacyLowstockContactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addLegacyLowstockContactFileByURL(Async)");
        }
        
        // verify the required parameter 'legacyLowstockContactId' is set
        if (legacyLowstockContactId == null) {
            throw new ApiException("Missing the required parameter 'legacyLowstockContactId' when calling addLegacyLowstockContactFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addLegacyLowstockContactFileByURLCall(body, legacyLowstockContactId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a legacyLowstockContact by URL.
     * Adds a file to an existing legacyLowstockContact by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param legacyLowstockContactId Id of the legacyLowstockContact to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addLegacyLowstockContactFileByURL(RecordFile body, Integer legacyLowstockContactId) throws ApiException {
        addLegacyLowstockContactFileByURLWithHttpInfo(body, legacyLowstockContactId);
    }

    /**
     * Attach a file to a legacyLowstockContact by URL.
     * Adds a file to an existing legacyLowstockContact by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param legacyLowstockContactId Id of the legacyLowstockContact to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addLegacyLowstockContactFileByURLWithHttpInfo(RecordFile body, Integer legacyLowstockContactId) throws ApiException {
        com.squareup.okhttp.Call call = addLegacyLowstockContactFileByURLValidateBeforeCall(body, legacyLowstockContactId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a legacyLowstockContact by URL. (asynchronously)
     * Adds a file to an existing legacyLowstockContact by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param legacyLowstockContactId Id of the legacyLowstockContact to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLegacyLowstockContactFileByURLAsync(RecordFile body, Integer legacyLowstockContactId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLegacyLowstockContactFileByURLValidateBeforeCall(body, legacyLowstockContactId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addLegacyLowstockContactTag
     * @param legacyLowstockContactId Id of the legacyLowstockContact to add a tag to (required)
     * @param legacyLowstockContactTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLegacyLowstockContactTagCall(Integer legacyLowstockContactId, String legacyLowstockContactTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/legacyLowstockContact/{legacyLowstockContactId}/tag/{legacyLowstockContactTag}"
            .replaceAll("\\{" + "legacyLowstockContactId" + "\\}", apiClient.escapeString(legacyLowstockContactId.toString()))
            .replaceAll("\\{" + "legacyLowstockContactTag" + "\\}", apiClient.escapeString(legacyLowstockContactTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLegacyLowstockContactTagValidateBeforeCall(Integer legacyLowstockContactId, String legacyLowstockContactTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'legacyLowstockContactId' is set
        if (legacyLowstockContactId == null) {
            throw new ApiException("Missing the required parameter 'legacyLowstockContactId' when calling addLegacyLowstockContactTag(Async)");
        }
        
        // verify the required parameter 'legacyLowstockContactTag' is set
        if (legacyLowstockContactTag == null) {
            throw new ApiException("Missing the required parameter 'legacyLowstockContactTag' when calling addLegacyLowstockContactTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addLegacyLowstockContactTagCall(legacyLowstockContactId, legacyLowstockContactTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a legacyLowstockContact.
     * Adds a tag to an existing legacyLowstockContact.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to add a tag to (required)
     * @param legacyLowstockContactTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addLegacyLowstockContactTag(Integer legacyLowstockContactId, String legacyLowstockContactTag) throws ApiException {
        addLegacyLowstockContactTagWithHttpInfo(legacyLowstockContactId, legacyLowstockContactTag);
    }

    /**
     * Add new tags for a legacyLowstockContact.
     * Adds a tag to an existing legacyLowstockContact.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to add a tag to (required)
     * @param legacyLowstockContactTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addLegacyLowstockContactTagWithHttpInfo(Integer legacyLowstockContactId, String legacyLowstockContactTag) throws ApiException {
        com.squareup.okhttp.Call call = addLegacyLowstockContactTagValidateBeforeCall(legacyLowstockContactId, legacyLowstockContactTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a legacyLowstockContact. (asynchronously)
     * Adds a tag to an existing legacyLowstockContact.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to add a tag to (required)
     * @param legacyLowstockContactTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLegacyLowstockContactTagAsync(Integer legacyLowstockContactId, String legacyLowstockContactTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLegacyLowstockContactTagValidateBeforeCall(legacyLowstockContactId, legacyLowstockContactTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLegacyLowstockContact
     * @param legacyLowstockContactId Id of the legacyLowstockContact to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLegacyLowstockContactCall(Integer legacyLowstockContactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/legacyLowstockContact/{legacyLowstockContactId}"
            .replaceAll("\\{" + "legacyLowstockContactId" + "\\}", apiClient.escapeString(legacyLowstockContactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLegacyLowstockContactValidateBeforeCall(Integer legacyLowstockContactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'legacyLowstockContactId' is set
        if (legacyLowstockContactId == null) {
            throw new ApiException("Missing the required parameter 'legacyLowstockContactId' when calling deleteLegacyLowstockContact(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteLegacyLowstockContactCall(legacyLowstockContactId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a legacyLowstockContact
     * Deletes the legacyLowstockContact identified by the specified id.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLegacyLowstockContact(Integer legacyLowstockContactId) throws ApiException {
        deleteLegacyLowstockContactWithHttpInfo(legacyLowstockContactId);
    }

    /**
     * Delete a legacyLowstockContact
     * Deletes the legacyLowstockContact identified by the specified id.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLegacyLowstockContactWithHttpInfo(Integer legacyLowstockContactId) throws ApiException {
        com.squareup.okhttp.Call call = deleteLegacyLowstockContactValidateBeforeCall(legacyLowstockContactId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a legacyLowstockContact (asynchronously)
     * Deletes the legacyLowstockContact identified by the specified id.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLegacyLowstockContactAsync(Integer legacyLowstockContactId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLegacyLowstockContactValidateBeforeCall(legacyLowstockContactId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLegacyLowstockContactFile
     * @param legacyLowstockContactId Id of the legacyLowstockContact to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLegacyLowstockContactFileCall(Integer legacyLowstockContactId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/legacyLowstockContact/{legacyLowstockContactId}/file/{fileId}"
            .replaceAll("\\{" + "legacyLowstockContactId" + "\\}", apiClient.escapeString(legacyLowstockContactId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLegacyLowstockContactFileValidateBeforeCall(Integer legacyLowstockContactId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'legacyLowstockContactId' is set
        if (legacyLowstockContactId == null) {
            throw new ApiException("Missing the required parameter 'legacyLowstockContactId' when calling deleteLegacyLowstockContactFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteLegacyLowstockContactFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteLegacyLowstockContactFileCall(legacyLowstockContactId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a legacyLowstockContact.
     * Deletes an existing legacyLowstockContact file using the specified data.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLegacyLowstockContactFile(Integer legacyLowstockContactId, Integer fileId) throws ApiException {
        deleteLegacyLowstockContactFileWithHttpInfo(legacyLowstockContactId, fileId);
    }

    /**
     * Delete a file for a legacyLowstockContact.
     * Deletes an existing legacyLowstockContact file using the specified data.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLegacyLowstockContactFileWithHttpInfo(Integer legacyLowstockContactId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteLegacyLowstockContactFileValidateBeforeCall(legacyLowstockContactId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a legacyLowstockContact. (asynchronously)
     * Deletes an existing legacyLowstockContact file using the specified data.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLegacyLowstockContactFileAsync(Integer legacyLowstockContactId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLegacyLowstockContactFileValidateBeforeCall(legacyLowstockContactId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLegacyLowstockContactTag
     * @param legacyLowstockContactId Id of the legacyLowstockContact to remove tag from (required)
     * @param legacyLowstockContactTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLegacyLowstockContactTagCall(Integer legacyLowstockContactId, String legacyLowstockContactTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/legacyLowstockContact/{legacyLowstockContactId}/tag/{legacyLowstockContactTag}"
            .replaceAll("\\{" + "legacyLowstockContactId" + "\\}", apiClient.escapeString(legacyLowstockContactId.toString()))
            .replaceAll("\\{" + "legacyLowstockContactTag" + "\\}", apiClient.escapeString(legacyLowstockContactTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLegacyLowstockContactTagValidateBeforeCall(Integer legacyLowstockContactId, String legacyLowstockContactTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'legacyLowstockContactId' is set
        if (legacyLowstockContactId == null) {
            throw new ApiException("Missing the required parameter 'legacyLowstockContactId' when calling deleteLegacyLowstockContactTag(Async)");
        }
        
        // verify the required parameter 'legacyLowstockContactTag' is set
        if (legacyLowstockContactTag == null) {
            throw new ApiException("Missing the required parameter 'legacyLowstockContactTag' when calling deleteLegacyLowstockContactTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteLegacyLowstockContactTagCall(legacyLowstockContactId, legacyLowstockContactTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a legacyLowstockContact.
     * Deletes an existing legacyLowstockContact tag using the specified data.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to remove tag from (required)
     * @param legacyLowstockContactTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLegacyLowstockContactTag(Integer legacyLowstockContactId, String legacyLowstockContactTag) throws ApiException {
        deleteLegacyLowstockContactTagWithHttpInfo(legacyLowstockContactId, legacyLowstockContactTag);
    }

    /**
     * Delete a tag for a legacyLowstockContact.
     * Deletes an existing legacyLowstockContact tag using the specified data.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to remove tag from (required)
     * @param legacyLowstockContactTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLegacyLowstockContactTagWithHttpInfo(Integer legacyLowstockContactId, String legacyLowstockContactTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteLegacyLowstockContactTagValidateBeforeCall(legacyLowstockContactId, legacyLowstockContactTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a legacyLowstockContact. (asynchronously)
     * Deletes an existing legacyLowstockContact tag using the specified data.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to remove tag from (required)
     * @param legacyLowstockContactTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLegacyLowstockContactTagAsync(Integer legacyLowstockContactId, String legacyLowstockContactTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLegacyLowstockContactTagValidateBeforeCall(legacyLowstockContactId, legacyLowstockContactTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateLegacyLowstockContactById
     * @param legacyLowstockContactId Id of the legacyLowstockContact to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateLegacyLowstockContactByIdCall(Integer legacyLowstockContactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/legacyLowstockContact/duplicate/{legacyLowstockContactId}"
            .replaceAll("\\{" + "legacyLowstockContactId" + "\\}", apiClient.escapeString(legacyLowstockContactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateLegacyLowstockContactByIdValidateBeforeCall(Integer legacyLowstockContactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'legacyLowstockContactId' is set
        if (legacyLowstockContactId == null) {
            throw new ApiException("Missing the required parameter 'legacyLowstockContactId' when calling getDuplicateLegacyLowstockContactById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateLegacyLowstockContactByIdCall(legacyLowstockContactId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a legacyLowstockContact by id
     * Returns a duplicated legacyLowstockContact identified by the specified id.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to be duplicated. (required)
     * @return LegacyLowstockContact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LegacyLowstockContact getDuplicateLegacyLowstockContactById(Integer legacyLowstockContactId) throws ApiException {
        ApiResponse<LegacyLowstockContact> resp = getDuplicateLegacyLowstockContactByIdWithHttpInfo(legacyLowstockContactId);
        return resp.getData();
    }

    /**
     * Get a duplicated a legacyLowstockContact by id
     * Returns a duplicated legacyLowstockContact identified by the specified id.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to be duplicated. (required)
     * @return ApiResponse&lt;LegacyLowstockContact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LegacyLowstockContact> getDuplicateLegacyLowstockContactByIdWithHttpInfo(Integer legacyLowstockContactId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateLegacyLowstockContactByIdValidateBeforeCall(legacyLowstockContactId, null, null);
        Type localVarReturnType = new TypeToken<LegacyLowstockContact>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a legacyLowstockContact by id (asynchronously)
     * Returns a duplicated legacyLowstockContact identified by the specified id.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateLegacyLowstockContactByIdAsync(Integer legacyLowstockContactId, final ApiCallback<LegacyLowstockContact> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateLegacyLowstockContactByIdValidateBeforeCall(legacyLowstockContactId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LegacyLowstockContact>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLegacyLowstockContactByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLegacyLowstockContactByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/legacyLowstockContact/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLegacyLowstockContactByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getLegacyLowstockContactByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search legacyLowstockContacts by filter
     * Returns the list of legacyLowstockContacts that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;LegacyLowstockContact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LegacyLowstockContact> getLegacyLowstockContactByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<LegacyLowstockContact>> resp = getLegacyLowstockContactByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search legacyLowstockContacts by filter
     * Returns the list of legacyLowstockContacts that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;LegacyLowstockContact&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LegacyLowstockContact>> getLegacyLowstockContactByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getLegacyLowstockContactByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<LegacyLowstockContact>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search legacyLowstockContacts by filter (asynchronously)
     * Returns the list of legacyLowstockContacts that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLegacyLowstockContactByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<LegacyLowstockContact>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLegacyLowstockContactByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LegacyLowstockContact>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLegacyLowstockContactById
     * @param legacyLowstockContactId Id of the legacyLowstockContact to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLegacyLowstockContactByIdCall(Integer legacyLowstockContactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/legacyLowstockContact/{legacyLowstockContactId}"
            .replaceAll("\\{" + "legacyLowstockContactId" + "\\}", apiClient.escapeString(legacyLowstockContactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLegacyLowstockContactByIdValidateBeforeCall(Integer legacyLowstockContactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'legacyLowstockContactId' is set
        if (legacyLowstockContactId == null) {
            throw new ApiException("Missing the required parameter 'legacyLowstockContactId' when calling getLegacyLowstockContactById(Async)");
        }
        

        com.squareup.okhttp.Call call = getLegacyLowstockContactByIdCall(legacyLowstockContactId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a legacyLowstockContact by id
     * Returns the legacyLowstockContact identified by the specified id.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to be returned. (required)
     * @return LegacyLowstockContact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LegacyLowstockContact getLegacyLowstockContactById(Integer legacyLowstockContactId) throws ApiException {
        ApiResponse<LegacyLowstockContact> resp = getLegacyLowstockContactByIdWithHttpInfo(legacyLowstockContactId);
        return resp.getData();
    }

    /**
     * Get a legacyLowstockContact by id
     * Returns the legacyLowstockContact identified by the specified id.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to be returned. (required)
     * @return ApiResponse&lt;LegacyLowstockContact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LegacyLowstockContact> getLegacyLowstockContactByIdWithHttpInfo(Integer legacyLowstockContactId) throws ApiException {
        com.squareup.okhttp.Call call = getLegacyLowstockContactByIdValidateBeforeCall(legacyLowstockContactId, null, null);
        Type localVarReturnType = new TypeToken<LegacyLowstockContact>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a legacyLowstockContact by id (asynchronously)
     * Returns the legacyLowstockContact identified by the specified id.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLegacyLowstockContactByIdAsync(Integer legacyLowstockContactId, final ApiCallback<LegacyLowstockContact> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLegacyLowstockContactByIdValidateBeforeCall(legacyLowstockContactId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LegacyLowstockContact>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLegacyLowstockContactFiles
     * @param legacyLowstockContactId Id of the legacyLowstockContact to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLegacyLowstockContactFilesCall(Integer legacyLowstockContactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/legacyLowstockContact/{legacyLowstockContactId}/file"
            .replaceAll("\\{" + "legacyLowstockContactId" + "\\}", apiClient.escapeString(legacyLowstockContactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLegacyLowstockContactFilesValidateBeforeCall(Integer legacyLowstockContactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'legacyLowstockContactId' is set
        if (legacyLowstockContactId == null) {
            throw new ApiException("Missing the required parameter 'legacyLowstockContactId' when calling getLegacyLowstockContactFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getLegacyLowstockContactFilesCall(legacyLowstockContactId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a legacyLowstockContact.
     * Get all existing legacyLowstockContact files.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getLegacyLowstockContactFiles(Integer legacyLowstockContactId) throws ApiException {
        getLegacyLowstockContactFilesWithHttpInfo(legacyLowstockContactId);
    }

    /**
     * Get the files for a legacyLowstockContact.
     * Get all existing legacyLowstockContact files.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getLegacyLowstockContactFilesWithHttpInfo(Integer legacyLowstockContactId) throws ApiException {
        com.squareup.okhttp.Call call = getLegacyLowstockContactFilesValidateBeforeCall(legacyLowstockContactId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a legacyLowstockContact. (asynchronously)
     * Get all existing legacyLowstockContact files.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLegacyLowstockContactFilesAsync(Integer legacyLowstockContactId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLegacyLowstockContactFilesValidateBeforeCall(legacyLowstockContactId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getLegacyLowstockContactTags
     * @param legacyLowstockContactId Id of the legacyLowstockContact to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLegacyLowstockContactTagsCall(Integer legacyLowstockContactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/legacyLowstockContact/{legacyLowstockContactId}/tag"
            .replaceAll("\\{" + "legacyLowstockContactId" + "\\}", apiClient.escapeString(legacyLowstockContactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLegacyLowstockContactTagsValidateBeforeCall(Integer legacyLowstockContactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'legacyLowstockContactId' is set
        if (legacyLowstockContactId == null) {
            throw new ApiException("Missing the required parameter 'legacyLowstockContactId' when calling getLegacyLowstockContactTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getLegacyLowstockContactTagsCall(legacyLowstockContactId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a legacyLowstockContact.
     * Get all existing legacyLowstockContact tags.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getLegacyLowstockContactTags(Integer legacyLowstockContactId) throws ApiException {
        getLegacyLowstockContactTagsWithHttpInfo(legacyLowstockContactId);
    }

    /**
     * Get the tags for a legacyLowstockContact.
     * Get all existing legacyLowstockContact tags.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getLegacyLowstockContactTagsWithHttpInfo(Integer legacyLowstockContactId) throws ApiException {
        com.squareup.okhttp.Call call = getLegacyLowstockContactTagsValidateBeforeCall(legacyLowstockContactId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a legacyLowstockContact. (asynchronously)
     * Get all existing legacyLowstockContact tags.
     * @param legacyLowstockContactId Id of the legacyLowstockContact to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLegacyLowstockContactTagsAsync(Integer legacyLowstockContactId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLegacyLowstockContactTagsValidateBeforeCall(legacyLowstockContactId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateLegacyLowstockContact
     * @param body LegacyLowstockContact to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLegacyLowstockContactCall(LegacyLowstockContact body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/legacyLowstockContact";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLegacyLowstockContactValidateBeforeCall(LegacyLowstockContact body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLegacyLowstockContact(Async)");
        }
        

        com.squareup.okhttp.Call call = updateLegacyLowstockContactCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a legacyLowstockContact
     * Updates an existing legacyLowstockContact using the specified data.
     * @param body LegacyLowstockContact to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateLegacyLowstockContact(LegacyLowstockContact body) throws ApiException {
        updateLegacyLowstockContactWithHttpInfo(body);
    }

    /**
     * Update a legacyLowstockContact
     * Updates an existing legacyLowstockContact using the specified data.
     * @param body LegacyLowstockContact to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateLegacyLowstockContactWithHttpInfo(LegacyLowstockContact body) throws ApiException {
        com.squareup.okhttp.Call call = updateLegacyLowstockContactValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a legacyLowstockContact (asynchronously)
     * Updates an existing legacyLowstockContact using the specified data.
     * @param body LegacyLowstockContact to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLegacyLowstockContactAsync(LegacyLowstockContact body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLegacyLowstockContactValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
