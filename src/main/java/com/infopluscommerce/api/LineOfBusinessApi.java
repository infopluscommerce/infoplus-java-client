/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.LineOfBusiness;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LineOfBusinessApi {
    private ApiClient apiClient;

    public LineOfBusinessApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LineOfBusinessApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addLineOfBusiness
     * @param body LineOfBusiness to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLineOfBusinessCall(LineOfBusiness body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/lineOfBusiness";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLineOfBusinessValidateBeforeCall(LineOfBusiness body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addLineOfBusiness(Async)");
        }
        

        com.squareup.okhttp.Call call = addLineOfBusinessCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a lineOfBusiness
     * Inserts a new lineOfBusiness using the specified data.
     * @param body LineOfBusiness to be inserted. (required)
     * @return LineOfBusiness
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LineOfBusiness addLineOfBusiness(LineOfBusiness body) throws ApiException {
        ApiResponse<LineOfBusiness> resp = addLineOfBusinessWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a lineOfBusiness
     * Inserts a new lineOfBusiness using the specified data.
     * @param body LineOfBusiness to be inserted. (required)
     * @return ApiResponse&lt;LineOfBusiness&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LineOfBusiness> addLineOfBusinessWithHttpInfo(LineOfBusiness body) throws ApiException {
        com.squareup.okhttp.Call call = addLineOfBusinessValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<LineOfBusiness>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a lineOfBusiness (asynchronously)
     * Inserts a new lineOfBusiness using the specified data.
     * @param body LineOfBusiness to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLineOfBusinessAsync(LineOfBusiness body, final ApiCallback<LineOfBusiness> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLineOfBusinessValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LineOfBusiness>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addLineOfBusinessAudit
     * @param lineOfBusinessId Id of the lineOfBusiness to add an audit to (required)
     * @param lineOfBusinessAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLineOfBusinessAuditCall(Integer lineOfBusinessId, String lineOfBusinessAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/lineOfBusiness/{lineOfBusinessId}/audit/{lineOfBusinessAudit}"
            .replaceAll("\\{" + "lineOfBusinessId" + "\\}", apiClient.escapeString(lineOfBusinessId.toString()))
            .replaceAll("\\{" + "lineOfBusinessAudit" + "\\}", apiClient.escapeString(lineOfBusinessAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLineOfBusinessAuditValidateBeforeCall(Integer lineOfBusinessId, String lineOfBusinessAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lineOfBusinessId' is set
        if (lineOfBusinessId == null) {
            throw new ApiException("Missing the required parameter 'lineOfBusinessId' when calling addLineOfBusinessAudit(Async)");
        }
        
        // verify the required parameter 'lineOfBusinessAudit' is set
        if (lineOfBusinessAudit == null) {
            throw new ApiException("Missing the required parameter 'lineOfBusinessAudit' when calling addLineOfBusinessAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addLineOfBusinessAuditCall(lineOfBusinessId, lineOfBusinessAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a lineOfBusiness
     * Adds an audit to an existing lineOfBusiness.
     * @param lineOfBusinessId Id of the lineOfBusiness to add an audit to (required)
     * @param lineOfBusinessAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addLineOfBusinessAudit(Integer lineOfBusinessId, String lineOfBusinessAudit) throws ApiException {
        addLineOfBusinessAuditWithHttpInfo(lineOfBusinessId, lineOfBusinessAudit);
    }

    /**
     * Add new audit for a lineOfBusiness
     * Adds an audit to an existing lineOfBusiness.
     * @param lineOfBusinessId Id of the lineOfBusiness to add an audit to (required)
     * @param lineOfBusinessAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addLineOfBusinessAuditWithHttpInfo(Integer lineOfBusinessId, String lineOfBusinessAudit) throws ApiException {
        com.squareup.okhttp.Call call = addLineOfBusinessAuditValidateBeforeCall(lineOfBusinessId, lineOfBusinessAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a lineOfBusiness (asynchronously)
     * Adds an audit to an existing lineOfBusiness.
     * @param lineOfBusinessId Id of the lineOfBusiness to add an audit to (required)
     * @param lineOfBusinessAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLineOfBusinessAuditAsync(Integer lineOfBusinessId, String lineOfBusinessAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLineOfBusinessAuditValidateBeforeCall(lineOfBusinessId, lineOfBusinessAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addLineOfBusinessFile
     * @param lineOfBusinessId Id of the lineOfBusiness to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLineOfBusinessFileCall(Integer lineOfBusinessId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/lineOfBusiness/{lineOfBusinessId}/file/{fileName}"
            .replaceAll("\\{" + "lineOfBusinessId" + "\\}", apiClient.escapeString(lineOfBusinessId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLineOfBusinessFileValidateBeforeCall(Integer lineOfBusinessId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lineOfBusinessId' is set
        if (lineOfBusinessId == null) {
            throw new ApiException("Missing the required parameter 'lineOfBusinessId' when calling addLineOfBusinessFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addLineOfBusinessFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addLineOfBusinessFileCall(lineOfBusinessId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a lineOfBusiness
     * Adds a file to an existing lineOfBusiness.
     * @param lineOfBusinessId Id of the lineOfBusiness to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addLineOfBusinessFile(Integer lineOfBusinessId, String fileName) throws ApiException {
        addLineOfBusinessFileWithHttpInfo(lineOfBusinessId, fileName);
    }

    /**
     * Attach a file to a lineOfBusiness
     * Adds a file to an existing lineOfBusiness.
     * @param lineOfBusinessId Id of the lineOfBusiness to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addLineOfBusinessFileWithHttpInfo(Integer lineOfBusinessId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addLineOfBusinessFileValidateBeforeCall(lineOfBusinessId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a lineOfBusiness (asynchronously)
     * Adds a file to an existing lineOfBusiness.
     * @param lineOfBusinessId Id of the lineOfBusiness to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLineOfBusinessFileAsync(Integer lineOfBusinessId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLineOfBusinessFileValidateBeforeCall(lineOfBusinessId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addLineOfBusinessFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param lineOfBusinessId Id of the lineOfBusiness to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLineOfBusinessFileByURLCall(RecordFile body, Integer lineOfBusinessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/lineOfBusiness/{lineOfBusinessId}/file"
            .replaceAll("\\{" + "lineOfBusinessId" + "\\}", apiClient.escapeString(lineOfBusinessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLineOfBusinessFileByURLValidateBeforeCall(RecordFile body, Integer lineOfBusinessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addLineOfBusinessFileByURL(Async)");
        }
        
        // verify the required parameter 'lineOfBusinessId' is set
        if (lineOfBusinessId == null) {
            throw new ApiException("Missing the required parameter 'lineOfBusinessId' when calling addLineOfBusinessFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addLineOfBusinessFileByURLCall(body, lineOfBusinessId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a lineOfBusiness by URL.
     * Adds a file to an existing lineOfBusiness by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param lineOfBusinessId Id of the lineOfBusiness to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addLineOfBusinessFileByURL(RecordFile body, Integer lineOfBusinessId) throws ApiException {
        addLineOfBusinessFileByURLWithHttpInfo(body, lineOfBusinessId);
    }

    /**
     * Attach a file to a lineOfBusiness by URL.
     * Adds a file to an existing lineOfBusiness by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param lineOfBusinessId Id of the lineOfBusiness to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addLineOfBusinessFileByURLWithHttpInfo(RecordFile body, Integer lineOfBusinessId) throws ApiException {
        com.squareup.okhttp.Call call = addLineOfBusinessFileByURLValidateBeforeCall(body, lineOfBusinessId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a lineOfBusiness by URL. (asynchronously)
     * Adds a file to an existing lineOfBusiness by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param lineOfBusinessId Id of the lineOfBusiness to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLineOfBusinessFileByURLAsync(RecordFile body, Integer lineOfBusinessId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLineOfBusinessFileByURLValidateBeforeCall(body, lineOfBusinessId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addLineOfBusinessTag
     * @param lineOfBusinessId Id of the lineOfBusiness to add a tag to (required)
     * @param lineOfBusinessTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLineOfBusinessTagCall(Integer lineOfBusinessId, String lineOfBusinessTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/lineOfBusiness/{lineOfBusinessId}/tag/{lineOfBusinessTag}"
            .replaceAll("\\{" + "lineOfBusinessId" + "\\}", apiClient.escapeString(lineOfBusinessId.toString()))
            .replaceAll("\\{" + "lineOfBusinessTag" + "\\}", apiClient.escapeString(lineOfBusinessTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLineOfBusinessTagValidateBeforeCall(Integer lineOfBusinessId, String lineOfBusinessTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lineOfBusinessId' is set
        if (lineOfBusinessId == null) {
            throw new ApiException("Missing the required parameter 'lineOfBusinessId' when calling addLineOfBusinessTag(Async)");
        }
        
        // verify the required parameter 'lineOfBusinessTag' is set
        if (lineOfBusinessTag == null) {
            throw new ApiException("Missing the required parameter 'lineOfBusinessTag' when calling addLineOfBusinessTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addLineOfBusinessTagCall(lineOfBusinessId, lineOfBusinessTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a lineOfBusiness.
     * Adds a tag to an existing lineOfBusiness.
     * @param lineOfBusinessId Id of the lineOfBusiness to add a tag to (required)
     * @param lineOfBusinessTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addLineOfBusinessTag(Integer lineOfBusinessId, String lineOfBusinessTag) throws ApiException {
        addLineOfBusinessTagWithHttpInfo(lineOfBusinessId, lineOfBusinessTag);
    }

    /**
     * Add new tags for a lineOfBusiness.
     * Adds a tag to an existing lineOfBusiness.
     * @param lineOfBusinessId Id of the lineOfBusiness to add a tag to (required)
     * @param lineOfBusinessTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addLineOfBusinessTagWithHttpInfo(Integer lineOfBusinessId, String lineOfBusinessTag) throws ApiException {
        com.squareup.okhttp.Call call = addLineOfBusinessTagValidateBeforeCall(lineOfBusinessId, lineOfBusinessTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a lineOfBusiness. (asynchronously)
     * Adds a tag to an existing lineOfBusiness.
     * @param lineOfBusinessId Id of the lineOfBusiness to add a tag to (required)
     * @param lineOfBusinessTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLineOfBusinessTagAsync(Integer lineOfBusinessId, String lineOfBusinessTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLineOfBusinessTagValidateBeforeCall(lineOfBusinessId, lineOfBusinessTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLineOfBusinessFile
     * @param lineOfBusinessId Id of the lineOfBusiness to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLineOfBusinessFileCall(Integer lineOfBusinessId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/lineOfBusiness/{lineOfBusinessId}/file/{fileId}"
            .replaceAll("\\{" + "lineOfBusinessId" + "\\}", apiClient.escapeString(lineOfBusinessId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLineOfBusinessFileValidateBeforeCall(Integer lineOfBusinessId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lineOfBusinessId' is set
        if (lineOfBusinessId == null) {
            throw new ApiException("Missing the required parameter 'lineOfBusinessId' when calling deleteLineOfBusinessFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteLineOfBusinessFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteLineOfBusinessFileCall(lineOfBusinessId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a lineOfBusiness.
     * Deletes an existing lineOfBusiness file using the specified data.
     * @param lineOfBusinessId Id of the lineOfBusiness to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLineOfBusinessFile(Integer lineOfBusinessId, Integer fileId) throws ApiException {
        deleteLineOfBusinessFileWithHttpInfo(lineOfBusinessId, fileId);
    }

    /**
     * Delete a file for a lineOfBusiness.
     * Deletes an existing lineOfBusiness file using the specified data.
     * @param lineOfBusinessId Id of the lineOfBusiness to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLineOfBusinessFileWithHttpInfo(Integer lineOfBusinessId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteLineOfBusinessFileValidateBeforeCall(lineOfBusinessId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a lineOfBusiness. (asynchronously)
     * Deletes an existing lineOfBusiness file using the specified data.
     * @param lineOfBusinessId Id of the lineOfBusiness to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLineOfBusinessFileAsync(Integer lineOfBusinessId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLineOfBusinessFileValidateBeforeCall(lineOfBusinessId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLineOfBusinessTag
     * @param lineOfBusinessId Id of the lineOfBusiness to remove tag from (required)
     * @param lineOfBusinessTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLineOfBusinessTagCall(Integer lineOfBusinessId, String lineOfBusinessTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/lineOfBusiness/{lineOfBusinessId}/tag/{lineOfBusinessTag}"
            .replaceAll("\\{" + "lineOfBusinessId" + "\\}", apiClient.escapeString(lineOfBusinessId.toString()))
            .replaceAll("\\{" + "lineOfBusinessTag" + "\\}", apiClient.escapeString(lineOfBusinessTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLineOfBusinessTagValidateBeforeCall(Integer lineOfBusinessId, String lineOfBusinessTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lineOfBusinessId' is set
        if (lineOfBusinessId == null) {
            throw new ApiException("Missing the required parameter 'lineOfBusinessId' when calling deleteLineOfBusinessTag(Async)");
        }
        
        // verify the required parameter 'lineOfBusinessTag' is set
        if (lineOfBusinessTag == null) {
            throw new ApiException("Missing the required parameter 'lineOfBusinessTag' when calling deleteLineOfBusinessTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteLineOfBusinessTagCall(lineOfBusinessId, lineOfBusinessTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a lineOfBusiness.
     * Deletes an existing lineOfBusiness tag using the specified data.
     * @param lineOfBusinessId Id of the lineOfBusiness to remove tag from (required)
     * @param lineOfBusinessTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLineOfBusinessTag(Integer lineOfBusinessId, String lineOfBusinessTag) throws ApiException {
        deleteLineOfBusinessTagWithHttpInfo(lineOfBusinessId, lineOfBusinessTag);
    }

    /**
     * Delete a tag for a lineOfBusiness.
     * Deletes an existing lineOfBusiness tag using the specified data.
     * @param lineOfBusinessId Id of the lineOfBusiness to remove tag from (required)
     * @param lineOfBusinessTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLineOfBusinessTagWithHttpInfo(Integer lineOfBusinessId, String lineOfBusinessTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteLineOfBusinessTagValidateBeforeCall(lineOfBusinessId, lineOfBusinessTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a lineOfBusiness. (asynchronously)
     * Deletes an existing lineOfBusiness tag using the specified data.
     * @param lineOfBusinessId Id of the lineOfBusiness to remove tag from (required)
     * @param lineOfBusinessTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLineOfBusinessTagAsync(Integer lineOfBusinessId, String lineOfBusinessTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLineOfBusinessTagValidateBeforeCall(lineOfBusinessId, lineOfBusinessTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateLineOfBusinessById
     * @param lineOfBusinessId Id of the lineOfBusiness to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateLineOfBusinessByIdCall(Integer lineOfBusinessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/lineOfBusiness/duplicate/{lineOfBusinessId}"
            .replaceAll("\\{" + "lineOfBusinessId" + "\\}", apiClient.escapeString(lineOfBusinessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateLineOfBusinessByIdValidateBeforeCall(Integer lineOfBusinessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lineOfBusinessId' is set
        if (lineOfBusinessId == null) {
            throw new ApiException("Missing the required parameter 'lineOfBusinessId' when calling getDuplicateLineOfBusinessById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateLineOfBusinessByIdCall(lineOfBusinessId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a lineOfBusiness by id
     * Returns a duplicated lineOfBusiness identified by the specified id.
     * @param lineOfBusinessId Id of the lineOfBusiness to be duplicated. (required)
     * @return LineOfBusiness
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LineOfBusiness getDuplicateLineOfBusinessById(Integer lineOfBusinessId) throws ApiException {
        ApiResponse<LineOfBusiness> resp = getDuplicateLineOfBusinessByIdWithHttpInfo(lineOfBusinessId);
        return resp.getData();
    }

    /**
     * Get a duplicated a lineOfBusiness by id
     * Returns a duplicated lineOfBusiness identified by the specified id.
     * @param lineOfBusinessId Id of the lineOfBusiness to be duplicated. (required)
     * @return ApiResponse&lt;LineOfBusiness&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LineOfBusiness> getDuplicateLineOfBusinessByIdWithHttpInfo(Integer lineOfBusinessId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateLineOfBusinessByIdValidateBeforeCall(lineOfBusinessId, null, null);
        Type localVarReturnType = new TypeToken<LineOfBusiness>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a lineOfBusiness by id (asynchronously)
     * Returns a duplicated lineOfBusiness identified by the specified id.
     * @param lineOfBusinessId Id of the lineOfBusiness to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateLineOfBusinessByIdAsync(Integer lineOfBusinessId, final ApiCallback<LineOfBusiness> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateLineOfBusinessByIdValidateBeforeCall(lineOfBusinessId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LineOfBusiness>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLineOfBusinessByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLineOfBusinessByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/lineOfBusiness/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLineOfBusinessByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getLineOfBusinessByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search lineOfBusinesses by filter
     * Returns the list of lineOfBusinesses that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;LineOfBusiness&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LineOfBusiness> getLineOfBusinessByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<LineOfBusiness>> resp = getLineOfBusinessByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search lineOfBusinesses by filter
     * Returns the list of lineOfBusinesses that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;LineOfBusiness&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LineOfBusiness>> getLineOfBusinessByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getLineOfBusinessByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<LineOfBusiness>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search lineOfBusinesses by filter (asynchronously)
     * Returns the list of lineOfBusinesses that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLineOfBusinessByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<LineOfBusiness>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLineOfBusinessByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LineOfBusiness>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLineOfBusinessById
     * @param lineOfBusinessId Id of the lineOfBusiness to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLineOfBusinessByIdCall(Integer lineOfBusinessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/lineOfBusiness/{lineOfBusinessId}"
            .replaceAll("\\{" + "lineOfBusinessId" + "\\}", apiClient.escapeString(lineOfBusinessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLineOfBusinessByIdValidateBeforeCall(Integer lineOfBusinessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lineOfBusinessId' is set
        if (lineOfBusinessId == null) {
            throw new ApiException("Missing the required parameter 'lineOfBusinessId' when calling getLineOfBusinessById(Async)");
        }
        

        com.squareup.okhttp.Call call = getLineOfBusinessByIdCall(lineOfBusinessId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a lineOfBusiness by id
     * Returns the lineOfBusiness identified by the specified id.
     * @param lineOfBusinessId Id of the lineOfBusiness to be returned. (required)
     * @return LineOfBusiness
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LineOfBusiness getLineOfBusinessById(Integer lineOfBusinessId) throws ApiException {
        ApiResponse<LineOfBusiness> resp = getLineOfBusinessByIdWithHttpInfo(lineOfBusinessId);
        return resp.getData();
    }

    /**
     * Get a lineOfBusiness by id
     * Returns the lineOfBusiness identified by the specified id.
     * @param lineOfBusinessId Id of the lineOfBusiness to be returned. (required)
     * @return ApiResponse&lt;LineOfBusiness&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LineOfBusiness> getLineOfBusinessByIdWithHttpInfo(Integer lineOfBusinessId) throws ApiException {
        com.squareup.okhttp.Call call = getLineOfBusinessByIdValidateBeforeCall(lineOfBusinessId, null, null);
        Type localVarReturnType = new TypeToken<LineOfBusiness>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a lineOfBusiness by id (asynchronously)
     * Returns the lineOfBusiness identified by the specified id.
     * @param lineOfBusinessId Id of the lineOfBusiness to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLineOfBusinessByIdAsync(Integer lineOfBusinessId, final ApiCallback<LineOfBusiness> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLineOfBusinessByIdValidateBeforeCall(lineOfBusinessId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LineOfBusiness>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLineOfBusinessFiles
     * @param lineOfBusinessId Id of the lineOfBusiness to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLineOfBusinessFilesCall(Integer lineOfBusinessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/lineOfBusiness/{lineOfBusinessId}/file"
            .replaceAll("\\{" + "lineOfBusinessId" + "\\}", apiClient.escapeString(lineOfBusinessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLineOfBusinessFilesValidateBeforeCall(Integer lineOfBusinessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lineOfBusinessId' is set
        if (lineOfBusinessId == null) {
            throw new ApiException("Missing the required parameter 'lineOfBusinessId' when calling getLineOfBusinessFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getLineOfBusinessFilesCall(lineOfBusinessId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a lineOfBusiness.
     * Get all existing lineOfBusiness files.
     * @param lineOfBusinessId Id of the lineOfBusiness to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getLineOfBusinessFiles(Integer lineOfBusinessId) throws ApiException {
        getLineOfBusinessFilesWithHttpInfo(lineOfBusinessId);
    }

    /**
     * Get the files for a lineOfBusiness.
     * Get all existing lineOfBusiness files.
     * @param lineOfBusinessId Id of the lineOfBusiness to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getLineOfBusinessFilesWithHttpInfo(Integer lineOfBusinessId) throws ApiException {
        com.squareup.okhttp.Call call = getLineOfBusinessFilesValidateBeforeCall(lineOfBusinessId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a lineOfBusiness. (asynchronously)
     * Get all existing lineOfBusiness files.
     * @param lineOfBusinessId Id of the lineOfBusiness to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLineOfBusinessFilesAsync(Integer lineOfBusinessId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLineOfBusinessFilesValidateBeforeCall(lineOfBusinessId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getLineOfBusinessTags
     * @param lineOfBusinessId Id of the lineOfBusiness to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLineOfBusinessTagsCall(Integer lineOfBusinessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/lineOfBusiness/{lineOfBusinessId}/tag"
            .replaceAll("\\{" + "lineOfBusinessId" + "\\}", apiClient.escapeString(lineOfBusinessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLineOfBusinessTagsValidateBeforeCall(Integer lineOfBusinessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lineOfBusinessId' is set
        if (lineOfBusinessId == null) {
            throw new ApiException("Missing the required parameter 'lineOfBusinessId' when calling getLineOfBusinessTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getLineOfBusinessTagsCall(lineOfBusinessId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a lineOfBusiness.
     * Get all existing lineOfBusiness tags.
     * @param lineOfBusinessId Id of the lineOfBusiness to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getLineOfBusinessTags(Integer lineOfBusinessId) throws ApiException {
        getLineOfBusinessTagsWithHttpInfo(lineOfBusinessId);
    }

    /**
     * Get the tags for a lineOfBusiness.
     * Get all existing lineOfBusiness tags.
     * @param lineOfBusinessId Id of the lineOfBusiness to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getLineOfBusinessTagsWithHttpInfo(Integer lineOfBusinessId) throws ApiException {
        com.squareup.okhttp.Call call = getLineOfBusinessTagsValidateBeforeCall(lineOfBusinessId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a lineOfBusiness. (asynchronously)
     * Get all existing lineOfBusiness tags.
     * @param lineOfBusinessId Id of the lineOfBusiness to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLineOfBusinessTagsAsync(Integer lineOfBusinessId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLineOfBusinessTagsValidateBeforeCall(lineOfBusinessId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateLineOfBusiness
     * @param body LineOfBusiness to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLineOfBusinessCall(LineOfBusiness body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/lineOfBusiness";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLineOfBusinessValidateBeforeCall(LineOfBusiness body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLineOfBusiness(Async)");
        }
        

        com.squareup.okhttp.Call call = updateLineOfBusinessCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a lineOfBusiness
     * Updates an existing lineOfBusiness using the specified data.
     * @param body LineOfBusiness to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateLineOfBusiness(LineOfBusiness body) throws ApiException {
        updateLineOfBusinessWithHttpInfo(body);
    }

    /**
     * Update a lineOfBusiness
     * Updates an existing lineOfBusiness using the specified data.
     * @param body LineOfBusiness to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateLineOfBusinessWithHttpInfo(LineOfBusiness body) throws ApiException {
        com.squareup.okhttp.Call call = updateLineOfBusinessValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a lineOfBusiness (asynchronously)
     * Updates an existing lineOfBusiness using the specified data.
     * @param body LineOfBusiness to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLineOfBusinessAsync(LineOfBusiness body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLineOfBusinessValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateLineOfBusinessCustomFields
     * @param body LineOfBusiness to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLineOfBusinessCustomFieldsCall(LineOfBusiness body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/lineOfBusiness/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLineOfBusinessCustomFieldsValidateBeforeCall(LineOfBusiness body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLineOfBusinessCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateLineOfBusinessCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a lineOfBusiness custom fields
     * Updates an existing lineOfBusiness custom fields using the specified data.
     * @param body LineOfBusiness to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateLineOfBusinessCustomFields(LineOfBusiness body) throws ApiException {
        updateLineOfBusinessCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a lineOfBusiness custom fields
     * Updates an existing lineOfBusiness custom fields using the specified data.
     * @param body LineOfBusiness to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateLineOfBusinessCustomFieldsWithHttpInfo(LineOfBusiness body) throws ApiException {
        com.squareup.okhttp.Call call = updateLineOfBusinessCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a lineOfBusiness custom fields (asynchronously)
     * Updates an existing lineOfBusiness custom fields using the specified data.
     * @param body LineOfBusiness to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLineOfBusinessCustomFieldsAsync(LineOfBusiness body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLineOfBusinessCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
