/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.Gs1128Template;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Gs1128TemplateApi {
    private ApiClient apiClient;

    public Gs1128TemplateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Gs1128TemplateApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addGs1128Template
     * @param body Gs1128Template to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addGs1128TemplateCall(Gs1128Template body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/gs1128Template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addGs1128TemplateValidateBeforeCall(Gs1128Template body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addGs1128Template(Async)");
        }
        

        com.squareup.okhttp.Call call = addGs1128TemplateCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a gs1128Template
     * Inserts a new gs1128Template using the specified data.
     * @param body Gs1128Template to be inserted. (required)
     * @return Gs1128Template
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Gs1128Template addGs1128Template(Gs1128Template body) throws ApiException {
        ApiResponse<Gs1128Template> resp = addGs1128TemplateWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a gs1128Template
     * Inserts a new gs1128Template using the specified data.
     * @param body Gs1128Template to be inserted. (required)
     * @return ApiResponse&lt;Gs1128Template&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Gs1128Template> addGs1128TemplateWithHttpInfo(Gs1128Template body) throws ApiException {
        com.squareup.okhttp.Call call = addGs1128TemplateValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Gs1128Template>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a gs1128Template (asynchronously)
     * Inserts a new gs1128Template using the specified data.
     * @param body Gs1128Template to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addGs1128TemplateAsync(Gs1128Template body, final ApiCallback<Gs1128Template> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addGs1128TemplateValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Gs1128Template>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addGs1128TemplateAudit
     * @param gs1128TemplateId Id of the gs1128Template to add an audit to (required)
     * @param gs1128TemplateAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addGs1128TemplateAuditCall(Integer gs1128TemplateId, String gs1128TemplateAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/gs1128Template/{gs1128TemplateId}/audit/{gs1128TemplateAudit}"
            .replaceAll("\\{" + "gs1128TemplateId" + "\\}", apiClient.escapeString(gs1128TemplateId.toString()))
            .replaceAll("\\{" + "gs1128TemplateAudit" + "\\}", apiClient.escapeString(gs1128TemplateAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addGs1128TemplateAuditValidateBeforeCall(Integer gs1128TemplateId, String gs1128TemplateAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gs1128TemplateId' is set
        if (gs1128TemplateId == null) {
            throw new ApiException("Missing the required parameter 'gs1128TemplateId' when calling addGs1128TemplateAudit(Async)");
        }
        
        // verify the required parameter 'gs1128TemplateAudit' is set
        if (gs1128TemplateAudit == null) {
            throw new ApiException("Missing the required parameter 'gs1128TemplateAudit' when calling addGs1128TemplateAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addGs1128TemplateAuditCall(gs1128TemplateId, gs1128TemplateAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a gs1128Template
     * Adds an audit to an existing gs1128Template.
     * @param gs1128TemplateId Id of the gs1128Template to add an audit to (required)
     * @param gs1128TemplateAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addGs1128TemplateAudit(Integer gs1128TemplateId, String gs1128TemplateAudit) throws ApiException {
        addGs1128TemplateAuditWithHttpInfo(gs1128TemplateId, gs1128TemplateAudit);
    }

    /**
     * Add new audit for a gs1128Template
     * Adds an audit to an existing gs1128Template.
     * @param gs1128TemplateId Id of the gs1128Template to add an audit to (required)
     * @param gs1128TemplateAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addGs1128TemplateAuditWithHttpInfo(Integer gs1128TemplateId, String gs1128TemplateAudit) throws ApiException {
        com.squareup.okhttp.Call call = addGs1128TemplateAuditValidateBeforeCall(gs1128TemplateId, gs1128TemplateAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a gs1128Template (asynchronously)
     * Adds an audit to an existing gs1128Template.
     * @param gs1128TemplateId Id of the gs1128Template to add an audit to (required)
     * @param gs1128TemplateAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addGs1128TemplateAuditAsync(Integer gs1128TemplateId, String gs1128TemplateAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addGs1128TemplateAuditValidateBeforeCall(gs1128TemplateId, gs1128TemplateAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addGs1128TemplateFile
     * @param gs1128TemplateId Id of the gs1128Template to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addGs1128TemplateFileCall(Integer gs1128TemplateId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/gs1128Template/{gs1128TemplateId}/file/{fileName}"
            .replaceAll("\\{" + "gs1128TemplateId" + "\\}", apiClient.escapeString(gs1128TemplateId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addGs1128TemplateFileValidateBeforeCall(Integer gs1128TemplateId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gs1128TemplateId' is set
        if (gs1128TemplateId == null) {
            throw new ApiException("Missing the required parameter 'gs1128TemplateId' when calling addGs1128TemplateFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addGs1128TemplateFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addGs1128TemplateFileCall(gs1128TemplateId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a gs1128Template
     * Adds a file to an existing gs1128Template.
     * @param gs1128TemplateId Id of the gs1128Template to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addGs1128TemplateFile(Integer gs1128TemplateId, String fileName) throws ApiException {
        addGs1128TemplateFileWithHttpInfo(gs1128TemplateId, fileName);
    }

    /**
     * Attach a file to a gs1128Template
     * Adds a file to an existing gs1128Template.
     * @param gs1128TemplateId Id of the gs1128Template to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addGs1128TemplateFileWithHttpInfo(Integer gs1128TemplateId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addGs1128TemplateFileValidateBeforeCall(gs1128TemplateId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a gs1128Template (asynchronously)
     * Adds a file to an existing gs1128Template.
     * @param gs1128TemplateId Id of the gs1128Template to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addGs1128TemplateFileAsync(Integer gs1128TemplateId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addGs1128TemplateFileValidateBeforeCall(gs1128TemplateId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addGs1128TemplateFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param gs1128TemplateId Id of the gs1128Template to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addGs1128TemplateFileByURLCall(RecordFile body, Integer gs1128TemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/gs1128Template/{gs1128TemplateId}/file"
            .replaceAll("\\{" + "gs1128TemplateId" + "\\}", apiClient.escapeString(gs1128TemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addGs1128TemplateFileByURLValidateBeforeCall(RecordFile body, Integer gs1128TemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addGs1128TemplateFileByURL(Async)");
        }
        
        // verify the required parameter 'gs1128TemplateId' is set
        if (gs1128TemplateId == null) {
            throw new ApiException("Missing the required parameter 'gs1128TemplateId' when calling addGs1128TemplateFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addGs1128TemplateFileByURLCall(body, gs1128TemplateId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a gs1128Template by URL.
     * Adds a file to an existing gs1128Template by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param gs1128TemplateId Id of the gs1128Template to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addGs1128TemplateFileByURL(RecordFile body, Integer gs1128TemplateId) throws ApiException {
        addGs1128TemplateFileByURLWithHttpInfo(body, gs1128TemplateId);
    }

    /**
     * Attach a file to a gs1128Template by URL.
     * Adds a file to an existing gs1128Template by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param gs1128TemplateId Id of the gs1128Template to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addGs1128TemplateFileByURLWithHttpInfo(RecordFile body, Integer gs1128TemplateId) throws ApiException {
        com.squareup.okhttp.Call call = addGs1128TemplateFileByURLValidateBeforeCall(body, gs1128TemplateId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a gs1128Template by URL. (asynchronously)
     * Adds a file to an existing gs1128Template by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param gs1128TemplateId Id of the gs1128Template to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addGs1128TemplateFileByURLAsync(RecordFile body, Integer gs1128TemplateId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addGs1128TemplateFileByURLValidateBeforeCall(body, gs1128TemplateId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addGs1128TemplateTag
     * @param gs1128TemplateId Id of the gs1128Template to add a tag to (required)
     * @param gs1128TemplateTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addGs1128TemplateTagCall(Integer gs1128TemplateId, String gs1128TemplateTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/gs1128Template/{gs1128TemplateId}/tag/{gs1128TemplateTag}"
            .replaceAll("\\{" + "gs1128TemplateId" + "\\}", apiClient.escapeString(gs1128TemplateId.toString()))
            .replaceAll("\\{" + "gs1128TemplateTag" + "\\}", apiClient.escapeString(gs1128TemplateTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addGs1128TemplateTagValidateBeforeCall(Integer gs1128TemplateId, String gs1128TemplateTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gs1128TemplateId' is set
        if (gs1128TemplateId == null) {
            throw new ApiException("Missing the required parameter 'gs1128TemplateId' when calling addGs1128TemplateTag(Async)");
        }
        
        // verify the required parameter 'gs1128TemplateTag' is set
        if (gs1128TemplateTag == null) {
            throw new ApiException("Missing the required parameter 'gs1128TemplateTag' when calling addGs1128TemplateTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addGs1128TemplateTagCall(gs1128TemplateId, gs1128TemplateTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a gs1128Template.
     * Adds a tag to an existing gs1128Template.
     * @param gs1128TemplateId Id of the gs1128Template to add a tag to (required)
     * @param gs1128TemplateTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addGs1128TemplateTag(Integer gs1128TemplateId, String gs1128TemplateTag) throws ApiException {
        addGs1128TemplateTagWithHttpInfo(gs1128TemplateId, gs1128TemplateTag);
    }

    /**
     * Add new tags for a gs1128Template.
     * Adds a tag to an existing gs1128Template.
     * @param gs1128TemplateId Id of the gs1128Template to add a tag to (required)
     * @param gs1128TemplateTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addGs1128TemplateTagWithHttpInfo(Integer gs1128TemplateId, String gs1128TemplateTag) throws ApiException {
        com.squareup.okhttp.Call call = addGs1128TemplateTagValidateBeforeCall(gs1128TemplateId, gs1128TemplateTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a gs1128Template. (asynchronously)
     * Adds a tag to an existing gs1128Template.
     * @param gs1128TemplateId Id of the gs1128Template to add a tag to (required)
     * @param gs1128TemplateTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addGs1128TemplateTagAsync(Integer gs1128TemplateId, String gs1128TemplateTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addGs1128TemplateTagValidateBeforeCall(gs1128TemplateId, gs1128TemplateTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteGs1128Template
     * @param gs1128TemplateId Id of the gs1128Template to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteGs1128TemplateCall(Integer gs1128TemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/gs1128Template/{gs1128TemplateId}"
            .replaceAll("\\{" + "gs1128TemplateId" + "\\}", apiClient.escapeString(gs1128TemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteGs1128TemplateValidateBeforeCall(Integer gs1128TemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gs1128TemplateId' is set
        if (gs1128TemplateId == null) {
            throw new ApiException("Missing the required parameter 'gs1128TemplateId' when calling deleteGs1128Template(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteGs1128TemplateCall(gs1128TemplateId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a gs1128Template
     * Deletes the gs1128Template identified by the specified id.
     * @param gs1128TemplateId Id of the gs1128Template to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteGs1128Template(Integer gs1128TemplateId) throws ApiException {
        deleteGs1128TemplateWithHttpInfo(gs1128TemplateId);
    }

    /**
     * Delete a gs1128Template
     * Deletes the gs1128Template identified by the specified id.
     * @param gs1128TemplateId Id of the gs1128Template to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteGs1128TemplateWithHttpInfo(Integer gs1128TemplateId) throws ApiException {
        com.squareup.okhttp.Call call = deleteGs1128TemplateValidateBeforeCall(gs1128TemplateId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a gs1128Template (asynchronously)
     * Deletes the gs1128Template identified by the specified id.
     * @param gs1128TemplateId Id of the gs1128Template to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteGs1128TemplateAsync(Integer gs1128TemplateId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteGs1128TemplateValidateBeforeCall(gs1128TemplateId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteGs1128TemplateFile
     * @param gs1128TemplateId Id of the gs1128Template to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteGs1128TemplateFileCall(Integer gs1128TemplateId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/gs1128Template/{gs1128TemplateId}/file/{fileId}"
            .replaceAll("\\{" + "gs1128TemplateId" + "\\}", apiClient.escapeString(gs1128TemplateId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteGs1128TemplateFileValidateBeforeCall(Integer gs1128TemplateId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gs1128TemplateId' is set
        if (gs1128TemplateId == null) {
            throw new ApiException("Missing the required parameter 'gs1128TemplateId' when calling deleteGs1128TemplateFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteGs1128TemplateFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteGs1128TemplateFileCall(gs1128TemplateId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a gs1128Template.
     * Deletes an existing gs1128Template file using the specified data.
     * @param gs1128TemplateId Id of the gs1128Template to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteGs1128TemplateFile(Integer gs1128TemplateId, Integer fileId) throws ApiException {
        deleteGs1128TemplateFileWithHttpInfo(gs1128TemplateId, fileId);
    }

    /**
     * Delete a file for a gs1128Template.
     * Deletes an existing gs1128Template file using the specified data.
     * @param gs1128TemplateId Id of the gs1128Template to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteGs1128TemplateFileWithHttpInfo(Integer gs1128TemplateId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteGs1128TemplateFileValidateBeforeCall(gs1128TemplateId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a gs1128Template. (asynchronously)
     * Deletes an existing gs1128Template file using the specified data.
     * @param gs1128TemplateId Id of the gs1128Template to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteGs1128TemplateFileAsync(Integer gs1128TemplateId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteGs1128TemplateFileValidateBeforeCall(gs1128TemplateId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteGs1128TemplateTag
     * @param gs1128TemplateId Id of the gs1128Template to remove tag from (required)
     * @param gs1128TemplateTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteGs1128TemplateTagCall(Integer gs1128TemplateId, String gs1128TemplateTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/gs1128Template/{gs1128TemplateId}/tag/{gs1128TemplateTag}"
            .replaceAll("\\{" + "gs1128TemplateId" + "\\}", apiClient.escapeString(gs1128TemplateId.toString()))
            .replaceAll("\\{" + "gs1128TemplateTag" + "\\}", apiClient.escapeString(gs1128TemplateTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteGs1128TemplateTagValidateBeforeCall(Integer gs1128TemplateId, String gs1128TemplateTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gs1128TemplateId' is set
        if (gs1128TemplateId == null) {
            throw new ApiException("Missing the required parameter 'gs1128TemplateId' when calling deleteGs1128TemplateTag(Async)");
        }
        
        // verify the required parameter 'gs1128TemplateTag' is set
        if (gs1128TemplateTag == null) {
            throw new ApiException("Missing the required parameter 'gs1128TemplateTag' when calling deleteGs1128TemplateTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteGs1128TemplateTagCall(gs1128TemplateId, gs1128TemplateTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a gs1128Template.
     * Deletes an existing gs1128Template tag using the specified data.
     * @param gs1128TemplateId Id of the gs1128Template to remove tag from (required)
     * @param gs1128TemplateTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteGs1128TemplateTag(Integer gs1128TemplateId, String gs1128TemplateTag) throws ApiException {
        deleteGs1128TemplateTagWithHttpInfo(gs1128TemplateId, gs1128TemplateTag);
    }

    /**
     * Delete a tag for a gs1128Template.
     * Deletes an existing gs1128Template tag using the specified data.
     * @param gs1128TemplateId Id of the gs1128Template to remove tag from (required)
     * @param gs1128TemplateTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteGs1128TemplateTagWithHttpInfo(Integer gs1128TemplateId, String gs1128TemplateTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteGs1128TemplateTagValidateBeforeCall(gs1128TemplateId, gs1128TemplateTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a gs1128Template. (asynchronously)
     * Deletes an existing gs1128Template tag using the specified data.
     * @param gs1128TemplateId Id of the gs1128Template to remove tag from (required)
     * @param gs1128TemplateTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteGs1128TemplateTagAsync(Integer gs1128TemplateId, String gs1128TemplateTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteGs1128TemplateTagValidateBeforeCall(gs1128TemplateId, gs1128TemplateTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateGs1128TemplateById
     * @param gs1128TemplateId Id of the gs1128Template to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateGs1128TemplateByIdCall(Integer gs1128TemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/gs1128Template/duplicate/{gs1128TemplateId}"
            .replaceAll("\\{" + "gs1128TemplateId" + "\\}", apiClient.escapeString(gs1128TemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateGs1128TemplateByIdValidateBeforeCall(Integer gs1128TemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gs1128TemplateId' is set
        if (gs1128TemplateId == null) {
            throw new ApiException("Missing the required parameter 'gs1128TemplateId' when calling getDuplicateGs1128TemplateById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateGs1128TemplateByIdCall(gs1128TemplateId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a gs1128Template by id
     * Returns a duplicated gs1128Template identified by the specified id.
     * @param gs1128TemplateId Id of the gs1128Template to be duplicated. (required)
     * @return Gs1128Template
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Gs1128Template getDuplicateGs1128TemplateById(Integer gs1128TemplateId) throws ApiException {
        ApiResponse<Gs1128Template> resp = getDuplicateGs1128TemplateByIdWithHttpInfo(gs1128TemplateId);
        return resp.getData();
    }

    /**
     * Get a duplicated a gs1128Template by id
     * Returns a duplicated gs1128Template identified by the specified id.
     * @param gs1128TemplateId Id of the gs1128Template to be duplicated. (required)
     * @return ApiResponse&lt;Gs1128Template&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Gs1128Template> getDuplicateGs1128TemplateByIdWithHttpInfo(Integer gs1128TemplateId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateGs1128TemplateByIdValidateBeforeCall(gs1128TemplateId, null, null);
        Type localVarReturnType = new TypeToken<Gs1128Template>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a gs1128Template by id (asynchronously)
     * Returns a duplicated gs1128Template identified by the specified id.
     * @param gs1128TemplateId Id of the gs1128Template to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateGs1128TemplateByIdAsync(Integer gs1128TemplateId, final ApiCallback<Gs1128Template> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateGs1128TemplateByIdValidateBeforeCall(gs1128TemplateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Gs1128Template>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGs1128TemplateByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGs1128TemplateByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/gs1128Template/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGs1128TemplateByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getGs1128TemplateByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search gs1128Templates by filter
     * Returns the list of gs1128Templates that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;Gs1128Template&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Gs1128Template> getGs1128TemplateByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<Gs1128Template>> resp = getGs1128TemplateByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search gs1128Templates by filter
     * Returns the list of gs1128Templates that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;Gs1128Template&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Gs1128Template>> getGs1128TemplateByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getGs1128TemplateByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<Gs1128Template>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search gs1128Templates by filter (asynchronously)
     * Returns the list of gs1128Templates that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGs1128TemplateByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<Gs1128Template>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGs1128TemplateByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Gs1128Template>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGs1128TemplateById
     * @param gs1128TemplateId Id of the gs1128Template to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGs1128TemplateByIdCall(Integer gs1128TemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/gs1128Template/{gs1128TemplateId}"
            .replaceAll("\\{" + "gs1128TemplateId" + "\\}", apiClient.escapeString(gs1128TemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGs1128TemplateByIdValidateBeforeCall(Integer gs1128TemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gs1128TemplateId' is set
        if (gs1128TemplateId == null) {
            throw new ApiException("Missing the required parameter 'gs1128TemplateId' when calling getGs1128TemplateById(Async)");
        }
        

        com.squareup.okhttp.Call call = getGs1128TemplateByIdCall(gs1128TemplateId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a gs1128Template by id
     * Returns the gs1128Template identified by the specified id.
     * @param gs1128TemplateId Id of the gs1128Template to be returned. (required)
     * @return Gs1128Template
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Gs1128Template getGs1128TemplateById(Integer gs1128TemplateId) throws ApiException {
        ApiResponse<Gs1128Template> resp = getGs1128TemplateByIdWithHttpInfo(gs1128TemplateId);
        return resp.getData();
    }

    /**
     * Get a gs1128Template by id
     * Returns the gs1128Template identified by the specified id.
     * @param gs1128TemplateId Id of the gs1128Template to be returned. (required)
     * @return ApiResponse&lt;Gs1128Template&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Gs1128Template> getGs1128TemplateByIdWithHttpInfo(Integer gs1128TemplateId) throws ApiException {
        com.squareup.okhttp.Call call = getGs1128TemplateByIdValidateBeforeCall(gs1128TemplateId, null, null);
        Type localVarReturnType = new TypeToken<Gs1128Template>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a gs1128Template by id (asynchronously)
     * Returns the gs1128Template identified by the specified id.
     * @param gs1128TemplateId Id of the gs1128Template to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGs1128TemplateByIdAsync(Integer gs1128TemplateId, final ApiCallback<Gs1128Template> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGs1128TemplateByIdValidateBeforeCall(gs1128TemplateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Gs1128Template>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGs1128TemplateFiles
     * @param gs1128TemplateId Id of the gs1128Template to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGs1128TemplateFilesCall(Integer gs1128TemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/gs1128Template/{gs1128TemplateId}/file"
            .replaceAll("\\{" + "gs1128TemplateId" + "\\}", apiClient.escapeString(gs1128TemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGs1128TemplateFilesValidateBeforeCall(Integer gs1128TemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gs1128TemplateId' is set
        if (gs1128TemplateId == null) {
            throw new ApiException("Missing the required parameter 'gs1128TemplateId' when calling getGs1128TemplateFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getGs1128TemplateFilesCall(gs1128TemplateId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a gs1128Template.
     * Get all existing gs1128Template files.
     * @param gs1128TemplateId Id of the gs1128Template to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getGs1128TemplateFiles(Integer gs1128TemplateId) throws ApiException {
        getGs1128TemplateFilesWithHttpInfo(gs1128TemplateId);
    }

    /**
     * Get the files for a gs1128Template.
     * Get all existing gs1128Template files.
     * @param gs1128TemplateId Id of the gs1128Template to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getGs1128TemplateFilesWithHttpInfo(Integer gs1128TemplateId) throws ApiException {
        com.squareup.okhttp.Call call = getGs1128TemplateFilesValidateBeforeCall(gs1128TemplateId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a gs1128Template. (asynchronously)
     * Get all existing gs1128Template files.
     * @param gs1128TemplateId Id of the gs1128Template to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGs1128TemplateFilesAsync(Integer gs1128TemplateId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGs1128TemplateFilesValidateBeforeCall(gs1128TemplateId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getGs1128TemplateTags
     * @param gs1128TemplateId Id of the gs1128Template to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGs1128TemplateTagsCall(Integer gs1128TemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/gs1128Template/{gs1128TemplateId}/tag"
            .replaceAll("\\{" + "gs1128TemplateId" + "\\}", apiClient.escapeString(gs1128TemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGs1128TemplateTagsValidateBeforeCall(Integer gs1128TemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gs1128TemplateId' is set
        if (gs1128TemplateId == null) {
            throw new ApiException("Missing the required parameter 'gs1128TemplateId' when calling getGs1128TemplateTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getGs1128TemplateTagsCall(gs1128TemplateId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a gs1128Template.
     * Get all existing gs1128Template tags.
     * @param gs1128TemplateId Id of the gs1128Template to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getGs1128TemplateTags(Integer gs1128TemplateId) throws ApiException {
        getGs1128TemplateTagsWithHttpInfo(gs1128TemplateId);
    }

    /**
     * Get the tags for a gs1128Template.
     * Get all existing gs1128Template tags.
     * @param gs1128TemplateId Id of the gs1128Template to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getGs1128TemplateTagsWithHttpInfo(Integer gs1128TemplateId) throws ApiException {
        com.squareup.okhttp.Call call = getGs1128TemplateTagsValidateBeforeCall(gs1128TemplateId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a gs1128Template. (asynchronously)
     * Get all existing gs1128Template tags.
     * @param gs1128TemplateId Id of the gs1128Template to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGs1128TemplateTagsAsync(Integer gs1128TemplateId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGs1128TemplateTagsValidateBeforeCall(gs1128TemplateId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateGs1128Template
     * @param body Gs1128Template to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateGs1128TemplateCall(Gs1128Template body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/gs1128Template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateGs1128TemplateValidateBeforeCall(Gs1128Template body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateGs1128Template(Async)");
        }
        

        com.squareup.okhttp.Call call = updateGs1128TemplateCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a gs1128Template
     * Updates an existing gs1128Template using the specified data.
     * @param body Gs1128Template to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateGs1128Template(Gs1128Template body) throws ApiException {
        updateGs1128TemplateWithHttpInfo(body);
    }

    /**
     * Update a gs1128Template
     * Updates an existing gs1128Template using the specified data.
     * @param body Gs1128Template to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateGs1128TemplateWithHttpInfo(Gs1128Template body) throws ApiException {
        com.squareup.okhttp.Call call = updateGs1128TemplateValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a gs1128Template (asynchronously)
     * Updates an existing gs1128Template using the specified data.
     * @param body Gs1128Template to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateGs1128TemplateAsync(Gs1128Template body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateGs1128TemplateValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
