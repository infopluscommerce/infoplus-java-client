/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.LocationAddressScheme;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LocationAddressSchemeApi {
    private ApiClient apiClient;

    public LocationAddressSchemeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LocationAddressSchemeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addLocationAddressScheme
     * @param body LocationAddressScheme to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLocationAddressSchemeCall(LocationAddressScheme body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/locationAddressScheme";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLocationAddressSchemeValidateBeforeCall(LocationAddressScheme body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addLocationAddressScheme(Async)");
        }
        

        com.squareup.okhttp.Call call = addLocationAddressSchemeCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a locationAddressScheme
     * Inserts a new locationAddressScheme using the specified data.
     * @param body LocationAddressScheme to be inserted. (required)
     * @return LocationAddressScheme
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LocationAddressScheme addLocationAddressScheme(LocationAddressScheme body) throws ApiException {
        ApiResponse<LocationAddressScheme> resp = addLocationAddressSchemeWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a locationAddressScheme
     * Inserts a new locationAddressScheme using the specified data.
     * @param body LocationAddressScheme to be inserted. (required)
     * @return ApiResponse&lt;LocationAddressScheme&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LocationAddressScheme> addLocationAddressSchemeWithHttpInfo(LocationAddressScheme body) throws ApiException {
        com.squareup.okhttp.Call call = addLocationAddressSchemeValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<LocationAddressScheme>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a locationAddressScheme (asynchronously)
     * Inserts a new locationAddressScheme using the specified data.
     * @param body LocationAddressScheme to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLocationAddressSchemeAsync(LocationAddressScheme body, final ApiCallback<LocationAddressScheme> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLocationAddressSchemeValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LocationAddressScheme>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addLocationAddressSchemeAudit
     * @param locationAddressSchemeId Id of the locationAddressScheme to add an audit to (required)
     * @param locationAddressSchemeAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLocationAddressSchemeAuditCall(Integer locationAddressSchemeId, String locationAddressSchemeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationAddressScheme/{locationAddressSchemeId}/audit/{locationAddressSchemeAudit}"
            .replaceAll("\\{" + "locationAddressSchemeId" + "\\}", apiClient.escapeString(locationAddressSchemeId.toString()))
            .replaceAll("\\{" + "locationAddressSchemeAudit" + "\\}", apiClient.escapeString(locationAddressSchemeAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLocationAddressSchemeAuditValidateBeforeCall(Integer locationAddressSchemeId, String locationAddressSchemeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationAddressSchemeId' is set
        if (locationAddressSchemeId == null) {
            throw new ApiException("Missing the required parameter 'locationAddressSchemeId' when calling addLocationAddressSchemeAudit(Async)");
        }
        
        // verify the required parameter 'locationAddressSchemeAudit' is set
        if (locationAddressSchemeAudit == null) {
            throw new ApiException("Missing the required parameter 'locationAddressSchemeAudit' when calling addLocationAddressSchemeAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addLocationAddressSchemeAuditCall(locationAddressSchemeId, locationAddressSchemeAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a locationAddressScheme
     * Adds an audit to an existing locationAddressScheme.
     * @param locationAddressSchemeId Id of the locationAddressScheme to add an audit to (required)
     * @param locationAddressSchemeAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addLocationAddressSchemeAudit(Integer locationAddressSchemeId, String locationAddressSchemeAudit) throws ApiException {
        addLocationAddressSchemeAuditWithHttpInfo(locationAddressSchemeId, locationAddressSchemeAudit);
    }

    /**
     * Add new audit for a locationAddressScheme
     * Adds an audit to an existing locationAddressScheme.
     * @param locationAddressSchemeId Id of the locationAddressScheme to add an audit to (required)
     * @param locationAddressSchemeAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addLocationAddressSchemeAuditWithHttpInfo(Integer locationAddressSchemeId, String locationAddressSchemeAudit) throws ApiException {
        com.squareup.okhttp.Call call = addLocationAddressSchemeAuditValidateBeforeCall(locationAddressSchemeId, locationAddressSchemeAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a locationAddressScheme (asynchronously)
     * Adds an audit to an existing locationAddressScheme.
     * @param locationAddressSchemeId Id of the locationAddressScheme to add an audit to (required)
     * @param locationAddressSchemeAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLocationAddressSchemeAuditAsync(Integer locationAddressSchemeId, String locationAddressSchemeAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLocationAddressSchemeAuditValidateBeforeCall(locationAddressSchemeId, locationAddressSchemeAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addLocationAddressSchemeFile
     * @param locationAddressSchemeId Id of the locationAddressScheme to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLocationAddressSchemeFileCall(Integer locationAddressSchemeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationAddressScheme/{locationAddressSchemeId}/file/{fileName}"
            .replaceAll("\\{" + "locationAddressSchemeId" + "\\}", apiClient.escapeString(locationAddressSchemeId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLocationAddressSchemeFileValidateBeforeCall(Integer locationAddressSchemeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationAddressSchemeId' is set
        if (locationAddressSchemeId == null) {
            throw new ApiException("Missing the required parameter 'locationAddressSchemeId' when calling addLocationAddressSchemeFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addLocationAddressSchemeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addLocationAddressSchemeFileCall(locationAddressSchemeId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a locationAddressScheme
     * Adds a file to an existing locationAddressScheme.
     * @param locationAddressSchemeId Id of the locationAddressScheme to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addLocationAddressSchemeFile(Integer locationAddressSchemeId, String fileName) throws ApiException {
        addLocationAddressSchemeFileWithHttpInfo(locationAddressSchemeId, fileName);
    }

    /**
     * Attach a file to a locationAddressScheme
     * Adds a file to an existing locationAddressScheme.
     * @param locationAddressSchemeId Id of the locationAddressScheme to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addLocationAddressSchemeFileWithHttpInfo(Integer locationAddressSchemeId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addLocationAddressSchemeFileValidateBeforeCall(locationAddressSchemeId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a locationAddressScheme (asynchronously)
     * Adds a file to an existing locationAddressScheme.
     * @param locationAddressSchemeId Id of the locationAddressScheme to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLocationAddressSchemeFileAsync(Integer locationAddressSchemeId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLocationAddressSchemeFileValidateBeforeCall(locationAddressSchemeId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addLocationAddressSchemeFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param locationAddressSchemeId Id of the locationAddressScheme to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLocationAddressSchemeFileByURLCall(RecordFile body, Integer locationAddressSchemeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/locationAddressScheme/{locationAddressSchemeId}/file"
            .replaceAll("\\{" + "locationAddressSchemeId" + "\\}", apiClient.escapeString(locationAddressSchemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLocationAddressSchemeFileByURLValidateBeforeCall(RecordFile body, Integer locationAddressSchemeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addLocationAddressSchemeFileByURL(Async)");
        }
        
        // verify the required parameter 'locationAddressSchemeId' is set
        if (locationAddressSchemeId == null) {
            throw new ApiException("Missing the required parameter 'locationAddressSchemeId' when calling addLocationAddressSchemeFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addLocationAddressSchemeFileByURLCall(body, locationAddressSchemeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a locationAddressScheme by URL.
     * Adds a file to an existing locationAddressScheme by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param locationAddressSchemeId Id of the locationAddressScheme to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addLocationAddressSchemeFileByURL(RecordFile body, Integer locationAddressSchemeId) throws ApiException {
        addLocationAddressSchemeFileByURLWithHttpInfo(body, locationAddressSchemeId);
    }

    /**
     * Attach a file to a locationAddressScheme by URL.
     * Adds a file to an existing locationAddressScheme by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param locationAddressSchemeId Id of the locationAddressScheme to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addLocationAddressSchemeFileByURLWithHttpInfo(RecordFile body, Integer locationAddressSchemeId) throws ApiException {
        com.squareup.okhttp.Call call = addLocationAddressSchemeFileByURLValidateBeforeCall(body, locationAddressSchemeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a locationAddressScheme by URL. (asynchronously)
     * Adds a file to an existing locationAddressScheme by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param locationAddressSchemeId Id of the locationAddressScheme to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLocationAddressSchemeFileByURLAsync(RecordFile body, Integer locationAddressSchemeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLocationAddressSchemeFileByURLValidateBeforeCall(body, locationAddressSchemeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addLocationAddressSchemeTag
     * @param locationAddressSchemeId Id of the locationAddressScheme to add a tag to (required)
     * @param locationAddressSchemeTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLocationAddressSchemeTagCall(Integer locationAddressSchemeId, String locationAddressSchemeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationAddressScheme/{locationAddressSchemeId}/tag/{locationAddressSchemeTag}"
            .replaceAll("\\{" + "locationAddressSchemeId" + "\\}", apiClient.escapeString(locationAddressSchemeId.toString()))
            .replaceAll("\\{" + "locationAddressSchemeTag" + "\\}", apiClient.escapeString(locationAddressSchemeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLocationAddressSchemeTagValidateBeforeCall(Integer locationAddressSchemeId, String locationAddressSchemeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationAddressSchemeId' is set
        if (locationAddressSchemeId == null) {
            throw new ApiException("Missing the required parameter 'locationAddressSchemeId' when calling addLocationAddressSchemeTag(Async)");
        }
        
        // verify the required parameter 'locationAddressSchemeTag' is set
        if (locationAddressSchemeTag == null) {
            throw new ApiException("Missing the required parameter 'locationAddressSchemeTag' when calling addLocationAddressSchemeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addLocationAddressSchemeTagCall(locationAddressSchemeId, locationAddressSchemeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a locationAddressScheme.
     * Adds a tag to an existing locationAddressScheme.
     * @param locationAddressSchemeId Id of the locationAddressScheme to add a tag to (required)
     * @param locationAddressSchemeTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addLocationAddressSchemeTag(Integer locationAddressSchemeId, String locationAddressSchemeTag) throws ApiException {
        addLocationAddressSchemeTagWithHttpInfo(locationAddressSchemeId, locationAddressSchemeTag);
    }

    /**
     * Add new tags for a locationAddressScheme.
     * Adds a tag to an existing locationAddressScheme.
     * @param locationAddressSchemeId Id of the locationAddressScheme to add a tag to (required)
     * @param locationAddressSchemeTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addLocationAddressSchemeTagWithHttpInfo(Integer locationAddressSchemeId, String locationAddressSchemeTag) throws ApiException {
        com.squareup.okhttp.Call call = addLocationAddressSchemeTagValidateBeforeCall(locationAddressSchemeId, locationAddressSchemeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a locationAddressScheme. (asynchronously)
     * Adds a tag to an existing locationAddressScheme.
     * @param locationAddressSchemeId Id of the locationAddressScheme to add a tag to (required)
     * @param locationAddressSchemeTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLocationAddressSchemeTagAsync(Integer locationAddressSchemeId, String locationAddressSchemeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLocationAddressSchemeTagValidateBeforeCall(locationAddressSchemeId, locationAddressSchemeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLocationAddressScheme
     * @param locationAddressSchemeId Id of the locationAddressScheme to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLocationAddressSchemeCall(Integer locationAddressSchemeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationAddressScheme/{locationAddressSchemeId}"
            .replaceAll("\\{" + "locationAddressSchemeId" + "\\}", apiClient.escapeString(locationAddressSchemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLocationAddressSchemeValidateBeforeCall(Integer locationAddressSchemeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationAddressSchemeId' is set
        if (locationAddressSchemeId == null) {
            throw new ApiException("Missing the required parameter 'locationAddressSchemeId' when calling deleteLocationAddressScheme(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteLocationAddressSchemeCall(locationAddressSchemeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a locationAddressScheme
     * Deletes the locationAddressScheme identified by the specified id.
     * @param locationAddressSchemeId Id of the locationAddressScheme to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLocationAddressScheme(Integer locationAddressSchemeId) throws ApiException {
        deleteLocationAddressSchemeWithHttpInfo(locationAddressSchemeId);
    }

    /**
     * Delete a locationAddressScheme
     * Deletes the locationAddressScheme identified by the specified id.
     * @param locationAddressSchemeId Id of the locationAddressScheme to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLocationAddressSchemeWithHttpInfo(Integer locationAddressSchemeId) throws ApiException {
        com.squareup.okhttp.Call call = deleteLocationAddressSchemeValidateBeforeCall(locationAddressSchemeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a locationAddressScheme (asynchronously)
     * Deletes the locationAddressScheme identified by the specified id.
     * @param locationAddressSchemeId Id of the locationAddressScheme to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLocationAddressSchemeAsync(Integer locationAddressSchemeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLocationAddressSchemeValidateBeforeCall(locationAddressSchemeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLocationAddressSchemeFile
     * @param locationAddressSchemeId Id of the locationAddressScheme to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLocationAddressSchemeFileCall(Integer locationAddressSchemeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationAddressScheme/{locationAddressSchemeId}/file/{fileId}"
            .replaceAll("\\{" + "locationAddressSchemeId" + "\\}", apiClient.escapeString(locationAddressSchemeId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLocationAddressSchemeFileValidateBeforeCall(Integer locationAddressSchemeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationAddressSchemeId' is set
        if (locationAddressSchemeId == null) {
            throw new ApiException("Missing the required parameter 'locationAddressSchemeId' when calling deleteLocationAddressSchemeFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteLocationAddressSchemeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteLocationAddressSchemeFileCall(locationAddressSchemeId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a locationAddressScheme.
     * Deletes an existing locationAddressScheme file using the specified data.
     * @param locationAddressSchemeId Id of the locationAddressScheme to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLocationAddressSchemeFile(Integer locationAddressSchemeId, Integer fileId) throws ApiException {
        deleteLocationAddressSchemeFileWithHttpInfo(locationAddressSchemeId, fileId);
    }

    /**
     * Delete a file for a locationAddressScheme.
     * Deletes an existing locationAddressScheme file using the specified data.
     * @param locationAddressSchemeId Id of the locationAddressScheme to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLocationAddressSchemeFileWithHttpInfo(Integer locationAddressSchemeId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteLocationAddressSchemeFileValidateBeforeCall(locationAddressSchemeId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a locationAddressScheme. (asynchronously)
     * Deletes an existing locationAddressScheme file using the specified data.
     * @param locationAddressSchemeId Id of the locationAddressScheme to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLocationAddressSchemeFileAsync(Integer locationAddressSchemeId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLocationAddressSchemeFileValidateBeforeCall(locationAddressSchemeId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLocationAddressSchemeTag
     * @param locationAddressSchemeId Id of the locationAddressScheme to remove tag from (required)
     * @param locationAddressSchemeTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLocationAddressSchemeTagCall(Integer locationAddressSchemeId, String locationAddressSchemeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationAddressScheme/{locationAddressSchemeId}/tag/{locationAddressSchemeTag}"
            .replaceAll("\\{" + "locationAddressSchemeId" + "\\}", apiClient.escapeString(locationAddressSchemeId.toString()))
            .replaceAll("\\{" + "locationAddressSchemeTag" + "\\}", apiClient.escapeString(locationAddressSchemeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLocationAddressSchemeTagValidateBeforeCall(Integer locationAddressSchemeId, String locationAddressSchemeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationAddressSchemeId' is set
        if (locationAddressSchemeId == null) {
            throw new ApiException("Missing the required parameter 'locationAddressSchemeId' when calling deleteLocationAddressSchemeTag(Async)");
        }
        
        // verify the required parameter 'locationAddressSchemeTag' is set
        if (locationAddressSchemeTag == null) {
            throw new ApiException("Missing the required parameter 'locationAddressSchemeTag' when calling deleteLocationAddressSchemeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteLocationAddressSchemeTagCall(locationAddressSchemeId, locationAddressSchemeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a locationAddressScheme.
     * Deletes an existing locationAddressScheme tag using the specified data.
     * @param locationAddressSchemeId Id of the locationAddressScheme to remove tag from (required)
     * @param locationAddressSchemeTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLocationAddressSchemeTag(Integer locationAddressSchemeId, String locationAddressSchemeTag) throws ApiException {
        deleteLocationAddressSchemeTagWithHttpInfo(locationAddressSchemeId, locationAddressSchemeTag);
    }

    /**
     * Delete a tag for a locationAddressScheme.
     * Deletes an existing locationAddressScheme tag using the specified data.
     * @param locationAddressSchemeId Id of the locationAddressScheme to remove tag from (required)
     * @param locationAddressSchemeTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLocationAddressSchemeTagWithHttpInfo(Integer locationAddressSchemeId, String locationAddressSchemeTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteLocationAddressSchemeTagValidateBeforeCall(locationAddressSchemeId, locationAddressSchemeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a locationAddressScheme. (asynchronously)
     * Deletes an existing locationAddressScheme tag using the specified data.
     * @param locationAddressSchemeId Id of the locationAddressScheme to remove tag from (required)
     * @param locationAddressSchemeTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLocationAddressSchemeTagAsync(Integer locationAddressSchemeId, String locationAddressSchemeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLocationAddressSchemeTagValidateBeforeCall(locationAddressSchemeId, locationAddressSchemeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateLocationAddressSchemeById
     * @param locationAddressSchemeId Id of the locationAddressScheme to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateLocationAddressSchemeByIdCall(Integer locationAddressSchemeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationAddressScheme/duplicate/{locationAddressSchemeId}"
            .replaceAll("\\{" + "locationAddressSchemeId" + "\\}", apiClient.escapeString(locationAddressSchemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateLocationAddressSchemeByIdValidateBeforeCall(Integer locationAddressSchemeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationAddressSchemeId' is set
        if (locationAddressSchemeId == null) {
            throw new ApiException("Missing the required parameter 'locationAddressSchemeId' when calling getDuplicateLocationAddressSchemeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateLocationAddressSchemeByIdCall(locationAddressSchemeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a locationAddressScheme by id
     * Returns a duplicated locationAddressScheme identified by the specified id.
     * @param locationAddressSchemeId Id of the locationAddressScheme to be duplicated. (required)
     * @return LocationAddressScheme
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LocationAddressScheme getDuplicateLocationAddressSchemeById(Integer locationAddressSchemeId) throws ApiException {
        ApiResponse<LocationAddressScheme> resp = getDuplicateLocationAddressSchemeByIdWithHttpInfo(locationAddressSchemeId);
        return resp.getData();
    }

    /**
     * Get a duplicated a locationAddressScheme by id
     * Returns a duplicated locationAddressScheme identified by the specified id.
     * @param locationAddressSchemeId Id of the locationAddressScheme to be duplicated. (required)
     * @return ApiResponse&lt;LocationAddressScheme&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LocationAddressScheme> getDuplicateLocationAddressSchemeByIdWithHttpInfo(Integer locationAddressSchemeId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateLocationAddressSchemeByIdValidateBeforeCall(locationAddressSchemeId, null, null);
        Type localVarReturnType = new TypeToken<LocationAddressScheme>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a locationAddressScheme by id (asynchronously)
     * Returns a duplicated locationAddressScheme identified by the specified id.
     * @param locationAddressSchemeId Id of the locationAddressScheme to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateLocationAddressSchemeByIdAsync(Integer locationAddressSchemeId, final ApiCallback<LocationAddressScheme> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateLocationAddressSchemeByIdValidateBeforeCall(locationAddressSchemeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LocationAddressScheme>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLocationAddressSchemeByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLocationAddressSchemeByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationAddressScheme/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLocationAddressSchemeByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getLocationAddressSchemeByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search locationAddressSchemes by filter
     * Returns the list of locationAddressSchemes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;LocationAddressScheme&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LocationAddressScheme> getLocationAddressSchemeByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<LocationAddressScheme>> resp = getLocationAddressSchemeByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search locationAddressSchemes by filter
     * Returns the list of locationAddressSchemes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;LocationAddressScheme&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LocationAddressScheme>> getLocationAddressSchemeByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getLocationAddressSchemeByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<LocationAddressScheme>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search locationAddressSchemes by filter (asynchronously)
     * Returns the list of locationAddressSchemes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLocationAddressSchemeByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<LocationAddressScheme>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLocationAddressSchemeByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LocationAddressScheme>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLocationAddressSchemeById
     * @param locationAddressSchemeId Id of the locationAddressScheme to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLocationAddressSchemeByIdCall(Integer locationAddressSchemeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationAddressScheme/{locationAddressSchemeId}"
            .replaceAll("\\{" + "locationAddressSchemeId" + "\\}", apiClient.escapeString(locationAddressSchemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLocationAddressSchemeByIdValidateBeforeCall(Integer locationAddressSchemeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationAddressSchemeId' is set
        if (locationAddressSchemeId == null) {
            throw new ApiException("Missing the required parameter 'locationAddressSchemeId' when calling getLocationAddressSchemeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getLocationAddressSchemeByIdCall(locationAddressSchemeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a locationAddressScheme by id
     * Returns the locationAddressScheme identified by the specified id.
     * @param locationAddressSchemeId Id of the locationAddressScheme to be returned. (required)
     * @return LocationAddressScheme
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LocationAddressScheme getLocationAddressSchemeById(Integer locationAddressSchemeId) throws ApiException {
        ApiResponse<LocationAddressScheme> resp = getLocationAddressSchemeByIdWithHttpInfo(locationAddressSchemeId);
        return resp.getData();
    }

    /**
     * Get a locationAddressScheme by id
     * Returns the locationAddressScheme identified by the specified id.
     * @param locationAddressSchemeId Id of the locationAddressScheme to be returned. (required)
     * @return ApiResponse&lt;LocationAddressScheme&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LocationAddressScheme> getLocationAddressSchemeByIdWithHttpInfo(Integer locationAddressSchemeId) throws ApiException {
        com.squareup.okhttp.Call call = getLocationAddressSchemeByIdValidateBeforeCall(locationAddressSchemeId, null, null);
        Type localVarReturnType = new TypeToken<LocationAddressScheme>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a locationAddressScheme by id (asynchronously)
     * Returns the locationAddressScheme identified by the specified id.
     * @param locationAddressSchemeId Id of the locationAddressScheme to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLocationAddressSchemeByIdAsync(Integer locationAddressSchemeId, final ApiCallback<LocationAddressScheme> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLocationAddressSchemeByIdValidateBeforeCall(locationAddressSchemeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LocationAddressScheme>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLocationAddressSchemeFiles
     * @param locationAddressSchemeId Id of the locationAddressScheme to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLocationAddressSchemeFilesCall(Integer locationAddressSchemeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationAddressScheme/{locationAddressSchemeId}/file"
            .replaceAll("\\{" + "locationAddressSchemeId" + "\\}", apiClient.escapeString(locationAddressSchemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLocationAddressSchemeFilesValidateBeforeCall(Integer locationAddressSchemeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationAddressSchemeId' is set
        if (locationAddressSchemeId == null) {
            throw new ApiException("Missing the required parameter 'locationAddressSchemeId' when calling getLocationAddressSchemeFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getLocationAddressSchemeFilesCall(locationAddressSchemeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a locationAddressScheme.
     * Get all existing locationAddressScheme files.
     * @param locationAddressSchemeId Id of the locationAddressScheme to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getLocationAddressSchemeFiles(Integer locationAddressSchemeId) throws ApiException {
        getLocationAddressSchemeFilesWithHttpInfo(locationAddressSchemeId);
    }

    /**
     * Get the files for a locationAddressScheme.
     * Get all existing locationAddressScheme files.
     * @param locationAddressSchemeId Id of the locationAddressScheme to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getLocationAddressSchemeFilesWithHttpInfo(Integer locationAddressSchemeId) throws ApiException {
        com.squareup.okhttp.Call call = getLocationAddressSchemeFilesValidateBeforeCall(locationAddressSchemeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a locationAddressScheme. (asynchronously)
     * Get all existing locationAddressScheme files.
     * @param locationAddressSchemeId Id of the locationAddressScheme to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLocationAddressSchemeFilesAsync(Integer locationAddressSchemeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLocationAddressSchemeFilesValidateBeforeCall(locationAddressSchemeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getLocationAddressSchemeTags
     * @param locationAddressSchemeId Id of the locationAddressScheme to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLocationAddressSchemeTagsCall(Integer locationAddressSchemeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/locationAddressScheme/{locationAddressSchemeId}/tag"
            .replaceAll("\\{" + "locationAddressSchemeId" + "\\}", apiClient.escapeString(locationAddressSchemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLocationAddressSchemeTagsValidateBeforeCall(Integer locationAddressSchemeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationAddressSchemeId' is set
        if (locationAddressSchemeId == null) {
            throw new ApiException("Missing the required parameter 'locationAddressSchemeId' when calling getLocationAddressSchemeTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getLocationAddressSchemeTagsCall(locationAddressSchemeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a locationAddressScheme.
     * Get all existing locationAddressScheme tags.
     * @param locationAddressSchemeId Id of the locationAddressScheme to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getLocationAddressSchemeTags(Integer locationAddressSchemeId) throws ApiException {
        getLocationAddressSchemeTagsWithHttpInfo(locationAddressSchemeId);
    }

    /**
     * Get the tags for a locationAddressScheme.
     * Get all existing locationAddressScheme tags.
     * @param locationAddressSchemeId Id of the locationAddressScheme to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getLocationAddressSchemeTagsWithHttpInfo(Integer locationAddressSchemeId) throws ApiException {
        com.squareup.okhttp.Call call = getLocationAddressSchemeTagsValidateBeforeCall(locationAddressSchemeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a locationAddressScheme. (asynchronously)
     * Get all existing locationAddressScheme tags.
     * @param locationAddressSchemeId Id of the locationAddressScheme to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLocationAddressSchemeTagsAsync(Integer locationAddressSchemeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLocationAddressSchemeTagsValidateBeforeCall(locationAddressSchemeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateLocationAddressScheme
     * @param body LocationAddressScheme to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLocationAddressSchemeCall(LocationAddressScheme body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/locationAddressScheme";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLocationAddressSchemeValidateBeforeCall(LocationAddressScheme body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLocationAddressScheme(Async)");
        }
        

        com.squareup.okhttp.Call call = updateLocationAddressSchemeCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a locationAddressScheme
     * Updates an existing locationAddressScheme using the specified data.
     * @param body LocationAddressScheme to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateLocationAddressScheme(LocationAddressScheme body) throws ApiException {
        updateLocationAddressSchemeWithHttpInfo(body);
    }

    /**
     * Update a locationAddressScheme
     * Updates an existing locationAddressScheme using the specified data.
     * @param body LocationAddressScheme to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateLocationAddressSchemeWithHttpInfo(LocationAddressScheme body) throws ApiException {
        com.squareup.okhttp.Call call = updateLocationAddressSchemeValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a locationAddressScheme (asynchronously)
     * Updates an existing locationAddressScheme using the specified data.
     * @param body LocationAddressScheme to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLocationAddressSchemeAsync(LocationAddressScheme body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLocationAddressSchemeValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateLocationAddressSchemeCustomFields
     * @param body LocationAddressScheme to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLocationAddressSchemeCustomFieldsCall(LocationAddressScheme body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/locationAddressScheme/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLocationAddressSchemeCustomFieldsValidateBeforeCall(LocationAddressScheme body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLocationAddressSchemeCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateLocationAddressSchemeCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a locationAddressScheme custom fields
     * Updates an existing locationAddressScheme custom fields using the specified data.
     * @param body LocationAddressScheme to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateLocationAddressSchemeCustomFields(LocationAddressScheme body) throws ApiException {
        updateLocationAddressSchemeCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a locationAddressScheme custom fields
     * Updates an existing locationAddressScheme custom fields using the specified data.
     * @param body LocationAddressScheme to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateLocationAddressSchemeCustomFieldsWithHttpInfo(LocationAddressScheme body) throws ApiException {
        com.squareup.okhttp.Call call = updateLocationAddressSchemeCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a locationAddressScheme custom fields (asynchronously)
     * Updates an existing locationAddressScheme custom fields using the specified data.
     * @param body LocationAddressScheme to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLocationAddressSchemeCustomFieldsAsync(LocationAddressScheme body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLocationAddressSchemeCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
