/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;
import com.infopluscommerce.model.ShoppingCartConnection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ShoppingCartConnectionApi {
    private ApiClient apiClient;

    public ShoppingCartConnectionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ShoppingCartConnectionApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addShoppingCartConnection
     * @param body ShoppingCartConnection to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addShoppingCartConnectionCall(ShoppingCartConnection body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/shoppingCartConnection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addShoppingCartConnectionValidateBeforeCall(ShoppingCartConnection body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addShoppingCartConnection(Async)");
        }
        

        com.squareup.okhttp.Call call = addShoppingCartConnectionCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a shoppingCartConnection
     * Inserts a new shoppingCartConnection using the specified data.
     * @param body ShoppingCartConnection to be inserted. (required)
     * @return ShoppingCartConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShoppingCartConnection addShoppingCartConnection(ShoppingCartConnection body) throws ApiException {
        ApiResponse<ShoppingCartConnection> resp = addShoppingCartConnectionWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a shoppingCartConnection
     * Inserts a new shoppingCartConnection using the specified data.
     * @param body ShoppingCartConnection to be inserted. (required)
     * @return ApiResponse&lt;ShoppingCartConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShoppingCartConnection> addShoppingCartConnectionWithHttpInfo(ShoppingCartConnection body) throws ApiException {
        com.squareup.okhttp.Call call = addShoppingCartConnectionValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ShoppingCartConnection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a shoppingCartConnection (asynchronously)
     * Inserts a new shoppingCartConnection using the specified data.
     * @param body ShoppingCartConnection to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addShoppingCartConnectionAsync(ShoppingCartConnection body, final ApiCallback<ShoppingCartConnection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addShoppingCartConnectionValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ShoppingCartConnection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addShoppingCartConnectionAudit
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to add an audit to (required)
     * @param shoppingCartConnectionAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addShoppingCartConnectionAuditCall(Integer shoppingCartConnectionId, String shoppingCartConnectionAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/shoppingCartConnection/{shoppingCartConnectionId}/audit/{shoppingCartConnectionAudit}"
            .replaceAll("\\{" + "shoppingCartConnectionId" + "\\}", apiClient.escapeString(shoppingCartConnectionId.toString()))
            .replaceAll("\\{" + "shoppingCartConnectionAudit" + "\\}", apiClient.escapeString(shoppingCartConnectionAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addShoppingCartConnectionAuditValidateBeforeCall(Integer shoppingCartConnectionId, String shoppingCartConnectionAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'shoppingCartConnectionId' is set
        if (shoppingCartConnectionId == null) {
            throw new ApiException("Missing the required parameter 'shoppingCartConnectionId' when calling addShoppingCartConnectionAudit(Async)");
        }
        
        // verify the required parameter 'shoppingCartConnectionAudit' is set
        if (shoppingCartConnectionAudit == null) {
            throw new ApiException("Missing the required parameter 'shoppingCartConnectionAudit' when calling addShoppingCartConnectionAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addShoppingCartConnectionAuditCall(shoppingCartConnectionId, shoppingCartConnectionAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a shoppingCartConnection
     * Adds an audit to an existing shoppingCartConnection.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to add an audit to (required)
     * @param shoppingCartConnectionAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addShoppingCartConnectionAudit(Integer shoppingCartConnectionId, String shoppingCartConnectionAudit) throws ApiException {
        addShoppingCartConnectionAuditWithHttpInfo(shoppingCartConnectionId, shoppingCartConnectionAudit);
    }

    /**
     * Add new audit for a shoppingCartConnection
     * Adds an audit to an existing shoppingCartConnection.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to add an audit to (required)
     * @param shoppingCartConnectionAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addShoppingCartConnectionAuditWithHttpInfo(Integer shoppingCartConnectionId, String shoppingCartConnectionAudit) throws ApiException {
        com.squareup.okhttp.Call call = addShoppingCartConnectionAuditValidateBeforeCall(shoppingCartConnectionId, shoppingCartConnectionAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a shoppingCartConnection (asynchronously)
     * Adds an audit to an existing shoppingCartConnection.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to add an audit to (required)
     * @param shoppingCartConnectionAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addShoppingCartConnectionAuditAsync(Integer shoppingCartConnectionId, String shoppingCartConnectionAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addShoppingCartConnectionAuditValidateBeforeCall(shoppingCartConnectionId, shoppingCartConnectionAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addShoppingCartConnectionFile
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addShoppingCartConnectionFileCall(Integer shoppingCartConnectionId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/shoppingCartConnection/{shoppingCartConnectionId}/file/{fileName}"
            .replaceAll("\\{" + "shoppingCartConnectionId" + "\\}", apiClient.escapeString(shoppingCartConnectionId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addShoppingCartConnectionFileValidateBeforeCall(Integer shoppingCartConnectionId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'shoppingCartConnectionId' is set
        if (shoppingCartConnectionId == null) {
            throw new ApiException("Missing the required parameter 'shoppingCartConnectionId' when calling addShoppingCartConnectionFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addShoppingCartConnectionFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addShoppingCartConnectionFileCall(shoppingCartConnectionId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a shoppingCartConnection
     * Adds a file to an existing shoppingCartConnection.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addShoppingCartConnectionFile(Integer shoppingCartConnectionId, String fileName) throws ApiException {
        addShoppingCartConnectionFileWithHttpInfo(shoppingCartConnectionId, fileName);
    }

    /**
     * Attach a file to a shoppingCartConnection
     * Adds a file to an existing shoppingCartConnection.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addShoppingCartConnectionFileWithHttpInfo(Integer shoppingCartConnectionId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addShoppingCartConnectionFileValidateBeforeCall(shoppingCartConnectionId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a shoppingCartConnection (asynchronously)
     * Adds a file to an existing shoppingCartConnection.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addShoppingCartConnectionFileAsync(Integer shoppingCartConnectionId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addShoppingCartConnectionFileValidateBeforeCall(shoppingCartConnectionId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addShoppingCartConnectionFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addShoppingCartConnectionFileByURLCall(RecordFile body, Integer shoppingCartConnectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/shoppingCartConnection/{shoppingCartConnectionId}/file"
            .replaceAll("\\{" + "shoppingCartConnectionId" + "\\}", apiClient.escapeString(shoppingCartConnectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addShoppingCartConnectionFileByURLValidateBeforeCall(RecordFile body, Integer shoppingCartConnectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addShoppingCartConnectionFileByURL(Async)");
        }
        
        // verify the required parameter 'shoppingCartConnectionId' is set
        if (shoppingCartConnectionId == null) {
            throw new ApiException("Missing the required parameter 'shoppingCartConnectionId' when calling addShoppingCartConnectionFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addShoppingCartConnectionFileByURLCall(body, shoppingCartConnectionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a shoppingCartConnection by URL.
     * Adds a file to an existing shoppingCartConnection by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addShoppingCartConnectionFileByURL(RecordFile body, Integer shoppingCartConnectionId) throws ApiException {
        addShoppingCartConnectionFileByURLWithHttpInfo(body, shoppingCartConnectionId);
    }

    /**
     * Attach a file to a shoppingCartConnection by URL.
     * Adds a file to an existing shoppingCartConnection by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addShoppingCartConnectionFileByURLWithHttpInfo(RecordFile body, Integer shoppingCartConnectionId) throws ApiException {
        com.squareup.okhttp.Call call = addShoppingCartConnectionFileByURLValidateBeforeCall(body, shoppingCartConnectionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a shoppingCartConnection by URL. (asynchronously)
     * Adds a file to an existing shoppingCartConnection by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addShoppingCartConnectionFileByURLAsync(RecordFile body, Integer shoppingCartConnectionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addShoppingCartConnectionFileByURLValidateBeforeCall(body, shoppingCartConnectionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addShoppingCartConnectionTag
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to add a tag to (required)
     * @param shoppingCartConnectionTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addShoppingCartConnectionTagCall(Integer shoppingCartConnectionId, String shoppingCartConnectionTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/shoppingCartConnection/{shoppingCartConnectionId}/tag/{shoppingCartConnectionTag}"
            .replaceAll("\\{" + "shoppingCartConnectionId" + "\\}", apiClient.escapeString(shoppingCartConnectionId.toString()))
            .replaceAll("\\{" + "shoppingCartConnectionTag" + "\\}", apiClient.escapeString(shoppingCartConnectionTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addShoppingCartConnectionTagValidateBeforeCall(Integer shoppingCartConnectionId, String shoppingCartConnectionTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'shoppingCartConnectionId' is set
        if (shoppingCartConnectionId == null) {
            throw new ApiException("Missing the required parameter 'shoppingCartConnectionId' when calling addShoppingCartConnectionTag(Async)");
        }
        
        // verify the required parameter 'shoppingCartConnectionTag' is set
        if (shoppingCartConnectionTag == null) {
            throw new ApiException("Missing the required parameter 'shoppingCartConnectionTag' when calling addShoppingCartConnectionTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addShoppingCartConnectionTagCall(shoppingCartConnectionId, shoppingCartConnectionTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a shoppingCartConnection.
     * Adds a tag to an existing shoppingCartConnection.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to add a tag to (required)
     * @param shoppingCartConnectionTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addShoppingCartConnectionTag(Integer shoppingCartConnectionId, String shoppingCartConnectionTag) throws ApiException {
        addShoppingCartConnectionTagWithHttpInfo(shoppingCartConnectionId, shoppingCartConnectionTag);
    }

    /**
     * Add new tags for a shoppingCartConnection.
     * Adds a tag to an existing shoppingCartConnection.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to add a tag to (required)
     * @param shoppingCartConnectionTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addShoppingCartConnectionTagWithHttpInfo(Integer shoppingCartConnectionId, String shoppingCartConnectionTag) throws ApiException {
        com.squareup.okhttp.Call call = addShoppingCartConnectionTagValidateBeforeCall(shoppingCartConnectionId, shoppingCartConnectionTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a shoppingCartConnection. (asynchronously)
     * Adds a tag to an existing shoppingCartConnection.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to add a tag to (required)
     * @param shoppingCartConnectionTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addShoppingCartConnectionTagAsync(Integer shoppingCartConnectionId, String shoppingCartConnectionTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addShoppingCartConnectionTagValidateBeforeCall(shoppingCartConnectionId, shoppingCartConnectionTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteShoppingCartConnection
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteShoppingCartConnectionCall(Integer shoppingCartConnectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/shoppingCartConnection/{shoppingCartConnectionId}"
            .replaceAll("\\{" + "shoppingCartConnectionId" + "\\}", apiClient.escapeString(shoppingCartConnectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteShoppingCartConnectionValidateBeforeCall(Integer shoppingCartConnectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'shoppingCartConnectionId' is set
        if (shoppingCartConnectionId == null) {
            throw new ApiException("Missing the required parameter 'shoppingCartConnectionId' when calling deleteShoppingCartConnection(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteShoppingCartConnectionCall(shoppingCartConnectionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a shoppingCartConnection
     * Deletes the shoppingCartConnection identified by the specified id.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteShoppingCartConnection(Integer shoppingCartConnectionId) throws ApiException {
        deleteShoppingCartConnectionWithHttpInfo(shoppingCartConnectionId);
    }

    /**
     * Delete a shoppingCartConnection
     * Deletes the shoppingCartConnection identified by the specified id.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteShoppingCartConnectionWithHttpInfo(Integer shoppingCartConnectionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteShoppingCartConnectionValidateBeforeCall(shoppingCartConnectionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a shoppingCartConnection (asynchronously)
     * Deletes the shoppingCartConnection identified by the specified id.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteShoppingCartConnectionAsync(Integer shoppingCartConnectionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteShoppingCartConnectionValidateBeforeCall(shoppingCartConnectionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteShoppingCartConnectionFile
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteShoppingCartConnectionFileCall(Integer shoppingCartConnectionId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/shoppingCartConnection/{shoppingCartConnectionId}/file/{fileId}"
            .replaceAll("\\{" + "shoppingCartConnectionId" + "\\}", apiClient.escapeString(shoppingCartConnectionId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteShoppingCartConnectionFileValidateBeforeCall(Integer shoppingCartConnectionId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'shoppingCartConnectionId' is set
        if (shoppingCartConnectionId == null) {
            throw new ApiException("Missing the required parameter 'shoppingCartConnectionId' when calling deleteShoppingCartConnectionFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteShoppingCartConnectionFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteShoppingCartConnectionFileCall(shoppingCartConnectionId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a shoppingCartConnection.
     * Deletes an existing shoppingCartConnection file using the specified data.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteShoppingCartConnectionFile(Integer shoppingCartConnectionId, Integer fileId) throws ApiException {
        deleteShoppingCartConnectionFileWithHttpInfo(shoppingCartConnectionId, fileId);
    }

    /**
     * Delete a file for a shoppingCartConnection.
     * Deletes an existing shoppingCartConnection file using the specified data.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteShoppingCartConnectionFileWithHttpInfo(Integer shoppingCartConnectionId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteShoppingCartConnectionFileValidateBeforeCall(shoppingCartConnectionId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a shoppingCartConnection. (asynchronously)
     * Deletes an existing shoppingCartConnection file using the specified data.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteShoppingCartConnectionFileAsync(Integer shoppingCartConnectionId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteShoppingCartConnectionFileValidateBeforeCall(shoppingCartConnectionId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteShoppingCartConnectionTag
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to remove tag from (required)
     * @param shoppingCartConnectionTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteShoppingCartConnectionTagCall(Integer shoppingCartConnectionId, String shoppingCartConnectionTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/shoppingCartConnection/{shoppingCartConnectionId}/tag/{shoppingCartConnectionTag}"
            .replaceAll("\\{" + "shoppingCartConnectionId" + "\\}", apiClient.escapeString(shoppingCartConnectionId.toString()))
            .replaceAll("\\{" + "shoppingCartConnectionTag" + "\\}", apiClient.escapeString(shoppingCartConnectionTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteShoppingCartConnectionTagValidateBeforeCall(Integer shoppingCartConnectionId, String shoppingCartConnectionTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'shoppingCartConnectionId' is set
        if (shoppingCartConnectionId == null) {
            throw new ApiException("Missing the required parameter 'shoppingCartConnectionId' when calling deleteShoppingCartConnectionTag(Async)");
        }
        
        // verify the required parameter 'shoppingCartConnectionTag' is set
        if (shoppingCartConnectionTag == null) {
            throw new ApiException("Missing the required parameter 'shoppingCartConnectionTag' when calling deleteShoppingCartConnectionTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteShoppingCartConnectionTagCall(shoppingCartConnectionId, shoppingCartConnectionTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a shoppingCartConnection.
     * Deletes an existing shoppingCartConnection tag using the specified data.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to remove tag from (required)
     * @param shoppingCartConnectionTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteShoppingCartConnectionTag(Integer shoppingCartConnectionId, String shoppingCartConnectionTag) throws ApiException {
        deleteShoppingCartConnectionTagWithHttpInfo(shoppingCartConnectionId, shoppingCartConnectionTag);
    }

    /**
     * Delete a tag for a shoppingCartConnection.
     * Deletes an existing shoppingCartConnection tag using the specified data.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to remove tag from (required)
     * @param shoppingCartConnectionTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteShoppingCartConnectionTagWithHttpInfo(Integer shoppingCartConnectionId, String shoppingCartConnectionTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteShoppingCartConnectionTagValidateBeforeCall(shoppingCartConnectionId, shoppingCartConnectionTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a shoppingCartConnection. (asynchronously)
     * Deletes an existing shoppingCartConnection tag using the specified data.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to remove tag from (required)
     * @param shoppingCartConnectionTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteShoppingCartConnectionTagAsync(Integer shoppingCartConnectionId, String shoppingCartConnectionTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteShoppingCartConnectionTagValidateBeforeCall(shoppingCartConnectionId, shoppingCartConnectionTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateShoppingCartConnectionById
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateShoppingCartConnectionByIdCall(Integer shoppingCartConnectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/shoppingCartConnection/duplicate/{shoppingCartConnectionId}"
            .replaceAll("\\{" + "shoppingCartConnectionId" + "\\}", apiClient.escapeString(shoppingCartConnectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateShoppingCartConnectionByIdValidateBeforeCall(Integer shoppingCartConnectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'shoppingCartConnectionId' is set
        if (shoppingCartConnectionId == null) {
            throw new ApiException("Missing the required parameter 'shoppingCartConnectionId' when calling getDuplicateShoppingCartConnectionById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateShoppingCartConnectionByIdCall(shoppingCartConnectionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a shoppingCartConnection by id
     * Returns a duplicated shoppingCartConnection identified by the specified id.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to be duplicated. (required)
     * @return ShoppingCartConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShoppingCartConnection getDuplicateShoppingCartConnectionById(Integer shoppingCartConnectionId) throws ApiException {
        ApiResponse<ShoppingCartConnection> resp = getDuplicateShoppingCartConnectionByIdWithHttpInfo(shoppingCartConnectionId);
        return resp.getData();
    }

    /**
     * Get a duplicated a shoppingCartConnection by id
     * Returns a duplicated shoppingCartConnection identified by the specified id.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to be duplicated. (required)
     * @return ApiResponse&lt;ShoppingCartConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShoppingCartConnection> getDuplicateShoppingCartConnectionByIdWithHttpInfo(Integer shoppingCartConnectionId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateShoppingCartConnectionByIdValidateBeforeCall(shoppingCartConnectionId, null, null);
        Type localVarReturnType = new TypeToken<ShoppingCartConnection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a shoppingCartConnection by id (asynchronously)
     * Returns a duplicated shoppingCartConnection identified by the specified id.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateShoppingCartConnectionByIdAsync(Integer shoppingCartConnectionId, final ApiCallback<ShoppingCartConnection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateShoppingCartConnectionByIdValidateBeforeCall(shoppingCartConnectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ShoppingCartConnection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getShoppingCartConnectionByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getShoppingCartConnectionByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/shoppingCartConnection/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getShoppingCartConnectionByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getShoppingCartConnectionByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search shoppingCartConnections by filter
     * Returns the list of shoppingCartConnections that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;ShoppingCartConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ShoppingCartConnection> getShoppingCartConnectionByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<ShoppingCartConnection>> resp = getShoppingCartConnectionByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search shoppingCartConnections by filter
     * Returns the list of shoppingCartConnections that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;ShoppingCartConnection&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ShoppingCartConnection>> getShoppingCartConnectionByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getShoppingCartConnectionByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<ShoppingCartConnection>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search shoppingCartConnections by filter (asynchronously)
     * Returns the list of shoppingCartConnections that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getShoppingCartConnectionByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<ShoppingCartConnection>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getShoppingCartConnectionByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ShoppingCartConnection>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getShoppingCartConnectionById
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getShoppingCartConnectionByIdCall(Integer shoppingCartConnectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/shoppingCartConnection/{shoppingCartConnectionId}"
            .replaceAll("\\{" + "shoppingCartConnectionId" + "\\}", apiClient.escapeString(shoppingCartConnectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getShoppingCartConnectionByIdValidateBeforeCall(Integer shoppingCartConnectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'shoppingCartConnectionId' is set
        if (shoppingCartConnectionId == null) {
            throw new ApiException("Missing the required parameter 'shoppingCartConnectionId' when calling getShoppingCartConnectionById(Async)");
        }
        

        com.squareup.okhttp.Call call = getShoppingCartConnectionByIdCall(shoppingCartConnectionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a shoppingCartConnection by id
     * Returns the shoppingCartConnection identified by the specified id.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to be returned. (required)
     * @return ShoppingCartConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShoppingCartConnection getShoppingCartConnectionById(Integer shoppingCartConnectionId) throws ApiException {
        ApiResponse<ShoppingCartConnection> resp = getShoppingCartConnectionByIdWithHttpInfo(shoppingCartConnectionId);
        return resp.getData();
    }

    /**
     * Get a shoppingCartConnection by id
     * Returns the shoppingCartConnection identified by the specified id.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to be returned. (required)
     * @return ApiResponse&lt;ShoppingCartConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShoppingCartConnection> getShoppingCartConnectionByIdWithHttpInfo(Integer shoppingCartConnectionId) throws ApiException {
        com.squareup.okhttp.Call call = getShoppingCartConnectionByIdValidateBeforeCall(shoppingCartConnectionId, null, null);
        Type localVarReturnType = new TypeToken<ShoppingCartConnection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a shoppingCartConnection by id (asynchronously)
     * Returns the shoppingCartConnection identified by the specified id.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getShoppingCartConnectionByIdAsync(Integer shoppingCartConnectionId, final ApiCallback<ShoppingCartConnection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getShoppingCartConnectionByIdValidateBeforeCall(shoppingCartConnectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ShoppingCartConnection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getShoppingCartConnectionFiles
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getShoppingCartConnectionFilesCall(Integer shoppingCartConnectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/shoppingCartConnection/{shoppingCartConnectionId}/file"
            .replaceAll("\\{" + "shoppingCartConnectionId" + "\\}", apiClient.escapeString(shoppingCartConnectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getShoppingCartConnectionFilesValidateBeforeCall(Integer shoppingCartConnectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'shoppingCartConnectionId' is set
        if (shoppingCartConnectionId == null) {
            throw new ApiException("Missing the required parameter 'shoppingCartConnectionId' when calling getShoppingCartConnectionFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getShoppingCartConnectionFilesCall(shoppingCartConnectionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a shoppingCartConnection.
     * Get all existing shoppingCartConnection files.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getShoppingCartConnectionFiles(Integer shoppingCartConnectionId) throws ApiException {
        getShoppingCartConnectionFilesWithHttpInfo(shoppingCartConnectionId);
    }

    /**
     * Get the files for a shoppingCartConnection.
     * Get all existing shoppingCartConnection files.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getShoppingCartConnectionFilesWithHttpInfo(Integer shoppingCartConnectionId) throws ApiException {
        com.squareup.okhttp.Call call = getShoppingCartConnectionFilesValidateBeforeCall(shoppingCartConnectionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a shoppingCartConnection. (asynchronously)
     * Get all existing shoppingCartConnection files.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getShoppingCartConnectionFilesAsync(Integer shoppingCartConnectionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getShoppingCartConnectionFilesValidateBeforeCall(shoppingCartConnectionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getShoppingCartConnectionTags
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getShoppingCartConnectionTagsCall(Integer shoppingCartConnectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/shoppingCartConnection/{shoppingCartConnectionId}/tag"
            .replaceAll("\\{" + "shoppingCartConnectionId" + "\\}", apiClient.escapeString(shoppingCartConnectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getShoppingCartConnectionTagsValidateBeforeCall(Integer shoppingCartConnectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'shoppingCartConnectionId' is set
        if (shoppingCartConnectionId == null) {
            throw new ApiException("Missing the required parameter 'shoppingCartConnectionId' when calling getShoppingCartConnectionTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getShoppingCartConnectionTagsCall(shoppingCartConnectionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a shoppingCartConnection.
     * Get all existing shoppingCartConnection tags.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getShoppingCartConnectionTags(Integer shoppingCartConnectionId) throws ApiException {
        getShoppingCartConnectionTagsWithHttpInfo(shoppingCartConnectionId);
    }

    /**
     * Get the tags for a shoppingCartConnection.
     * Get all existing shoppingCartConnection tags.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getShoppingCartConnectionTagsWithHttpInfo(Integer shoppingCartConnectionId) throws ApiException {
        com.squareup.okhttp.Call call = getShoppingCartConnectionTagsValidateBeforeCall(shoppingCartConnectionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a shoppingCartConnection. (asynchronously)
     * Get all existing shoppingCartConnection tags.
     * @param shoppingCartConnectionId Id of the shoppingCartConnection to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getShoppingCartConnectionTagsAsync(Integer shoppingCartConnectionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getShoppingCartConnectionTagsValidateBeforeCall(shoppingCartConnectionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateShoppingCartConnection
     * @param body ShoppingCartConnection to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateShoppingCartConnectionCall(ShoppingCartConnection body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/shoppingCartConnection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateShoppingCartConnectionValidateBeforeCall(ShoppingCartConnection body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateShoppingCartConnection(Async)");
        }
        

        com.squareup.okhttp.Call call = updateShoppingCartConnectionCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a shoppingCartConnection
     * Updates an existing shoppingCartConnection using the specified data.
     * @param body ShoppingCartConnection to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateShoppingCartConnection(ShoppingCartConnection body) throws ApiException {
        updateShoppingCartConnectionWithHttpInfo(body);
    }

    /**
     * Update a shoppingCartConnection
     * Updates an existing shoppingCartConnection using the specified data.
     * @param body ShoppingCartConnection to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateShoppingCartConnectionWithHttpInfo(ShoppingCartConnection body) throws ApiException {
        com.squareup.okhttp.Call call = updateShoppingCartConnectionValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a shoppingCartConnection (asynchronously)
     * Updates an existing shoppingCartConnection using the specified data.
     * @param body ShoppingCartConnection to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateShoppingCartConnectionAsync(ShoppingCartConnection body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateShoppingCartConnectionValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateShoppingCartConnectionCustomFields
     * @param body ShoppingCartConnection to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateShoppingCartConnectionCustomFieldsCall(ShoppingCartConnection body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/shoppingCartConnection/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateShoppingCartConnectionCustomFieldsValidateBeforeCall(ShoppingCartConnection body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateShoppingCartConnectionCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateShoppingCartConnectionCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a shoppingCartConnection custom fields
     * Updates an existing shoppingCartConnection custom fields using the specified data.
     * @param body ShoppingCartConnection to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateShoppingCartConnectionCustomFields(ShoppingCartConnection body) throws ApiException {
        updateShoppingCartConnectionCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a shoppingCartConnection custom fields
     * Updates an existing shoppingCartConnection custom fields using the specified data.
     * @param body ShoppingCartConnection to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateShoppingCartConnectionCustomFieldsWithHttpInfo(ShoppingCartConnection body) throws ApiException {
        com.squareup.okhttp.Call call = updateShoppingCartConnectionCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a shoppingCartConnection custom fields (asynchronously)
     * Updates an existing shoppingCartConnection custom fields using the specified data.
     * @param body ShoppingCartConnection to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateShoppingCartConnectionCustomFieldsAsync(ShoppingCartConnection body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateShoppingCartConnectionCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
