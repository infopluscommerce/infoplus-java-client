/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.CustomerInvoiceTemplateLine;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomerInvoiceTemplateLineApi {
    private ApiClient apiClient;

    public CustomerInvoiceTemplateLineApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomerInvoiceTemplateLineApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addCustomerInvoiceTemplateLineAudit
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to add an audit to (required)
     * @param customerInvoiceTemplateLineAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addCustomerInvoiceTemplateLineAuditCall(Integer customerInvoiceTemplateLineId, String customerInvoiceTemplateLineAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/customerInvoiceTemplateLine/{customerInvoiceTemplateLineId}/audit/{customerInvoiceTemplateLineAudit}"
            .replaceAll("\\{" + "customerInvoiceTemplateLineId" + "\\}", apiClient.escapeString(customerInvoiceTemplateLineId.toString()))
            .replaceAll("\\{" + "customerInvoiceTemplateLineAudit" + "\\}", apiClient.escapeString(customerInvoiceTemplateLineAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCustomerInvoiceTemplateLineAuditValidateBeforeCall(Integer customerInvoiceTemplateLineId, String customerInvoiceTemplateLineAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customerInvoiceTemplateLineId' is set
        if (customerInvoiceTemplateLineId == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateLineId' when calling addCustomerInvoiceTemplateLineAudit(Async)");
        }
        
        // verify the required parameter 'customerInvoiceTemplateLineAudit' is set
        if (customerInvoiceTemplateLineAudit == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateLineAudit' when calling addCustomerInvoiceTemplateLineAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addCustomerInvoiceTemplateLineAuditCall(customerInvoiceTemplateLineId, customerInvoiceTemplateLineAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a customerInvoiceTemplateLine
     * Adds an audit to an existing customerInvoiceTemplateLine.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to add an audit to (required)
     * @param customerInvoiceTemplateLineAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addCustomerInvoiceTemplateLineAudit(Integer customerInvoiceTemplateLineId, String customerInvoiceTemplateLineAudit) throws ApiException {
        addCustomerInvoiceTemplateLineAuditWithHttpInfo(customerInvoiceTemplateLineId, customerInvoiceTemplateLineAudit);
    }

    /**
     * Add new audit for a customerInvoiceTemplateLine
     * Adds an audit to an existing customerInvoiceTemplateLine.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to add an audit to (required)
     * @param customerInvoiceTemplateLineAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addCustomerInvoiceTemplateLineAuditWithHttpInfo(Integer customerInvoiceTemplateLineId, String customerInvoiceTemplateLineAudit) throws ApiException {
        com.squareup.okhttp.Call call = addCustomerInvoiceTemplateLineAuditValidateBeforeCall(customerInvoiceTemplateLineId, customerInvoiceTemplateLineAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a customerInvoiceTemplateLine (asynchronously)
     * Adds an audit to an existing customerInvoiceTemplateLine.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to add an audit to (required)
     * @param customerInvoiceTemplateLineAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCustomerInvoiceTemplateLineAuditAsync(Integer customerInvoiceTemplateLineId, String customerInvoiceTemplateLineAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCustomerInvoiceTemplateLineAuditValidateBeforeCall(customerInvoiceTemplateLineId, customerInvoiceTemplateLineAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addCustomerInvoiceTemplateLineFile
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addCustomerInvoiceTemplateLineFileCall(Integer customerInvoiceTemplateLineId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/customerInvoiceTemplateLine/{customerInvoiceTemplateLineId}/file/{fileName}"
            .replaceAll("\\{" + "customerInvoiceTemplateLineId" + "\\}", apiClient.escapeString(customerInvoiceTemplateLineId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCustomerInvoiceTemplateLineFileValidateBeforeCall(Integer customerInvoiceTemplateLineId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customerInvoiceTemplateLineId' is set
        if (customerInvoiceTemplateLineId == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateLineId' when calling addCustomerInvoiceTemplateLineFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addCustomerInvoiceTemplateLineFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addCustomerInvoiceTemplateLineFileCall(customerInvoiceTemplateLineId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a customerInvoiceTemplateLine
     * Adds a file to an existing customerInvoiceTemplateLine.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addCustomerInvoiceTemplateLineFile(Integer customerInvoiceTemplateLineId, String fileName) throws ApiException {
        addCustomerInvoiceTemplateLineFileWithHttpInfo(customerInvoiceTemplateLineId, fileName);
    }

    /**
     * Attach a file to a customerInvoiceTemplateLine
     * Adds a file to an existing customerInvoiceTemplateLine.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addCustomerInvoiceTemplateLineFileWithHttpInfo(Integer customerInvoiceTemplateLineId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addCustomerInvoiceTemplateLineFileValidateBeforeCall(customerInvoiceTemplateLineId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a customerInvoiceTemplateLine (asynchronously)
     * Adds a file to an existing customerInvoiceTemplateLine.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCustomerInvoiceTemplateLineFileAsync(Integer customerInvoiceTemplateLineId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCustomerInvoiceTemplateLineFileValidateBeforeCall(customerInvoiceTemplateLineId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addCustomerInvoiceTemplateLineFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addCustomerInvoiceTemplateLineFileByURLCall(RecordFile body, Integer customerInvoiceTemplateLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/customerInvoiceTemplateLine/{customerInvoiceTemplateLineId}/file"
            .replaceAll("\\{" + "customerInvoiceTemplateLineId" + "\\}", apiClient.escapeString(customerInvoiceTemplateLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCustomerInvoiceTemplateLineFileByURLValidateBeforeCall(RecordFile body, Integer customerInvoiceTemplateLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addCustomerInvoiceTemplateLineFileByURL(Async)");
        }
        
        // verify the required parameter 'customerInvoiceTemplateLineId' is set
        if (customerInvoiceTemplateLineId == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateLineId' when calling addCustomerInvoiceTemplateLineFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addCustomerInvoiceTemplateLineFileByURLCall(body, customerInvoiceTemplateLineId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a customerInvoiceTemplateLine by URL.
     * Adds a file to an existing customerInvoiceTemplateLine by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addCustomerInvoiceTemplateLineFileByURL(RecordFile body, Integer customerInvoiceTemplateLineId) throws ApiException {
        addCustomerInvoiceTemplateLineFileByURLWithHttpInfo(body, customerInvoiceTemplateLineId);
    }

    /**
     * Attach a file to a customerInvoiceTemplateLine by URL.
     * Adds a file to an existing customerInvoiceTemplateLine by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addCustomerInvoiceTemplateLineFileByURLWithHttpInfo(RecordFile body, Integer customerInvoiceTemplateLineId) throws ApiException {
        com.squareup.okhttp.Call call = addCustomerInvoiceTemplateLineFileByURLValidateBeforeCall(body, customerInvoiceTemplateLineId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a customerInvoiceTemplateLine by URL. (asynchronously)
     * Adds a file to an existing customerInvoiceTemplateLine by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCustomerInvoiceTemplateLineFileByURLAsync(RecordFile body, Integer customerInvoiceTemplateLineId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCustomerInvoiceTemplateLineFileByURLValidateBeforeCall(body, customerInvoiceTemplateLineId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addCustomerInvoiceTemplateLineTag
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to add a tag to (required)
     * @param customerInvoiceTemplateLineTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addCustomerInvoiceTemplateLineTagCall(Integer customerInvoiceTemplateLineId, String customerInvoiceTemplateLineTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/customerInvoiceTemplateLine/{customerInvoiceTemplateLineId}/tag/{customerInvoiceTemplateLineTag}"
            .replaceAll("\\{" + "customerInvoiceTemplateLineId" + "\\}", apiClient.escapeString(customerInvoiceTemplateLineId.toString()))
            .replaceAll("\\{" + "customerInvoiceTemplateLineTag" + "\\}", apiClient.escapeString(customerInvoiceTemplateLineTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCustomerInvoiceTemplateLineTagValidateBeforeCall(Integer customerInvoiceTemplateLineId, String customerInvoiceTemplateLineTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customerInvoiceTemplateLineId' is set
        if (customerInvoiceTemplateLineId == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateLineId' when calling addCustomerInvoiceTemplateLineTag(Async)");
        }
        
        // verify the required parameter 'customerInvoiceTemplateLineTag' is set
        if (customerInvoiceTemplateLineTag == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateLineTag' when calling addCustomerInvoiceTemplateLineTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addCustomerInvoiceTemplateLineTagCall(customerInvoiceTemplateLineId, customerInvoiceTemplateLineTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a customerInvoiceTemplateLine.
     * Adds a tag to an existing customerInvoiceTemplateLine.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to add a tag to (required)
     * @param customerInvoiceTemplateLineTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addCustomerInvoiceTemplateLineTag(Integer customerInvoiceTemplateLineId, String customerInvoiceTemplateLineTag) throws ApiException {
        addCustomerInvoiceTemplateLineTagWithHttpInfo(customerInvoiceTemplateLineId, customerInvoiceTemplateLineTag);
    }

    /**
     * Add new tags for a customerInvoiceTemplateLine.
     * Adds a tag to an existing customerInvoiceTemplateLine.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to add a tag to (required)
     * @param customerInvoiceTemplateLineTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addCustomerInvoiceTemplateLineTagWithHttpInfo(Integer customerInvoiceTemplateLineId, String customerInvoiceTemplateLineTag) throws ApiException {
        com.squareup.okhttp.Call call = addCustomerInvoiceTemplateLineTagValidateBeforeCall(customerInvoiceTemplateLineId, customerInvoiceTemplateLineTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a customerInvoiceTemplateLine. (asynchronously)
     * Adds a tag to an existing customerInvoiceTemplateLine.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to add a tag to (required)
     * @param customerInvoiceTemplateLineTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCustomerInvoiceTemplateLineTagAsync(Integer customerInvoiceTemplateLineId, String customerInvoiceTemplateLineTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCustomerInvoiceTemplateLineTagValidateBeforeCall(customerInvoiceTemplateLineId, customerInvoiceTemplateLineTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteCustomerInvoiceTemplateLine
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCustomerInvoiceTemplateLineCall(Integer customerInvoiceTemplateLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/customerInvoiceTemplateLine/{customerInvoiceTemplateLineId}"
            .replaceAll("\\{" + "customerInvoiceTemplateLineId" + "\\}", apiClient.escapeString(customerInvoiceTemplateLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCustomerInvoiceTemplateLineValidateBeforeCall(Integer customerInvoiceTemplateLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customerInvoiceTemplateLineId' is set
        if (customerInvoiceTemplateLineId == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateLineId' when calling deleteCustomerInvoiceTemplateLine(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCustomerInvoiceTemplateLineCall(customerInvoiceTemplateLineId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a customerInvoiceTemplateLine
     * Deletes the customerInvoiceTemplateLine identified by the specified id.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCustomerInvoiceTemplateLine(Integer customerInvoiceTemplateLineId) throws ApiException {
        deleteCustomerInvoiceTemplateLineWithHttpInfo(customerInvoiceTemplateLineId);
    }

    /**
     * Delete a customerInvoiceTemplateLine
     * Deletes the customerInvoiceTemplateLine identified by the specified id.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCustomerInvoiceTemplateLineWithHttpInfo(Integer customerInvoiceTemplateLineId) throws ApiException {
        com.squareup.okhttp.Call call = deleteCustomerInvoiceTemplateLineValidateBeforeCall(customerInvoiceTemplateLineId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a customerInvoiceTemplateLine (asynchronously)
     * Deletes the customerInvoiceTemplateLine identified by the specified id.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCustomerInvoiceTemplateLineAsync(Integer customerInvoiceTemplateLineId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCustomerInvoiceTemplateLineValidateBeforeCall(customerInvoiceTemplateLineId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteCustomerInvoiceTemplateLineFile
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCustomerInvoiceTemplateLineFileCall(Integer customerInvoiceTemplateLineId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/customerInvoiceTemplateLine/{customerInvoiceTemplateLineId}/file/{fileId}"
            .replaceAll("\\{" + "customerInvoiceTemplateLineId" + "\\}", apiClient.escapeString(customerInvoiceTemplateLineId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCustomerInvoiceTemplateLineFileValidateBeforeCall(Integer customerInvoiceTemplateLineId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customerInvoiceTemplateLineId' is set
        if (customerInvoiceTemplateLineId == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateLineId' when calling deleteCustomerInvoiceTemplateLineFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteCustomerInvoiceTemplateLineFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCustomerInvoiceTemplateLineFileCall(customerInvoiceTemplateLineId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a customerInvoiceTemplateLine.
     * Deletes an existing customerInvoiceTemplateLine file using the specified data.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCustomerInvoiceTemplateLineFile(Integer customerInvoiceTemplateLineId, Integer fileId) throws ApiException {
        deleteCustomerInvoiceTemplateLineFileWithHttpInfo(customerInvoiceTemplateLineId, fileId);
    }

    /**
     * Delete a file for a customerInvoiceTemplateLine.
     * Deletes an existing customerInvoiceTemplateLine file using the specified data.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCustomerInvoiceTemplateLineFileWithHttpInfo(Integer customerInvoiceTemplateLineId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteCustomerInvoiceTemplateLineFileValidateBeforeCall(customerInvoiceTemplateLineId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a customerInvoiceTemplateLine. (asynchronously)
     * Deletes an existing customerInvoiceTemplateLine file using the specified data.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCustomerInvoiceTemplateLineFileAsync(Integer customerInvoiceTemplateLineId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCustomerInvoiceTemplateLineFileValidateBeforeCall(customerInvoiceTemplateLineId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteCustomerInvoiceTemplateLineTag
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to remove tag from (required)
     * @param customerInvoiceTemplateLineTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCustomerInvoiceTemplateLineTagCall(Integer customerInvoiceTemplateLineId, String customerInvoiceTemplateLineTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/customerInvoiceTemplateLine/{customerInvoiceTemplateLineId}/tag/{customerInvoiceTemplateLineTag}"
            .replaceAll("\\{" + "customerInvoiceTemplateLineId" + "\\}", apiClient.escapeString(customerInvoiceTemplateLineId.toString()))
            .replaceAll("\\{" + "customerInvoiceTemplateLineTag" + "\\}", apiClient.escapeString(customerInvoiceTemplateLineTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCustomerInvoiceTemplateLineTagValidateBeforeCall(Integer customerInvoiceTemplateLineId, String customerInvoiceTemplateLineTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customerInvoiceTemplateLineId' is set
        if (customerInvoiceTemplateLineId == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateLineId' when calling deleteCustomerInvoiceTemplateLineTag(Async)");
        }
        
        // verify the required parameter 'customerInvoiceTemplateLineTag' is set
        if (customerInvoiceTemplateLineTag == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateLineTag' when calling deleteCustomerInvoiceTemplateLineTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCustomerInvoiceTemplateLineTagCall(customerInvoiceTemplateLineId, customerInvoiceTemplateLineTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a customerInvoiceTemplateLine.
     * Deletes an existing customerInvoiceTemplateLine tag using the specified data.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to remove tag from (required)
     * @param customerInvoiceTemplateLineTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCustomerInvoiceTemplateLineTag(Integer customerInvoiceTemplateLineId, String customerInvoiceTemplateLineTag) throws ApiException {
        deleteCustomerInvoiceTemplateLineTagWithHttpInfo(customerInvoiceTemplateLineId, customerInvoiceTemplateLineTag);
    }

    /**
     * Delete a tag for a customerInvoiceTemplateLine.
     * Deletes an existing customerInvoiceTemplateLine tag using the specified data.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to remove tag from (required)
     * @param customerInvoiceTemplateLineTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCustomerInvoiceTemplateLineTagWithHttpInfo(Integer customerInvoiceTemplateLineId, String customerInvoiceTemplateLineTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteCustomerInvoiceTemplateLineTagValidateBeforeCall(customerInvoiceTemplateLineId, customerInvoiceTemplateLineTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a customerInvoiceTemplateLine. (asynchronously)
     * Deletes an existing customerInvoiceTemplateLine tag using the specified data.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to remove tag from (required)
     * @param customerInvoiceTemplateLineTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCustomerInvoiceTemplateLineTagAsync(Integer customerInvoiceTemplateLineId, String customerInvoiceTemplateLineTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCustomerInvoiceTemplateLineTagValidateBeforeCall(customerInvoiceTemplateLineId, customerInvoiceTemplateLineTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getCustomerInvoiceTemplateLineByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomerInvoiceTemplateLineByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/customerInvoiceTemplateLine/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomerInvoiceTemplateLineByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getCustomerInvoiceTemplateLineByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search customerInvoiceTemplateLines by filter
     * Returns the list of customerInvoiceTemplateLines that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;CustomerInvoiceTemplateLine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CustomerInvoiceTemplateLine> getCustomerInvoiceTemplateLineByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<CustomerInvoiceTemplateLine>> resp = getCustomerInvoiceTemplateLineByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search customerInvoiceTemplateLines by filter
     * Returns the list of customerInvoiceTemplateLines that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;CustomerInvoiceTemplateLine&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CustomerInvoiceTemplateLine>> getCustomerInvoiceTemplateLineByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getCustomerInvoiceTemplateLineByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<CustomerInvoiceTemplateLine>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search customerInvoiceTemplateLines by filter (asynchronously)
     * Returns the list of customerInvoiceTemplateLines that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomerInvoiceTemplateLineByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<CustomerInvoiceTemplateLine>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomerInvoiceTemplateLineByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CustomerInvoiceTemplateLine>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomerInvoiceTemplateLineById
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomerInvoiceTemplateLineByIdCall(Integer customerInvoiceTemplateLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/customerInvoiceTemplateLine/{customerInvoiceTemplateLineId}"
            .replaceAll("\\{" + "customerInvoiceTemplateLineId" + "\\}", apiClient.escapeString(customerInvoiceTemplateLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomerInvoiceTemplateLineByIdValidateBeforeCall(Integer customerInvoiceTemplateLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customerInvoiceTemplateLineId' is set
        if (customerInvoiceTemplateLineId == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateLineId' when calling getCustomerInvoiceTemplateLineById(Async)");
        }
        

        com.squareup.okhttp.Call call = getCustomerInvoiceTemplateLineByIdCall(customerInvoiceTemplateLineId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a customerInvoiceTemplateLine by id
     * Returns the customerInvoiceTemplateLine identified by the specified id.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to be returned. (required)
     * @return CustomerInvoiceTemplateLine
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerInvoiceTemplateLine getCustomerInvoiceTemplateLineById(Integer customerInvoiceTemplateLineId) throws ApiException {
        ApiResponse<CustomerInvoiceTemplateLine> resp = getCustomerInvoiceTemplateLineByIdWithHttpInfo(customerInvoiceTemplateLineId);
        return resp.getData();
    }

    /**
     * Get a customerInvoiceTemplateLine by id
     * Returns the customerInvoiceTemplateLine identified by the specified id.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to be returned. (required)
     * @return ApiResponse&lt;CustomerInvoiceTemplateLine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerInvoiceTemplateLine> getCustomerInvoiceTemplateLineByIdWithHttpInfo(Integer customerInvoiceTemplateLineId) throws ApiException {
        com.squareup.okhttp.Call call = getCustomerInvoiceTemplateLineByIdValidateBeforeCall(customerInvoiceTemplateLineId, null, null);
        Type localVarReturnType = new TypeToken<CustomerInvoiceTemplateLine>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a customerInvoiceTemplateLine by id (asynchronously)
     * Returns the customerInvoiceTemplateLine identified by the specified id.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomerInvoiceTemplateLineByIdAsync(Integer customerInvoiceTemplateLineId, final ApiCallback<CustomerInvoiceTemplateLine> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomerInvoiceTemplateLineByIdValidateBeforeCall(customerInvoiceTemplateLineId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerInvoiceTemplateLine>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomerInvoiceTemplateLineFiles
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomerInvoiceTemplateLineFilesCall(Integer customerInvoiceTemplateLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/customerInvoiceTemplateLine/{customerInvoiceTemplateLineId}/file"
            .replaceAll("\\{" + "customerInvoiceTemplateLineId" + "\\}", apiClient.escapeString(customerInvoiceTemplateLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomerInvoiceTemplateLineFilesValidateBeforeCall(Integer customerInvoiceTemplateLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customerInvoiceTemplateLineId' is set
        if (customerInvoiceTemplateLineId == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateLineId' when calling getCustomerInvoiceTemplateLineFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getCustomerInvoiceTemplateLineFilesCall(customerInvoiceTemplateLineId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a customerInvoiceTemplateLine.
     * Get all existing customerInvoiceTemplateLine files.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getCustomerInvoiceTemplateLineFiles(Integer customerInvoiceTemplateLineId) throws ApiException {
        getCustomerInvoiceTemplateLineFilesWithHttpInfo(customerInvoiceTemplateLineId);
    }

    /**
     * Get the files for a customerInvoiceTemplateLine.
     * Get all existing customerInvoiceTemplateLine files.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getCustomerInvoiceTemplateLineFilesWithHttpInfo(Integer customerInvoiceTemplateLineId) throws ApiException {
        com.squareup.okhttp.Call call = getCustomerInvoiceTemplateLineFilesValidateBeforeCall(customerInvoiceTemplateLineId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a customerInvoiceTemplateLine. (asynchronously)
     * Get all existing customerInvoiceTemplateLine files.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomerInvoiceTemplateLineFilesAsync(Integer customerInvoiceTemplateLineId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomerInvoiceTemplateLineFilesValidateBeforeCall(customerInvoiceTemplateLineId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getCustomerInvoiceTemplateLineTags
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomerInvoiceTemplateLineTagsCall(Integer customerInvoiceTemplateLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/customerInvoiceTemplateLine/{customerInvoiceTemplateLineId}/tag"
            .replaceAll("\\{" + "customerInvoiceTemplateLineId" + "\\}", apiClient.escapeString(customerInvoiceTemplateLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomerInvoiceTemplateLineTagsValidateBeforeCall(Integer customerInvoiceTemplateLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customerInvoiceTemplateLineId' is set
        if (customerInvoiceTemplateLineId == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateLineId' when calling getCustomerInvoiceTemplateLineTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getCustomerInvoiceTemplateLineTagsCall(customerInvoiceTemplateLineId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a customerInvoiceTemplateLine.
     * Get all existing customerInvoiceTemplateLine tags.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getCustomerInvoiceTemplateLineTags(Integer customerInvoiceTemplateLineId) throws ApiException {
        getCustomerInvoiceTemplateLineTagsWithHttpInfo(customerInvoiceTemplateLineId);
    }

    /**
     * Get the tags for a customerInvoiceTemplateLine.
     * Get all existing customerInvoiceTemplateLine tags.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getCustomerInvoiceTemplateLineTagsWithHttpInfo(Integer customerInvoiceTemplateLineId) throws ApiException {
        com.squareup.okhttp.Call call = getCustomerInvoiceTemplateLineTagsValidateBeforeCall(customerInvoiceTemplateLineId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a customerInvoiceTemplateLine. (asynchronously)
     * Get all existing customerInvoiceTemplateLine tags.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomerInvoiceTemplateLineTagsAsync(Integer customerInvoiceTemplateLineId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomerInvoiceTemplateLineTagsValidateBeforeCall(customerInvoiceTemplateLineId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateCustomerInvoiceTemplateLineById
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateCustomerInvoiceTemplateLineByIdCall(Integer customerInvoiceTemplateLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/customerInvoiceTemplateLine/duplicate/{customerInvoiceTemplateLineId}"
            .replaceAll("\\{" + "customerInvoiceTemplateLineId" + "\\}", apiClient.escapeString(customerInvoiceTemplateLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateCustomerInvoiceTemplateLineByIdValidateBeforeCall(Integer customerInvoiceTemplateLineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customerInvoiceTemplateLineId' is set
        if (customerInvoiceTemplateLineId == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceTemplateLineId' when calling getDuplicateCustomerInvoiceTemplateLineById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateCustomerInvoiceTemplateLineByIdCall(customerInvoiceTemplateLineId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a customerInvoiceTemplateLine by id
     * Returns a duplicated customerInvoiceTemplateLine identified by the specified id.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to be duplicated. (required)
     * @return CustomerInvoiceTemplateLine
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerInvoiceTemplateLine getDuplicateCustomerInvoiceTemplateLineById(Integer customerInvoiceTemplateLineId) throws ApiException {
        ApiResponse<CustomerInvoiceTemplateLine> resp = getDuplicateCustomerInvoiceTemplateLineByIdWithHttpInfo(customerInvoiceTemplateLineId);
        return resp.getData();
    }

    /**
     * Get a duplicated a customerInvoiceTemplateLine by id
     * Returns a duplicated customerInvoiceTemplateLine identified by the specified id.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to be duplicated. (required)
     * @return ApiResponse&lt;CustomerInvoiceTemplateLine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerInvoiceTemplateLine> getDuplicateCustomerInvoiceTemplateLineByIdWithHttpInfo(Integer customerInvoiceTemplateLineId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateCustomerInvoiceTemplateLineByIdValidateBeforeCall(customerInvoiceTemplateLineId, null, null);
        Type localVarReturnType = new TypeToken<CustomerInvoiceTemplateLine>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a customerInvoiceTemplateLine by id (asynchronously)
     * Returns a duplicated customerInvoiceTemplateLine identified by the specified id.
     * @param customerInvoiceTemplateLineId Id of the customerInvoiceTemplateLine to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateCustomerInvoiceTemplateLineByIdAsync(Integer customerInvoiceTemplateLineId, final ApiCallback<CustomerInvoiceTemplateLine> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateCustomerInvoiceTemplateLineByIdValidateBeforeCall(customerInvoiceTemplateLineId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerInvoiceTemplateLine>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCustomerInvoiceTemplateLine
     * @param body CustomerInvoiceTemplateLine to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCustomerInvoiceTemplateLineCall(CustomerInvoiceTemplateLine body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/customerInvoiceTemplateLine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCustomerInvoiceTemplateLineValidateBeforeCall(CustomerInvoiceTemplateLine body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateCustomerInvoiceTemplateLine(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCustomerInvoiceTemplateLineCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a customerInvoiceTemplateLine
     * Updates an existing customerInvoiceTemplateLine using the specified data.
     * @param body CustomerInvoiceTemplateLine to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateCustomerInvoiceTemplateLine(CustomerInvoiceTemplateLine body) throws ApiException {
        updateCustomerInvoiceTemplateLineWithHttpInfo(body);
    }

    /**
     * Update a customerInvoiceTemplateLine
     * Updates an existing customerInvoiceTemplateLine using the specified data.
     * @param body CustomerInvoiceTemplateLine to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateCustomerInvoiceTemplateLineWithHttpInfo(CustomerInvoiceTemplateLine body) throws ApiException {
        com.squareup.okhttp.Call call = updateCustomerInvoiceTemplateLineValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a customerInvoiceTemplateLine (asynchronously)
     * Updates an existing customerInvoiceTemplateLine using the specified data.
     * @param body CustomerInvoiceTemplateLine to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCustomerInvoiceTemplateLineAsync(CustomerInvoiceTemplateLine body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCustomerInvoiceTemplateLineValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
