/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.PackingDetail;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PackingDetailApi {
    private ApiClient apiClient;

    public PackingDetailApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PackingDetailApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addPackingDetailAudit
     * @param packingDetailId Id of the packingDetail to add an audit to (required)
     * @param packingDetailAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPackingDetailAuditCall(Integer packingDetailId, String packingDetailAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/packingDetail/{packingDetailId}/audit/{packingDetailAudit}"
            .replaceAll("\\{" + "packingDetailId" + "\\}", apiClient.escapeString(packingDetailId.toString()))
            .replaceAll("\\{" + "packingDetailAudit" + "\\}", apiClient.escapeString(packingDetailAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPackingDetailAuditValidateBeforeCall(Integer packingDetailId, String packingDetailAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'packingDetailId' is set
        if (packingDetailId == null) {
            throw new ApiException("Missing the required parameter 'packingDetailId' when calling addPackingDetailAudit(Async)");
        }
        
        // verify the required parameter 'packingDetailAudit' is set
        if (packingDetailAudit == null) {
            throw new ApiException("Missing the required parameter 'packingDetailAudit' when calling addPackingDetailAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addPackingDetailAuditCall(packingDetailId, packingDetailAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a packingDetail
     * Adds an audit to an existing packingDetail.
     * @param packingDetailId Id of the packingDetail to add an audit to (required)
     * @param packingDetailAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addPackingDetailAudit(Integer packingDetailId, String packingDetailAudit) throws ApiException {
        addPackingDetailAuditWithHttpInfo(packingDetailId, packingDetailAudit);
    }

    /**
     * Add new audit for a packingDetail
     * Adds an audit to an existing packingDetail.
     * @param packingDetailId Id of the packingDetail to add an audit to (required)
     * @param packingDetailAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addPackingDetailAuditWithHttpInfo(Integer packingDetailId, String packingDetailAudit) throws ApiException {
        com.squareup.okhttp.Call call = addPackingDetailAuditValidateBeforeCall(packingDetailId, packingDetailAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a packingDetail (asynchronously)
     * Adds an audit to an existing packingDetail.
     * @param packingDetailId Id of the packingDetail to add an audit to (required)
     * @param packingDetailAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPackingDetailAuditAsync(Integer packingDetailId, String packingDetailAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPackingDetailAuditValidateBeforeCall(packingDetailId, packingDetailAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addPackingDetailFile
     * @param packingDetailId Id of the packingDetail to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPackingDetailFileCall(Integer packingDetailId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/packingDetail/{packingDetailId}/file/{fileName}"
            .replaceAll("\\{" + "packingDetailId" + "\\}", apiClient.escapeString(packingDetailId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPackingDetailFileValidateBeforeCall(Integer packingDetailId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'packingDetailId' is set
        if (packingDetailId == null) {
            throw new ApiException("Missing the required parameter 'packingDetailId' when calling addPackingDetailFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addPackingDetailFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addPackingDetailFileCall(packingDetailId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a packingDetail
     * Adds a file to an existing packingDetail.
     * @param packingDetailId Id of the packingDetail to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addPackingDetailFile(Integer packingDetailId, String fileName) throws ApiException {
        addPackingDetailFileWithHttpInfo(packingDetailId, fileName);
    }

    /**
     * Attach a file to a packingDetail
     * Adds a file to an existing packingDetail.
     * @param packingDetailId Id of the packingDetail to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addPackingDetailFileWithHttpInfo(Integer packingDetailId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addPackingDetailFileValidateBeforeCall(packingDetailId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a packingDetail (asynchronously)
     * Adds a file to an existing packingDetail.
     * @param packingDetailId Id of the packingDetail to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPackingDetailFileAsync(Integer packingDetailId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPackingDetailFileValidateBeforeCall(packingDetailId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addPackingDetailFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param packingDetailId Id of the packingDetail to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPackingDetailFileByURLCall(RecordFile body, Integer packingDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/packingDetail/{packingDetailId}/file"
            .replaceAll("\\{" + "packingDetailId" + "\\}", apiClient.escapeString(packingDetailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPackingDetailFileByURLValidateBeforeCall(RecordFile body, Integer packingDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addPackingDetailFileByURL(Async)");
        }
        
        // verify the required parameter 'packingDetailId' is set
        if (packingDetailId == null) {
            throw new ApiException("Missing the required parameter 'packingDetailId' when calling addPackingDetailFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addPackingDetailFileByURLCall(body, packingDetailId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a packingDetail by URL.
     * Adds a file to an existing packingDetail by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param packingDetailId Id of the packingDetail to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addPackingDetailFileByURL(RecordFile body, Integer packingDetailId) throws ApiException {
        addPackingDetailFileByURLWithHttpInfo(body, packingDetailId);
    }

    /**
     * Attach a file to a packingDetail by URL.
     * Adds a file to an existing packingDetail by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param packingDetailId Id of the packingDetail to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addPackingDetailFileByURLWithHttpInfo(RecordFile body, Integer packingDetailId) throws ApiException {
        com.squareup.okhttp.Call call = addPackingDetailFileByURLValidateBeforeCall(body, packingDetailId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a packingDetail by URL. (asynchronously)
     * Adds a file to an existing packingDetail by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param packingDetailId Id of the packingDetail to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPackingDetailFileByURLAsync(RecordFile body, Integer packingDetailId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPackingDetailFileByURLValidateBeforeCall(body, packingDetailId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addPackingDetailTag
     * @param packingDetailId Id of the packingDetail to add a tag to (required)
     * @param packingDetailTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPackingDetailTagCall(Integer packingDetailId, String packingDetailTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/packingDetail/{packingDetailId}/tag/{packingDetailTag}"
            .replaceAll("\\{" + "packingDetailId" + "\\}", apiClient.escapeString(packingDetailId.toString()))
            .replaceAll("\\{" + "packingDetailTag" + "\\}", apiClient.escapeString(packingDetailTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPackingDetailTagValidateBeforeCall(Integer packingDetailId, String packingDetailTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'packingDetailId' is set
        if (packingDetailId == null) {
            throw new ApiException("Missing the required parameter 'packingDetailId' when calling addPackingDetailTag(Async)");
        }
        
        // verify the required parameter 'packingDetailTag' is set
        if (packingDetailTag == null) {
            throw new ApiException("Missing the required parameter 'packingDetailTag' when calling addPackingDetailTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addPackingDetailTagCall(packingDetailId, packingDetailTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a packingDetail.
     * Adds a tag to an existing packingDetail.
     * @param packingDetailId Id of the packingDetail to add a tag to (required)
     * @param packingDetailTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addPackingDetailTag(Integer packingDetailId, String packingDetailTag) throws ApiException {
        addPackingDetailTagWithHttpInfo(packingDetailId, packingDetailTag);
    }

    /**
     * Add new tags for a packingDetail.
     * Adds a tag to an existing packingDetail.
     * @param packingDetailId Id of the packingDetail to add a tag to (required)
     * @param packingDetailTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addPackingDetailTagWithHttpInfo(Integer packingDetailId, String packingDetailTag) throws ApiException {
        com.squareup.okhttp.Call call = addPackingDetailTagValidateBeforeCall(packingDetailId, packingDetailTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a packingDetail. (asynchronously)
     * Adds a tag to an existing packingDetail.
     * @param packingDetailId Id of the packingDetail to add a tag to (required)
     * @param packingDetailTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPackingDetailTagAsync(Integer packingDetailId, String packingDetailTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPackingDetailTagValidateBeforeCall(packingDetailId, packingDetailTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePackingDetailFile
     * @param packingDetailId Id of the packingDetail to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePackingDetailFileCall(Integer packingDetailId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/packingDetail/{packingDetailId}/file/{fileId}"
            .replaceAll("\\{" + "packingDetailId" + "\\}", apiClient.escapeString(packingDetailId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePackingDetailFileValidateBeforeCall(Integer packingDetailId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'packingDetailId' is set
        if (packingDetailId == null) {
            throw new ApiException("Missing the required parameter 'packingDetailId' when calling deletePackingDetailFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deletePackingDetailFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePackingDetailFileCall(packingDetailId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a packingDetail.
     * Deletes an existing packingDetail file using the specified data.
     * @param packingDetailId Id of the packingDetail to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePackingDetailFile(Integer packingDetailId, Integer fileId) throws ApiException {
        deletePackingDetailFileWithHttpInfo(packingDetailId, fileId);
    }

    /**
     * Delete a file for a packingDetail.
     * Deletes an existing packingDetail file using the specified data.
     * @param packingDetailId Id of the packingDetail to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePackingDetailFileWithHttpInfo(Integer packingDetailId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deletePackingDetailFileValidateBeforeCall(packingDetailId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a packingDetail. (asynchronously)
     * Deletes an existing packingDetail file using the specified data.
     * @param packingDetailId Id of the packingDetail to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePackingDetailFileAsync(Integer packingDetailId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePackingDetailFileValidateBeforeCall(packingDetailId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePackingDetailTag
     * @param packingDetailId Id of the packingDetail to remove tag from (required)
     * @param packingDetailTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePackingDetailTagCall(Integer packingDetailId, String packingDetailTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/packingDetail/{packingDetailId}/tag/{packingDetailTag}"
            .replaceAll("\\{" + "packingDetailId" + "\\}", apiClient.escapeString(packingDetailId.toString()))
            .replaceAll("\\{" + "packingDetailTag" + "\\}", apiClient.escapeString(packingDetailTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePackingDetailTagValidateBeforeCall(Integer packingDetailId, String packingDetailTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'packingDetailId' is set
        if (packingDetailId == null) {
            throw new ApiException("Missing the required parameter 'packingDetailId' when calling deletePackingDetailTag(Async)");
        }
        
        // verify the required parameter 'packingDetailTag' is set
        if (packingDetailTag == null) {
            throw new ApiException("Missing the required parameter 'packingDetailTag' when calling deletePackingDetailTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePackingDetailTagCall(packingDetailId, packingDetailTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a packingDetail.
     * Deletes an existing packingDetail tag using the specified data.
     * @param packingDetailId Id of the packingDetail to remove tag from (required)
     * @param packingDetailTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePackingDetailTag(Integer packingDetailId, String packingDetailTag) throws ApiException {
        deletePackingDetailTagWithHttpInfo(packingDetailId, packingDetailTag);
    }

    /**
     * Delete a tag for a packingDetail.
     * Deletes an existing packingDetail tag using the specified data.
     * @param packingDetailId Id of the packingDetail to remove tag from (required)
     * @param packingDetailTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePackingDetailTagWithHttpInfo(Integer packingDetailId, String packingDetailTag) throws ApiException {
        com.squareup.okhttp.Call call = deletePackingDetailTagValidateBeforeCall(packingDetailId, packingDetailTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a packingDetail. (asynchronously)
     * Deletes an existing packingDetail tag using the specified data.
     * @param packingDetailId Id of the packingDetail to remove tag from (required)
     * @param packingDetailTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePackingDetailTagAsync(Integer packingDetailId, String packingDetailTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePackingDetailTagValidateBeforeCall(packingDetailId, packingDetailTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicatePackingDetailById
     * @param packingDetailId Id of the packingDetail to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicatePackingDetailByIdCall(Integer packingDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/packingDetail/duplicate/{packingDetailId}"
            .replaceAll("\\{" + "packingDetailId" + "\\}", apiClient.escapeString(packingDetailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicatePackingDetailByIdValidateBeforeCall(Integer packingDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'packingDetailId' is set
        if (packingDetailId == null) {
            throw new ApiException("Missing the required parameter 'packingDetailId' when calling getDuplicatePackingDetailById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicatePackingDetailByIdCall(packingDetailId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a packingDetail by id
     * Returns a duplicated packingDetail identified by the specified id.
     * @param packingDetailId Id of the packingDetail to be duplicated. (required)
     * @return PackingDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PackingDetail getDuplicatePackingDetailById(Integer packingDetailId) throws ApiException {
        ApiResponse<PackingDetail> resp = getDuplicatePackingDetailByIdWithHttpInfo(packingDetailId);
        return resp.getData();
    }

    /**
     * Get a duplicated a packingDetail by id
     * Returns a duplicated packingDetail identified by the specified id.
     * @param packingDetailId Id of the packingDetail to be duplicated. (required)
     * @return ApiResponse&lt;PackingDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PackingDetail> getDuplicatePackingDetailByIdWithHttpInfo(Integer packingDetailId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicatePackingDetailByIdValidateBeforeCall(packingDetailId, null, null);
        Type localVarReturnType = new TypeToken<PackingDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a packingDetail by id (asynchronously)
     * Returns a duplicated packingDetail identified by the specified id.
     * @param packingDetailId Id of the packingDetail to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicatePackingDetailByIdAsync(Integer packingDetailId, final ApiCallback<PackingDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicatePackingDetailByIdValidateBeforeCall(packingDetailId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PackingDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPackingDetailByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPackingDetailByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/packingDetail/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPackingDetailByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPackingDetailByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search packingDetails by filter
     * Returns the list of packingDetails that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;PackingDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PackingDetail> getPackingDetailByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<PackingDetail>> resp = getPackingDetailByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search packingDetails by filter
     * Returns the list of packingDetails that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;PackingDetail&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PackingDetail>> getPackingDetailByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getPackingDetailByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<PackingDetail>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search packingDetails by filter (asynchronously)
     * Returns the list of packingDetails that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPackingDetailByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<PackingDetail>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPackingDetailByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PackingDetail>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPackingDetailById
     * @param packingDetailId Id of the packingDetail to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPackingDetailByIdCall(Integer packingDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/packingDetail/{packingDetailId}"
            .replaceAll("\\{" + "packingDetailId" + "\\}", apiClient.escapeString(packingDetailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPackingDetailByIdValidateBeforeCall(Integer packingDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'packingDetailId' is set
        if (packingDetailId == null) {
            throw new ApiException("Missing the required parameter 'packingDetailId' when calling getPackingDetailById(Async)");
        }
        

        com.squareup.okhttp.Call call = getPackingDetailByIdCall(packingDetailId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a packingDetail by id
     * Returns the packingDetail identified by the specified id.
     * @param packingDetailId Id of the packingDetail to be returned. (required)
     * @return PackingDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PackingDetail getPackingDetailById(Integer packingDetailId) throws ApiException {
        ApiResponse<PackingDetail> resp = getPackingDetailByIdWithHttpInfo(packingDetailId);
        return resp.getData();
    }

    /**
     * Get a packingDetail by id
     * Returns the packingDetail identified by the specified id.
     * @param packingDetailId Id of the packingDetail to be returned. (required)
     * @return ApiResponse&lt;PackingDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PackingDetail> getPackingDetailByIdWithHttpInfo(Integer packingDetailId) throws ApiException {
        com.squareup.okhttp.Call call = getPackingDetailByIdValidateBeforeCall(packingDetailId, null, null);
        Type localVarReturnType = new TypeToken<PackingDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a packingDetail by id (asynchronously)
     * Returns the packingDetail identified by the specified id.
     * @param packingDetailId Id of the packingDetail to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPackingDetailByIdAsync(Integer packingDetailId, final ApiCallback<PackingDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPackingDetailByIdValidateBeforeCall(packingDetailId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PackingDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPackingDetailFiles
     * @param packingDetailId Id of the packingDetail to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPackingDetailFilesCall(Integer packingDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/packingDetail/{packingDetailId}/file"
            .replaceAll("\\{" + "packingDetailId" + "\\}", apiClient.escapeString(packingDetailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPackingDetailFilesValidateBeforeCall(Integer packingDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'packingDetailId' is set
        if (packingDetailId == null) {
            throw new ApiException("Missing the required parameter 'packingDetailId' when calling getPackingDetailFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getPackingDetailFilesCall(packingDetailId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a packingDetail.
     * Get all existing packingDetail files.
     * @param packingDetailId Id of the packingDetail to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getPackingDetailFiles(Integer packingDetailId) throws ApiException {
        getPackingDetailFilesWithHttpInfo(packingDetailId);
    }

    /**
     * Get the files for a packingDetail.
     * Get all existing packingDetail files.
     * @param packingDetailId Id of the packingDetail to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getPackingDetailFilesWithHttpInfo(Integer packingDetailId) throws ApiException {
        com.squareup.okhttp.Call call = getPackingDetailFilesValidateBeforeCall(packingDetailId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a packingDetail. (asynchronously)
     * Get all existing packingDetail files.
     * @param packingDetailId Id of the packingDetail to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPackingDetailFilesAsync(Integer packingDetailId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPackingDetailFilesValidateBeforeCall(packingDetailId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getPackingDetailTags
     * @param packingDetailId Id of the packingDetail to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPackingDetailTagsCall(Integer packingDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/packingDetail/{packingDetailId}/tag"
            .replaceAll("\\{" + "packingDetailId" + "\\}", apiClient.escapeString(packingDetailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPackingDetailTagsValidateBeforeCall(Integer packingDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'packingDetailId' is set
        if (packingDetailId == null) {
            throw new ApiException("Missing the required parameter 'packingDetailId' when calling getPackingDetailTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getPackingDetailTagsCall(packingDetailId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a packingDetail.
     * Get all existing packingDetail tags.
     * @param packingDetailId Id of the packingDetail to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getPackingDetailTags(Integer packingDetailId) throws ApiException {
        getPackingDetailTagsWithHttpInfo(packingDetailId);
    }

    /**
     * Get the tags for a packingDetail.
     * Get all existing packingDetail tags.
     * @param packingDetailId Id of the packingDetail to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getPackingDetailTagsWithHttpInfo(Integer packingDetailId) throws ApiException {
        com.squareup.okhttp.Call call = getPackingDetailTagsValidateBeforeCall(packingDetailId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a packingDetail. (asynchronously)
     * Get all existing packingDetail tags.
     * @param packingDetailId Id of the packingDetail to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPackingDetailTagsAsync(Integer packingDetailId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPackingDetailTagsValidateBeforeCall(packingDetailId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updatePackingDetailCustomFields
     * @param body PackingDetail to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePackingDetailCustomFieldsCall(PackingDetail body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/packingDetail/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePackingDetailCustomFieldsValidateBeforeCall(PackingDetail body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePackingDetailCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePackingDetailCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a packingDetail custom fields
     * Updates an existing packingDetail custom fields using the specified data.
     * @param body PackingDetail to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updatePackingDetailCustomFields(PackingDetail body) throws ApiException {
        updatePackingDetailCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a packingDetail custom fields
     * Updates an existing packingDetail custom fields using the specified data.
     * @param body PackingDetail to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updatePackingDetailCustomFieldsWithHttpInfo(PackingDetail body) throws ApiException {
        com.squareup.okhttp.Call call = updatePackingDetailCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a packingDetail custom fields (asynchronously)
     * Updates an existing packingDetail custom fields using the specified data.
     * @param body PackingDetail to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePackingDetailCustomFieldsAsync(PackingDetail body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePackingDetailCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
