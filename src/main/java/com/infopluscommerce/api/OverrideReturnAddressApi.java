/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.OverrideReturnAddress;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OverrideReturnAddressApi {
    private ApiClient apiClient;

    public OverrideReturnAddressApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OverrideReturnAddressApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addOverrideReturnAddress
     * @param body OverrideReturnAddress to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOverrideReturnAddressCall(OverrideReturnAddress body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/overrideReturnAddress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOverrideReturnAddressValidateBeforeCall(OverrideReturnAddress body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addOverrideReturnAddress(Async)");
        }
        

        com.squareup.okhttp.Call call = addOverrideReturnAddressCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an overrideReturnAddress
     * Inserts a new overrideReturnAddress using the specified data.
     * @param body OverrideReturnAddress to be inserted. (required)
     * @return OverrideReturnAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OverrideReturnAddress addOverrideReturnAddress(OverrideReturnAddress body) throws ApiException {
        ApiResponse<OverrideReturnAddress> resp = addOverrideReturnAddressWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create an overrideReturnAddress
     * Inserts a new overrideReturnAddress using the specified data.
     * @param body OverrideReturnAddress to be inserted. (required)
     * @return ApiResponse&lt;OverrideReturnAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OverrideReturnAddress> addOverrideReturnAddressWithHttpInfo(OverrideReturnAddress body) throws ApiException {
        com.squareup.okhttp.Call call = addOverrideReturnAddressValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<OverrideReturnAddress>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an overrideReturnAddress (asynchronously)
     * Inserts a new overrideReturnAddress using the specified data.
     * @param body OverrideReturnAddress to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOverrideReturnAddressAsync(OverrideReturnAddress body, final ApiCallback<OverrideReturnAddress> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOverrideReturnAddressValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OverrideReturnAddress>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addOverrideReturnAddressAudit
     * @param overrideReturnAddressId Id of the overrideReturnAddress to add an audit to (required)
     * @param overrideReturnAddressAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOverrideReturnAddressAuditCall(Integer overrideReturnAddressId, String overrideReturnAddressAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/overrideReturnAddress/{overrideReturnAddressId}/audit/{overrideReturnAddressAudit}"
            .replaceAll("\\{" + "overrideReturnAddressId" + "\\}", apiClient.escapeString(overrideReturnAddressId.toString()))
            .replaceAll("\\{" + "overrideReturnAddressAudit" + "\\}", apiClient.escapeString(overrideReturnAddressAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOverrideReturnAddressAuditValidateBeforeCall(Integer overrideReturnAddressId, String overrideReturnAddressAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'overrideReturnAddressId' is set
        if (overrideReturnAddressId == null) {
            throw new ApiException("Missing the required parameter 'overrideReturnAddressId' when calling addOverrideReturnAddressAudit(Async)");
        }
        
        // verify the required parameter 'overrideReturnAddressAudit' is set
        if (overrideReturnAddressAudit == null) {
            throw new ApiException("Missing the required parameter 'overrideReturnAddressAudit' when calling addOverrideReturnAddressAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addOverrideReturnAddressAuditCall(overrideReturnAddressId, overrideReturnAddressAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for an overrideReturnAddress
     * Adds an audit to an existing overrideReturnAddress.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to add an audit to (required)
     * @param overrideReturnAddressAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOverrideReturnAddressAudit(Integer overrideReturnAddressId, String overrideReturnAddressAudit) throws ApiException {
        addOverrideReturnAddressAuditWithHttpInfo(overrideReturnAddressId, overrideReturnAddressAudit);
    }

    /**
     * Add new audit for an overrideReturnAddress
     * Adds an audit to an existing overrideReturnAddress.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to add an audit to (required)
     * @param overrideReturnAddressAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOverrideReturnAddressAuditWithHttpInfo(Integer overrideReturnAddressId, String overrideReturnAddressAudit) throws ApiException {
        com.squareup.okhttp.Call call = addOverrideReturnAddressAuditValidateBeforeCall(overrideReturnAddressId, overrideReturnAddressAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for an overrideReturnAddress (asynchronously)
     * Adds an audit to an existing overrideReturnAddress.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to add an audit to (required)
     * @param overrideReturnAddressAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOverrideReturnAddressAuditAsync(Integer overrideReturnAddressId, String overrideReturnAddressAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOverrideReturnAddressAuditValidateBeforeCall(overrideReturnAddressId, overrideReturnAddressAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addOverrideReturnAddressFile
     * @param overrideReturnAddressId Id of the overrideReturnAddress to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOverrideReturnAddressFileCall(Integer overrideReturnAddressId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/overrideReturnAddress/{overrideReturnAddressId}/file/{fileName}"
            .replaceAll("\\{" + "overrideReturnAddressId" + "\\}", apiClient.escapeString(overrideReturnAddressId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOverrideReturnAddressFileValidateBeforeCall(Integer overrideReturnAddressId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'overrideReturnAddressId' is set
        if (overrideReturnAddressId == null) {
            throw new ApiException("Missing the required parameter 'overrideReturnAddressId' when calling addOverrideReturnAddressFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addOverrideReturnAddressFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addOverrideReturnAddressFileCall(overrideReturnAddressId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an overrideReturnAddress
     * Adds a file to an existing overrideReturnAddress.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOverrideReturnAddressFile(Integer overrideReturnAddressId, String fileName) throws ApiException {
        addOverrideReturnAddressFileWithHttpInfo(overrideReturnAddressId, fileName);
    }

    /**
     * Attach a file to an overrideReturnAddress
     * Adds a file to an existing overrideReturnAddress.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOverrideReturnAddressFileWithHttpInfo(Integer overrideReturnAddressId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addOverrideReturnAddressFileValidateBeforeCall(overrideReturnAddressId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an overrideReturnAddress (asynchronously)
     * Adds a file to an existing overrideReturnAddress.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOverrideReturnAddressFileAsync(Integer overrideReturnAddressId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOverrideReturnAddressFileValidateBeforeCall(overrideReturnAddressId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addOverrideReturnAddressFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param overrideReturnAddressId Id of the overrideReturnAddress to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOverrideReturnAddressFileByURLCall(RecordFile body, Integer overrideReturnAddressId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/overrideReturnAddress/{overrideReturnAddressId}/file"
            .replaceAll("\\{" + "overrideReturnAddressId" + "\\}", apiClient.escapeString(overrideReturnAddressId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOverrideReturnAddressFileByURLValidateBeforeCall(RecordFile body, Integer overrideReturnAddressId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addOverrideReturnAddressFileByURL(Async)");
        }
        
        // verify the required parameter 'overrideReturnAddressId' is set
        if (overrideReturnAddressId == null) {
            throw new ApiException("Missing the required parameter 'overrideReturnAddressId' when calling addOverrideReturnAddressFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addOverrideReturnAddressFileByURLCall(body, overrideReturnAddressId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an overrideReturnAddress by URL.
     * Adds a file to an existing overrideReturnAddress by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param overrideReturnAddressId Id of the overrideReturnAddress to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOverrideReturnAddressFileByURL(RecordFile body, Integer overrideReturnAddressId) throws ApiException {
        addOverrideReturnAddressFileByURLWithHttpInfo(body, overrideReturnAddressId);
    }

    /**
     * Attach a file to an overrideReturnAddress by URL.
     * Adds a file to an existing overrideReturnAddress by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param overrideReturnAddressId Id of the overrideReturnAddress to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOverrideReturnAddressFileByURLWithHttpInfo(RecordFile body, Integer overrideReturnAddressId) throws ApiException {
        com.squareup.okhttp.Call call = addOverrideReturnAddressFileByURLValidateBeforeCall(body, overrideReturnAddressId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an overrideReturnAddress by URL. (asynchronously)
     * Adds a file to an existing overrideReturnAddress by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param overrideReturnAddressId Id of the overrideReturnAddress to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOverrideReturnAddressFileByURLAsync(RecordFile body, Integer overrideReturnAddressId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOverrideReturnAddressFileByURLValidateBeforeCall(body, overrideReturnAddressId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addOverrideReturnAddressTag
     * @param overrideReturnAddressId Id of the overrideReturnAddress to add a tag to (required)
     * @param overrideReturnAddressTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOverrideReturnAddressTagCall(Integer overrideReturnAddressId, String overrideReturnAddressTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/overrideReturnAddress/{overrideReturnAddressId}/tag/{overrideReturnAddressTag}"
            .replaceAll("\\{" + "overrideReturnAddressId" + "\\}", apiClient.escapeString(overrideReturnAddressId.toString()))
            .replaceAll("\\{" + "overrideReturnAddressTag" + "\\}", apiClient.escapeString(overrideReturnAddressTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOverrideReturnAddressTagValidateBeforeCall(Integer overrideReturnAddressId, String overrideReturnAddressTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'overrideReturnAddressId' is set
        if (overrideReturnAddressId == null) {
            throw new ApiException("Missing the required parameter 'overrideReturnAddressId' when calling addOverrideReturnAddressTag(Async)");
        }
        
        // verify the required parameter 'overrideReturnAddressTag' is set
        if (overrideReturnAddressTag == null) {
            throw new ApiException("Missing the required parameter 'overrideReturnAddressTag' when calling addOverrideReturnAddressTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addOverrideReturnAddressTagCall(overrideReturnAddressId, overrideReturnAddressTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for an overrideReturnAddress.
     * Adds a tag to an existing overrideReturnAddress.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to add a tag to (required)
     * @param overrideReturnAddressTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOverrideReturnAddressTag(Integer overrideReturnAddressId, String overrideReturnAddressTag) throws ApiException {
        addOverrideReturnAddressTagWithHttpInfo(overrideReturnAddressId, overrideReturnAddressTag);
    }

    /**
     * Add new tags for an overrideReturnAddress.
     * Adds a tag to an existing overrideReturnAddress.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to add a tag to (required)
     * @param overrideReturnAddressTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOverrideReturnAddressTagWithHttpInfo(Integer overrideReturnAddressId, String overrideReturnAddressTag) throws ApiException {
        com.squareup.okhttp.Call call = addOverrideReturnAddressTagValidateBeforeCall(overrideReturnAddressId, overrideReturnAddressTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for an overrideReturnAddress. (asynchronously)
     * Adds a tag to an existing overrideReturnAddress.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to add a tag to (required)
     * @param overrideReturnAddressTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOverrideReturnAddressTagAsync(Integer overrideReturnAddressId, String overrideReturnAddressTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOverrideReturnAddressTagValidateBeforeCall(overrideReturnAddressId, overrideReturnAddressTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteOverrideReturnAddress
     * @param overrideReturnAddressId Id of the overrideReturnAddress to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOverrideReturnAddressCall(Integer overrideReturnAddressId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/overrideReturnAddress/{overrideReturnAddressId}"
            .replaceAll("\\{" + "overrideReturnAddressId" + "\\}", apiClient.escapeString(overrideReturnAddressId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOverrideReturnAddressValidateBeforeCall(Integer overrideReturnAddressId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'overrideReturnAddressId' is set
        if (overrideReturnAddressId == null) {
            throw new ApiException("Missing the required parameter 'overrideReturnAddressId' when calling deleteOverrideReturnAddress(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOverrideReturnAddressCall(overrideReturnAddressId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an overrideReturnAddress
     * Deletes the overrideReturnAddress identified by the specified id.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteOverrideReturnAddress(Integer overrideReturnAddressId) throws ApiException {
        deleteOverrideReturnAddressWithHttpInfo(overrideReturnAddressId);
    }

    /**
     * Delete an overrideReturnAddress
     * Deletes the overrideReturnAddress identified by the specified id.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteOverrideReturnAddressWithHttpInfo(Integer overrideReturnAddressId) throws ApiException {
        com.squareup.okhttp.Call call = deleteOverrideReturnAddressValidateBeforeCall(overrideReturnAddressId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an overrideReturnAddress (asynchronously)
     * Deletes the overrideReturnAddress identified by the specified id.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOverrideReturnAddressAsync(Integer overrideReturnAddressId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOverrideReturnAddressValidateBeforeCall(overrideReturnAddressId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteOverrideReturnAddressFile
     * @param overrideReturnAddressId Id of the overrideReturnAddress to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOverrideReturnAddressFileCall(Integer overrideReturnAddressId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/overrideReturnAddress/{overrideReturnAddressId}/file/{fileId}"
            .replaceAll("\\{" + "overrideReturnAddressId" + "\\}", apiClient.escapeString(overrideReturnAddressId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOverrideReturnAddressFileValidateBeforeCall(Integer overrideReturnAddressId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'overrideReturnAddressId' is set
        if (overrideReturnAddressId == null) {
            throw new ApiException("Missing the required parameter 'overrideReturnAddressId' when calling deleteOverrideReturnAddressFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteOverrideReturnAddressFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOverrideReturnAddressFileCall(overrideReturnAddressId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for an overrideReturnAddress.
     * Deletes an existing overrideReturnAddress file using the specified data.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteOverrideReturnAddressFile(Integer overrideReturnAddressId, Integer fileId) throws ApiException {
        deleteOverrideReturnAddressFileWithHttpInfo(overrideReturnAddressId, fileId);
    }

    /**
     * Delete a file for an overrideReturnAddress.
     * Deletes an existing overrideReturnAddress file using the specified data.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteOverrideReturnAddressFileWithHttpInfo(Integer overrideReturnAddressId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteOverrideReturnAddressFileValidateBeforeCall(overrideReturnAddressId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for an overrideReturnAddress. (asynchronously)
     * Deletes an existing overrideReturnAddress file using the specified data.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOverrideReturnAddressFileAsync(Integer overrideReturnAddressId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOverrideReturnAddressFileValidateBeforeCall(overrideReturnAddressId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteOverrideReturnAddressTag
     * @param overrideReturnAddressId Id of the overrideReturnAddress to remove tag from (required)
     * @param overrideReturnAddressTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOverrideReturnAddressTagCall(Integer overrideReturnAddressId, String overrideReturnAddressTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/overrideReturnAddress/{overrideReturnAddressId}/tag/{overrideReturnAddressTag}"
            .replaceAll("\\{" + "overrideReturnAddressId" + "\\}", apiClient.escapeString(overrideReturnAddressId.toString()))
            .replaceAll("\\{" + "overrideReturnAddressTag" + "\\}", apiClient.escapeString(overrideReturnAddressTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOverrideReturnAddressTagValidateBeforeCall(Integer overrideReturnAddressId, String overrideReturnAddressTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'overrideReturnAddressId' is set
        if (overrideReturnAddressId == null) {
            throw new ApiException("Missing the required parameter 'overrideReturnAddressId' when calling deleteOverrideReturnAddressTag(Async)");
        }
        
        // verify the required parameter 'overrideReturnAddressTag' is set
        if (overrideReturnAddressTag == null) {
            throw new ApiException("Missing the required parameter 'overrideReturnAddressTag' when calling deleteOverrideReturnAddressTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOverrideReturnAddressTagCall(overrideReturnAddressId, overrideReturnAddressTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for an overrideReturnAddress.
     * Deletes an existing overrideReturnAddress tag using the specified data.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to remove tag from (required)
     * @param overrideReturnAddressTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteOverrideReturnAddressTag(Integer overrideReturnAddressId, String overrideReturnAddressTag) throws ApiException {
        deleteOverrideReturnAddressTagWithHttpInfo(overrideReturnAddressId, overrideReturnAddressTag);
    }

    /**
     * Delete a tag for an overrideReturnAddress.
     * Deletes an existing overrideReturnAddress tag using the specified data.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to remove tag from (required)
     * @param overrideReturnAddressTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteOverrideReturnAddressTagWithHttpInfo(Integer overrideReturnAddressId, String overrideReturnAddressTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteOverrideReturnAddressTagValidateBeforeCall(overrideReturnAddressId, overrideReturnAddressTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for an overrideReturnAddress. (asynchronously)
     * Deletes an existing overrideReturnAddress tag using the specified data.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to remove tag from (required)
     * @param overrideReturnAddressTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOverrideReturnAddressTagAsync(Integer overrideReturnAddressId, String overrideReturnAddressTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOverrideReturnAddressTagValidateBeforeCall(overrideReturnAddressId, overrideReturnAddressTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateOverrideReturnAddressById
     * @param overrideReturnAddressId Id of the overrideReturnAddress to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateOverrideReturnAddressByIdCall(Integer overrideReturnAddressId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/overrideReturnAddress/duplicate/{overrideReturnAddressId}"
            .replaceAll("\\{" + "overrideReturnAddressId" + "\\}", apiClient.escapeString(overrideReturnAddressId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateOverrideReturnAddressByIdValidateBeforeCall(Integer overrideReturnAddressId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'overrideReturnAddressId' is set
        if (overrideReturnAddressId == null) {
            throw new ApiException("Missing the required parameter 'overrideReturnAddressId' when calling getDuplicateOverrideReturnAddressById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateOverrideReturnAddressByIdCall(overrideReturnAddressId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated an overrideReturnAddress by id
     * Returns a duplicated overrideReturnAddress identified by the specified id.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to be duplicated. (required)
     * @return OverrideReturnAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OverrideReturnAddress getDuplicateOverrideReturnAddressById(Integer overrideReturnAddressId) throws ApiException {
        ApiResponse<OverrideReturnAddress> resp = getDuplicateOverrideReturnAddressByIdWithHttpInfo(overrideReturnAddressId);
        return resp.getData();
    }

    /**
     * Get a duplicated an overrideReturnAddress by id
     * Returns a duplicated overrideReturnAddress identified by the specified id.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to be duplicated. (required)
     * @return ApiResponse&lt;OverrideReturnAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OverrideReturnAddress> getDuplicateOverrideReturnAddressByIdWithHttpInfo(Integer overrideReturnAddressId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateOverrideReturnAddressByIdValidateBeforeCall(overrideReturnAddressId, null, null);
        Type localVarReturnType = new TypeToken<OverrideReturnAddress>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated an overrideReturnAddress by id (asynchronously)
     * Returns a duplicated overrideReturnAddress identified by the specified id.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateOverrideReturnAddressByIdAsync(Integer overrideReturnAddressId, final ApiCallback<OverrideReturnAddress> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateOverrideReturnAddressByIdValidateBeforeCall(overrideReturnAddressId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OverrideReturnAddress>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOverrideReturnAddressByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOverrideReturnAddressByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/overrideReturnAddress/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOverrideReturnAddressByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getOverrideReturnAddressByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search overrideReturnAddresses by filter
     * Returns the list of overrideReturnAddresses that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;OverrideReturnAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OverrideReturnAddress> getOverrideReturnAddressByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<OverrideReturnAddress>> resp = getOverrideReturnAddressByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search overrideReturnAddresses by filter
     * Returns the list of overrideReturnAddresses that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;OverrideReturnAddress&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OverrideReturnAddress>> getOverrideReturnAddressByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getOverrideReturnAddressByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<OverrideReturnAddress>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search overrideReturnAddresses by filter (asynchronously)
     * Returns the list of overrideReturnAddresses that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOverrideReturnAddressByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<OverrideReturnAddress>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOverrideReturnAddressByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OverrideReturnAddress>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOverrideReturnAddressById
     * @param overrideReturnAddressId Id of the overrideReturnAddress to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOverrideReturnAddressByIdCall(Integer overrideReturnAddressId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/overrideReturnAddress/{overrideReturnAddressId}"
            .replaceAll("\\{" + "overrideReturnAddressId" + "\\}", apiClient.escapeString(overrideReturnAddressId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOverrideReturnAddressByIdValidateBeforeCall(Integer overrideReturnAddressId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'overrideReturnAddressId' is set
        if (overrideReturnAddressId == null) {
            throw new ApiException("Missing the required parameter 'overrideReturnAddressId' when calling getOverrideReturnAddressById(Async)");
        }
        

        com.squareup.okhttp.Call call = getOverrideReturnAddressByIdCall(overrideReturnAddressId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an overrideReturnAddress by id
     * Returns the overrideReturnAddress identified by the specified id.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to be returned. (required)
     * @return OverrideReturnAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OverrideReturnAddress getOverrideReturnAddressById(Integer overrideReturnAddressId) throws ApiException {
        ApiResponse<OverrideReturnAddress> resp = getOverrideReturnAddressByIdWithHttpInfo(overrideReturnAddressId);
        return resp.getData();
    }

    /**
     * Get an overrideReturnAddress by id
     * Returns the overrideReturnAddress identified by the specified id.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to be returned. (required)
     * @return ApiResponse&lt;OverrideReturnAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OverrideReturnAddress> getOverrideReturnAddressByIdWithHttpInfo(Integer overrideReturnAddressId) throws ApiException {
        com.squareup.okhttp.Call call = getOverrideReturnAddressByIdValidateBeforeCall(overrideReturnAddressId, null, null);
        Type localVarReturnType = new TypeToken<OverrideReturnAddress>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an overrideReturnAddress by id (asynchronously)
     * Returns the overrideReturnAddress identified by the specified id.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOverrideReturnAddressByIdAsync(Integer overrideReturnAddressId, final ApiCallback<OverrideReturnAddress> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOverrideReturnAddressByIdValidateBeforeCall(overrideReturnAddressId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OverrideReturnAddress>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOverrideReturnAddressFiles
     * @param overrideReturnAddressId Id of the overrideReturnAddress to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOverrideReturnAddressFilesCall(Integer overrideReturnAddressId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/overrideReturnAddress/{overrideReturnAddressId}/file"
            .replaceAll("\\{" + "overrideReturnAddressId" + "\\}", apiClient.escapeString(overrideReturnAddressId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOverrideReturnAddressFilesValidateBeforeCall(Integer overrideReturnAddressId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'overrideReturnAddressId' is set
        if (overrideReturnAddressId == null) {
            throw new ApiException("Missing the required parameter 'overrideReturnAddressId' when calling getOverrideReturnAddressFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getOverrideReturnAddressFilesCall(overrideReturnAddressId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for an overrideReturnAddress.
     * Get all existing overrideReturnAddress files.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getOverrideReturnAddressFiles(Integer overrideReturnAddressId) throws ApiException {
        getOverrideReturnAddressFilesWithHttpInfo(overrideReturnAddressId);
    }

    /**
     * Get the files for an overrideReturnAddress.
     * Get all existing overrideReturnAddress files.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getOverrideReturnAddressFilesWithHttpInfo(Integer overrideReturnAddressId) throws ApiException {
        com.squareup.okhttp.Call call = getOverrideReturnAddressFilesValidateBeforeCall(overrideReturnAddressId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for an overrideReturnAddress. (asynchronously)
     * Get all existing overrideReturnAddress files.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOverrideReturnAddressFilesAsync(Integer overrideReturnAddressId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOverrideReturnAddressFilesValidateBeforeCall(overrideReturnAddressId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getOverrideReturnAddressTags
     * @param overrideReturnAddressId Id of the overrideReturnAddress to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOverrideReturnAddressTagsCall(Integer overrideReturnAddressId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/overrideReturnAddress/{overrideReturnAddressId}/tag"
            .replaceAll("\\{" + "overrideReturnAddressId" + "\\}", apiClient.escapeString(overrideReturnAddressId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOverrideReturnAddressTagsValidateBeforeCall(Integer overrideReturnAddressId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'overrideReturnAddressId' is set
        if (overrideReturnAddressId == null) {
            throw new ApiException("Missing the required parameter 'overrideReturnAddressId' when calling getOverrideReturnAddressTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getOverrideReturnAddressTagsCall(overrideReturnAddressId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for an overrideReturnAddress.
     * Get all existing overrideReturnAddress tags.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getOverrideReturnAddressTags(Integer overrideReturnAddressId) throws ApiException {
        getOverrideReturnAddressTagsWithHttpInfo(overrideReturnAddressId);
    }

    /**
     * Get the tags for an overrideReturnAddress.
     * Get all existing overrideReturnAddress tags.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getOverrideReturnAddressTagsWithHttpInfo(Integer overrideReturnAddressId) throws ApiException {
        com.squareup.okhttp.Call call = getOverrideReturnAddressTagsValidateBeforeCall(overrideReturnAddressId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for an overrideReturnAddress. (asynchronously)
     * Get all existing overrideReturnAddress tags.
     * @param overrideReturnAddressId Id of the overrideReturnAddress to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOverrideReturnAddressTagsAsync(Integer overrideReturnAddressId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOverrideReturnAddressTagsValidateBeforeCall(overrideReturnAddressId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateOverrideReturnAddress
     * @param body OverrideReturnAddress to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateOverrideReturnAddressCall(OverrideReturnAddress body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/overrideReturnAddress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOverrideReturnAddressValidateBeforeCall(OverrideReturnAddress body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateOverrideReturnAddress(Async)");
        }
        

        com.squareup.okhttp.Call call = updateOverrideReturnAddressCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an overrideReturnAddress
     * Updates an existing overrideReturnAddress using the specified data.
     * @param body OverrideReturnAddress to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateOverrideReturnAddress(OverrideReturnAddress body) throws ApiException {
        updateOverrideReturnAddressWithHttpInfo(body);
    }

    /**
     * Update an overrideReturnAddress
     * Updates an existing overrideReturnAddress using the specified data.
     * @param body OverrideReturnAddress to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateOverrideReturnAddressWithHttpInfo(OverrideReturnAddress body) throws ApiException {
        com.squareup.okhttp.Call call = updateOverrideReturnAddressValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an overrideReturnAddress (asynchronously)
     * Updates an existing overrideReturnAddress using the specified data.
     * @param body OverrideReturnAddress to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOverrideReturnAddressAsync(OverrideReturnAddress body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOverrideReturnAddressValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateOverrideReturnAddressCustomFields
     * @param body OverrideReturnAddress to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateOverrideReturnAddressCustomFieldsCall(OverrideReturnAddress body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/overrideReturnAddress/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOverrideReturnAddressCustomFieldsValidateBeforeCall(OverrideReturnAddress body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateOverrideReturnAddressCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateOverrideReturnAddressCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an overrideReturnAddress custom fields
     * Updates an existing overrideReturnAddress custom fields using the specified data.
     * @param body OverrideReturnAddress to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateOverrideReturnAddressCustomFields(OverrideReturnAddress body) throws ApiException {
        updateOverrideReturnAddressCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update an overrideReturnAddress custom fields
     * Updates an existing overrideReturnAddress custom fields using the specified data.
     * @param body OverrideReturnAddress to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateOverrideReturnAddressCustomFieldsWithHttpInfo(OverrideReturnAddress body) throws ApiException {
        com.squareup.okhttp.Call call = updateOverrideReturnAddressCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an overrideReturnAddress custom fields (asynchronously)
     * Updates an existing overrideReturnAddress custom fields using the specified data.
     * @param body OverrideReturnAddress to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOverrideReturnAddressCustomFieldsAsync(OverrideReturnAddress body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOverrideReturnAddressCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
