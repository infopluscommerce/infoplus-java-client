/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.FulfillmentLayoutPosition;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FulfillmentLayoutPositionApi {
    private ApiClient apiClient;

    public FulfillmentLayoutPositionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FulfillmentLayoutPositionApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addFulfillmentLayoutPositionAudit
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to add an audit to (required)
     * @param fulfillmentLayoutPositionAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentLayoutPositionAuditCall(Integer fulfillmentLayoutPositionId, String fulfillmentLayoutPositionAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/audit/{fulfillmentLayoutPositionAudit}"
            .replaceAll("\\{" + "fulfillmentLayoutPositionId" + "\\}", apiClient.escapeString(fulfillmentLayoutPositionId.toString()))
            .replaceAll("\\{" + "fulfillmentLayoutPositionAudit" + "\\}", apiClient.escapeString(fulfillmentLayoutPositionAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFulfillmentLayoutPositionAuditValidateBeforeCall(Integer fulfillmentLayoutPositionId, String fulfillmentLayoutPositionAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentLayoutPositionId' is set
        if (fulfillmentLayoutPositionId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentLayoutPositionId' when calling addFulfillmentLayoutPositionAudit(Async)");
        }
        
        // verify the required parameter 'fulfillmentLayoutPositionAudit' is set
        if (fulfillmentLayoutPositionAudit == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentLayoutPositionAudit' when calling addFulfillmentLayoutPositionAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addFulfillmentLayoutPositionAuditCall(fulfillmentLayoutPositionId, fulfillmentLayoutPositionAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a fulfillmentLayoutPosition
     * Adds an audit to an existing fulfillmentLayoutPosition.
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to add an audit to (required)
     * @param fulfillmentLayoutPositionAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addFulfillmentLayoutPositionAudit(Integer fulfillmentLayoutPositionId, String fulfillmentLayoutPositionAudit) throws ApiException {
        addFulfillmentLayoutPositionAuditWithHttpInfo(fulfillmentLayoutPositionId, fulfillmentLayoutPositionAudit);
    }

    /**
     * Add new audit for a fulfillmentLayoutPosition
     * Adds an audit to an existing fulfillmentLayoutPosition.
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to add an audit to (required)
     * @param fulfillmentLayoutPositionAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addFulfillmentLayoutPositionAuditWithHttpInfo(Integer fulfillmentLayoutPositionId, String fulfillmentLayoutPositionAudit) throws ApiException {
        com.squareup.okhttp.Call call = addFulfillmentLayoutPositionAuditValidateBeforeCall(fulfillmentLayoutPositionId, fulfillmentLayoutPositionAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a fulfillmentLayoutPosition (asynchronously)
     * Adds an audit to an existing fulfillmentLayoutPosition.
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to add an audit to (required)
     * @param fulfillmentLayoutPositionAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentLayoutPositionAuditAsync(Integer fulfillmentLayoutPositionId, String fulfillmentLayoutPositionAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFulfillmentLayoutPositionAuditValidateBeforeCall(fulfillmentLayoutPositionId, fulfillmentLayoutPositionAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addFulfillmentLayoutPositionFile
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentLayoutPositionFileCall(Integer fulfillmentLayoutPositionId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/file/{fileName}"
            .replaceAll("\\{" + "fulfillmentLayoutPositionId" + "\\}", apiClient.escapeString(fulfillmentLayoutPositionId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFulfillmentLayoutPositionFileValidateBeforeCall(Integer fulfillmentLayoutPositionId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentLayoutPositionId' is set
        if (fulfillmentLayoutPositionId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentLayoutPositionId' when calling addFulfillmentLayoutPositionFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addFulfillmentLayoutPositionFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addFulfillmentLayoutPositionFileCall(fulfillmentLayoutPositionId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a fulfillmentLayoutPosition
     * Adds a file to an existing fulfillmentLayoutPosition.
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addFulfillmentLayoutPositionFile(Integer fulfillmentLayoutPositionId, String fileName) throws ApiException {
        addFulfillmentLayoutPositionFileWithHttpInfo(fulfillmentLayoutPositionId, fileName);
    }

    /**
     * Attach a file to a fulfillmentLayoutPosition
     * Adds a file to an existing fulfillmentLayoutPosition.
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addFulfillmentLayoutPositionFileWithHttpInfo(Integer fulfillmentLayoutPositionId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addFulfillmentLayoutPositionFileValidateBeforeCall(fulfillmentLayoutPositionId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a fulfillmentLayoutPosition (asynchronously)
     * Adds a file to an existing fulfillmentLayoutPosition.
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentLayoutPositionFileAsync(Integer fulfillmentLayoutPositionId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFulfillmentLayoutPositionFileValidateBeforeCall(fulfillmentLayoutPositionId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addFulfillmentLayoutPositionFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentLayoutPositionFileByURLCall(RecordFile body, Integer fulfillmentLayoutPositionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/file"
            .replaceAll("\\{" + "fulfillmentLayoutPositionId" + "\\}", apiClient.escapeString(fulfillmentLayoutPositionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFulfillmentLayoutPositionFileByURLValidateBeforeCall(RecordFile body, Integer fulfillmentLayoutPositionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addFulfillmentLayoutPositionFileByURL(Async)");
        }
        
        // verify the required parameter 'fulfillmentLayoutPositionId' is set
        if (fulfillmentLayoutPositionId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentLayoutPositionId' when calling addFulfillmentLayoutPositionFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addFulfillmentLayoutPositionFileByURLCall(body, fulfillmentLayoutPositionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a fulfillmentLayoutPosition by URL.
     * Adds a file to an existing fulfillmentLayoutPosition by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addFulfillmentLayoutPositionFileByURL(RecordFile body, Integer fulfillmentLayoutPositionId) throws ApiException {
        addFulfillmentLayoutPositionFileByURLWithHttpInfo(body, fulfillmentLayoutPositionId);
    }

    /**
     * Attach a file to a fulfillmentLayoutPosition by URL.
     * Adds a file to an existing fulfillmentLayoutPosition by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addFulfillmentLayoutPositionFileByURLWithHttpInfo(RecordFile body, Integer fulfillmentLayoutPositionId) throws ApiException {
        com.squareup.okhttp.Call call = addFulfillmentLayoutPositionFileByURLValidateBeforeCall(body, fulfillmentLayoutPositionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a fulfillmentLayoutPosition by URL. (asynchronously)
     * Adds a file to an existing fulfillmentLayoutPosition by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentLayoutPositionFileByURLAsync(RecordFile body, Integer fulfillmentLayoutPositionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFulfillmentLayoutPositionFileByURLValidateBeforeCall(body, fulfillmentLayoutPositionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addFulfillmentLayoutPositionTag
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to add a tag to (required)
     * @param fulfillmentLayoutPositionTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentLayoutPositionTagCall(Integer fulfillmentLayoutPositionId, String fulfillmentLayoutPositionTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/tag/{fulfillmentLayoutPositionTag}"
            .replaceAll("\\{" + "fulfillmentLayoutPositionId" + "\\}", apiClient.escapeString(fulfillmentLayoutPositionId.toString()))
            .replaceAll("\\{" + "fulfillmentLayoutPositionTag" + "\\}", apiClient.escapeString(fulfillmentLayoutPositionTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFulfillmentLayoutPositionTagValidateBeforeCall(Integer fulfillmentLayoutPositionId, String fulfillmentLayoutPositionTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentLayoutPositionId' is set
        if (fulfillmentLayoutPositionId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentLayoutPositionId' when calling addFulfillmentLayoutPositionTag(Async)");
        }
        
        // verify the required parameter 'fulfillmentLayoutPositionTag' is set
        if (fulfillmentLayoutPositionTag == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentLayoutPositionTag' when calling addFulfillmentLayoutPositionTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addFulfillmentLayoutPositionTagCall(fulfillmentLayoutPositionId, fulfillmentLayoutPositionTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a fulfillmentLayoutPosition.
     * Adds a tag to an existing fulfillmentLayoutPosition.
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to add a tag to (required)
     * @param fulfillmentLayoutPositionTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addFulfillmentLayoutPositionTag(Integer fulfillmentLayoutPositionId, String fulfillmentLayoutPositionTag) throws ApiException {
        addFulfillmentLayoutPositionTagWithHttpInfo(fulfillmentLayoutPositionId, fulfillmentLayoutPositionTag);
    }

    /**
     * Add new tags for a fulfillmentLayoutPosition.
     * Adds a tag to an existing fulfillmentLayoutPosition.
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to add a tag to (required)
     * @param fulfillmentLayoutPositionTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addFulfillmentLayoutPositionTagWithHttpInfo(Integer fulfillmentLayoutPositionId, String fulfillmentLayoutPositionTag) throws ApiException {
        com.squareup.okhttp.Call call = addFulfillmentLayoutPositionTagValidateBeforeCall(fulfillmentLayoutPositionId, fulfillmentLayoutPositionTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a fulfillmentLayoutPosition. (asynchronously)
     * Adds a tag to an existing fulfillmentLayoutPosition.
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to add a tag to (required)
     * @param fulfillmentLayoutPositionTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFulfillmentLayoutPositionTagAsync(Integer fulfillmentLayoutPositionId, String fulfillmentLayoutPositionTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFulfillmentLayoutPositionTagValidateBeforeCall(fulfillmentLayoutPositionId, fulfillmentLayoutPositionTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteFulfillmentLayoutPositionFile
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFulfillmentLayoutPositionFileCall(Integer fulfillmentLayoutPositionId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/file/{fileId}"
            .replaceAll("\\{" + "fulfillmentLayoutPositionId" + "\\}", apiClient.escapeString(fulfillmentLayoutPositionId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFulfillmentLayoutPositionFileValidateBeforeCall(Integer fulfillmentLayoutPositionId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentLayoutPositionId' is set
        if (fulfillmentLayoutPositionId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentLayoutPositionId' when calling deleteFulfillmentLayoutPositionFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteFulfillmentLayoutPositionFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFulfillmentLayoutPositionFileCall(fulfillmentLayoutPositionId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a fulfillmentLayoutPosition.
     * Deletes an existing fulfillmentLayoutPosition file using the specified data.
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFulfillmentLayoutPositionFile(Integer fulfillmentLayoutPositionId, Integer fileId) throws ApiException {
        deleteFulfillmentLayoutPositionFileWithHttpInfo(fulfillmentLayoutPositionId, fileId);
    }

    /**
     * Delete a file for a fulfillmentLayoutPosition.
     * Deletes an existing fulfillmentLayoutPosition file using the specified data.
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFulfillmentLayoutPositionFileWithHttpInfo(Integer fulfillmentLayoutPositionId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFulfillmentLayoutPositionFileValidateBeforeCall(fulfillmentLayoutPositionId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a fulfillmentLayoutPosition. (asynchronously)
     * Deletes an existing fulfillmentLayoutPosition file using the specified data.
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFulfillmentLayoutPositionFileAsync(Integer fulfillmentLayoutPositionId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFulfillmentLayoutPositionFileValidateBeforeCall(fulfillmentLayoutPositionId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteFulfillmentLayoutPositionTag
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to remove tag from (required)
     * @param fulfillmentLayoutPositionTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFulfillmentLayoutPositionTagCall(Integer fulfillmentLayoutPositionId, String fulfillmentLayoutPositionTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/tag/{fulfillmentLayoutPositionTag}"
            .replaceAll("\\{" + "fulfillmentLayoutPositionId" + "\\}", apiClient.escapeString(fulfillmentLayoutPositionId.toString()))
            .replaceAll("\\{" + "fulfillmentLayoutPositionTag" + "\\}", apiClient.escapeString(fulfillmentLayoutPositionTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFulfillmentLayoutPositionTagValidateBeforeCall(Integer fulfillmentLayoutPositionId, String fulfillmentLayoutPositionTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentLayoutPositionId' is set
        if (fulfillmentLayoutPositionId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentLayoutPositionId' when calling deleteFulfillmentLayoutPositionTag(Async)");
        }
        
        // verify the required parameter 'fulfillmentLayoutPositionTag' is set
        if (fulfillmentLayoutPositionTag == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentLayoutPositionTag' when calling deleteFulfillmentLayoutPositionTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFulfillmentLayoutPositionTagCall(fulfillmentLayoutPositionId, fulfillmentLayoutPositionTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a fulfillmentLayoutPosition.
     * Deletes an existing fulfillmentLayoutPosition tag using the specified data.
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to remove tag from (required)
     * @param fulfillmentLayoutPositionTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFulfillmentLayoutPositionTag(Integer fulfillmentLayoutPositionId, String fulfillmentLayoutPositionTag) throws ApiException {
        deleteFulfillmentLayoutPositionTagWithHttpInfo(fulfillmentLayoutPositionId, fulfillmentLayoutPositionTag);
    }

    /**
     * Delete a tag for a fulfillmentLayoutPosition.
     * Deletes an existing fulfillmentLayoutPosition tag using the specified data.
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to remove tag from (required)
     * @param fulfillmentLayoutPositionTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFulfillmentLayoutPositionTagWithHttpInfo(Integer fulfillmentLayoutPositionId, String fulfillmentLayoutPositionTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteFulfillmentLayoutPositionTagValidateBeforeCall(fulfillmentLayoutPositionId, fulfillmentLayoutPositionTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a fulfillmentLayoutPosition. (asynchronously)
     * Deletes an existing fulfillmentLayoutPosition tag using the specified data.
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to remove tag from (required)
     * @param fulfillmentLayoutPositionTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFulfillmentLayoutPositionTagAsync(Integer fulfillmentLayoutPositionId, String fulfillmentLayoutPositionTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFulfillmentLayoutPositionTagValidateBeforeCall(fulfillmentLayoutPositionId, fulfillmentLayoutPositionTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateFulfillmentLayoutPositionById
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateFulfillmentLayoutPositionByIdCall(Integer fulfillmentLayoutPositionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentLayoutPosition/duplicate/{fulfillmentLayoutPositionId}"
            .replaceAll("\\{" + "fulfillmentLayoutPositionId" + "\\}", apiClient.escapeString(fulfillmentLayoutPositionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateFulfillmentLayoutPositionByIdValidateBeforeCall(Integer fulfillmentLayoutPositionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentLayoutPositionId' is set
        if (fulfillmentLayoutPositionId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentLayoutPositionId' when calling getDuplicateFulfillmentLayoutPositionById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateFulfillmentLayoutPositionByIdCall(fulfillmentLayoutPositionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a fulfillmentLayoutPosition by id
     * Returns a duplicated fulfillmentLayoutPosition identified by the specified id.
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to be duplicated. (required)
     * @return FulfillmentLayoutPosition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FulfillmentLayoutPosition getDuplicateFulfillmentLayoutPositionById(Integer fulfillmentLayoutPositionId) throws ApiException {
        ApiResponse<FulfillmentLayoutPosition> resp = getDuplicateFulfillmentLayoutPositionByIdWithHttpInfo(fulfillmentLayoutPositionId);
        return resp.getData();
    }

    /**
     * Get a duplicated a fulfillmentLayoutPosition by id
     * Returns a duplicated fulfillmentLayoutPosition identified by the specified id.
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to be duplicated. (required)
     * @return ApiResponse&lt;FulfillmentLayoutPosition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FulfillmentLayoutPosition> getDuplicateFulfillmentLayoutPositionByIdWithHttpInfo(Integer fulfillmentLayoutPositionId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateFulfillmentLayoutPositionByIdValidateBeforeCall(fulfillmentLayoutPositionId, null, null);
        Type localVarReturnType = new TypeToken<FulfillmentLayoutPosition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a fulfillmentLayoutPosition by id (asynchronously)
     * Returns a duplicated fulfillmentLayoutPosition identified by the specified id.
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateFulfillmentLayoutPositionByIdAsync(Integer fulfillmentLayoutPositionId, final ApiCallback<FulfillmentLayoutPosition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateFulfillmentLayoutPositionByIdValidateBeforeCall(fulfillmentLayoutPositionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FulfillmentLayoutPosition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFulfillmentLayoutPositionByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentLayoutPositionByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentLayoutPosition/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFulfillmentLayoutPositionByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getFulfillmentLayoutPositionByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search fulfillmentLayoutPositions by filter
     * Returns the list of fulfillmentLayoutPositions that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;FulfillmentLayoutPosition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FulfillmentLayoutPosition> getFulfillmentLayoutPositionByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<FulfillmentLayoutPosition>> resp = getFulfillmentLayoutPositionByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search fulfillmentLayoutPositions by filter
     * Returns the list of fulfillmentLayoutPositions that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;FulfillmentLayoutPosition&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FulfillmentLayoutPosition>> getFulfillmentLayoutPositionByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getFulfillmentLayoutPositionByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<FulfillmentLayoutPosition>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search fulfillmentLayoutPositions by filter (asynchronously)
     * Returns the list of fulfillmentLayoutPositions that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentLayoutPositionByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<FulfillmentLayoutPosition>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFulfillmentLayoutPositionByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FulfillmentLayoutPosition>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFulfillmentLayoutPositionById
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentLayoutPositionByIdCall(Integer fulfillmentLayoutPositionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}"
            .replaceAll("\\{" + "fulfillmentLayoutPositionId" + "\\}", apiClient.escapeString(fulfillmentLayoutPositionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFulfillmentLayoutPositionByIdValidateBeforeCall(Integer fulfillmentLayoutPositionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentLayoutPositionId' is set
        if (fulfillmentLayoutPositionId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentLayoutPositionId' when calling getFulfillmentLayoutPositionById(Async)");
        }
        

        com.squareup.okhttp.Call call = getFulfillmentLayoutPositionByIdCall(fulfillmentLayoutPositionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a fulfillmentLayoutPosition by id
     * Returns the fulfillmentLayoutPosition identified by the specified id.
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to be returned. (required)
     * @return FulfillmentLayoutPosition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FulfillmentLayoutPosition getFulfillmentLayoutPositionById(Integer fulfillmentLayoutPositionId) throws ApiException {
        ApiResponse<FulfillmentLayoutPosition> resp = getFulfillmentLayoutPositionByIdWithHttpInfo(fulfillmentLayoutPositionId);
        return resp.getData();
    }

    /**
     * Get a fulfillmentLayoutPosition by id
     * Returns the fulfillmentLayoutPosition identified by the specified id.
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to be returned. (required)
     * @return ApiResponse&lt;FulfillmentLayoutPosition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FulfillmentLayoutPosition> getFulfillmentLayoutPositionByIdWithHttpInfo(Integer fulfillmentLayoutPositionId) throws ApiException {
        com.squareup.okhttp.Call call = getFulfillmentLayoutPositionByIdValidateBeforeCall(fulfillmentLayoutPositionId, null, null);
        Type localVarReturnType = new TypeToken<FulfillmentLayoutPosition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a fulfillmentLayoutPosition by id (asynchronously)
     * Returns the fulfillmentLayoutPosition identified by the specified id.
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentLayoutPositionByIdAsync(Integer fulfillmentLayoutPositionId, final ApiCallback<FulfillmentLayoutPosition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFulfillmentLayoutPositionByIdValidateBeforeCall(fulfillmentLayoutPositionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FulfillmentLayoutPosition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFulfillmentLayoutPositionFiles
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentLayoutPositionFilesCall(Integer fulfillmentLayoutPositionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/file"
            .replaceAll("\\{" + "fulfillmentLayoutPositionId" + "\\}", apiClient.escapeString(fulfillmentLayoutPositionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFulfillmentLayoutPositionFilesValidateBeforeCall(Integer fulfillmentLayoutPositionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentLayoutPositionId' is set
        if (fulfillmentLayoutPositionId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentLayoutPositionId' when calling getFulfillmentLayoutPositionFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getFulfillmentLayoutPositionFilesCall(fulfillmentLayoutPositionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a fulfillmentLayoutPosition.
     * Get all existing fulfillmentLayoutPosition files.
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getFulfillmentLayoutPositionFiles(Integer fulfillmentLayoutPositionId) throws ApiException {
        getFulfillmentLayoutPositionFilesWithHttpInfo(fulfillmentLayoutPositionId);
    }

    /**
     * Get the files for a fulfillmentLayoutPosition.
     * Get all existing fulfillmentLayoutPosition files.
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getFulfillmentLayoutPositionFilesWithHttpInfo(Integer fulfillmentLayoutPositionId) throws ApiException {
        com.squareup.okhttp.Call call = getFulfillmentLayoutPositionFilesValidateBeforeCall(fulfillmentLayoutPositionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a fulfillmentLayoutPosition. (asynchronously)
     * Get all existing fulfillmentLayoutPosition files.
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentLayoutPositionFilesAsync(Integer fulfillmentLayoutPositionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFulfillmentLayoutPositionFilesValidateBeforeCall(fulfillmentLayoutPositionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getFulfillmentLayoutPositionTags
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentLayoutPositionTagsCall(Integer fulfillmentLayoutPositionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/tag"
            .replaceAll("\\{" + "fulfillmentLayoutPositionId" + "\\}", apiClient.escapeString(fulfillmentLayoutPositionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFulfillmentLayoutPositionTagsValidateBeforeCall(Integer fulfillmentLayoutPositionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentLayoutPositionId' is set
        if (fulfillmentLayoutPositionId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentLayoutPositionId' when calling getFulfillmentLayoutPositionTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getFulfillmentLayoutPositionTagsCall(fulfillmentLayoutPositionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a fulfillmentLayoutPosition.
     * Get all existing fulfillmentLayoutPosition tags.
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getFulfillmentLayoutPositionTags(Integer fulfillmentLayoutPositionId) throws ApiException {
        getFulfillmentLayoutPositionTagsWithHttpInfo(fulfillmentLayoutPositionId);
    }

    /**
     * Get the tags for a fulfillmentLayoutPosition.
     * Get all existing fulfillmentLayoutPosition tags.
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getFulfillmentLayoutPositionTagsWithHttpInfo(Integer fulfillmentLayoutPositionId) throws ApiException {
        com.squareup.okhttp.Call call = getFulfillmentLayoutPositionTagsValidateBeforeCall(fulfillmentLayoutPositionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a fulfillmentLayoutPosition. (asynchronously)
     * Get all existing fulfillmentLayoutPosition tags.
     * @param fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentLayoutPositionTagsAsync(Integer fulfillmentLayoutPositionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFulfillmentLayoutPositionTagsValidateBeforeCall(fulfillmentLayoutPositionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
