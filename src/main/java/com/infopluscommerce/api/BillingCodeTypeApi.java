/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.BillingCodeType;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BillingCodeTypeApi {
    private ApiClient apiClient;

    public BillingCodeTypeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BillingCodeTypeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addBillingCodeType
     * @param body BillingCodeType to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addBillingCodeTypeCall(BillingCodeType body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/billingCodeType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addBillingCodeTypeValidateBeforeCall(BillingCodeType body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addBillingCodeType(Async)");
        }
        

        com.squareup.okhttp.Call call = addBillingCodeTypeCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a billingCodeType
     * Inserts a new billingCodeType using the specified data.
     * @param body BillingCodeType to be inserted. (required)
     * @return BillingCodeType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BillingCodeType addBillingCodeType(BillingCodeType body) throws ApiException {
        ApiResponse<BillingCodeType> resp = addBillingCodeTypeWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a billingCodeType
     * Inserts a new billingCodeType using the specified data.
     * @param body BillingCodeType to be inserted. (required)
     * @return ApiResponse&lt;BillingCodeType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BillingCodeType> addBillingCodeTypeWithHttpInfo(BillingCodeType body) throws ApiException {
        com.squareup.okhttp.Call call = addBillingCodeTypeValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<BillingCodeType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a billingCodeType (asynchronously)
     * Inserts a new billingCodeType using the specified data.
     * @param body BillingCodeType to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBillingCodeTypeAsync(BillingCodeType body, final ApiCallback<BillingCodeType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBillingCodeTypeValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BillingCodeType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addBillingCodeTypeAudit
     * @param billingCodeTypeId Id of the billingCodeType to add an audit to (required)
     * @param billingCodeTypeAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addBillingCodeTypeAuditCall(Integer billingCodeTypeId, String billingCodeTypeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billingCodeType/{billingCodeTypeId}/audit/{billingCodeTypeAudit}"
            .replaceAll("\\{" + "billingCodeTypeId" + "\\}", apiClient.escapeString(billingCodeTypeId.toString()))
            .replaceAll("\\{" + "billingCodeTypeAudit" + "\\}", apiClient.escapeString(billingCodeTypeAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addBillingCodeTypeAuditValidateBeforeCall(Integer billingCodeTypeId, String billingCodeTypeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingCodeTypeId' is set
        if (billingCodeTypeId == null) {
            throw new ApiException("Missing the required parameter 'billingCodeTypeId' when calling addBillingCodeTypeAudit(Async)");
        }
        
        // verify the required parameter 'billingCodeTypeAudit' is set
        if (billingCodeTypeAudit == null) {
            throw new ApiException("Missing the required parameter 'billingCodeTypeAudit' when calling addBillingCodeTypeAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addBillingCodeTypeAuditCall(billingCodeTypeId, billingCodeTypeAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a billingCodeType
     * Adds an audit to an existing billingCodeType.
     * @param billingCodeTypeId Id of the billingCodeType to add an audit to (required)
     * @param billingCodeTypeAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addBillingCodeTypeAudit(Integer billingCodeTypeId, String billingCodeTypeAudit) throws ApiException {
        addBillingCodeTypeAuditWithHttpInfo(billingCodeTypeId, billingCodeTypeAudit);
    }

    /**
     * Add new audit for a billingCodeType
     * Adds an audit to an existing billingCodeType.
     * @param billingCodeTypeId Id of the billingCodeType to add an audit to (required)
     * @param billingCodeTypeAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addBillingCodeTypeAuditWithHttpInfo(Integer billingCodeTypeId, String billingCodeTypeAudit) throws ApiException {
        com.squareup.okhttp.Call call = addBillingCodeTypeAuditValidateBeforeCall(billingCodeTypeId, billingCodeTypeAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a billingCodeType (asynchronously)
     * Adds an audit to an existing billingCodeType.
     * @param billingCodeTypeId Id of the billingCodeType to add an audit to (required)
     * @param billingCodeTypeAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBillingCodeTypeAuditAsync(Integer billingCodeTypeId, String billingCodeTypeAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBillingCodeTypeAuditValidateBeforeCall(billingCodeTypeId, billingCodeTypeAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addBillingCodeTypeFile
     * @param billingCodeTypeId Id of the billingCodeType to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addBillingCodeTypeFileCall(Integer billingCodeTypeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billingCodeType/{billingCodeTypeId}/file/{fileName}"
            .replaceAll("\\{" + "billingCodeTypeId" + "\\}", apiClient.escapeString(billingCodeTypeId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addBillingCodeTypeFileValidateBeforeCall(Integer billingCodeTypeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingCodeTypeId' is set
        if (billingCodeTypeId == null) {
            throw new ApiException("Missing the required parameter 'billingCodeTypeId' when calling addBillingCodeTypeFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addBillingCodeTypeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addBillingCodeTypeFileCall(billingCodeTypeId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a billingCodeType
     * Adds a file to an existing billingCodeType.
     * @param billingCodeTypeId Id of the billingCodeType to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addBillingCodeTypeFile(Integer billingCodeTypeId, String fileName) throws ApiException {
        addBillingCodeTypeFileWithHttpInfo(billingCodeTypeId, fileName);
    }

    /**
     * Attach a file to a billingCodeType
     * Adds a file to an existing billingCodeType.
     * @param billingCodeTypeId Id of the billingCodeType to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addBillingCodeTypeFileWithHttpInfo(Integer billingCodeTypeId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addBillingCodeTypeFileValidateBeforeCall(billingCodeTypeId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a billingCodeType (asynchronously)
     * Adds a file to an existing billingCodeType.
     * @param billingCodeTypeId Id of the billingCodeType to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBillingCodeTypeFileAsync(Integer billingCodeTypeId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBillingCodeTypeFileValidateBeforeCall(billingCodeTypeId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addBillingCodeTypeFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param billingCodeTypeId Id of the billingCodeType to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addBillingCodeTypeFileByURLCall(RecordFile body, Integer billingCodeTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/billingCodeType/{billingCodeTypeId}/file"
            .replaceAll("\\{" + "billingCodeTypeId" + "\\}", apiClient.escapeString(billingCodeTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addBillingCodeTypeFileByURLValidateBeforeCall(RecordFile body, Integer billingCodeTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addBillingCodeTypeFileByURL(Async)");
        }
        
        // verify the required parameter 'billingCodeTypeId' is set
        if (billingCodeTypeId == null) {
            throw new ApiException("Missing the required parameter 'billingCodeTypeId' when calling addBillingCodeTypeFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addBillingCodeTypeFileByURLCall(body, billingCodeTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a billingCodeType by URL.
     * Adds a file to an existing billingCodeType by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param billingCodeTypeId Id of the billingCodeType to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addBillingCodeTypeFileByURL(RecordFile body, Integer billingCodeTypeId) throws ApiException {
        addBillingCodeTypeFileByURLWithHttpInfo(body, billingCodeTypeId);
    }

    /**
     * Attach a file to a billingCodeType by URL.
     * Adds a file to an existing billingCodeType by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param billingCodeTypeId Id of the billingCodeType to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addBillingCodeTypeFileByURLWithHttpInfo(RecordFile body, Integer billingCodeTypeId) throws ApiException {
        com.squareup.okhttp.Call call = addBillingCodeTypeFileByURLValidateBeforeCall(body, billingCodeTypeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a billingCodeType by URL. (asynchronously)
     * Adds a file to an existing billingCodeType by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param billingCodeTypeId Id of the billingCodeType to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBillingCodeTypeFileByURLAsync(RecordFile body, Integer billingCodeTypeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBillingCodeTypeFileByURLValidateBeforeCall(body, billingCodeTypeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addBillingCodeTypeTag
     * @param billingCodeTypeId Id of the billingCodeType to add a tag to (required)
     * @param billingCodeTypeTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addBillingCodeTypeTagCall(Integer billingCodeTypeId, String billingCodeTypeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billingCodeType/{billingCodeTypeId}/tag/{billingCodeTypeTag}"
            .replaceAll("\\{" + "billingCodeTypeId" + "\\}", apiClient.escapeString(billingCodeTypeId.toString()))
            .replaceAll("\\{" + "billingCodeTypeTag" + "\\}", apiClient.escapeString(billingCodeTypeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addBillingCodeTypeTagValidateBeforeCall(Integer billingCodeTypeId, String billingCodeTypeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingCodeTypeId' is set
        if (billingCodeTypeId == null) {
            throw new ApiException("Missing the required parameter 'billingCodeTypeId' when calling addBillingCodeTypeTag(Async)");
        }
        
        // verify the required parameter 'billingCodeTypeTag' is set
        if (billingCodeTypeTag == null) {
            throw new ApiException("Missing the required parameter 'billingCodeTypeTag' when calling addBillingCodeTypeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addBillingCodeTypeTagCall(billingCodeTypeId, billingCodeTypeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a billingCodeType.
     * Adds a tag to an existing billingCodeType.
     * @param billingCodeTypeId Id of the billingCodeType to add a tag to (required)
     * @param billingCodeTypeTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addBillingCodeTypeTag(Integer billingCodeTypeId, String billingCodeTypeTag) throws ApiException {
        addBillingCodeTypeTagWithHttpInfo(billingCodeTypeId, billingCodeTypeTag);
    }

    /**
     * Add new tags for a billingCodeType.
     * Adds a tag to an existing billingCodeType.
     * @param billingCodeTypeId Id of the billingCodeType to add a tag to (required)
     * @param billingCodeTypeTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addBillingCodeTypeTagWithHttpInfo(Integer billingCodeTypeId, String billingCodeTypeTag) throws ApiException {
        com.squareup.okhttp.Call call = addBillingCodeTypeTagValidateBeforeCall(billingCodeTypeId, billingCodeTypeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a billingCodeType. (asynchronously)
     * Adds a tag to an existing billingCodeType.
     * @param billingCodeTypeId Id of the billingCodeType to add a tag to (required)
     * @param billingCodeTypeTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBillingCodeTypeTagAsync(Integer billingCodeTypeId, String billingCodeTypeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBillingCodeTypeTagValidateBeforeCall(billingCodeTypeId, billingCodeTypeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteBillingCodeType
     * @param billingCodeTypeId Id of the billingCodeType to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBillingCodeTypeCall(Integer billingCodeTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billingCodeType/{billingCodeTypeId}"
            .replaceAll("\\{" + "billingCodeTypeId" + "\\}", apiClient.escapeString(billingCodeTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBillingCodeTypeValidateBeforeCall(Integer billingCodeTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingCodeTypeId' is set
        if (billingCodeTypeId == null) {
            throw new ApiException("Missing the required parameter 'billingCodeTypeId' when calling deleteBillingCodeType(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBillingCodeTypeCall(billingCodeTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a billingCodeType
     * Deletes the billingCodeType identified by the specified id.
     * @param billingCodeTypeId Id of the billingCodeType to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBillingCodeType(Integer billingCodeTypeId) throws ApiException {
        deleteBillingCodeTypeWithHttpInfo(billingCodeTypeId);
    }

    /**
     * Delete a billingCodeType
     * Deletes the billingCodeType identified by the specified id.
     * @param billingCodeTypeId Id of the billingCodeType to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBillingCodeTypeWithHttpInfo(Integer billingCodeTypeId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBillingCodeTypeValidateBeforeCall(billingCodeTypeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a billingCodeType (asynchronously)
     * Deletes the billingCodeType identified by the specified id.
     * @param billingCodeTypeId Id of the billingCodeType to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBillingCodeTypeAsync(Integer billingCodeTypeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBillingCodeTypeValidateBeforeCall(billingCodeTypeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteBillingCodeTypeFile
     * @param billingCodeTypeId Id of the billingCodeType to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBillingCodeTypeFileCall(Integer billingCodeTypeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billingCodeType/{billingCodeTypeId}/file/{fileId}"
            .replaceAll("\\{" + "billingCodeTypeId" + "\\}", apiClient.escapeString(billingCodeTypeId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBillingCodeTypeFileValidateBeforeCall(Integer billingCodeTypeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingCodeTypeId' is set
        if (billingCodeTypeId == null) {
            throw new ApiException("Missing the required parameter 'billingCodeTypeId' when calling deleteBillingCodeTypeFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteBillingCodeTypeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBillingCodeTypeFileCall(billingCodeTypeId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a billingCodeType.
     * Deletes an existing billingCodeType file using the specified data.
     * @param billingCodeTypeId Id of the billingCodeType to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBillingCodeTypeFile(Integer billingCodeTypeId, Integer fileId) throws ApiException {
        deleteBillingCodeTypeFileWithHttpInfo(billingCodeTypeId, fileId);
    }

    /**
     * Delete a file for a billingCodeType.
     * Deletes an existing billingCodeType file using the specified data.
     * @param billingCodeTypeId Id of the billingCodeType to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBillingCodeTypeFileWithHttpInfo(Integer billingCodeTypeId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBillingCodeTypeFileValidateBeforeCall(billingCodeTypeId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a billingCodeType. (asynchronously)
     * Deletes an existing billingCodeType file using the specified data.
     * @param billingCodeTypeId Id of the billingCodeType to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBillingCodeTypeFileAsync(Integer billingCodeTypeId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBillingCodeTypeFileValidateBeforeCall(billingCodeTypeId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteBillingCodeTypeTag
     * @param billingCodeTypeId Id of the billingCodeType to remove tag from (required)
     * @param billingCodeTypeTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBillingCodeTypeTagCall(Integer billingCodeTypeId, String billingCodeTypeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billingCodeType/{billingCodeTypeId}/tag/{billingCodeTypeTag}"
            .replaceAll("\\{" + "billingCodeTypeId" + "\\}", apiClient.escapeString(billingCodeTypeId.toString()))
            .replaceAll("\\{" + "billingCodeTypeTag" + "\\}", apiClient.escapeString(billingCodeTypeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBillingCodeTypeTagValidateBeforeCall(Integer billingCodeTypeId, String billingCodeTypeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingCodeTypeId' is set
        if (billingCodeTypeId == null) {
            throw new ApiException("Missing the required parameter 'billingCodeTypeId' when calling deleteBillingCodeTypeTag(Async)");
        }
        
        // verify the required parameter 'billingCodeTypeTag' is set
        if (billingCodeTypeTag == null) {
            throw new ApiException("Missing the required parameter 'billingCodeTypeTag' when calling deleteBillingCodeTypeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBillingCodeTypeTagCall(billingCodeTypeId, billingCodeTypeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a billingCodeType.
     * Deletes an existing billingCodeType tag using the specified data.
     * @param billingCodeTypeId Id of the billingCodeType to remove tag from (required)
     * @param billingCodeTypeTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBillingCodeTypeTag(Integer billingCodeTypeId, String billingCodeTypeTag) throws ApiException {
        deleteBillingCodeTypeTagWithHttpInfo(billingCodeTypeId, billingCodeTypeTag);
    }

    /**
     * Delete a tag for a billingCodeType.
     * Deletes an existing billingCodeType tag using the specified data.
     * @param billingCodeTypeId Id of the billingCodeType to remove tag from (required)
     * @param billingCodeTypeTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBillingCodeTypeTagWithHttpInfo(Integer billingCodeTypeId, String billingCodeTypeTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteBillingCodeTypeTagValidateBeforeCall(billingCodeTypeId, billingCodeTypeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a billingCodeType. (asynchronously)
     * Deletes an existing billingCodeType tag using the specified data.
     * @param billingCodeTypeId Id of the billingCodeType to remove tag from (required)
     * @param billingCodeTypeTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBillingCodeTypeTagAsync(Integer billingCodeTypeId, String billingCodeTypeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBillingCodeTypeTagValidateBeforeCall(billingCodeTypeId, billingCodeTypeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getBillingCodeTypeByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBillingCodeTypeByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billingCodeType/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBillingCodeTypeByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getBillingCodeTypeByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search billingCodeTypes by filter
     * Returns the list of billingCodeTypes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;BillingCodeType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BillingCodeType> getBillingCodeTypeByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<BillingCodeType>> resp = getBillingCodeTypeByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search billingCodeTypes by filter
     * Returns the list of billingCodeTypes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;BillingCodeType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BillingCodeType>> getBillingCodeTypeByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getBillingCodeTypeByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<BillingCodeType>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search billingCodeTypes by filter (asynchronously)
     * Returns the list of billingCodeTypes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBillingCodeTypeByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<BillingCodeType>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBillingCodeTypeByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BillingCodeType>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBillingCodeTypeById
     * @param billingCodeTypeId Id of the billingCodeType to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBillingCodeTypeByIdCall(Integer billingCodeTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billingCodeType/{billingCodeTypeId}"
            .replaceAll("\\{" + "billingCodeTypeId" + "\\}", apiClient.escapeString(billingCodeTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBillingCodeTypeByIdValidateBeforeCall(Integer billingCodeTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingCodeTypeId' is set
        if (billingCodeTypeId == null) {
            throw new ApiException("Missing the required parameter 'billingCodeTypeId' when calling getBillingCodeTypeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getBillingCodeTypeByIdCall(billingCodeTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a billingCodeType by id
     * Returns the billingCodeType identified by the specified id.
     * @param billingCodeTypeId Id of the billingCodeType to be returned. (required)
     * @return BillingCodeType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BillingCodeType getBillingCodeTypeById(Integer billingCodeTypeId) throws ApiException {
        ApiResponse<BillingCodeType> resp = getBillingCodeTypeByIdWithHttpInfo(billingCodeTypeId);
        return resp.getData();
    }

    /**
     * Get a billingCodeType by id
     * Returns the billingCodeType identified by the specified id.
     * @param billingCodeTypeId Id of the billingCodeType to be returned. (required)
     * @return ApiResponse&lt;BillingCodeType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BillingCodeType> getBillingCodeTypeByIdWithHttpInfo(Integer billingCodeTypeId) throws ApiException {
        com.squareup.okhttp.Call call = getBillingCodeTypeByIdValidateBeforeCall(billingCodeTypeId, null, null);
        Type localVarReturnType = new TypeToken<BillingCodeType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a billingCodeType by id (asynchronously)
     * Returns the billingCodeType identified by the specified id.
     * @param billingCodeTypeId Id of the billingCodeType to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBillingCodeTypeByIdAsync(Integer billingCodeTypeId, final ApiCallback<BillingCodeType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBillingCodeTypeByIdValidateBeforeCall(billingCodeTypeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BillingCodeType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBillingCodeTypeFiles
     * @param billingCodeTypeId Id of the billingCodeType to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBillingCodeTypeFilesCall(Integer billingCodeTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billingCodeType/{billingCodeTypeId}/file"
            .replaceAll("\\{" + "billingCodeTypeId" + "\\}", apiClient.escapeString(billingCodeTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBillingCodeTypeFilesValidateBeforeCall(Integer billingCodeTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingCodeTypeId' is set
        if (billingCodeTypeId == null) {
            throw new ApiException("Missing the required parameter 'billingCodeTypeId' when calling getBillingCodeTypeFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getBillingCodeTypeFilesCall(billingCodeTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a billingCodeType.
     * Get all existing billingCodeType files.
     * @param billingCodeTypeId Id of the billingCodeType to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getBillingCodeTypeFiles(Integer billingCodeTypeId) throws ApiException {
        getBillingCodeTypeFilesWithHttpInfo(billingCodeTypeId);
    }

    /**
     * Get the files for a billingCodeType.
     * Get all existing billingCodeType files.
     * @param billingCodeTypeId Id of the billingCodeType to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getBillingCodeTypeFilesWithHttpInfo(Integer billingCodeTypeId) throws ApiException {
        com.squareup.okhttp.Call call = getBillingCodeTypeFilesValidateBeforeCall(billingCodeTypeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a billingCodeType. (asynchronously)
     * Get all existing billingCodeType files.
     * @param billingCodeTypeId Id of the billingCodeType to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBillingCodeTypeFilesAsync(Integer billingCodeTypeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBillingCodeTypeFilesValidateBeforeCall(billingCodeTypeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getBillingCodeTypeTags
     * @param billingCodeTypeId Id of the billingCodeType to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBillingCodeTypeTagsCall(Integer billingCodeTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billingCodeType/{billingCodeTypeId}/tag"
            .replaceAll("\\{" + "billingCodeTypeId" + "\\}", apiClient.escapeString(billingCodeTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBillingCodeTypeTagsValidateBeforeCall(Integer billingCodeTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingCodeTypeId' is set
        if (billingCodeTypeId == null) {
            throw new ApiException("Missing the required parameter 'billingCodeTypeId' when calling getBillingCodeTypeTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getBillingCodeTypeTagsCall(billingCodeTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a billingCodeType.
     * Get all existing billingCodeType tags.
     * @param billingCodeTypeId Id of the billingCodeType to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getBillingCodeTypeTags(Integer billingCodeTypeId) throws ApiException {
        getBillingCodeTypeTagsWithHttpInfo(billingCodeTypeId);
    }

    /**
     * Get the tags for a billingCodeType.
     * Get all existing billingCodeType tags.
     * @param billingCodeTypeId Id of the billingCodeType to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getBillingCodeTypeTagsWithHttpInfo(Integer billingCodeTypeId) throws ApiException {
        com.squareup.okhttp.Call call = getBillingCodeTypeTagsValidateBeforeCall(billingCodeTypeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a billingCodeType. (asynchronously)
     * Get all existing billingCodeType tags.
     * @param billingCodeTypeId Id of the billingCodeType to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBillingCodeTypeTagsAsync(Integer billingCodeTypeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBillingCodeTypeTagsValidateBeforeCall(billingCodeTypeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateBillingCodeTypeById
     * @param billingCodeTypeId Id of the billingCodeType to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateBillingCodeTypeByIdCall(Integer billingCodeTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/billingCodeType/duplicate/{billingCodeTypeId}"
            .replaceAll("\\{" + "billingCodeTypeId" + "\\}", apiClient.escapeString(billingCodeTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateBillingCodeTypeByIdValidateBeforeCall(Integer billingCodeTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingCodeTypeId' is set
        if (billingCodeTypeId == null) {
            throw new ApiException("Missing the required parameter 'billingCodeTypeId' when calling getDuplicateBillingCodeTypeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateBillingCodeTypeByIdCall(billingCodeTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a billingCodeType by id
     * Returns a duplicated billingCodeType identified by the specified id.
     * @param billingCodeTypeId Id of the billingCodeType to be duplicated. (required)
     * @return BillingCodeType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BillingCodeType getDuplicateBillingCodeTypeById(Integer billingCodeTypeId) throws ApiException {
        ApiResponse<BillingCodeType> resp = getDuplicateBillingCodeTypeByIdWithHttpInfo(billingCodeTypeId);
        return resp.getData();
    }

    /**
     * Get a duplicated a billingCodeType by id
     * Returns a duplicated billingCodeType identified by the specified id.
     * @param billingCodeTypeId Id of the billingCodeType to be duplicated. (required)
     * @return ApiResponse&lt;BillingCodeType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BillingCodeType> getDuplicateBillingCodeTypeByIdWithHttpInfo(Integer billingCodeTypeId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateBillingCodeTypeByIdValidateBeforeCall(billingCodeTypeId, null, null);
        Type localVarReturnType = new TypeToken<BillingCodeType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a billingCodeType by id (asynchronously)
     * Returns a duplicated billingCodeType identified by the specified id.
     * @param billingCodeTypeId Id of the billingCodeType to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateBillingCodeTypeByIdAsync(Integer billingCodeTypeId, final ApiCallback<BillingCodeType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateBillingCodeTypeByIdValidateBeforeCall(billingCodeTypeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BillingCodeType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBillingCodeType
     * @param body BillingCodeType to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBillingCodeTypeCall(BillingCodeType body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/billingCodeType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBillingCodeTypeValidateBeforeCall(BillingCodeType body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateBillingCodeType(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBillingCodeTypeCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a billingCodeType
     * Updates an existing billingCodeType using the specified data.
     * @param body BillingCodeType to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateBillingCodeType(BillingCodeType body) throws ApiException {
        updateBillingCodeTypeWithHttpInfo(body);
    }

    /**
     * Update a billingCodeType
     * Updates an existing billingCodeType using the specified data.
     * @param body BillingCodeType to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateBillingCodeTypeWithHttpInfo(BillingCodeType body) throws ApiException {
        com.squareup.okhttp.Call call = updateBillingCodeTypeValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a billingCodeType (asynchronously)
     * Updates an existing billingCodeType using the specified data.
     * @param body BillingCodeType to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBillingCodeTypeAsync(BillingCodeType body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBillingCodeTypeValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateBillingCodeTypeCustomFields
     * @param body BillingCodeType to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBillingCodeTypeCustomFieldsCall(BillingCodeType body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/billingCodeType/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBillingCodeTypeCustomFieldsValidateBeforeCall(BillingCodeType body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateBillingCodeTypeCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBillingCodeTypeCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a billingCodeType custom fields
     * Updates an existing billingCodeType custom fields using the specified data.
     * @param body BillingCodeType to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateBillingCodeTypeCustomFields(BillingCodeType body) throws ApiException {
        updateBillingCodeTypeCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a billingCodeType custom fields
     * Updates an existing billingCodeType custom fields using the specified data.
     * @param body BillingCodeType to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateBillingCodeTypeCustomFieldsWithHttpInfo(BillingCodeType body) throws ApiException {
        com.squareup.okhttp.Call call = updateBillingCodeTypeCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a billingCodeType custom fields (asynchronously)
     * Updates an existing billingCodeType custom fields using the specified data.
     * @param body BillingCodeType to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBillingCodeTypeCustomFieldsAsync(BillingCodeType body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBillingCodeTypeCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
