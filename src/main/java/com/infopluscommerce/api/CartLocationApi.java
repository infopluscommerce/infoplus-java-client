/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.CartLocation;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CartLocationApi {
    private ApiClient apiClient;

    public CartLocationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CartLocationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addCartLocationAudit
     * @param cartLocationId Id of the cartLocation to add an audit to (required)
     * @param cartLocationAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addCartLocationAuditCall(Integer cartLocationId, String cartLocationAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/cartLocation/{cartLocationId}/audit/{cartLocationAudit}"
            .replaceAll("\\{" + "cartLocationId" + "\\}", apiClient.escapeString(cartLocationId.toString()))
            .replaceAll("\\{" + "cartLocationAudit" + "\\}", apiClient.escapeString(cartLocationAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCartLocationAuditValidateBeforeCall(Integer cartLocationId, String cartLocationAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cartLocationId' is set
        if (cartLocationId == null) {
            throw new ApiException("Missing the required parameter 'cartLocationId' when calling addCartLocationAudit(Async)");
        }
        
        // verify the required parameter 'cartLocationAudit' is set
        if (cartLocationAudit == null) {
            throw new ApiException("Missing the required parameter 'cartLocationAudit' when calling addCartLocationAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addCartLocationAuditCall(cartLocationId, cartLocationAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a cartLocation
     * Adds an audit to an existing cartLocation.
     * @param cartLocationId Id of the cartLocation to add an audit to (required)
     * @param cartLocationAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addCartLocationAudit(Integer cartLocationId, String cartLocationAudit) throws ApiException {
        addCartLocationAuditWithHttpInfo(cartLocationId, cartLocationAudit);
    }

    /**
     * Add new audit for a cartLocation
     * Adds an audit to an existing cartLocation.
     * @param cartLocationId Id of the cartLocation to add an audit to (required)
     * @param cartLocationAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addCartLocationAuditWithHttpInfo(Integer cartLocationId, String cartLocationAudit) throws ApiException {
        com.squareup.okhttp.Call call = addCartLocationAuditValidateBeforeCall(cartLocationId, cartLocationAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a cartLocation (asynchronously)
     * Adds an audit to an existing cartLocation.
     * @param cartLocationId Id of the cartLocation to add an audit to (required)
     * @param cartLocationAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCartLocationAuditAsync(Integer cartLocationId, String cartLocationAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCartLocationAuditValidateBeforeCall(cartLocationId, cartLocationAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addCartLocationFile
     * @param cartLocationId Id of the cartLocation to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addCartLocationFileCall(Integer cartLocationId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/cartLocation/{cartLocationId}/file/{fileName}"
            .replaceAll("\\{" + "cartLocationId" + "\\}", apiClient.escapeString(cartLocationId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCartLocationFileValidateBeforeCall(Integer cartLocationId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cartLocationId' is set
        if (cartLocationId == null) {
            throw new ApiException("Missing the required parameter 'cartLocationId' when calling addCartLocationFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addCartLocationFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addCartLocationFileCall(cartLocationId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a cartLocation
     * Adds a file to an existing cartLocation.
     * @param cartLocationId Id of the cartLocation to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addCartLocationFile(Integer cartLocationId, String fileName) throws ApiException {
        addCartLocationFileWithHttpInfo(cartLocationId, fileName);
    }

    /**
     * Attach a file to a cartLocation
     * Adds a file to an existing cartLocation.
     * @param cartLocationId Id of the cartLocation to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addCartLocationFileWithHttpInfo(Integer cartLocationId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addCartLocationFileValidateBeforeCall(cartLocationId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a cartLocation (asynchronously)
     * Adds a file to an existing cartLocation.
     * @param cartLocationId Id of the cartLocation to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCartLocationFileAsync(Integer cartLocationId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCartLocationFileValidateBeforeCall(cartLocationId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addCartLocationFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param cartLocationId Id of the cartLocation to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addCartLocationFileByURLCall(RecordFile body, Integer cartLocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/cartLocation/{cartLocationId}/file"
            .replaceAll("\\{" + "cartLocationId" + "\\}", apiClient.escapeString(cartLocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCartLocationFileByURLValidateBeforeCall(RecordFile body, Integer cartLocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addCartLocationFileByURL(Async)");
        }
        
        // verify the required parameter 'cartLocationId' is set
        if (cartLocationId == null) {
            throw new ApiException("Missing the required parameter 'cartLocationId' when calling addCartLocationFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addCartLocationFileByURLCall(body, cartLocationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a cartLocation by URL.
     * Adds a file to an existing cartLocation by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param cartLocationId Id of the cartLocation to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addCartLocationFileByURL(RecordFile body, Integer cartLocationId) throws ApiException {
        addCartLocationFileByURLWithHttpInfo(body, cartLocationId);
    }

    /**
     * Attach a file to a cartLocation by URL.
     * Adds a file to an existing cartLocation by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param cartLocationId Id of the cartLocation to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addCartLocationFileByURLWithHttpInfo(RecordFile body, Integer cartLocationId) throws ApiException {
        com.squareup.okhttp.Call call = addCartLocationFileByURLValidateBeforeCall(body, cartLocationId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a cartLocation by URL. (asynchronously)
     * Adds a file to an existing cartLocation by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param cartLocationId Id of the cartLocation to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCartLocationFileByURLAsync(RecordFile body, Integer cartLocationId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCartLocationFileByURLValidateBeforeCall(body, cartLocationId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addCartLocationTag
     * @param cartLocationId Id of the cartLocation to add a tag to (required)
     * @param cartLocationTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addCartLocationTagCall(Integer cartLocationId, String cartLocationTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/cartLocation/{cartLocationId}/tag/{cartLocationTag}"
            .replaceAll("\\{" + "cartLocationId" + "\\}", apiClient.escapeString(cartLocationId.toString()))
            .replaceAll("\\{" + "cartLocationTag" + "\\}", apiClient.escapeString(cartLocationTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCartLocationTagValidateBeforeCall(Integer cartLocationId, String cartLocationTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cartLocationId' is set
        if (cartLocationId == null) {
            throw new ApiException("Missing the required parameter 'cartLocationId' when calling addCartLocationTag(Async)");
        }
        
        // verify the required parameter 'cartLocationTag' is set
        if (cartLocationTag == null) {
            throw new ApiException("Missing the required parameter 'cartLocationTag' when calling addCartLocationTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addCartLocationTagCall(cartLocationId, cartLocationTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a cartLocation.
     * Adds a tag to an existing cartLocation.
     * @param cartLocationId Id of the cartLocation to add a tag to (required)
     * @param cartLocationTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addCartLocationTag(Integer cartLocationId, String cartLocationTag) throws ApiException {
        addCartLocationTagWithHttpInfo(cartLocationId, cartLocationTag);
    }

    /**
     * Add new tags for a cartLocation.
     * Adds a tag to an existing cartLocation.
     * @param cartLocationId Id of the cartLocation to add a tag to (required)
     * @param cartLocationTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addCartLocationTagWithHttpInfo(Integer cartLocationId, String cartLocationTag) throws ApiException {
        com.squareup.okhttp.Call call = addCartLocationTagValidateBeforeCall(cartLocationId, cartLocationTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a cartLocation. (asynchronously)
     * Adds a tag to an existing cartLocation.
     * @param cartLocationId Id of the cartLocation to add a tag to (required)
     * @param cartLocationTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCartLocationTagAsync(Integer cartLocationId, String cartLocationTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCartLocationTagValidateBeforeCall(cartLocationId, cartLocationTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteCartLocationFile
     * @param cartLocationId Id of the cartLocation to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCartLocationFileCall(Integer cartLocationId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/cartLocation/{cartLocationId}/file/{fileId}"
            .replaceAll("\\{" + "cartLocationId" + "\\}", apiClient.escapeString(cartLocationId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCartLocationFileValidateBeforeCall(Integer cartLocationId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cartLocationId' is set
        if (cartLocationId == null) {
            throw new ApiException("Missing the required parameter 'cartLocationId' when calling deleteCartLocationFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteCartLocationFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCartLocationFileCall(cartLocationId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a cartLocation.
     * Deletes an existing cartLocation file using the specified data.
     * @param cartLocationId Id of the cartLocation to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCartLocationFile(Integer cartLocationId, Integer fileId) throws ApiException {
        deleteCartLocationFileWithHttpInfo(cartLocationId, fileId);
    }

    /**
     * Delete a file for a cartLocation.
     * Deletes an existing cartLocation file using the specified data.
     * @param cartLocationId Id of the cartLocation to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCartLocationFileWithHttpInfo(Integer cartLocationId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteCartLocationFileValidateBeforeCall(cartLocationId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a cartLocation. (asynchronously)
     * Deletes an existing cartLocation file using the specified data.
     * @param cartLocationId Id of the cartLocation to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCartLocationFileAsync(Integer cartLocationId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCartLocationFileValidateBeforeCall(cartLocationId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteCartLocationTag
     * @param cartLocationId Id of the cartLocation to remove tag from (required)
     * @param cartLocationTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCartLocationTagCall(Integer cartLocationId, String cartLocationTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/cartLocation/{cartLocationId}/tag/{cartLocationTag}"
            .replaceAll("\\{" + "cartLocationId" + "\\}", apiClient.escapeString(cartLocationId.toString()))
            .replaceAll("\\{" + "cartLocationTag" + "\\}", apiClient.escapeString(cartLocationTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCartLocationTagValidateBeforeCall(Integer cartLocationId, String cartLocationTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cartLocationId' is set
        if (cartLocationId == null) {
            throw new ApiException("Missing the required parameter 'cartLocationId' when calling deleteCartLocationTag(Async)");
        }
        
        // verify the required parameter 'cartLocationTag' is set
        if (cartLocationTag == null) {
            throw new ApiException("Missing the required parameter 'cartLocationTag' when calling deleteCartLocationTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCartLocationTagCall(cartLocationId, cartLocationTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a cartLocation.
     * Deletes an existing cartLocation tag using the specified data.
     * @param cartLocationId Id of the cartLocation to remove tag from (required)
     * @param cartLocationTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCartLocationTag(Integer cartLocationId, String cartLocationTag) throws ApiException {
        deleteCartLocationTagWithHttpInfo(cartLocationId, cartLocationTag);
    }

    /**
     * Delete a tag for a cartLocation.
     * Deletes an existing cartLocation tag using the specified data.
     * @param cartLocationId Id of the cartLocation to remove tag from (required)
     * @param cartLocationTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCartLocationTagWithHttpInfo(Integer cartLocationId, String cartLocationTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteCartLocationTagValidateBeforeCall(cartLocationId, cartLocationTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a cartLocation. (asynchronously)
     * Deletes an existing cartLocation tag using the specified data.
     * @param cartLocationId Id of the cartLocation to remove tag from (required)
     * @param cartLocationTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCartLocationTagAsync(Integer cartLocationId, String cartLocationTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCartLocationTagValidateBeforeCall(cartLocationId, cartLocationTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getCartLocationByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCartLocationByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/cartLocation/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCartLocationByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getCartLocationByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search cartLocations by filter
     * Returns the list of cartLocations that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;CartLocation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CartLocation> getCartLocationByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<CartLocation>> resp = getCartLocationByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search cartLocations by filter
     * Returns the list of cartLocations that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;CartLocation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CartLocation>> getCartLocationByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getCartLocationByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<CartLocation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search cartLocations by filter (asynchronously)
     * Returns the list of cartLocations that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCartLocationByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<CartLocation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCartLocationByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CartLocation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCartLocationById
     * @param cartLocationId Id of the cartLocation to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCartLocationByIdCall(Integer cartLocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/cartLocation/{cartLocationId}"
            .replaceAll("\\{" + "cartLocationId" + "\\}", apiClient.escapeString(cartLocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCartLocationByIdValidateBeforeCall(Integer cartLocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cartLocationId' is set
        if (cartLocationId == null) {
            throw new ApiException("Missing the required parameter 'cartLocationId' when calling getCartLocationById(Async)");
        }
        

        com.squareup.okhttp.Call call = getCartLocationByIdCall(cartLocationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a cartLocation by id
     * Returns the cartLocation identified by the specified id.
     * @param cartLocationId Id of the cartLocation to be returned. (required)
     * @return CartLocation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CartLocation getCartLocationById(Integer cartLocationId) throws ApiException {
        ApiResponse<CartLocation> resp = getCartLocationByIdWithHttpInfo(cartLocationId);
        return resp.getData();
    }

    /**
     * Get a cartLocation by id
     * Returns the cartLocation identified by the specified id.
     * @param cartLocationId Id of the cartLocation to be returned. (required)
     * @return ApiResponse&lt;CartLocation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CartLocation> getCartLocationByIdWithHttpInfo(Integer cartLocationId) throws ApiException {
        com.squareup.okhttp.Call call = getCartLocationByIdValidateBeforeCall(cartLocationId, null, null);
        Type localVarReturnType = new TypeToken<CartLocation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a cartLocation by id (asynchronously)
     * Returns the cartLocation identified by the specified id.
     * @param cartLocationId Id of the cartLocation to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCartLocationByIdAsync(Integer cartLocationId, final ApiCallback<CartLocation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCartLocationByIdValidateBeforeCall(cartLocationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CartLocation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCartLocationFiles
     * @param cartLocationId Id of the cartLocation to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCartLocationFilesCall(Integer cartLocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/cartLocation/{cartLocationId}/file"
            .replaceAll("\\{" + "cartLocationId" + "\\}", apiClient.escapeString(cartLocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCartLocationFilesValidateBeforeCall(Integer cartLocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cartLocationId' is set
        if (cartLocationId == null) {
            throw new ApiException("Missing the required parameter 'cartLocationId' when calling getCartLocationFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getCartLocationFilesCall(cartLocationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a cartLocation.
     * Get all existing cartLocation files.
     * @param cartLocationId Id of the cartLocation to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getCartLocationFiles(Integer cartLocationId) throws ApiException {
        getCartLocationFilesWithHttpInfo(cartLocationId);
    }

    /**
     * Get the files for a cartLocation.
     * Get all existing cartLocation files.
     * @param cartLocationId Id of the cartLocation to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getCartLocationFilesWithHttpInfo(Integer cartLocationId) throws ApiException {
        com.squareup.okhttp.Call call = getCartLocationFilesValidateBeforeCall(cartLocationId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a cartLocation. (asynchronously)
     * Get all existing cartLocation files.
     * @param cartLocationId Id of the cartLocation to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCartLocationFilesAsync(Integer cartLocationId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCartLocationFilesValidateBeforeCall(cartLocationId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getCartLocationTags
     * @param cartLocationId Id of the cartLocation to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCartLocationTagsCall(Integer cartLocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/cartLocation/{cartLocationId}/tag"
            .replaceAll("\\{" + "cartLocationId" + "\\}", apiClient.escapeString(cartLocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCartLocationTagsValidateBeforeCall(Integer cartLocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cartLocationId' is set
        if (cartLocationId == null) {
            throw new ApiException("Missing the required parameter 'cartLocationId' when calling getCartLocationTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getCartLocationTagsCall(cartLocationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a cartLocation.
     * Get all existing cartLocation tags.
     * @param cartLocationId Id of the cartLocation to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getCartLocationTags(Integer cartLocationId) throws ApiException {
        getCartLocationTagsWithHttpInfo(cartLocationId);
    }

    /**
     * Get the tags for a cartLocation.
     * Get all existing cartLocation tags.
     * @param cartLocationId Id of the cartLocation to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getCartLocationTagsWithHttpInfo(Integer cartLocationId) throws ApiException {
        com.squareup.okhttp.Call call = getCartLocationTagsValidateBeforeCall(cartLocationId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a cartLocation. (asynchronously)
     * Get all existing cartLocation tags.
     * @param cartLocationId Id of the cartLocation to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCartLocationTagsAsync(Integer cartLocationId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCartLocationTagsValidateBeforeCall(cartLocationId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateCartLocationById
     * @param cartLocationId Id of the cartLocation to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateCartLocationByIdCall(Integer cartLocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/cartLocation/duplicate/{cartLocationId}"
            .replaceAll("\\{" + "cartLocationId" + "\\}", apiClient.escapeString(cartLocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateCartLocationByIdValidateBeforeCall(Integer cartLocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cartLocationId' is set
        if (cartLocationId == null) {
            throw new ApiException("Missing the required parameter 'cartLocationId' when calling getDuplicateCartLocationById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateCartLocationByIdCall(cartLocationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a cartLocation by id
     * Returns a duplicated cartLocation identified by the specified id.
     * @param cartLocationId Id of the cartLocation to be duplicated. (required)
     * @return CartLocation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CartLocation getDuplicateCartLocationById(Integer cartLocationId) throws ApiException {
        ApiResponse<CartLocation> resp = getDuplicateCartLocationByIdWithHttpInfo(cartLocationId);
        return resp.getData();
    }

    /**
     * Get a duplicated a cartLocation by id
     * Returns a duplicated cartLocation identified by the specified id.
     * @param cartLocationId Id of the cartLocation to be duplicated. (required)
     * @return ApiResponse&lt;CartLocation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CartLocation> getDuplicateCartLocationByIdWithHttpInfo(Integer cartLocationId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateCartLocationByIdValidateBeforeCall(cartLocationId, null, null);
        Type localVarReturnType = new TypeToken<CartLocation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a cartLocation by id (asynchronously)
     * Returns a duplicated cartLocation identified by the specified id.
     * @param cartLocationId Id of the cartLocation to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateCartLocationByIdAsync(Integer cartLocationId, final ApiCallback<CartLocation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateCartLocationByIdValidateBeforeCall(cartLocationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CartLocation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
