/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.OrderSourceReservation;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrderSourceReservationApi {
    private ApiClient apiClient;

    public OrderSourceReservationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrderSourceReservationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addOrderSourceReservation
     * @param body OrderSourceReservation to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceReservationCall(OrderSourceReservation body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/orderSourceReservation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOrderSourceReservationValidateBeforeCall(OrderSourceReservation body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addOrderSourceReservation(Async)");
        }
        

        com.squareup.okhttp.Call call = addOrderSourceReservationCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an orderSourceReservation
     * Inserts a new orderSourceReservation using the specified data.
     * @param body OrderSourceReservation to be inserted. (required)
     * @return OrderSourceReservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderSourceReservation addOrderSourceReservation(OrderSourceReservation body) throws ApiException {
        ApiResponse<OrderSourceReservation> resp = addOrderSourceReservationWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create an orderSourceReservation
     * Inserts a new orderSourceReservation using the specified data.
     * @param body OrderSourceReservation to be inserted. (required)
     * @return ApiResponse&lt;OrderSourceReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderSourceReservation> addOrderSourceReservationWithHttpInfo(OrderSourceReservation body) throws ApiException {
        com.squareup.okhttp.Call call = addOrderSourceReservationValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<OrderSourceReservation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an orderSourceReservation (asynchronously)
     * Inserts a new orderSourceReservation using the specified data.
     * @param body OrderSourceReservation to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceReservationAsync(OrderSourceReservation body, final ApiCallback<OrderSourceReservation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrderSourceReservationValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderSourceReservation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addOrderSourceReservationAudit
     * @param orderSourceReservationId Id of the orderSourceReservation to add an audit to (required)
     * @param orderSourceReservationAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceReservationAuditCall(Integer orderSourceReservationId, String orderSourceReservationAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceReservation/{orderSourceReservationId}/audit/{orderSourceReservationAudit}"
            .replaceAll("\\{" + "orderSourceReservationId" + "\\}", apiClient.escapeString(orderSourceReservationId.toString()))
            .replaceAll("\\{" + "orderSourceReservationAudit" + "\\}", apiClient.escapeString(orderSourceReservationAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOrderSourceReservationAuditValidateBeforeCall(Integer orderSourceReservationId, String orderSourceReservationAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceReservationId' is set
        if (orderSourceReservationId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceReservationId' when calling addOrderSourceReservationAudit(Async)");
        }
        
        // verify the required parameter 'orderSourceReservationAudit' is set
        if (orderSourceReservationAudit == null) {
            throw new ApiException("Missing the required parameter 'orderSourceReservationAudit' when calling addOrderSourceReservationAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addOrderSourceReservationAuditCall(orderSourceReservationId, orderSourceReservationAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for an orderSourceReservation
     * Adds an audit to an existing orderSourceReservation.
     * @param orderSourceReservationId Id of the orderSourceReservation to add an audit to (required)
     * @param orderSourceReservationAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOrderSourceReservationAudit(Integer orderSourceReservationId, String orderSourceReservationAudit) throws ApiException {
        addOrderSourceReservationAuditWithHttpInfo(orderSourceReservationId, orderSourceReservationAudit);
    }

    /**
     * Add new audit for an orderSourceReservation
     * Adds an audit to an existing orderSourceReservation.
     * @param orderSourceReservationId Id of the orderSourceReservation to add an audit to (required)
     * @param orderSourceReservationAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOrderSourceReservationAuditWithHttpInfo(Integer orderSourceReservationId, String orderSourceReservationAudit) throws ApiException {
        com.squareup.okhttp.Call call = addOrderSourceReservationAuditValidateBeforeCall(orderSourceReservationId, orderSourceReservationAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for an orderSourceReservation (asynchronously)
     * Adds an audit to an existing orderSourceReservation.
     * @param orderSourceReservationId Id of the orderSourceReservation to add an audit to (required)
     * @param orderSourceReservationAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceReservationAuditAsync(Integer orderSourceReservationId, String orderSourceReservationAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrderSourceReservationAuditValidateBeforeCall(orderSourceReservationId, orderSourceReservationAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addOrderSourceReservationFile
     * @param orderSourceReservationId Id of the orderSourceReservation to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceReservationFileCall(Integer orderSourceReservationId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceReservation/{orderSourceReservationId}/file/{fileName}"
            .replaceAll("\\{" + "orderSourceReservationId" + "\\}", apiClient.escapeString(orderSourceReservationId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOrderSourceReservationFileValidateBeforeCall(Integer orderSourceReservationId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceReservationId' is set
        if (orderSourceReservationId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceReservationId' when calling addOrderSourceReservationFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addOrderSourceReservationFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addOrderSourceReservationFileCall(orderSourceReservationId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an orderSourceReservation
     * Adds a file to an existing orderSourceReservation.
     * @param orderSourceReservationId Id of the orderSourceReservation to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOrderSourceReservationFile(Integer orderSourceReservationId, String fileName) throws ApiException {
        addOrderSourceReservationFileWithHttpInfo(orderSourceReservationId, fileName);
    }

    /**
     * Attach a file to an orderSourceReservation
     * Adds a file to an existing orderSourceReservation.
     * @param orderSourceReservationId Id of the orderSourceReservation to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOrderSourceReservationFileWithHttpInfo(Integer orderSourceReservationId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addOrderSourceReservationFileValidateBeforeCall(orderSourceReservationId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an orderSourceReservation (asynchronously)
     * Adds a file to an existing orderSourceReservation.
     * @param orderSourceReservationId Id of the orderSourceReservation to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceReservationFileAsync(Integer orderSourceReservationId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrderSourceReservationFileValidateBeforeCall(orderSourceReservationId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addOrderSourceReservationFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param orderSourceReservationId Id of the orderSourceReservation to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceReservationFileByURLCall(RecordFile body, Integer orderSourceReservationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/orderSourceReservation/{orderSourceReservationId}/file"
            .replaceAll("\\{" + "orderSourceReservationId" + "\\}", apiClient.escapeString(orderSourceReservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOrderSourceReservationFileByURLValidateBeforeCall(RecordFile body, Integer orderSourceReservationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addOrderSourceReservationFileByURL(Async)");
        }
        
        // verify the required parameter 'orderSourceReservationId' is set
        if (orderSourceReservationId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceReservationId' when calling addOrderSourceReservationFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addOrderSourceReservationFileByURLCall(body, orderSourceReservationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an orderSourceReservation by URL.
     * Adds a file to an existing orderSourceReservation by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param orderSourceReservationId Id of the orderSourceReservation to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOrderSourceReservationFileByURL(RecordFile body, Integer orderSourceReservationId) throws ApiException {
        addOrderSourceReservationFileByURLWithHttpInfo(body, orderSourceReservationId);
    }

    /**
     * Attach a file to an orderSourceReservation by URL.
     * Adds a file to an existing orderSourceReservation by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param orderSourceReservationId Id of the orderSourceReservation to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOrderSourceReservationFileByURLWithHttpInfo(RecordFile body, Integer orderSourceReservationId) throws ApiException {
        com.squareup.okhttp.Call call = addOrderSourceReservationFileByURLValidateBeforeCall(body, orderSourceReservationId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an orderSourceReservation by URL. (asynchronously)
     * Adds a file to an existing orderSourceReservation by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param orderSourceReservationId Id of the orderSourceReservation to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceReservationFileByURLAsync(RecordFile body, Integer orderSourceReservationId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrderSourceReservationFileByURLValidateBeforeCall(body, orderSourceReservationId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addOrderSourceReservationTag
     * @param orderSourceReservationId Id of the orderSourceReservation to add a tag to (required)
     * @param orderSourceReservationTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceReservationTagCall(Integer orderSourceReservationId, String orderSourceReservationTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceReservation/{orderSourceReservationId}/tag/{orderSourceReservationTag}"
            .replaceAll("\\{" + "orderSourceReservationId" + "\\}", apiClient.escapeString(orderSourceReservationId.toString()))
            .replaceAll("\\{" + "orderSourceReservationTag" + "\\}", apiClient.escapeString(orderSourceReservationTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOrderSourceReservationTagValidateBeforeCall(Integer orderSourceReservationId, String orderSourceReservationTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceReservationId' is set
        if (orderSourceReservationId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceReservationId' when calling addOrderSourceReservationTag(Async)");
        }
        
        // verify the required parameter 'orderSourceReservationTag' is set
        if (orderSourceReservationTag == null) {
            throw new ApiException("Missing the required parameter 'orderSourceReservationTag' when calling addOrderSourceReservationTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addOrderSourceReservationTagCall(orderSourceReservationId, orderSourceReservationTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for an orderSourceReservation.
     * Adds a tag to an existing orderSourceReservation.
     * @param orderSourceReservationId Id of the orderSourceReservation to add a tag to (required)
     * @param orderSourceReservationTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOrderSourceReservationTag(Integer orderSourceReservationId, String orderSourceReservationTag) throws ApiException {
        addOrderSourceReservationTagWithHttpInfo(orderSourceReservationId, orderSourceReservationTag);
    }

    /**
     * Add new tags for an orderSourceReservation.
     * Adds a tag to an existing orderSourceReservation.
     * @param orderSourceReservationId Id of the orderSourceReservation to add a tag to (required)
     * @param orderSourceReservationTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOrderSourceReservationTagWithHttpInfo(Integer orderSourceReservationId, String orderSourceReservationTag) throws ApiException {
        com.squareup.okhttp.Call call = addOrderSourceReservationTagValidateBeforeCall(orderSourceReservationId, orderSourceReservationTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for an orderSourceReservation. (asynchronously)
     * Adds a tag to an existing orderSourceReservation.
     * @param orderSourceReservationId Id of the orderSourceReservation to add a tag to (required)
     * @param orderSourceReservationTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceReservationTagAsync(Integer orderSourceReservationId, String orderSourceReservationTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrderSourceReservationTagValidateBeforeCall(orderSourceReservationId, orderSourceReservationTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteOrderSourceReservation
     * @param orderSourceReservationId Id of the orderSourceReservation to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOrderSourceReservationCall(Integer orderSourceReservationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceReservation/{orderSourceReservationId}"
            .replaceAll("\\{" + "orderSourceReservationId" + "\\}", apiClient.escapeString(orderSourceReservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOrderSourceReservationValidateBeforeCall(Integer orderSourceReservationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceReservationId' is set
        if (orderSourceReservationId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceReservationId' when calling deleteOrderSourceReservation(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOrderSourceReservationCall(orderSourceReservationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an orderSourceReservation
     * Deletes the orderSourceReservation identified by the specified id.
     * @param orderSourceReservationId Id of the orderSourceReservation to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteOrderSourceReservation(Integer orderSourceReservationId) throws ApiException {
        deleteOrderSourceReservationWithHttpInfo(orderSourceReservationId);
    }

    /**
     * Delete an orderSourceReservation
     * Deletes the orderSourceReservation identified by the specified id.
     * @param orderSourceReservationId Id of the orderSourceReservation to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteOrderSourceReservationWithHttpInfo(Integer orderSourceReservationId) throws ApiException {
        com.squareup.okhttp.Call call = deleteOrderSourceReservationValidateBeforeCall(orderSourceReservationId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an orderSourceReservation (asynchronously)
     * Deletes the orderSourceReservation identified by the specified id.
     * @param orderSourceReservationId Id of the orderSourceReservation to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOrderSourceReservationAsync(Integer orderSourceReservationId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOrderSourceReservationValidateBeforeCall(orderSourceReservationId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteOrderSourceReservationFile
     * @param orderSourceReservationId Id of the orderSourceReservation to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOrderSourceReservationFileCall(Integer orderSourceReservationId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceReservation/{orderSourceReservationId}/file/{fileId}"
            .replaceAll("\\{" + "orderSourceReservationId" + "\\}", apiClient.escapeString(orderSourceReservationId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOrderSourceReservationFileValidateBeforeCall(Integer orderSourceReservationId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceReservationId' is set
        if (orderSourceReservationId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceReservationId' when calling deleteOrderSourceReservationFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteOrderSourceReservationFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOrderSourceReservationFileCall(orderSourceReservationId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for an orderSourceReservation.
     * Deletes an existing orderSourceReservation file using the specified data.
     * @param orderSourceReservationId Id of the orderSourceReservation to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteOrderSourceReservationFile(Integer orderSourceReservationId, Integer fileId) throws ApiException {
        deleteOrderSourceReservationFileWithHttpInfo(orderSourceReservationId, fileId);
    }

    /**
     * Delete a file for an orderSourceReservation.
     * Deletes an existing orderSourceReservation file using the specified data.
     * @param orderSourceReservationId Id of the orderSourceReservation to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteOrderSourceReservationFileWithHttpInfo(Integer orderSourceReservationId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteOrderSourceReservationFileValidateBeforeCall(orderSourceReservationId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for an orderSourceReservation. (asynchronously)
     * Deletes an existing orderSourceReservation file using the specified data.
     * @param orderSourceReservationId Id of the orderSourceReservation to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOrderSourceReservationFileAsync(Integer orderSourceReservationId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOrderSourceReservationFileValidateBeforeCall(orderSourceReservationId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteOrderSourceReservationTag
     * @param orderSourceReservationId Id of the orderSourceReservation to remove tag from (required)
     * @param orderSourceReservationTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOrderSourceReservationTagCall(Integer orderSourceReservationId, String orderSourceReservationTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceReservation/{orderSourceReservationId}/tag/{orderSourceReservationTag}"
            .replaceAll("\\{" + "orderSourceReservationId" + "\\}", apiClient.escapeString(orderSourceReservationId.toString()))
            .replaceAll("\\{" + "orderSourceReservationTag" + "\\}", apiClient.escapeString(orderSourceReservationTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOrderSourceReservationTagValidateBeforeCall(Integer orderSourceReservationId, String orderSourceReservationTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceReservationId' is set
        if (orderSourceReservationId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceReservationId' when calling deleteOrderSourceReservationTag(Async)");
        }
        
        // verify the required parameter 'orderSourceReservationTag' is set
        if (orderSourceReservationTag == null) {
            throw new ApiException("Missing the required parameter 'orderSourceReservationTag' when calling deleteOrderSourceReservationTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOrderSourceReservationTagCall(orderSourceReservationId, orderSourceReservationTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for an orderSourceReservation.
     * Deletes an existing orderSourceReservation tag using the specified data.
     * @param orderSourceReservationId Id of the orderSourceReservation to remove tag from (required)
     * @param orderSourceReservationTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteOrderSourceReservationTag(Integer orderSourceReservationId, String orderSourceReservationTag) throws ApiException {
        deleteOrderSourceReservationTagWithHttpInfo(orderSourceReservationId, orderSourceReservationTag);
    }

    /**
     * Delete a tag for an orderSourceReservation.
     * Deletes an existing orderSourceReservation tag using the specified data.
     * @param orderSourceReservationId Id of the orderSourceReservation to remove tag from (required)
     * @param orderSourceReservationTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteOrderSourceReservationTagWithHttpInfo(Integer orderSourceReservationId, String orderSourceReservationTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteOrderSourceReservationTagValidateBeforeCall(orderSourceReservationId, orderSourceReservationTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for an orderSourceReservation. (asynchronously)
     * Deletes an existing orderSourceReservation tag using the specified data.
     * @param orderSourceReservationId Id of the orderSourceReservation to remove tag from (required)
     * @param orderSourceReservationTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOrderSourceReservationTagAsync(Integer orderSourceReservationId, String orderSourceReservationTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOrderSourceReservationTagValidateBeforeCall(orderSourceReservationId, orderSourceReservationTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateOrderSourceReservationById
     * @param orderSourceReservationId Id of the orderSourceReservation to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateOrderSourceReservationByIdCall(Integer orderSourceReservationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceReservation/duplicate/{orderSourceReservationId}"
            .replaceAll("\\{" + "orderSourceReservationId" + "\\}", apiClient.escapeString(orderSourceReservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateOrderSourceReservationByIdValidateBeforeCall(Integer orderSourceReservationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceReservationId' is set
        if (orderSourceReservationId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceReservationId' when calling getDuplicateOrderSourceReservationById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateOrderSourceReservationByIdCall(orderSourceReservationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated an orderSourceReservation by id
     * Returns a duplicated orderSourceReservation identified by the specified id.
     * @param orderSourceReservationId Id of the orderSourceReservation to be duplicated. (required)
     * @return OrderSourceReservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderSourceReservation getDuplicateOrderSourceReservationById(Integer orderSourceReservationId) throws ApiException {
        ApiResponse<OrderSourceReservation> resp = getDuplicateOrderSourceReservationByIdWithHttpInfo(orderSourceReservationId);
        return resp.getData();
    }

    /**
     * Get a duplicated an orderSourceReservation by id
     * Returns a duplicated orderSourceReservation identified by the specified id.
     * @param orderSourceReservationId Id of the orderSourceReservation to be duplicated. (required)
     * @return ApiResponse&lt;OrderSourceReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderSourceReservation> getDuplicateOrderSourceReservationByIdWithHttpInfo(Integer orderSourceReservationId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateOrderSourceReservationByIdValidateBeforeCall(orderSourceReservationId, null, null);
        Type localVarReturnType = new TypeToken<OrderSourceReservation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated an orderSourceReservation by id (asynchronously)
     * Returns a duplicated orderSourceReservation identified by the specified id.
     * @param orderSourceReservationId Id of the orderSourceReservation to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateOrderSourceReservationByIdAsync(Integer orderSourceReservationId, final ApiCallback<OrderSourceReservation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateOrderSourceReservationByIdValidateBeforeCall(orderSourceReservationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderSourceReservation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderSourceReservationByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderSourceReservationByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceReservation/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderSourceReservationByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getOrderSourceReservationByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search orderSourceReservations by filter
     * Returns the list of orderSourceReservations that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;OrderSourceReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OrderSourceReservation> getOrderSourceReservationByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<OrderSourceReservation>> resp = getOrderSourceReservationByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search orderSourceReservations by filter
     * Returns the list of orderSourceReservations that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;OrderSourceReservation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OrderSourceReservation>> getOrderSourceReservationByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getOrderSourceReservationByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<OrderSourceReservation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search orderSourceReservations by filter (asynchronously)
     * Returns the list of orderSourceReservations that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderSourceReservationByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<OrderSourceReservation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderSourceReservationByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OrderSourceReservation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderSourceReservationById
     * @param orderSourceReservationId Id of the orderSourceReservation to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderSourceReservationByIdCall(Integer orderSourceReservationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceReservation/{orderSourceReservationId}"
            .replaceAll("\\{" + "orderSourceReservationId" + "\\}", apiClient.escapeString(orderSourceReservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderSourceReservationByIdValidateBeforeCall(Integer orderSourceReservationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceReservationId' is set
        if (orderSourceReservationId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceReservationId' when calling getOrderSourceReservationById(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderSourceReservationByIdCall(orderSourceReservationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an orderSourceReservation by id
     * Returns the orderSourceReservation identified by the specified id.
     * @param orderSourceReservationId Id of the orderSourceReservation to be returned. (required)
     * @return OrderSourceReservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderSourceReservation getOrderSourceReservationById(Integer orderSourceReservationId) throws ApiException {
        ApiResponse<OrderSourceReservation> resp = getOrderSourceReservationByIdWithHttpInfo(orderSourceReservationId);
        return resp.getData();
    }

    /**
     * Get an orderSourceReservation by id
     * Returns the orderSourceReservation identified by the specified id.
     * @param orderSourceReservationId Id of the orderSourceReservation to be returned. (required)
     * @return ApiResponse&lt;OrderSourceReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderSourceReservation> getOrderSourceReservationByIdWithHttpInfo(Integer orderSourceReservationId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderSourceReservationByIdValidateBeforeCall(orderSourceReservationId, null, null);
        Type localVarReturnType = new TypeToken<OrderSourceReservation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an orderSourceReservation by id (asynchronously)
     * Returns the orderSourceReservation identified by the specified id.
     * @param orderSourceReservationId Id of the orderSourceReservation to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderSourceReservationByIdAsync(Integer orderSourceReservationId, final ApiCallback<OrderSourceReservation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderSourceReservationByIdValidateBeforeCall(orderSourceReservationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderSourceReservation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderSourceReservationFiles
     * @param orderSourceReservationId Id of the orderSourceReservation to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderSourceReservationFilesCall(Integer orderSourceReservationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceReservation/{orderSourceReservationId}/file"
            .replaceAll("\\{" + "orderSourceReservationId" + "\\}", apiClient.escapeString(orderSourceReservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderSourceReservationFilesValidateBeforeCall(Integer orderSourceReservationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceReservationId' is set
        if (orderSourceReservationId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceReservationId' when calling getOrderSourceReservationFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderSourceReservationFilesCall(orderSourceReservationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for an orderSourceReservation.
     * Get all existing orderSourceReservation files.
     * @param orderSourceReservationId Id of the orderSourceReservation to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getOrderSourceReservationFiles(Integer orderSourceReservationId) throws ApiException {
        getOrderSourceReservationFilesWithHttpInfo(orderSourceReservationId);
    }

    /**
     * Get the files for an orderSourceReservation.
     * Get all existing orderSourceReservation files.
     * @param orderSourceReservationId Id of the orderSourceReservation to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getOrderSourceReservationFilesWithHttpInfo(Integer orderSourceReservationId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderSourceReservationFilesValidateBeforeCall(orderSourceReservationId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for an orderSourceReservation. (asynchronously)
     * Get all existing orderSourceReservation files.
     * @param orderSourceReservationId Id of the orderSourceReservation to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderSourceReservationFilesAsync(Integer orderSourceReservationId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderSourceReservationFilesValidateBeforeCall(orderSourceReservationId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getOrderSourceReservationTags
     * @param orderSourceReservationId Id of the orderSourceReservation to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderSourceReservationTagsCall(Integer orderSourceReservationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceReservation/{orderSourceReservationId}/tag"
            .replaceAll("\\{" + "orderSourceReservationId" + "\\}", apiClient.escapeString(orderSourceReservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderSourceReservationTagsValidateBeforeCall(Integer orderSourceReservationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceReservationId' is set
        if (orderSourceReservationId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceReservationId' when calling getOrderSourceReservationTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderSourceReservationTagsCall(orderSourceReservationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for an orderSourceReservation.
     * Get all existing orderSourceReservation tags.
     * @param orderSourceReservationId Id of the orderSourceReservation to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getOrderSourceReservationTags(Integer orderSourceReservationId) throws ApiException {
        getOrderSourceReservationTagsWithHttpInfo(orderSourceReservationId);
    }

    /**
     * Get the tags for an orderSourceReservation.
     * Get all existing orderSourceReservation tags.
     * @param orderSourceReservationId Id of the orderSourceReservation to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getOrderSourceReservationTagsWithHttpInfo(Integer orderSourceReservationId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderSourceReservationTagsValidateBeforeCall(orderSourceReservationId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for an orderSourceReservation. (asynchronously)
     * Get all existing orderSourceReservation tags.
     * @param orderSourceReservationId Id of the orderSourceReservation to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderSourceReservationTagsAsync(Integer orderSourceReservationId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderSourceReservationTagsValidateBeforeCall(orderSourceReservationId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateOrderSourceReservation
     * @param body OrderSourceReservation to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateOrderSourceReservationCall(OrderSourceReservation body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/orderSourceReservation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOrderSourceReservationValidateBeforeCall(OrderSourceReservation body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateOrderSourceReservation(Async)");
        }
        

        com.squareup.okhttp.Call call = updateOrderSourceReservationCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an orderSourceReservation
     * Updates an existing orderSourceReservation using the specified data.
     * @param body OrderSourceReservation to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateOrderSourceReservation(OrderSourceReservation body) throws ApiException {
        updateOrderSourceReservationWithHttpInfo(body);
    }

    /**
     * Update an orderSourceReservation
     * Updates an existing orderSourceReservation using the specified data.
     * @param body OrderSourceReservation to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateOrderSourceReservationWithHttpInfo(OrderSourceReservation body) throws ApiException {
        com.squareup.okhttp.Call call = updateOrderSourceReservationValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an orderSourceReservation (asynchronously)
     * Updates an existing orderSourceReservation using the specified data.
     * @param body OrderSourceReservation to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOrderSourceReservationAsync(OrderSourceReservation body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOrderSourceReservationValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateOrderSourceReservationCustomFields
     * @param body OrderSourceReservation to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateOrderSourceReservationCustomFieldsCall(OrderSourceReservation body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/orderSourceReservation/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOrderSourceReservationCustomFieldsValidateBeforeCall(OrderSourceReservation body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateOrderSourceReservationCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateOrderSourceReservationCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an orderSourceReservation custom fields
     * Updates an existing orderSourceReservation custom fields using the specified data.
     * @param body OrderSourceReservation to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateOrderSourceReservationCustomFields(OrderSourceReservation body) throws ApiException {
        updateOrderSourceReservationCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update an orderSourceReservation custom fields
     * Updates an existing orderSourceReservation custom fields using the specified data.
     * @param body OrderSourceReservation to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateOrderSourceReservationCustomFieldsWithHttpInfo(OrderSourceReservation body) throws ApiException {
        com.squareup.okhttp.Call call = updateOrderSourceReservationCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an orderSourceReservation custom fields (asynchronously)
     * Updates an existing orderSourceReservation custom fields using the specified data.
     * @param body OrderSourceReservation to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOrderSourceReservationCustomFieldsAsync(OrderSourceReservation body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOrderSourceReservationCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
