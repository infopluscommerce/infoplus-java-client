/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.ReceivingWorksheet;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReceivingWorksheetApi {
    private ApiClient apiClient;

    public ReceivingWorksheetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReceivingWorksheetApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addReceivingWorksheet
     * @param body ReceivingWorksheet to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addReceivingWorksheetCall(ReceivingWorksheet body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/receivingWorksheet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addReceivingWorksheetValidateBeforeCall(ReceivingWorksheet body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addReceivingWorksheet(Async)");
        }
        

        com.squareup.okhttp.Call call = addReceivingWorksheetCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a receivingWorksheet
     * Inserts a new receivingWorksheet using the specified data.
     * @param body ReceivingWorksheet to be inserted. (required)
     * @return ReceivingWorksheet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReceivingWorksheet addReceivingWorksheet(ReceivingWorksheet body) throws ApiException {
        ApiResponse<ReceivingWorksheet> resp = addReceivingWorksheetWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a receivingWorksheet
     * Inserts a new receivingWorksheet using the specified data.
     * @param body ReceivingWorksheet to be inserted. (required)
     * @return ApiResponse&lt;ReceivingWorksheet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReceivingWorksheet> addReceivingWorksheetWithHttpInfo(ReceivingWorksheet body) throws ApiException {
        com.squareup.okhttp.Call call = addReceivingWorksheetValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ReceivingWorksheet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a receivingWorksheet (asynchronously)
     * Inserts a new receivingWorksheet using the specified data.
     * @param body ReceivingWorksheet to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addReceivingWorksheetAsync(ReceivingWorksheet body, final ApiCallback<ReceivingWorksheet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addReceivingWorksheetValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReceivingWorksheet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addReceivingWorksheetAudit
     * @param receivingWorksheetId Id of the receivingWorksheet to add an audit to (required)
     * @param receivingWorksheetAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addReceivingWorksheetAuditCall(Integer receivingWorksheetId, String receivingWorksheetAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/receivingWorksheet/{receivingWorksheetId}/audit/{receivingWorksheetAudit}"
            .replaceAll("\\{" + "receivingWorksheetId" + "\\}", apiClient.escapeString(receivingWorksheetId.toString()))
            .replaceAll("\\{" + "receivingWorksheetAudit" + "\\}", apiClient.escapeString(receivingWorksheetAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addReceivingWorksheetAuditValidateBeforeCall(Integer receivingWorksheetId, String receivingWorksheetAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'receivingWorksheetId' is set
        if (receivingWorksheetId == null) {
            throw new ApiException("Missing the required parameter 'receivingWorksheetId' when calling addReceivingWorksheetAudit(Async)");
        }
        
        // verify the required parameter 'receivingWorksheetAudit' is set
        if (receivingWorksheetAudit == null) {
            throw new ApiException("Missing the required parameter 'receivingWorksheetAudit' when calling addReceivingWorksheetAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addReceivingWorksheetAuditCall(receivingWorksheetId, receivingWorksheetAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a receivingWorksheet
     * Adds an audit to an existing receivingWorksheet.
     * @param receivingWorksheetId Id of the receivingWorksheet to add an audit to (required)
     * @param receivingWorksheetAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addReceivingWorksheetAudit(Integer receivingWorksheetId, String receivingWorksheetAudit) throws ApiException {
        addReceivingWorksheetAuditWithHttpInfo(receivingWorksheetId, receivingWorksheetAudit);
    }

    /**
     * Add new audit for a receivingWorksheet
     * Adds an audit to an existing receivingWorksheet.
     * @param receivingWorksheetId Id of the receivingWorksheet to add an audit to (required)
     * @param receivingWorksheetAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addReceivingWorksheetAuditWithHttpInfo(Integer receivingWorksheetId, String receivingWorksheetAudit) throws ApiException {
        com.squareup.okhttp.Call call = addReceivingWorksheetAuditValidateBeforeCall(receivingWorksheetId, receivingWorksheetAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a receivingWorksheet (asynchronously)
     * Adds an audit to an existing receivingWorksheet.
     * @param receivingWorksheetId Id of the receivingWorksheet to add an audit to (required)
     * @param receivingWorksheetAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addReceivingWorksheetAuditAsync(Integer receivingWorksheetId, String receivingWorksheetAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addReceivingWorksheetAuditValidateBeforeCall(receivingWorksheetId, receivingWorksheetAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addReceivingWorksheetFile
     * @param receivingWorksheetId Id of the receivingWorksheet to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addReceivingWorksheetFileCall(Integer receivingWorksheetId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/receivingWorksheet/{receivingWorksheetId}/file/{fileName}"
            .replaceAll("\\{" + "receivingWorksheetId" + "\\}", apiClient.escapeString(receivingWorksheetId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addReceivingWorksheetFileValidateBeforeCall(Integer receivingWorksheetId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'receivingWorksheetId' is set
        if (receivingWorksheetId == null) {
            throw new ApiException("Missing the required parameter 'receivingWorksheetId' when calling addReceivingWorksheetFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addReceivingWorksheetFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addReceivingWorksheetFileCall(receivingWorksheetId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a receivingWorksheet
     * Adds a file to an existing receivingWorksheet.
     * @param receivingWorksheetId Id of the receivingWorksheet to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addReceivingWorksheetFile(Integer receivingWorksheetId, String fileName) throws ApiException {
        addReceivingWorksheetFileWithHttpInfo(receivingWorksheetId, fileName);
    }

    /**
     * Attach a file to a receivingWorksheet
     * Adds a file to an existing receivingWorksheet.
     * @param receivingWorksheetId Id of the receivingWorksheet to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addReceivingWorksheetFileWithHttpInfo(Integer receivingWorksheetId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addReceivingWorksheetFileValidateBeforeCall(receivingWorksheetId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a receivingWorksheet (asynchronously)
     * Adds a file to an existing receivingWorksheet.
     * @param receivingWorksheetId Id of the receivingWorksheet to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addReceivingWorksheetFileAsync(Integer receivingWorksheetId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addReceivingWorksheetFileValidateBeforeCall(receivingWorksheetId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addReceivingWorksheetFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param receivingWorksheetId Id of the receivingWorksheet to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addReceivingWorksheetFileByURLCall(RecordFile body, Integer receivingWorksheetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/receivingWorksheet/{receivingWorksheetId}/file"
            .replaceAll("\\{" + "receivingWorksheetId" + "\\}", apiClient.escapeString(receivingWorksheetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addReceivingWorksheetFileByURLValidateBeforeCall(RecordFile body, Integer receivingWorksheetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addReceivingWorksheetFileByURL(Async)");
        }
        
        // verify the required parameter 'receivingWorksheetId' is set
        if (receivingWorksheetId == null) {
            throw new ApiException("Missing the required parameter 'receivingWorksheetId' when calling addReceivingWorksheetFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addReceivingWorksheetFileByURLCall(body, receivingWorksheetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a receivingWorksheet by URL.
     * Adds a file to an existing receivingWorksheet by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param receivingWorksheetId Id of the receivingWorksheet to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addReceivingWorksheetFileByURL(RecordFile body, Integer receivingWorksheetId) throws ApiException {
        addReceivingWorksheetFileByURLWithHttpInfo(body, receivingWorksheetId);
    }

    /**
     * Attach a file to a receivingWorksheet by URL.
     * Adds a file to an existing receivingWorksheet by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param receivingWorksheetId Id of the receivingWorksheet to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addReceivingWorksheetFileByURLWithHttpInfo(RecordFile body, Integer receivingWorksheetId) throws ApiException {
        com.squareup.okhttp.Call call = addReceivingWorksheetFileByURLValidateBeforeCall(body, receivingWorksheetId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a receivingWorksheet by URL. (asynchronously)
     * Adds a file to an existing receivingWorksheet by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param receivingWorksheetId Id of the receivingWorksheet to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addReceivingWorksheetFileByURLAsync(RecordFile body, Integer receivingWorksheetId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addReceivingWorksheetFileByURLValidateBeforeCall(body, receivingWorksheetId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addReceivingWorksheetTag
     * @param receivingWorksheetId Id of the receivingWorksheet to add a tag to (required)
     * @param receivingWorksheetTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addReceivingWorksheetTagCall(Integer receivingWorksheetId, String receivingWorksheetTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/receivingWorksheet/{receivingWorksheetId}/tag/{receivingWorksheetTag}"
            .replaceAll("\\{" + "receivingWorksheetId" + "\\}", apiClient.escapeString(receivingWorksheetId.toString()))
            .replaceAll("\\{" + "receivingWorksheetTag" + "\\}", apiClient.escapeString(receivingWorksheetTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addReceivingWorksheetTagValidateBeforeCall(Integer receivingWorksheetId, String receivingWorksheetTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'receivingWorksheetId' is set
        if (receivingWorksheetId == null) {
            throw new ApiException("Missing the required parameter 'receivingWorksheetId' when calling addReceivingWorksheetTag(Async)");
        }
        
        // verify the required parameter 'receivingWorksheetTag' is set
        if (receivingWorksheetTag == null) {
            throw new ApiException("Missing the required parameter 'receivingWorksheetTag' when calling addReceivingWorksheetTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addReceivingWorksheetTagCall(receivingWorksheetId, receivingWorksheetTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a receivingWorksheet.
     * Adds a tag to an existing receivingWorksheet.
     * @param receivingWorksheetId Id of the receivingWorksheet to add a tag to (required)
     * @param receivingWorksheetTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addReceivingWorksheetTag(Integer receivingWorksheetId, String receivingWorksheetTag) throws ApiException {
        addReceivingWorksheetTagWithHttpInfo(receivingWorksheetId, receivingWorksheetTag);
    }

    /**
     * Add new tags for a receivingWorksheet.
     * Adds a tag to an existing receivingWorksheet.
     * @param receivingWorksheetId Id of the receivingWorksheet to add a tag to (required)
     * @param receivingWorksheetTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addReceivingWorksheetTagWithHttpInfo(Integer receivingWorksheetId, String receivingWorksheetTag) throws ApiException {
        com.squareup.okhttp.Call call = addReceivingWorksheetTagValidateBeforeCall(receivingWorksheetId, receivingWorksheetTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a receivingWorksheet. (asynchronously)
     * Adds a tag to an existing receivingWorksheet.
     * @param receivingWorksheetId Id of the receivingWorksheet to add a tag to (required)
     * @param receivingWorksheetTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addReceivingWorksheetTagAsync(Integer receivingWorksheetId, String receivingWorksheetTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addReceivingWorksheetTagValidateBeforeCall(receivingWorksheetId, receivingWorksheetTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteReceivingWorksheet
     * @param receivingWorksheetId Id of the receivingWorksheet to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteReceivingWorksheetCall(Integer receivingWorksheetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/receivingWorksheet/{receivingWorksheetId}"
            .replaceAll("\\{" + "receivingWorksheetId" + "\\}", apiClient.escapeString(receivingWorksheetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteReceivingWorksheetValidateBeforeCall(Integer receivingWorksheetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'receivingWorksheetId' is set
        if (receivingWorksheetId == null) {
            throw new ApiException("Missing the required parameter 'receivingWorksheetId' when calling deleteReceivingWorksheet(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteReceivingWorksheetCall(receivingWorksheetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a receivingWorksheet
     * Deletes the receivingWorksheet identified by the specified id.
     * @param receivingWorksheetId Id of the receivingWorksheet to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteReceivingWorksheet(Integer receivingWorksheetId) throws ApiException {
        deleteReceivingWorksheetWithHttpInfo(receivingWorksheetId);
    }

    /**
     * Delete a receivingWorksheet
     * Deletes the receivingWorksheet identified by the specified id.
     * @param receivingWorksheetId Id of the receivingWorksheet to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteReceivingWorksheetWithHttpInfo(Integer receivingWorksheetId) throws ApiException {
        com.squareup.okhttp.Call call = deleteReceivingWorksheetValidateBeforeCall(receivingWorksheetId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a receivingWorksheet (asynchronously)
     * Deletes the receivingWorksheet identified by the specified id.
     * @param receivingWorksheetId Id of the receivingWorksheet to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteReceivingWorksheetAsync(Integer receivingWorksheetId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteReceivingWorksheetValidateBeforeCall(receivingWorksheetId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteReceivingWorksheetFile
     * @param receivingWorksheetId Id of the receivingWorksheet to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteReceivingWorksheetFileCall(Integer receivingWorksheetId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/receivingWorksheet/{receivingWorksheetId}/file/{fileId}"
            .replaceAll("\\{" + "receivingWorksheetId" + "\\}", apiClient.escapeString(receivingWorksheetId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteReceivingWorksheetFileValidateBeforeCall(Integer receivingWorksheetId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'receivingWorksheetId' is set
        if (receivingWorksheetId == null) {
            throw new ApiException("Missing the required parameter 'receivingWorksheetId' when calling deleteReceivingWorksheetFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteReceivingWorksheetFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteReceivingWorksheetFileCall(receivingWorksheetId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a receivingWorksheet.
     * Deletes an existing receivingWorksheet file using the specified data.
     * @param receivingWorksheetId Id of the receivingWorksheet to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteReceivingWorksheetFile(Integer receivingWorksheetId, Integer fileId) throws ApiException {
        deleteReceivingWorksheetFileWithHttpInfo(receivingWorksheetId, fileId);
    }

    /**
     * Delete a file for a receivingWorksheet.
     * Deletes an existing receivingWorksheet file using the specified data.
     * @param receivingWorksheetId Id of the receivingWorksheet to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteReceivingWorksheetFileWithHttpInfo(Integer receivingWorksheetId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteReceivingWorksheetFileValidateBeforeCall(receivingWorksheetId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a receivingWorksheet. (asynchronously)
     * Deletes an existing receivingWorksheet file using the specified data.
     * @param receivingWorksheetId Id of the receivingWorksheet to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteReceivingWorksheetFileAsync(Integer receivingWorksheetId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteReceivingWorksheetFileValidateBeforeCall(receivingWorksheetId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteReceivingWorksheetTag
     * @param receivingWorksheetId Id of the receivingWorksheet to remove tag from (required)
     * @param receivingWorksheetTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteReceivingWorksheetTagCall(Integer receivingWorksheetId, String receivingWorksheetTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/receivingWorksheet/{receivingWorksheetId}/tag/{receivingWorksheetTag}"
            .replaceAll("\\{" + "receivingWorksheetId" + "\\}", apiClient.escapeString(receivingWorksheetId.toString()))
            .replaceAll("\\{" + "receivingWorksheetTag" + "\\}", apiClient.escapeString(receivingWorksheetTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteReceivingWorksheetTagValidateBeforeCall(Integer receivingWorksheetId, String receivingWorksheetTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'receivingWorksheetId' is set
        if (receivingWorksheetId == null) {
            throw new ApiException("Missing the required parameter 'receivingWorksheetId' when calling deleteReceivingWorksheetTag(Async)");
        }
        
        // verify the required parameter 'receivingWorksheetTag' is set
        if (receivingWorksheetTag == null) {
            throw new ApiException("Missing the required parameter 'receivingWorksheetTag' when calling deleteReceivingWorksheetTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteReceivingWorksheetTagCall(receivingWorksheetId, receivingWorksheetTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a receivingWorksheet.
     * Deletes an existing receivingWorksheet tag using the specified data.
     * @param receivingWorksheetId Id of the receivingWorksheet to remove tag from (required)
     * @param receivingWorksheetTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteReceivingWorksheetTag(Integer receivingWorksheetId, String receivingWorksheetTag) throws ApiException {
        deleteReceivingWorksheetTagWithHttpInfo(receivingWorksheetId, receivingWorksheetTag);
    }

    /**
     * Delete a tag for a receivingWorksheet.
     * Deletes an existing receivingWorksheet tag using the specified data.
     * @param receivingWorksheetId Id of the receivingWorksheet to remove tag from (required)
     * @param receivingWorksheetTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteReceivingWorksheetTagWithHttpInfo(Integer receivingWorksheetId, String receivingWorksheetTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteReceivingWorksheetTagValidateBeforeCall(receivingWorksheetId, receivingWorksheetTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a receivingWorksheet. (asynchronously)
     * Deletes an existing receivingWorksheet tag using the specified data.
     * @param receivingWorksheetId Id of the receivingWorksheet to remove tag from (required)
     * @param receivingWorksheetTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteReceivingWorksheetTagAsync(Integer receivingWorksheetId, String receivingWorksheetTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteReceivingWorksheetTagValidateBeforeCall(receivingWorksheetId, receivingWorksheetTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateReceivingWorksheetById
     * @param receivingWorksheetId Id of the receivingWorksheet to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateReceivingWorksheetByIdCall(Integer receivingWorksheetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/receivingWorksheet/duplicate/{receivingWorksheetId}"
            .replaceAll("\\{" + "receivingWorksheetId" + "\\}", apiClient.escapeString(receivingWorksheetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateReceivingWorksheetByIdValidateBeforeCall(Integer receivingWorksheetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'receivingWorksheetId' is set
        if (receivingWorksheetId == null) {
            throw new ApiException("Missing the required parameter 'receivingWorksheetId' when calling getDuplicateReceivingWorksheetById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateReceivingWorksheetByIdCall(receivingWorksheetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a receivingWorksheet by id
     * Returns a duplicated receivingWorksheet identified by the specified id.
     * @param receivingWorksheetId Id of the receivingWorksheet to be duplicated. (required)
     * @return ReceivingWorksheet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReceivingWorksheet getDuplicateReceivingWorksheetById(Integer receivingWorksheetId) throws ApiException {
        ApiResponse<ReceivingWorksheet> resp = getDuplicateReceivingWorksheetByIdWithHttpInfo(receivingWorksheetId);
        return resp.getData();
    }

    /**
     * Get a duplicated a receivingWorksheet by id
     * Returns a duplicated receivingWorksheet identified by the specified id.
     * @param receivingWorksheetId Id of the receivingWorksheet to be duplicated. (required)
     * @return ApiResponse&lt;ReceivingWorksheet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReceivingWorksheet> getDuplicateReceivingWorksheetByIdWithHttpInfo(Integer receivingWorksheetId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateReceivingWorksheetByIdValidateBeforeCall(receivingWorksheetId, null, null);
        Type localVarReturnType = new TypeToken<ReceivingWorksheet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a receivingWorksheet by id (asynchronously)
     * Returns a duplicated receivingWorksheet identified by the specified id.
     * @param receivingWorksheetId Id of the receivingWorksheet to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateReceivingWorksheetByIdAsync(Integer receivingWorksheetId, final ApiCallback<ReceivingWorksheet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateReceivingWorksheetByIdValidateBeforeCall(receivingWorksheetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReceivingWorksheet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReceivingWorksheetByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReceivingWorksheetByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/receivingWorksheet/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReceivingWorksheetByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getReceivingWorksheetByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search receivingWorksheets by filter
     * Returns the list of receivingWorksheets that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;ReceivingWorksheet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ReceivingWorksheet> getReceivingWorksheetByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<ReceivingWorksheet>> resp = getReceivingWorksheetByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search receivingWorksheets by filter
     * Returns the list of receivingWorksheets that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;ReceivingWorksheet&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ReceivingWorksheet>> getReceivingWorksheetByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getReceivingWorksheetByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<ReceivingWorksheet>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search receivingWorksheets by filter (asynchronously)
     * Returns the list of receivingWorksheets that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReceivingWorksheetByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<ReceivingWorksheet>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReceivingWorksheetByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ReceivingWorksheet>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReceivingWorksheetById
     * @param receivingWorksheetId Id of the receivingWorksheet to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReceivingWorksheetByIdCall(Integer receivingWorksheetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/receivingWorksheet/{receivingWorksheetId}"
            .replaceAll("\\{" + "receivingWorksheetId" + "\\}", apiClient.escapeString(receivingWorksheetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReceivingWorksheetByIdValidateBeforeCall(Integer receivingWorksheetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'receivingWorksheetId' is set
        if (receivingWorksheetId == null) {
            throw new ApiException("Missing the required parameter 'receivingWorksheetId' when calling getReceivingWorksheetById(Async)");
        }
        

        com.squareup.okhttp.Call call = getReceivingWorksheetByIdCall(receivingWorksheetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a receivingWorksheet by id
     * Returns the receivingWorksheet identified by the specified id.
     * @param receivingWorksheetId Id of the receivingWorksheet to be returned. (required)
     * @return ReceivingWorksheet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReceivingWorksheet getReceivingWorksheetById(Integer receivingWorksheetId) throws ApiException {
        ApiResponse<ReceivingWorksheet> resp = getReceivingWorksheetByIdWithHttpInfo(receivingWorksheetId);
        return resp.getData();
    }

    /**
     * Get a receivingWorksheet by id
     * Returns the receivingWorksheet identified by the specified id.
     * @param receivingWorksheetId Id of the receivingWorksheet to be returned. (required)
     * @return ApiResponse&lt;ReceivingWorksheet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReceivingWorksheet> getReceivingWorksheetByIdWithHttpInfo(Integer receivingWorksheetId) throws ApiException {
        com.squareup.okhttp.Call call = getReceivingWorksheetByIdValidateBeforeCall(receivingWorksheetId, null, null);
        Type localVarReturnType = new TypeToken<ReceivingWorksheet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a receivingWorksheet by id (asynchronously)
     * Returns the receivingWorksheet identified by the specified id.
     * @param receivingWorksheetId Id of the receivingWorksheet to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReceivingWorksheetByIdAsync(Integer receivingWorksheetId, final ApiCallback<ReceivingWorksheet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReceivingWorksheetByIdValidateBeforeCall(receivingWorksheetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReceivingWorksheet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReceivingWorksheetFiles
     * @param receivingWorksheetId Id of the receivingWorksheet to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReceivingWorksheetFilesCall(Integer receivingWorksheetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/receivingWorksheet/{receivingWorksheetId}/file"
            .replaceAll("\\{" + "receivingWorksheetId" + "\\}", apiClient.escapeString(receivingWorksheetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReceivingWorksheetFilesValidateBeforeCall(Integer receivingWorksheetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'receivingWorksheetId' is set
        if (receivingWorksheetId == null) {
            throw new ApiException("Missing the required parameter 'receivingWorksheetId' when calling getReceivingWorksheetFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getReceivingWorksheetFilesCall(receivingWorksheetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a receivingWorksheet.
     * Get all existing receivingWorksheet files.
     * @param receivingWorksheetId Id of the receivingWorksheet to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getReceivingWorksheetFiles(Integer receivingWorksheetId) throws ApiException {
        getReceivingWorksheetFilesWithHttpInfo(receivingWorksheetId);
    }

    /**
     * Get the files for a receivingWorksheet.
     * Get all existing receivingWorksheet files.
     * @param receivingWorksheetId Id of the receivingWorksheet to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getReceivingWorksheetFilesWithHttpInfo(Integer receivingWorksheetId) throws ApiException {
        com.squareup.okhttp.Call call = getReceivingWorksheetFilesValidateBeforeCall(receivingWorksheetId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a receivingWorksheet. (asynchronously)
     * Get all existing receivingWorksheet files.
     * @param receivingWorksheetId Id of the receivingWorksheet to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReceivingWorksheetFilesAsync(Integer receivingWorksheetId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReceivingWorksheetFilesValidateBeforeCall(receivingWorksheetId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getReceivingWorksheetTags
     * @param receivingWorksheetId Id of the receivingWorksheet to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReceivingWorksheetTagsCall(Integer receivingWorksheetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/receivingWorksheet/{receivingWorksheetId}/tag"
            .replaceAll("\\{" + "receivingWorksheetId" + "\\}", apiClient.escapeString(receivingWorksheetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReceivingWorksheetTagsValidateBeforeCall(Integer receivingWorksheetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'receivingWorksheetId' is set
        if (receivingWorksheetId == null) {
            throw new ApiException("Missing the required parameter 'receivingWorksheetId' when calling getReceivingWorksheetTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getReceivingWorksheetTagsCall(receivingWorksheetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a receivingWorksheet.
     * Get all existing receivingWorksheet tags.
     * @param receivingWorksheetId Id of the receivingWorksheet to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getReceivingWorksheetTags(Integer receivingWorksheetId) throws ApiException {
        getReceivingWorksheetTagsWithHttpInfo(receivingWorksheetId);
    }

    /**
     * Get the tags for a receivingWorksheet.
     * Get all existing receivingWorksheet tags.
     * @param receivingWorksheetId Id of the receivingWorksheet to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getReceivingWorksheetTagsWithHttpInfo(Integer receivingWorksheetId) throws ApiException {
        com.squareup.okhttp.Call call = getReceivingWorksheetTagsValidateBeforeCall(receivingWorksheetId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a receivingWorksheet. (asynchronously)
     * Get all existing receivingWorksheet tags.
     * @param receivingWorksheetId Id of the receivingWorksheet to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReceivingWorksheetTagsAsync(Integer receivingWorksheetId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReceivingWorksheetTagsValidateBeforeCall(receivingWorksheetId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateReceivingWorksheet
     * @param body ReceivingWorksheet to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateReceivingWorksheetCall(ReceivingWorksheet body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/receivingWorksheet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateReceivingWorksheetValidateBeforeCall(ReceivingWorksheet body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateReceivingWorksheet(Async)");
        }
        

        com.squareup.okhttp.Call call = updateReceivingWorksheetCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a receivingWorksheet
     * Updates an existing receivingWorksheet using the specified data.
     * @param body ReceivingWorksheet to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateReceivingWorksheet(ReceivingWorksheet body) throws ApiException {
        updateReceivingWorksheetWithHttpInfo(body);
    }

    /**
     * Update a receivingWorksheet
     * Updates an existing receivingWorksheet using the specified data.
     * @param body ReceivingWorksheet to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateReceivingWorksheetWithHttpInfo(ReceivingWorksheet body) throws ApiException {
        com.squareup.okhttp.Call call = updateReceivingWorksheetValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a receivingWorksheet (asynchronously)
     * Updates an existing receivingWorksheet using the specified data.
     * @param body ReceivingWorksheet to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateReceivingWorksheetAsync(ReceivingWorksheet body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateReceivingWorksheetValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateReceivingWorksheetCustomFields
     * @param body ReceivingWorksheet to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateReceivingWorksheetCustomFieldsCall(ReceivingWorksheet body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/receivingWorksheet/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateReceivingWorksheetCustomFieldsValidateBeforeCall(ReceivingWorksheet body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateReceivingWorksheetCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateReceivingWorksheetCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a receivingWorksheet custom fields
     * Updates an existing receivingWorksheet custom fields using the specified data.
     * @param body ReceivingWorksheet to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateReceivingWorksheetCustomFields(ReceivingWorksheet body) throws ApiException {
        updateReceivingWorksheetCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a receivingWorksheet custom fields
     * Updates an existing receivingWorksheet custom fields using the specified data.
     * @param body ReceivingWorksheet to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateReceivingWorksheetCustomFieldsWithHttpInfo(ReceivingWorksheet body) throws ApiException {
        com.squareup.okhttp.Call call = updateReceivingWorksheetCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a receivingWorksheet custom fields (asynchronously)
     * Updates an existing receivingWorksheet custom fields using the specified data.
     * @param body ReceivingWorksheet to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateReceivingWorksheetCustomFieldsAsync(ReceivingWorksheet body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateReceivingWorksheetCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
