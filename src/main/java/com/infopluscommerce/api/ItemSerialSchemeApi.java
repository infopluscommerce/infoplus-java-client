/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ItemSerialScheme;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ItemSerialSchemeApi {
    private ApiClient apiClient;

    public ItemSerialSchemeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ItemSerialSchemeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addItemSerialScheme
     * @param body ItemSerialScheme to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemSerialSchemeCall(ItemSerialScheme body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/itemSerialScheme";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemSerialSchemeValidateBeforeCall(ItemSerialScheme body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addItemSerialScheme(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemSerialSchemeCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an itemSerialScheme
     * Inserts a new itemSerialScheme using the specified data.
     * @param body ItemSerialScheme to be inserted. (required)
     * @return ItemSerialScheme
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemSerialScheme addItemSerialScheme(ItemSerialScheme body) throws ApiException {
        ApiResponse<ItemSerialScheme> resp = addItemSerialSchemeWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create an itemSerialScheme
     * Inserts a new itemSerialScheme using the specified data.
     * @param body ItemSerialScheme to be inserted. (required)
     * @return ApiResponse&lt;ItemSerialScheme&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemSerialScheme> addItemSerialSchemeWithHttpInfo(ItemSerialScheme body) throws ApiException {
        com.squareup.okhttp.Call call = addItemSerialSchemeValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ItemSerialScheme>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an itemSerialScheme (asynchronously)
     * Inserts a new itemSerialScheme using the specified data.
     * @param body ItemSerialScheme to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemSerialSchemeAsync(ItemSerialScheme body, final ApiCallback<ItemSerialScheme> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemSerialSchemeValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemSerialScheme>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addItemSerialSchemeAudit
     * @param itemSerialSchemeId Id of the itemSerialScheme to add an audit to (required)
     * @param itemSerialSchemeAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemSerialSchemeAuditCall(Integer itemSerialSchemeId, String itemSerialSchemeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}/audit/{itemSerialSchemeAudit}"
            .replaceAll("\\{" + "itemSerialSchemeId" + "\\}", apiClient.escapeString(itemSerialSchemeId.toString()))
            .replaceAll("\\{" + "itemSerialSchemeAudit" + "\\}", apiClient.escapeString(itemSerialSchemeAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemSerialSchemeAuditValidateBeforeCall(Integer itemSerialSchemeId, String itemSerialSchemeAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSerialSchemeId' is set
        if (itemSerialSchemeId == null) {
            throw new ApiException("Missing the required parameter 'itemSerialSchemeId' when calling addItemSerialSchemeAudit(Async)");
        }
        
        // verify the required parameter 'itemSerialSchemeAudit' is set
        if (itemSerialSchemeAudit == null) {
            throw new ApiException("Missing the required parameter 'itemSerialSchemeAudit' when calling addItemSerialSchemeAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemSerialSchemeAuditCall(itemSerialSchemeId, itemSerialSchemeAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for an itemSerialScheme
     * Adds an audit to an existing itemSerialScheme.
     * @param itemSerialSchemeId Id of the itemSerialScheme to add an audit to (required)
     * @param itemSerialSchemeAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemSerialSchemeAudit(Integer itemSerialSchemeId, String itemSerialSchemeAudit) throws ApiException {
        addItemSerialSchemeAuditWithHttpInfo(itemSerialSchemeId, itemSerialSchemeAudit);
    }

    /**
     * Add new audit for an itemSerialScheme
     * Adds an audit to an existing itemSerialScheme.
     * @param itemSerialSchemeId Id of the itemSerialScheme to add an audit to (required)
     * @param itemSerialSchemeAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemSerialSchemeAuditWithHttpInfo(Integer itemSerialSchemeId, String itemSerialSchemeAudit) throws ApiException {
        com.squareup.okhttp.Call call = addItemSerialSchemeAuditValidateBeforeCall(itemSerialSchemeId, itemSerialSchemeAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for an itemSerialScheme (asynchronously)
     * Adds an audit to an existing itemSerialScheme.
     * @param itemSerialSchemeId Id of the itemSerialScheme to add an audit to (required)
     * @param itemSerialSchemeAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemSerialSchemeAuditAsync(Integer itemSerialSchemeId, String itemSerialSchemeAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemSerialSchemeAuditValidateBeforeCall(itemSerialSchemeId, itemSerialSchemeAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemSerialSchemeFile
     * @param itemSerialSchemeId Id of the itemSerialScheme to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemSerialSchemeFileCall(Integer itemSerialSchemeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}/file/{fileName}"
            .replaceAll("\\{" + "itemSerialSchemeId" + "\\}", apiClient.escapeString(itemSerialSchemeId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemSerialSchemeFileValidateBeforeCall(Integer itemSerialSchemeId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSerialSchemeId' is set
        if (itemSerialSchemeId == null) {
            throw new ApiException("Missing the required parameter 'itemSerialSchemeId' when calling addItemSerialSchemeFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addItemSerialSchemeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemSerialSchemeFileCall(itemSerialSchemeId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an itemSerialScheme
     * Adds a file to an existing itemSerialScheme.
     * @param itemSerialSchemeId Id of the itemSerialScheme to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemSerialSchemeFile(Integer itemSerialSchemeId, String fileName) throws ApiException {
        addItemSerialSchemeFileWithHttpInfo(itemSerialSchemeId, fileName);
    }

    /**
     * Attach a file to an itemSerialScheme
     * Adds a file to an existing itemSerialScheme.
     * @param itemSerialSchemeId Id of the itemSerialScheme to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemSerialSchemeFileWithHttpInfo(Integer itemSerialSchemeId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addItemSerialSchemeFileValidateBeforeCall(itemSerialSchemeId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an itemSerialScheme (asynchronously)
     * Adds a file to an existing itemSerialScheme.
     * @param itemSerialSchemeId Id of the itemSerialScheme to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemSerialSchemeFileAsync(Integer itemSerialSchemeId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemSerialSchemeFileValidateBeforeCall(itemSerialSchemeId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemSerialSchemeFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param itemSerialSchemeId Id of the itemSerialScheme to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemSerialSchemeFileByURLCall(RecordFile body, Integer itemSerialSchemeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}/file"
            .replaceAll("\\{" + "itemSerialSchemeId" + "\\}", apiClient.escapeString(itemSerialSchemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemSerialSchemeFileByURLValidateBeforeCall(RecordFile body, Integer itemSerialSchemeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addItemSerialSchemeFileByURL(Async)");
        }
        
        // verify the required parameter 'itemSerialSchemeId' is set
        if (itemSerialSchemeId == null) {
            throw new ApiException("Missing the required parameter 'itemSerialSchemeId' when calling addItemSerialSchemeFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemSerialSchemeFileByURLCall(body, itemSerialSchemeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an itemSerialScheme by URL.
     * Adds a file to an existing itemSerialScheme by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param itemSerialSchemeId Id of the itemSerialScheme to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemSerialSchemeFileByURL(RecordFile body, Integer itemSerialSchemeId) throws ApiException {
        addItemSerialSchemeFileByURLWithHttpInfo(body, itemSerialSchemeId);
    }

    /**
     * Attach a file to an itemSerialScheme by URL.
     * Adds a file to an existing itemSerialScheme by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param itemSerialSchemeId Id of the itemSerialScheme to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemSerialSchemeFileByURLWithHttpInfo(RecordFile body, Integer itemSerialSchemeId) throws ApiException {
        com.squareup.okhttp.Call call = addItemSerialSchemeFileByURLValidateBeforeCall(body, itemSerialSchemeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an itemSerialScheme by URL. (asynchronously)
     * Adds a file to an existing itemSerialScheme by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param itemSerialSchemeId Id of the itemSerialScheme to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemSerialSchemeFileByURLAsync(RecordFile body, Integer itemSerialSchemeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemSerialSchemeFileByURLValidateBeforeCall(body, itemSerialSchemeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addItemSerialSchemeTag
     * @param itemSerialSchemeId Id of the itemSerialScheme to add a tag to (required)
     * @param itemSerialSchemeTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemSerialSchemeTagCall(Integer itemSerialSchemeId, String itemSerialSchemeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}/tag/{itemSerialSchemeTag}"
            .replaceAll("\\{" + "itemSerialSchemeId" + "\\}", apiClient.escapeString(itemSerialSchemeId.toString()))
            .replaceAll("\\{" + "itemSerialSchemeTag" + "\\}", apiClient.escapeString(itemSerialSchemeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemSerialSchemeTagValidateBeforeCall(Integer itemSerialSchemeId, String itemSerialSchemeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSerialSchemeId' is set
        if (itemSerialSchemeId == null) {
            throw new ApiException("Missing the required parameter 'itemSerialSchemeId' when calling addItemSerialSchemeTag(Async)");
        }
        
        // verify the required parameter 'itemSerialSchemeTag' is set
        if (itemSerialSchemeTag == null) {
            throw new ApiException("Missing the required parameter 'itemSerialSchemeTag' when calling addItemSerialSchemeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addItemSerialSchemeTagCall(itemSerialSchemeId, itemSerialSchemeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for an itemSerialScheme.
     * Adds a tag to an existing itemSerialScheme.
     * @param itemSerialSchemeId Id of the itemSerialScheme to add a tag to (required)
     * @param itemSerialSchemeTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addItemSerialSchemeTag(Integer itemSerialSchemeId, String itemSerialSchemeTag) throws ApiException {
        addItemSerialSchemeTagWithHttpInfo(itemSerialSchemeId, itemSerialSchemeTag);
    }

    /**
     * Add new tags for an itemSerialScheme.
     * Adds a tag to an existing itemSerialScheme.
     * @param itemSerialSchemeId Id of the itemSerialScheme to add a tag to (required)
     * @param itemSerialSchemeTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addItemSerialSchemeTagWithHttpInfo(Integer itemSerialSchemeId, String itemSerialSchemeTag) throws ApiException {
        com.squareup.okhttp.Call call = addItemSerialSchemeTagValidateBeforeCall(itemSerialSchemeId, itemSerialSchemeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for an itemSerialScheme. (asynchronously)
     * Adds a tag to an existing itemSerialScheme.
     * @param itemSerialSchemeId Id of the itemSerialScheme to add a tag to (required)
     * @param itemSerialSchemeTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemSerialSchemeTagAsync(Integer itemSerialSchemeId, String itemSerialSchemeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemSerialSchemeTagValidateBeforeCall(itemSerialSchemeId, itemSerialSchemeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemSerialScheme
     * @param itemSerialSchemeId Id of the itemSerialScheme to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemSerialSchemeCall(Integer itemSerialSchemeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}"
            .replaceAll("\\{" + "itemSerialSchemeId" + "\\}", apiClient.escapeString(itemSerialSchemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemSerialSchemeValidateBeforeCall(Integer itemSerialSchemeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSerialSchemeId' is set
        if (itemSerialSchemeId == null) {
            throw new ApiException("Missing the required parameter 'itemSerialSchemeId' when calling deleteItemSerialScheme(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemSerialSchemeCall(itemSerialSchemeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an itemSerialScheme
     * Deletes the itemSerialScheme identified by the specified id.
     * @param itemSerialSchemeId Id of the itemSerialScheme to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemSerialScheme(Integer itemSerialSchemeId) throws ApiException {
        deleteItemSerialSchemeWithHttpInfo(itemSerialSchemeId);
    }

    /**
     * Delete an itemSerialScheme
     * Deletes the itemSerialScheme identified by the specified id.
     * @param itemSerialSchemeId Id of the itemSerialScheme to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemSerialSchemeWithHttpInfo(Integer itemSerialSchemeId) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemSerialSchemeValidateBeforeCall(itemSerialSchemeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an itemSerialScheme (asynchronously)
     * Deletes the itemSerialScheme identified by the specified id.
     * @param itemSerialSchemeId Id of the itemSerialScheme to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemSerialSchemeAsync(Integer itemSerialSchemeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemSerialSchemeValidateBeforeCall(itemSerialSchemeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemSerialSchemeFile
     * @param itemSerialSchemeId Id of the itemSerialScheme to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemSerialSchemeFileCall(Integer itemSerialSchemeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}/file/{fileId}"
            .replaceAll("\\{" + "itemSerialSchemeId" + "\\}", apiClient.escapeString(itemSerialSchemeId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemSerialSchemeFileValidateBeforeCall(Integer itemSerialSchemeId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSerialSchemeId' is set
        if (itemSerialSchemeId == null) {
            throw new ApiException("Missing the required parameter 'itemSerialSchemeId' when calling deleteItemSerialSchemeFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteItemSerialSchemeFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemSerialSchemeFileCall(itemSerialSchemeId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for an itemSerialScheme.
     * Deletes an existing itemSerialScheme file using the specified data.
     * @param itemSerialSchemeId Id of the itemSerialScheme to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemSerialSchemeFile(Integer itemSerialSchemeId, Integer fileId) throws ApiException {
        deleteItemSerialSchemeFileWithHttpInfo(itemSerialSchemeId, fileId);
    }

    /**
     * Delete a file for an itemSerialScheme.
     * Deletes an existing itemSerialScheme file using the specified data.
     * @param itemSerialSchemeId Id of the itemSerialScheme to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemSerialSchemeFileWithHttpInfo(Integer itemSerialSchemeId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemSerialSchemeFileValidateBeforeCall(itemSerialSchemeId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for an itemSerialScheme. (asynchronously)
     * Deletes an existing itemSerialScheme file using the specified data.
     * @param itemSerialSchemeId Id of the itemSerialScheme to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemSerialSchemeFileAsync(Integer itemSerialSchemeId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemSerialSchemeFileValidateBeforeCall(itemSerialSchemeId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteItemSerialSchemeTag
     * @param itemSerialSchemeId Id of the itemSerialScheme to remove tag from (required)
     * @param itemSerialSchemeTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemSerialSchemeTagCall(Integer itemSerialSchemeId, String itemSerialSchemeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}/tag/{itemSerialSchemeTag}"
            .replaceAll("\\{" + "itemSerialSchemeId" + "\\}", apiClient.escapeString(itemSerialSchemeId.toString()))
            .replaceAll("\\{" + "itemSerialSchemeTag" + "\\}", apiClient.escapeString(itemSerialSchemeTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemSerialSchemeTagValidateBeforeCall(Integer itemSerialSchemeId, String itemSerialSchemeTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSerialSchemeId' is set
        if (itemSerialSchemeId == null) {
            throw new ApiException("Missing the required parameter 'itemSerialSchemeId' when calling deleteItemSerialSchemeTag(Async)");
        }
        
        // verify the required parameter 'itemSerialSchemeTag' is set
        if (itemSerialSchemeTag == null) {
            throw new ApiException("Missing the required parameter 'itemSerialSchemeTag' when calling deleteItemSerialSchemeTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteItemSerialSchemeTagCall(itemSerialSchemeId, itemSerialSchemeTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for an itemSerialScheme.
     * Deletes an existing itemSerialScheme tag using the specified data.
     * @param itemSerialSchemeId Id of the itemSerialScheme to remove tag from (required)
     * @param itemSerialSchemeTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemSerialSchemeTag(Integer itemSerialSchemeId, String itemSerialSchemeTag) throws ApiException {
        deleteItemSerialSchemeTagWithHttpInfo(itemSerialSchemeId, itemSerialSchemeTag);
    }

    /**
     * Delete a tag for an itemSerialScheme.
     * Deletes an existing itemSerialScheme tag using the specified data.
     * @param itemSerialSchemeId Id of the itemSerialScheme to remove tag from (required)
     * @param itemSerialSchemeTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemSerialSchemeTagWithHttpInfo(Integer itemSerialSchemeId, String itemSerialSchemeTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemSerialSchemeTagValidateBeforeCall(itemSerialSchemeId, itemSerialSchemeTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for an itemSerialScheme. (asynchronously)
     * Deletes an existing itemSerialScheme tag using the specified data.
     * @param itemSerialSchemeId Id of the itemSerialScheme to remove tag from (required)
     * @param itemSerialSchemeTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemSerialSchemeTagAsync(Integer itemSerialSchemeId, String itemSerialSchemeTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemSerialSchemeTagValidateBeforeCall(itemSerialSchemeId, itemSerialSchemeTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateItemSerialSchemeById
     * @param itemSerialSchemeId Id of the itemSerialScheme to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateItemSerialSchemeByIdCall(Integer itemSerialSchemeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSerialScheme/duplicate/{itemSerialSchemeId}"
            .replaceAll("\\{" + "itemSerialSchemeId" + "\\}", apiClient.escapeString(itemSerialSchemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateItemSerialSchemeByIdValidateBeforeCall(Integer itemSerialSchemeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSerialSchemeId' is set
        if (itemSerialSchemeId == null) {
            throw new ApiException("Missing the required parameter 'itemSerialSchemeId' when calling getDuplicateItemSerialSchemeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateItemSerialSchemeByIdCall(itemSerialSchemeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated an itemSerialScheme by id
     * Returns a duplicated itemSerialScheme identified by the specified id.
     * @param itemSerialSchemeId Id of the itemSerialScheme to be duplicated. (required)
     * @return ItemSerialScheme
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemSerialScheme getDuplicateItemSerialSchemeById(Integer itemSerialSchemeId) throws ApiException {
        ApiResponse<ItemSerialScheme> resp = getDuplicateItemSerialSchemeByIdWithHttpInfo(itemSerialSchemeId);
        return resp.getData();
    }

    /**
     * Get a duplicated an itemSerialScheme by id
     * Returns a duplicated itemSerialScheme identified by the specified id.
     * @param itemSerialSchemeId Id of the itemSerialScheme to be duplicated. (required)
     * @return ApiResponse&lt;ItemSerialScheme&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemSerialScheme> getDuplicateItemSerialSchemeByIdWithHttpInfo(Integer itemSerialSchemeId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateItemSerialSchemeByIdValidateBeforeCall(itemSerialSchemeId, null, null);
        Type localVarReturnType = new TypeToken<ItemSerialScheme>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated an itemSerialScheme by id (asynchronously)
     * Returns a duplicated itemSerialScheme identified by the specified id.
     * @param itemSerialSchemeId Id of the itemSerialScheme to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateItemSerialSchemeByIdAsync(Integer itemSerialSchemeId, final ApiCallback<ItemSerialScheme> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateItemSerialSchemeByIdValidateBeforeCall(itemSerialSchemeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemSerialScheme>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemSerialSchemeByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemSerialSchemeByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSerialScheme/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemSerialSchemeByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getItemSerialSchemeByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search itemSerialSchemes by filter
     * Returns the list of itemSerialSchemes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;ItemSerialScheme&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ItemSerialScheme> getItemSerialSchemeByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<ItemSerialScheme>> resp = getItemSerialSchemeByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search itemSerialSchemes by filter
     * Returns the list of itemSerialSchemes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;ItemSerialScheme&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ItemSerialScheme>> getItemSerialSchemeByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getItemSerialSchemeByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<ItemSerialScheme>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search itemSerialSchemes by filter (asynchronously)
     * Returns the list of itemSerialSchemes that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemSerialSchemeByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<ItemSerialScheme>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemSerialSchemeByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ItemSerialScheme>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemSerialSchemeById
     * @param itemSerialSchemeId Id of the itemSerialScheme to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemSerialSchemeByIdCall(Integer itemSerialSchemeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}"
            .replaceAll("\\{" + "itemSerialSchemeId" + "\\}", apiClient.escapeString(itemSerialSchemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemSerialSchemeByIdValidateBeforeCall(Integer itemSerialSchemeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSerialSchemeId' is set
        if (itemSerialSchemeId == null) {
            throw new ApiException("Missing the required parameter 'itemSerialSchemeId' when calling getItemSerialSchemeById(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemSerialSchemeByIdCall(itemSerialSchemeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an itemSerialScheme by id
     * Returns the itemSerialScheme identified by the specified id.
     * @param itemSerialSchemeId Id of the itemSerialScheme to be returned. (required)
     * @return ItemSerialScheme
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemSerialScheme getItemSerialSchemeById(Integer itemSerialSchemeId) throws ApiException {
        ApiResponse<ItemSerialScheme> resp = getItemSerialSchemeByIdWithHttpInfo(itemSerialSchemeId);
        return resp.getData();
    }

    /**
     * Get an itemSerialScheme by id
     * Returns the itemSerialScheme identified by the specified id.
     * @param itemSerialSchemeId Id of the itemSerialScheme to be returned. (required)
     * @return ApiResponse&lt;ItemSerialScheme&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemSerialScheme> getItemSerialSchemeByIdWithHttpInfo(Integer itemSerialSchemeId) throws ApiException {
        com.squareup.okhttp.Call call = getItemSerialSchemeByIdValidateBeforeCall(itemSerialSchemeId, null, null);
        Type localVarReturnType = new TypeToken<ItemSerialScheme>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an itemSerialScheme by id (asynchronously)
     * Returns the itemSerialScheme identified by the specified id.
     * @param itemSerialSchemeId Id of the itemSerialScheme to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemSerialSchemeByIdAsync(Integer itemSerialSchemeId, final ApiCallback<ItemSerialScheme> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemSerialSchemeByIdValidateBeforeCall(itemSerialSchemeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemSerialScheme>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemSerialSchemeFiles
     * @param itemSerialSchemeId Id of the itemSerialScheme to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemSerialSchemeFilesCall(Integer itemSerialSchemeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}/file"
            .replaceAll("\\{" + "itemSerialSchemeId" + "\\}", apiClient.escapeString(itemSerialSchemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemSerialSchemeFilesValidateBeforeCall(Integer itemSerialSchemeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSerialSchemeId' is set
        if (itemSerialSchemeId == null) {
            throw new ApiException("Missing the required parameter 'itemSerialSchemeId' when calling getItemSerialSchemeFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemSerialSchemeFilesCall(itemSerialSchemeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for an itemSerialScheme.
     * Get all existing itemSerialScheme files.
     * @param itemSerialSchemeId Id of the itemSerialScheme to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getItemSerialSchemeFiles(Integer itemSerialSchemeId) throws ApiException {
        getItemSerialSchemeFilesWithHttpInfo(itemSerialSchemeId);
    }

    /**
     * Get the files for an itemSerialScheme.
     * Get all existing itemSerialScheme files.
     * @param itemSerialSchemeId Id of the itemSerialScheme to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getItemSerialSchemeFilesWithHttpInfo(Integer itemSerialSchemeId) throws ApiException {
        com.squareup.okhttp.Call call = getItemSerialSchemeFilesValidateBeforeCall(itemSerialSchemeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for an itemSerialScheme. (asynchronously)
     * Get all existing itemSerialScheme files.
     * @param itemSerialSchemeId Id of the itemSerialScheme to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemSerialSchemeFilesAsync(Integer itemSerialSchemeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemSerialSchemeFilesValidateBeforeCall(itemSerialSchemeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getItemSerialSchemeTags
     * @param itemSerialSchemeId Id of the itemSerialScheme to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemSerialSchemeTagsCall(Integer itemSerialSchemeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/itemSerialScheme/{itemSerialSchemeId}/tag"
            .replaceAll("\\{" + "itemSerialSchemeId" + "\\}", apiClient.escapeString(itemSerialSchemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemSerialSchemeTagsValidateBeforeCall(Integer itemSerialSchemeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemSerialSchemeId' is set
        if (itemSerialSchemeId == null) {
            throw new ApiException("Missing the required parameter 'itemSerialSchemeId' when calling getItemSerialSchemeTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemSerialSchemeTagsCall(itemSerialSchemeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for an itemSerialScheme.
     * Get all existing itemSerialScheme tags.
     * @param itemSerialSchemeId Id of the itemSerialScheme to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getItemSerialSchemeTags(Integer itemSerialSchemeId) throws ApiException {
        getItemSerialSchemeTagsWithHttpInfo(itemSerialSchemeId);
    }

    /**
     * Get the tags for an itemSerialScheme.
     * Get all existing itemSerialScheme tags.
     * @param itemSerialSchemeId Id of the itemSerialScheme to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getItemSerialSchemeTagsWithHttpInfo(Integer itemSerialSchemeId) throws ApiException {
        com.squareup.okhttp.Call call = getItemSerialSchemeTagsValidateBeforeCall(itemSerialSchemeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for an itemSerialScheme. (asynchronously)
     * Get all existing itemSerialScheme tags.
     * @param itemSerialSchemeId Id of the itemSerialScheme to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemSerialSchemeTagsAsync(Integer itemSerialSchemeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemSerialSchemeTagsValidateBeforeCall(itemSerialSchemeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateItemSerialScheme
     * @param body ItemSerialScheme to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateItemSerialSchemeCall(ItemSerialScheme body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/itemSerialScheme";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateItemSerialSchemeValidateBeforeCall(ItemSerialScheme body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateItemSerialScheme(Async)");
        }
        

        com.squareup.okhttp.Call call = updateItemSerialSchemeCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an itemSerialScheme
     * Updates an existing itemSerialScheme using the specified data.
     * @param body ItemSerialScheme to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateItemSerialScheme(ItemSerialScheme body) throws ApiException {
        updateItemSerialSchemeWithHttpInfo(body);
    }

    /**
     * Update an itemSerialScheme
     * Updates an existing itemSerialScheme using the specified data.
     * @param body ItemSerialScheme to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateItemSerialSchemeWithHttpInfo(ItemSerialScheme body) throws ApiException {
        com.squareup.okhttp.Call call = updateItemSerialSchemeValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an itemSerialScheme (asynchronously)
     * Updates an existing itemSerialScheme using the specified data.
     * @param body ItemSerialScheme to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateItemSerialSchemeAsync(ItemSerialScheme body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateItemSerialSchemeValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
