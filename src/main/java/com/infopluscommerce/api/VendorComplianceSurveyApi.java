/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;
import com.infopluscommerce.model.VendorComplianceSurvey;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VendorComplianceSurveyApi {
    private ApiClient apiClient;

    public VendorComplianceSurveyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VendorComplianceSurveyApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addVendorComplianceSurvey
     * @param body VendorComplianceSurvey to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addVendorComplianceSurveyCall(VendorComplianceSurvey body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/vendorComplianceSurvey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addVendorComplianceSurveyValidateBeforeCall(VendorComplianceSurvey body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addVendorComplianceSurvey(Async)");
        }
        

        com.squareup.okhttp.Call call = addVendorComplianceSurveyCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a vendorComplianceSurvey
     * Inserts a new vendorComplianceSurvey using the specified data.
     * @param body VendorComplianceSurvey to be inserted. (required)
     * @return VendorComplianceSurvey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VendorComplianceSurvey addVendorComplianceSurvey(VendorComplianceSurvey body) throws ApiException {
        ApiResponse<VendorComplianceSurvey> resp = addVendorComplianceSurveyWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a vendorComplianceSurvey
     * Inserts a new vendorComplianceSurvey using the specified data.
     * @param body VendorComplianceSurvey to be inserted. (required)
     * @return ApiResponse&lt;VendorComplianceSurvey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VendorComplianceSurvey> addVendorComplianceSurveyWithHttpInfo(VendorComplianceSurvey body) throws ApiException {
        com.squareup.okhttp.Call call = addVendorComplianceSurveyValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<VendorComplianceSurvey>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a vendorComplianceSurvey (asynchronously)
     * Inserts a new vendorComplianceSurvey using the specified data.
     * @param body VendorComplianceSurvey to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addVendorComplianceSurveyAsync(VendorComplianceSurvey body, final ApiCallback<VendorComplianceSurvey> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addVendorComplianceSurveyValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VendorComplianceSurvey>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addVendorComplianceSurveyAudit
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to add an audit to (required)
     * @param vendorComplianceSurveyAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addVendorComplianceSurveyAuditCall(Integer vendorComplianceSurveyId, String vendorComplianceSurveyAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/vendorComplianceSurvey/{vendorComplianceSurveyId}/audit/{vendorComplianceSurveyAudit}"
            .replaceAll("\\{" + "vendorComplianceSurveyId" + "\\}", apiClient.escapeString(vendorComplianceSurveyId.toString()))
            .replaceAll("\\{" + "vendorComplianceSurveyAudit" + "\\}", apiClient.escapeString(vendorComplianceSurveyAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addVendorComplianceSurveyAuditValidateBeforeCall(Integer vendorComplianceSurveyId, String vendorComplianceSurveyAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vendorComplianceSurveyId' is set
        if (vendorComplianceSurveyId == null) {
            throw new ApiException("Missing the required parameter 'vendorComplianceSurveyId' when calling addVendorComplianceSurveyAudit(Async)");
        }
        
        // verify the required parameter 'vendorComplianceSurveyAudit' is set
        if (vendorComplianceSurveyAudit == null) {
            throw new ApiException("Missing the required parameter 'vendorComplianceSurveyAudit' when calling addVendorComplianceSurveyAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addVendorComplianceSurveyAuditCall(vendorComplianceSurveyId, vendorComplianceSurveyAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a vendorComplianceSurvey
     * Adds an audit to an existing vendorComplianceSurvey.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to add an audit to (required)
     * @param vendorComplianceSurveyAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addVendorComplianceSurveyAudit(Integer vendorComplianceSurveyId, String vendorComplianceSurveyAudit) throws ApiException {
        addVendorComplianceSurveyAuditWithHttpInfo(vendorComplianceSurveyId, vendorComplianceSurveyAudit);
    }

    /**
     * Add new audit for a vendorComplianceSurvey
     * Adds an audit to an existing vendorComplianceSurvey.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to add an audit to (required)
     * @param vendorComplianceSurveyAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addVendorComplianceSurveyAuditWithHttpInfo(Integer vendorComplianceSurveyId, String vendorComplianceSurveyAudit) throws ApiException {
        com.squareup.okhttp.Call call = addVendorComplianceSurveyAuditValidateBeforeCall(vendorComplianceSurveyId, vendorComplianceSurveyAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a vendorComplianceSurvey (asynchronously)
     * Adds an audit to an existing vendorComplianceSurvey.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to add an audit to (required)
     * @param vendorComplianceSurveyAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addVendorComplianceSurveyAuditAsync(Integer vendorComplianceSurveyId, String vendorComplianceSurveyAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addVendorComplianceSurveyAuditValidateBeforeCall(vendorComplianceSurveyId, vendorComplianceSurveyAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addVendorComplianceSurveyFile
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addVendorComplianceSurveyFileCall(Integer vendorComplianceSurveyId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/vendorComplianceSurvey/{vendorComplianceSurveyId}/file/{fileName}"
            .replaceAll("\\{" + "vendorComplianceSurveyId" + "\\}", apiClient.escapeString(vendorComplianceSurveyId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addVendorComplianceSurveyFileValidateBeforeCall(Integer vendorComplianceSurveyId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vendorComplianceSurveyId' is set
        if (vendorComplianceSurveyId == null) {
            throw new ApiException("Missing the required parameter 'vendorComplianceSurveyId' when calling addVendorComplianceSurveyFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addVendorComplianceSurveyFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addVendorComplianceSurveyFileCall(vendorComplianceSurveyId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a vendorComplianceSurvey
     * Adds a file to an existing vendorComplianceSurvey.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addVendorComplianceSurveyFile(Integer vendorComplianceSurveyId, String fileName) throws ApiException {
        addVendorComplianceSurveyFileWithHttpInfo(vendorComplianceSurveyId, fileName);
    }

    /**
     * Attach a file to a vendorComplianceSurvey
     * Adds a file to an existing vendorComplianceSurvey.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addVendorComplianceSurveyFileWithHttpInfo(Integer vendorComplianceSurveyId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addVendorComplianceSurveyFileValidateBeforeCall(vendorComplianceSurveyId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a vendorComplianceSurvey (asynchronously)
     * Adds a file to an existing vendorComplianceSurvey.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addVendorComplianceSurveyFileAsync(Integer vendorComplianceSurveyId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addVendorComplianceSurveyFileValidateBeforeCall(vendorComplianceSurveyId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addVendorComplianceSurveyFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addVendorComplianceSurveyFileByURLCall(RecordFile body, Integer vendorComplianceSurveyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/vendorComplianceSurvey/{vendorComplianceSurveyId}/file"
            .replaceAll("\\{" + "vendorComplianceSurveyId" + "\\}", apiClient.escapeString(vendorComplianceSurveyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addVendorComplianceSurveyFileByURLValidateBeforeCall(RecordFile body, Integer vendorComplianceSurveyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addVendorComplianceSurveyFileByURL(Async)");
        }
        
        // verify the required parameter 'vendorComplianceSurveyId' is set
        if (vendorComplianceSurveyId == null) {
            throw new ApiException("Missing the required parameter 'vendorComplianceSurveyId' when calling addVendorComplianceSurveyFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addVendorComplianceSurveyFileByURLCall(body, vendorComplianceSurveyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a vendorComplianceSurvey by URL.
     * Adds a file to an existing vendorComplianceSurvey by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addVendorComplianceSurveyFileByURL(RecordFile body, Integer vendorComplianceSurveyId) throws ApiException {
        addVendorComplianceSurveyFileByURLWithHttpInfo(body, vendorComplianceSurveyId);
    }

    /**
     * Attach a file to a vendorComplianceSurvey by URL.
     * Adds a file to an existing vendorComplianceSurvey by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addVendorComplianceSurveyFileByURLWithHttpInfo(RecordFile body, Integer vendorComplianceSurveyId) throws ApiException {
        com.squareup.okhttp.Call call = addVendorComplianceSurveyFileByURLValidateBeforeCall(body, vendorComplianceSurveyId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a vendorComplianceSurvey by URL. (asynchronously)
     * Adds a file to an existing vendorComplianceSurvey by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addVendorComplianceSurveyFileByURLAsync(RecordFile body, Integer vendorComplianceSurveyId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addVendorComplianceSurveyFileByURLValidateBeforeCall(body, vendorComplianceSurveyId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addVendorComplianceSurveyTag
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to add a tag to (required)
     * @param vendorComplianceSurveyTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addVendorComplianceSurveyTagCall(Integer vendorComplianceSurveyId, String vendorComplianceSurveyTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/vendorComplianceSurvey/{vendorComplianceSurveyId}/tag/{vendorComplianceSurveyTag}"
            .replaceAll("\\{" + "vendorComplianceSurveyId" + "\\}", apiClient.escapeString(vendorComplianceSurveyId.toString()))
            .replaceAll("\\{" + "vendorComplianceSurveyTag" + "\\}", apiClient.escapeString(vendorComplianceSurveyTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addVendorComplianceSurveyTagValidateBeforeCall(Integer vendorComplianceSurveyId, String vendorComplianceSurveyTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vendorComplianceSurveyId' is set
        if (vendorComplianceSurveyId == null) {
            throw new ApiException("Missing the required parameter 'vendorComplianceSurveyId' when calling addVendorComplianceSurveyTag(Async)");
        }
        
        // verify the required parameter 'vendorComplianceSurveyTag' is set
        if (vendorComplianceSurveyTag == null) {
            throw new ApiException("Missing the required parameter 'vendorComplianceSurveyTag' when calling addVendorComplianceSurveyTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addVendorComplianceSurveyTagCall(vendorComplianceSurveyId, vendorComplianceSurveyTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a vendorComplianceSurvey.
     * Adds a tag to an existing vendorComplianceSurvey.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to add a tag to (required)
     * @param vendorComplianceSurveyTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addVendorComplianceSurveyTag(Integer vendorComplianceSurveyId, String vendorComplianceSurveyTag) throws ApiException {
        addVendorComplianceSurveyTagWithHttpInfo(vendorComplianceSurveyId, vendorComplianceSurveyTag);
    }

    /**
     * Add new tags for a vendorComplianceSurvey.
     * Adds a tag to an existing vendorComplianceSurvey.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to add a tag to (required)
     * @param vendorComplianceSurveyTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addVendorComplianceSurveyTagWithHttpInfo(Integer vendorComplianceSurveyId, String vendorComplianceSurveyTag) throws ApiException {
        com.squareup.okhttp.Call call = addVendorComplianceSurveyTagValidateBeforeCall(vendorComplianceSurveyId, vendorComplianceSurveyTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a vendorComplianceSurvey. (asynchronously)
     * Adds a tag to an existing vendorComplianceSurvey.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to add a tag to (required)
     * @param vendorComplianceSurveyTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addVendorComplianceSurveyTagAsync(Integer vendorComplianceSurveyId, String vendorComplianceSurveyTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addVendorComplianceSurveyTagValidateBeforeCall(vendorComplianceSurveyId, vendorComplianceSurveyTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteVendorComplianceSurvey
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteVendorComplianceSurveyCall(Integer vendorComplianceSurveyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/vendorComplianceSurvey/{vendorComplianceSurveyId}"
            .replaceAll("\\{" + "vendorComplianceSurveyId" + "\\}", apiClient.escapeString(vendorComplianceSurveyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteVendorComplianceSurveyValidateBeforeCall(Integer vendorComplianceSurveyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vendorComplianceSurveyId' is set
        if (vendorComplianceSurveyId == null) {
            throw new ApiException("Missing the required parameter 'vendorComplianceSurveyId' when calling deleteVendorComplianceSurvey(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteVendorComplianceSurveyCall(vendorComplianceSurveyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a vendorComplianceSurvey
     * Deletes the vendorComplianceSurvey identified by the specified id.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteVendorComplianceSurvey(Integer vendorComplianceSurveyId) throws ApiException {
        deleteVendorComplianceSurveyWithHttpInfo(vendorComplianceSurveyId);
    }

    /**
     * Delete a vendorComplianceSurvey
     * Deletes the vendorComplianceSurvey identified by the specified id.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteVendorComplianceSurveyWithHttpInfo(Integer vendorComplianceSurveyId) throws ApiException {
        com.squareup.okhttp.Call call = deleteVendorComplianceSurveyValidateBeforeCall(vendorComplianceSurveyId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a vendorComplianceSurvey (asynchronously)
     * Deletes the vendorComplianceSurvey identified by the specified id.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteVendorComplianceSurveyAsync(Integer vendorComplianceSurveyId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteVendorComplianceSurveyValidateBeforeCall(vendorComplianceSurveyId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteVendorComplianceSurveyFile
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteVendorComplianceSurveyFileCall(Integer vendorComplianceSurveyId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/vendorComplianceSurvey/{vendorComplianceSurveyId}/file/{fileId}"
            .replaceAll("\\{" + "vendorComplianceSurveyId" + "\\}", apiClient.escapeString(vendorComplianceSurveyId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteVendorComplianceSurveyFileValidateBeforeCall(Integer vendorComplianceSurveyId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vendorComplianceSurveyId' is set
        if (vendorComplianceSurveyId == null) {
            throw new ApiException("Missing the required parameter 'vendorComplianceSurveyId' when calling deleteVendorComplianceSurveyFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteVendorComplianceSurveyFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteVendorComplianceSurveyFileCall(vendorComplianceSurveyId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a vendorComplianceSurvey.
     * Deletes an existing vendorComplianceSurvey file using the specified data.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteVendorComplianceSurveyFile(Integer vendorComplianceSurveyId, Integer fileId) throws ApiException {
        deleteVendorComplianceSurveyFileWithHttpInfo(vendorComplianceSurveyId, fileId);
    }

    /**
     * Delete a file for a vendorComplianceSurvey.
     * Deletes an existing vendorComplianceSurvey file using the specified data.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteVendorComplianceSurveyFileWithHttpInfo(Integer vendorComplianceSurveyId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteVendorComplianceSurveyFileValidateBeforeCall(vendorComplianceSurveyId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a vendorComplianceSurvey. (asynchronously)
     * Deletes an existing vendorComplianceSurvey file using the specified data.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteVendorComplianceSurveyFileAsync(Integer vendorComplianceSurveyId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteVendorComplianceSurveyFileValidateBeforeCall(vendorComplianceSurveyId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteVendorComplianceSurveyTag
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to remove tag from (required)
     * @param vendorComplianceSurveyTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteVendorComplianceSurveyTagCall(Integer vendorComplianceSurveyId, String vendorComplianceSurveyTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/vendorComplianceSurvey/{vendorComplianceSurveyId}/tag/{vendorComplianceSurveyTag}"
            .replaceAll("\\{" + "vendorComplianceSurveyId" + "\\}", apiClient.escapeString(vendorComplianceSurveyId.toString()))
            .replaceAll("\\{" + "vendorComplianceSurveyTag" + "\\}", apiClient.escapeString(vendorComplianceSurveyTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteVendorComplianceSurveyTagValidateBeforeCall(Integer vendorComplianceSurveyId, String vendorComplianceSurveyTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vendorComplianceSurveyId' is set
        if (vendorComplianceSurveyId == null) {
            throw new ApiException("Missing the required parameter 'vendorComplianceSurveyId' when calling deleteVendorComplianceSurveyTag(Async)");
        }
        
        // verify the required parameter 'vendorComplianceSurveyTag' is set
        if (vendorComplianceSurveyTag == null) {
            throw new ApiException("Missing the required parameter 'vendorComplianceSurveyTag' when calling deleteVendorComplianceSurveyTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteVendorComplianceSurveyTagCall(vendorComplianceSurveyId, vendorComplianceSurveyTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a vendorComplianceSurvey.
     * Deletes an existing vendorComplianceSurvey tag using the specified data.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to remove tag from (required)
     * @param vendorComplianceSurveyTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteVendorComplianceSurveyTag(Integer vendorComplianceSurveyId, String vendorComplianceSurveyTag) throws ApiException {
        deleteVendorComplianceSurveyTagWithHttpInfo(vendorComplianceSurveyId, vendorComplianceSurveyTag);
    }

    /**
     * Delete a tag for a vendorComplianceSurvey.
     * Deletes an existing vendorComplianceSurvey tag using the specified data.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to remove tag from (required)
     * @param vendorComplianceSurveyTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteVendorComplianceSurveyTagWithHttpInfo(Integer vendorComplianceSurveyId, String vendorComplianceSurveyTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteVendorComplianceSurveyTagValidateBeforeCall(vendorComplianceSurveyId, vendorComplianceSurveyTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a vendorComplianceSurvey. (asynchronously)
     * Deletes an existing vendorComplianceSurvey tag using the specified data.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to remove tag from (required)
     * @param vendorComplianceSurveyTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteVendorComplianceSurveyTagAsync(Integer vendorComplianceSurveyId, String vendorComplianceSurveyTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteVendorComplianceSurveyTagValidateBeforeCall(vendorComplianceSurveyId, vendorComplianceSurveyTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateVendorComplianceSurveyById
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateVendorComplianceSurveyByIdCall(Integer vendorComplianceSurveyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/vendorComplianceSurvey/duplicate/{vendorComplianceSurveyId}"
            .replaceAll("\\{" + "vendorComplianceSurveyId" + "\\}", apiClient.escapeString(vendorComplianceSurveyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateVendorComplianceSurveyByIdValidateBeforeCall(Integer vendorComplianceSurveyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vendorComplianceSurveyId' is set
        if (vendorComplianceSurveyId == null) {
            throw new ApiException("Missing the required parameter 'vendorComplianceSurveyId' when calling getDuplicateVendorComplianceSurveyById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateVendorComplianceSurveyByIdCall(vendorComplianceSurveyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a vendorComplianceSurvey by id
     * Returns a duplicated vendorComplianceSurvey identified by the specified id.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to be duplicated. (required)
     * @return VendorComplianceSurvey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VendorComplianceSurvey getDuplicateVendorComplianceSurveyById(Integer vendorComplianceSurveyId) throws ApiException {
        ApiResponse<VendorComplianceSurvey> resp = getDuplicateVendorComplianceSurveyByIdWithHttpInfo(vendorComplianceSurveyId);
        return resp.getData();
    }

    /**
     * Get a duplicated a vendorComplianceSurvey by id
     * Returns a duplicated vendorComplianceSurvey identified by the specified id.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to be duplicated. (required)
     * @return ApiResponse&lt;VendorComplianceSurvey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VendorComplianceSurvey> getDuplicateVendorComplianceSurveyByIdWithHttpInfo(Integer vendorComplianceSurveyId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateVendorComplianceSurveyByIdValidateBeforeCall(vendorComplianceSurveyId, null, null);
        Type localVarReturnType = new TypeToken<VendorComplianceSurvey>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a vendorComplianceSurvey by id (asynchronously)
     * Returns a duplicated vendorComplianceSurvey identified by the specified id.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateVendorComplianceSurveyByIdAsync(Integer vendorComplianceSurveyId, final ApiCallback<VendorComplianceSurvey> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateVendorComplianceSurveyByIdValidateBeforeCall(vendorComplianceSurveyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VendorComplianceSurvey>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVendorComplianceSurveyByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVendorComplianceSurveyByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/vendorComplianceSurvey/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVendorComplianceSurveyByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getVendorComplianceSurveyByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search vendorComplianceSurveys by filter
     * Returns the list of vendorComplianceSurveys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;VendorComplianceSurvey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<VendorComplianceSurvey> getVendorComplianceSurveyByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<VendorComplianceSurvey>> resp = getVendorComplianceSurveyByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search vendorComplianceSurveys by filter
     * Returns the list of vendorComplianceSurveys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;VendorComplianceSurvey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<VendorComplianceSurvey>> getVendorComplianceSurveyByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getVendorComplianceSurveyByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<VendorComplianceSurvey>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search vendorComplianceSurveys by filter (asynchronously)
     * Returns the list of vendorComplianceSurveys that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVendorComplianceSurveyByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<VendorComplianceSurvey>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVendorComplianceSurveyByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<VendorComplianceSurvey>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVendorComplianceSurveyById
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVendorComplianceSurveyByIdCall(Integer vendorComplianceSurveyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/vendorComplianceSurvey/{vendorComplianceSurveyId}"
            .replaceAll("\\{" + "vendorComplianceSurveyId" + "\\}", apiClient.escapeString(vendorComplianceSurveyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVendorComplianceSurveyByIdValidateBeforeCall(Integer vendorComplianceSurveyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vendorComplianceSurveyId' is set
        if (vendorComplianceSurveyId == null) {
            throw new ApiException("Missing the required parameter 'vendorComplianceSurveyId' when calling getVendorComplianceSurveyById(Async)");
        }
        

        com.squareup.okhttp.Call call = getVendorComplianceSurveyByIdCall(vendorComplianceSurveyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a vendorComplianceSurvey by id
     * Returns the vendorComplianceSurvey identified by the specified id.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to be returned. (required)
     * @return VendorComplianceSurvey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VendorComplianceSurvey getVendorComplianceSurveyById(Integer vendorComplianceSurveyId) throws ApiException {
        ApiResponse<VendorComplianceSurvey> resp = getVendorComplianceSurveyByIdWithHttpInfo(vendorComplianceSurveyId);
        return resp.getData();
    }

    /**
     * Get a vendorComplianceSurvey by id
     * Returns the vendorComplianceSurvey identified by the specified id.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to be returned. (required)
     * @return ApiResponse&lt;VendorComplianceSurvey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VendorComplianceSurvey> getVendorComplianceSurveyByIdWithHttpInfo(Integer vendorComplianceSurveyId) throws ApiException {
        com.squareup.okhttp.Call call = getVendorComplianceSurveyByIdValidateBeforeCall(vendorComplianceSurveyId, null, null);
        Type localVarReturnType = new TypeToken<VendorComplianceSurvey>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a vendorComplianceSurvey by id (asynchronously)
     * Returns the vendorComplianceSurvey identified by the specified id.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVendorComplianceSurveyByIdAsync(Integer vendorComplianceSurveyId, final ApiCallback<VendorComplianceSurvey> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVendorComplianceSurveyByIdValidateBeforeCall(vendorComplianceSurveyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VendorComplianceSurvey>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVendorComplianceSurveyFiles
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVendorComplianceSurveyFilesCall(Integer vendorComplianceSurveyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/vendorComplianceSurvey/{vendorComplianceSurveyId}/file"
            .replaceAll("\\{" + "vendorComplianceSurveyId" + "\\}", apiClient.escapeString(vendorComplianceSurveyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVendorComplianceSurveyFilesValidateBeforeCall(Integer vendorComplianceSurveyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vendorComplianceSurveyId' is set
        if (vendorComplianceSurveyId == null) {
            throw new ApiException("Missing the required parameter 'vendorComplianceSurveyId' when calling getVendorComplianceSurveyFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getVendorComplianceSurveyFilesCall(vendorComplianceSurveyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a vendorComplianceSurvey.
     * Get all existing vendorComplianceSurvey files.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getVendorComplianceSurveyFiles(Integer vendorComplianceSurveyId) throws ApiException {
        getVendorComplianceSurveyFilesWithHttpInfo(vendorComplianceSurveyId);
    }

    /**
     * Get the files for a vendorComplianceSurvey.
     * Get all existing vendorComplianceSurvey files.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getVendorComplianceSurveyFilesWithHttpInfo(Integer vendorComplianceSurveyId) throws ApiException {
        com.squareup.okhttp.Call call = getVendorComplianceSurveyFilesValidateBeforeCall(vendorComplianceSurveyId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a vendorComplianceSurvey. (asynchronously)
     * Get all existing vendorComplianceSurvey files.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVendorComplianceSurveyFilesAsync(Integer vendorComplianceSurveyId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVendorComplianceSurveyFilesValidateBeforeCall(vendorComplianceSurveyId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getVendorComplianceSurveyTags
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVendorComplianceSurveyTagsCall(Integer vendorComplianceSurveyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/vendorComplianceSurvey/{vendorComplianceSurveyId}/tag"
            .replaceAll("\\{" + "vendorComplianceSurveyId" + "\\}", apiClient.escapeString(vendorComplianceSurveyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVendorComplianceSurveyTagsValidateBeforeCall(Integer vendorComplianceSurveyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vendorComplianceSurveyId' is set
        if (vendorComplianceSurveyId == null) {
            throw new ApiException("Missing the required parameter 'vendorComplianceSurveyId' when calling getVendorComplianceSurveyTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getVendorComplianceSurveyTagsCall(vendorComplianceSurveyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a vendorComplianceSurvey.
     * Get all existing vendorComplianceSurvey tags.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getVendorComplianceSurveyTags(Integer vendorComplianceSurveyId) throws ApiException {
        getVendorComplianceSurveyTagsWithHttpInfo(vendorComplianceSurveyId);
    }

    /**
     * Get the tags for a vendorComplianceSurvey.
     * Get all existing vendorComplianceSurvey tags.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getVendorComplianceSurveyTagsWithHttpInfo(Integer vendorComplianceSurveyId) throws ApiException {
        com.squareup.okhttp.Call call = getVendorComplianceSurveyTagsValidateBeforeCall(vendorComplianceSurveyId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a vendorComplianceSurvey. (asynchronously)
     * Get all existing vendorComplianceSurvey tags.
     * @param vendorComplianceSurveyId Id of the vendorComplianceSurvey to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVendorComplianceSurveyTagsAsync(Integer vendorComplianceSurveyId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVendorComplianceSurveyTagsValidateBeforeCall(vendorComplianceSurveyId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateVendorComplianceSurvey
     * @param body VendorComplianceSurvey to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateVendorComplianceSurveyCall(VendorComplianceSurvey body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/vendorComplianceSurvey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateVendorComplianceSurveyValidateBeforeCall(VendorComplianceSurvey body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateVendorComplianceSurvey(Async)");
        }
        

        com.squareup.okhttp.Call call = updateVendorComplianceSurveyCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a vendorComplianceSurvey
     * Updates an existing vendorComplianceSurvey using the specified data.
     * @param body VendorComplianceSurvey to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateVendorComplianceSurvey(VendorComplianceSurvey body) throws ApiException {
        updateVendorComplianceSurveyWithHttpInfo(body);
    }

    /**
     * Update a vendorComplianceSurvey
     * Updates an existing vendorComplianceSurvey using the specified data.
     * @param body VendorComplianceSurvey to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateVendorComplianceSurveyWithHttpInfo(VendorComplianceSurvey body) throws ApiException {
        com.squareup.okhttp.Call call = updateVendorComplianceSurveyValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a vendorComplianceSurvey (asynchronously)
     * Updates an existing vendorComplianceSurvey using the specified data.
     * @param body VendorComplianceSurvey to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateVendorComplianceSurveyAsync(VendorComplianceSurvey body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateVendorComplianceSurveyValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateVendorComplianceSurveyCustomFields
     * @param body VendorComplianceSurvey to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateVendorComplianceSurveyCustomFieldsCall(VendorComplianceSurvey body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/vendorComplianceSurvey/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateVendorComplianceSurveyCustomFieldsValidateBeforeCall(VendorComplianceSurvey body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateVendorComplianceSurveyCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateVendorComplianceSurveyCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a vendorComplianceSurvey custom fields
     * Updates an existing vendorComplianceSurvey custom fields using the specified data.
     * @param body VendorComplianceSurvey to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateVendorComplianceSurveyCustomFields(VendorComplianceSurvey body) throws ApiException {
        updateVendorComplianceSurveyCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a vendorComplianceSurvey custom fields
     * Updates an existing vendorComplianceSurvey custom fields using the specified data.
     * @param body VendorComplianceSurvey to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateVendorComplianceSurveyCustomFieldsWithHttpInfo(VendorComplianceSurvey body) throws ApiException {
        com.squareup.okhttp.Call call = updateVendorComplianceSurveyCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a vendorComplianceSurvey custom fields (asynchronously)
     * Updates an existing vendorComplianceSurvey custom fields using the specified data.
     * @param body VendorComplianceSurvey to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateVendorComplianceSurveyCustomFieldsAsync(VendorComplianceSurvey body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateVendorComplianceSurveyCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
