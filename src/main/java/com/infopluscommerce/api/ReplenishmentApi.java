/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.RecordFile;
import com.infopluscommerce.model.Replenishment;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReplenishmentApi {
    private ApiClient apiClient;

    public ReplenishmentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReplenishmentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addReplenishmentAudit
     * @param replenishmentId Id of the replenishment to add an audit to (required)
     * @param replenishmentAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addReplenishmentAuditCall(Integer replenishmentId, String replenishmentAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishment/{replenishmentId}/audit/{replenishmentAudit}"
            .replaceAll("\\{" + "replenishmentId" + "\\}", apiClient.escapeString(replenishmentId.toString()))
            .replaceAll("\\{" + "replenishmentAudit" + "\\}", apiClient.escapeString(replenishmentAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addReplenishmentAuditValidateBeforeCall(Integer replenishmentId, String replenishmentAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'replenishmentId' is set
        if (replenishmentId == null) {
            throw new ApiException("Missing the required parameter 'replenishmentId' when calling addReplenishmentAudit(Async)");
        }
        
        // verify the required parameter 'replenishmentAudit' is set
        if (replenishmentAudit == null) {
            throw new ApiException("Missing the required parameter 'replenishmentAudit' when calling addReplenishmentAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addReplenishmentAuditCall(replenishmentId, replenishmentAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a replenishment
     * Adds an audit to an existing replenishment.
     * @param replenishmentId Id of the replenishment to add an audit to (required)
     * @param replenishmentAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addReplenishmentAudit(Integer replenishmentId, String replenishmentAudit) throws ApiException {
        addReplenishmentAuditWithHttpInfo(replenishmentId, replenishmentAudit);
    }

    /**
     * Add new audit for a replenishment
     * Adds an audit to an existing replenishment.
     * @param replenishmentId Id of the replenishment to add an audit to (required)
     * @param replenishmentAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addReplenishmentAuditWithHttpInfo(Integer replenishmentId, String replenishmentAudit) throws ApiException {
        com.squareup.okhttp.Call call = addReplenishmentAuditValidateBeforeCall(replenishmentId, replenishmentAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a replenishment (asynchronously)
     * Adds an audit to an existing replenishment.
     * @param replenishmentId Id of the replenishment to add an audit to (required)
     * @param replenishmentAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addReplenishmentAuditAsync(Integer replenishmentId, String replenishmentAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addReplenishmentAuditValidateBeforeCall(replenishmentId, replenishmentAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addReplenishmentFile
     * @param replenishmentId Id of the replenishment to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addReplenishmentFileCall(Integer replenishmentId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishment/{replenishmentId}/file/{fileName}"
            .replaceAll("\\{" + "replenishmentId" + "\\}", apiClient.escapeString(replenishmentId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addReplenishmentFileValidateBeforeCall(Integer replenishmentId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'replenishmentId' is set
        if (replenishmentId == null) {
            throw new ApiException("Missing the required parameter 'replenishmentId' when calling addReplenishmentFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addReplenishmentFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addReplenishmentFileCall(replenishmentId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a replenishment
     * Adds a file to an existing replenishment.
     * @param replenishmentId Id of the replenishment to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addReplenishmentFile(Integer replenishmentId, String fileName) throws ApiException {
        addReplenishmentFileWithHttpInfo(replenishmentId, fileName);
    }

    /**
     * Attach a file to a replenishment
     * Adds a file to an existing replenishment.
     * @param replenishmentId Id of the replenishment to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addReplenishmentFileWithHttpInfo(Integer replenishmentId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addReplenishmentFileValidateBeforeCall(replenishmentId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a replenishment (asynchronously)
     * Adds a file to an existing replenishment.
     * @param replenishmentId Id of the replenishment to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addReplenishmentFileAsync(Integer replenishmentId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addReplenishmentFileValidateBeforeCall(replenishmentId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addReplenishmentFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param replenishmentId Id of the replenishment to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addReplenishmentFileByURLCall(RecordFile body, Integer replenishmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/replenishment/{replenishmentId}/file"
            .replaceAll("\\{" + "replenishmentId" + "\\}", apiClient.escapeString(replenishmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addReplenishmentFileByURLValidateBeforeCall(RecordFile body, Integer replenishmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addReplenishmentFileByURL(Async)");
        }
        
        // verify the required parameter 'replenishmentId' is set
        if (replenishmentId == null) {
            throw new ApiException("Missing the required parameter 'replenishmentId' when calling addReplenishmentFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addReplenishmentFileByURLCall(body, replenishmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a replenishment by URL.
     * Adds a file to an existing replenishment by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param replenishmentId Id of the replenishment to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addReplenishmentFileByURL(RecordFile body, Integer replenishmentId) throws ApiException {
        addReplenishmentFileByURLWithHttpInfo(body, replenishmentId);
    }

    /**
     * Attach a file to a replenishment by URL.
     * Adds a file to an existing replenishment by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param replenishmentId Id of the replenishment to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addReplenishmentFileByURLWithHttpInfo(RecordFile body, Integer replenishmentId) throws ApiException {
        com.squareup.okhttp.Call call = addReplenishmentFileByURLValidateBeforeCall(body, replenishmentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a replenishment by URL. (asynchronously)
     * Adds a file to an existing replenishment by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param replenishmentId Id of the replenishment to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addReplenishmentFileByURLAsync(RecordFile body, Integer replenishmentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addReplenishmentFileByURLValidateBeforeCall(body, replenishmentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addReplenishmentTag
     * @param replenishmentId Id of the replenishment to add a tag to (required)
     * @param replenishmentTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addReplenishmentTagCall(Integer replenishmentId, String replenishmentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishment/{replenishmentId}/tag/{replenishmentTag}"
            .replaceAll("\\{" + "replenishmentId" + "\\}", apiClient.escapeString(replenishmentId.toString()))
            .replaceAll("\\{" + "replenishmentTag" + "\\}", apiClient.escapeString(replenishmentTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addReplenishmentTagValidateBeforeCall(Integer replenishmentId, String replenishmentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'replenishmentId' is set
        if (replenishmentId == null) {
            throw new ApiException("Missing the required parameter 'replenishmentId' when calling addReplenishmentTag(Async)");
        }
        
        // verify the required parameter 'replenishmentTag' is set
        if (replenishmentTag == null) {
            throw new ApiException("Missing the required parameter 'replenishmentTag' when calling addReplenishmentTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addReplenishmentTagCall(replenishmentId, replenishmentTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a replenishment.
     * Adds a tag to an existing replenishment.
     * @param replenishmentId Id of the replenishment to add a tag to (required)
     * @param replenishmentTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addReplenishmentTag(Integer replenishmentId, String replenishmentTag) throws ApiException {
        addReplenishmentTagWithHttpInfo(replenishmentId, replenishmentTag);
    }

    /**
     * Add new tags for a replenishment.
     * Adds a tag to an existing replenishment.
     * @param replenishmentId Id of the replenishment to add a tag to (required)
     * @param replenishmentTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addReplenishmentTagWithHttpInfo(Integer replenishmentId, String replenishmentTag) throws ApiException {
        com.squareup.okhttp.Call call = addReplenishmentTagValidateBeforeCall(replenishmentId, replenishmentTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a replenishment. (asynchronously)
     * Adds a tag to an existing replenishment.
     * @param replenishmentId Id of the replenishment to add a tag to (required)
     * @param replenishmentTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addReplenishmentTagAsync(Integer replenishmentId, String replenishmentTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addReplenishmentTagValidateBeforeCall(replenishmentId, replenishmentTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteReplenishmentFile
     * @param replenishmentId Id of the replenishment to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteReplenishmentFileCall(Integer replenishmentId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishment/{replenishmentId}/file/{fileId}"
            .replaceAll("\\{" + "replenishmentId" + "\\}", apiClient.escapeString(replenishmentId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteReplenishmentFileValidateBeforeCall(Integer replenishmentId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'replenishmentId' is set
        if (replenishmentId == null) {
            throw new ApiException("Missing the required parameter 'replenishmentId' when calling deleteReplenishmentFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteReplenishmentFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteReplenishmentFileCall(replenishmentId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a replenishment.
     * Deletes an existing replenishment file using the specified data.
     * @param replenishmentId Id of the replenishment to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteReplenishmentFile(Integer replenishmentId, Integer fileId) throws ApiException {
        deleteReplenishmentFileWithHttpInfo(replenishmentId, fileId);
    }

    /**
     * Delete a file for a replenishment.
     * Deletes an existing replenishment file using the specified data.
     * @param replenishmentId Id of the replenishment to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteReplenishmentFileWithHttpInfo(Integer replenishmentId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteReplenishmentFileValidateBeforeCall(replenishmentId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a replenishment. (asynchronously)
     * Deletes an existing replenishment file using the specified data.
     * @param replenishmentId Id of the replenishment to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteReplenishmentFileAsync(Integer replenishmentId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteReplenishmentFileValidateBeforeCall(replenishmentId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteReplenishmentTag
     * @param replenishmentId Id of the replenishment to remove tag from (required)
     * @param replenishmentTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteReplenishmentTagCall(Integer replenishmentId, String replenishmentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishment/{replenishmentId}/tag/{replenishmentTag}"
            .replaceAll("\\{" + "replenishmentId" + "\\}", apiClient.escapeString(replenishmentId.toString()))
            .replaceAll("\\{" + "replenishmentTag" + "\\}", apiClient.escapeString(replenishmentTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteReplenishmentTagValidateBeforeCall(Integer replenishmentId, String replenishmentTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'replenishmentId' is set
        if (replenishmentId == null) {
            throw new ApiException("Missing the required parameter 'replenishmentId' when calling deleteReplenishmentTag(Async)");
        }
        
        // verify the required parameter 'replenishmentTag' is set
        if (replenishmentTag == null) {
            throw new ApiException("Missing the required parameter 'replenishmentTag' when calling deleteReplenishmentTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteReplenishmentTagCall(replenishmentId, replenishmentTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a replenishment.
     * Deletes an existing replenishment tag using the specified data.
     * @param replenishmentId Id of the replenishment to remove tag from (required)
     * @param replenishmentTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteReplenishmentTag(Integer replenishmentId, String replenishmentTag) throws ApiException {
        deleteReplenishmentTagWithHttpInfo(replenishmentId, replenishmentTag);
    }

    /**
     * Delete a tag for a replenishment.
     * Deletes an existing replenishment tag using the specified data.
     * @param replenishmentId Id of the replenishment to remove tag from (required)
     * @param replenishmentTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteReplenishmentTagWithHttpInfo(Integer replenishmentId, String replenishmentTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteReplenishmentTagValidateBeforeCall(replenishmentId, replenishmentTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a replenishment. (asynchronously)
     * Deletes an existing replenishment tag using the specified data.
     * @param replenishmentId Id of the replenishment to remove tag from (required)
     * @param replenishmentTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteReplenishmentTagAsync(Integer replenishmentId, String replenishmentTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteReplenishmentTagValidateBeforeCall(replenishmentId, replenishmentTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateReplenishmentById
     * @param replenishmentId Id of the replenishment to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateReplenishmentByIdCall(Integer replenishmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishment/duplicate/{replenishmentId}"
            .replaceAll("\\{" + "replenishmentId" + "\\}", apiClient.escapeString(replenishmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateReplenishmentByIdValidateBeforeCall(Integer replenishmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'replenishmentId' is set
        if (replenishmentId == null) {
            throw new ApiException("Missing the required parameter 'replenishmentId' when calling getDuplicateReplenishmentById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateReplenishmentByIdCall(replenishmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a replenishment by id
     * Returns a duplicated replenishment identified by the specified id.
     * @param replenishmentId Id of the replenishment to be duplicated. (required)
     * @return Replenishment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Replenishment getDuplicateReplenishmentById(Integer replenishmentId) throws ApiException {
        ApiResponse<Replenishment> resp = getDuplicateReplenishmentByIdWithHttpInfo(replenishmentId);
        return resp.getData();
    }

    /**
     * Get a duplicated a replenishment by id
     * Returns a duplicated replenishment identified by the specified id.
     * @param replenishmentId Id of the replenishment to be duplicated. (required)
     * @return ApiResponse&lt;Replenishment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Replenishment> getDuplicateReplenishmentByIdWithHttpInfo(Integer replenishmentId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateReplenishmentByIdValidateBeforeCall(replenishmentId, null, null);
        Type localVarReturnType = new TypeToken<Replenishment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a replenishment by id (asynchronously)
     * Returns a duplicated replenishment identified by the specified id.
     * @param replenishmentId Id of the replenishment to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateReplenishmentByIdAsync(Integer replenishmentId, final ApiCallback<Replenishment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateReplenishmentByIdValidateBeforeCall(replenishmentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Replenishment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReplenishmentByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReplenishmentByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishment/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReplenishmentByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getReplenishmentByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search replenishments by filter
     * Returns the list of replenishments that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;Replenishment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Replenishment> getReplenishmentByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<Replenishment>> resp = getReplenishmentByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search replenishments by filter
     * Returns the list of replenishments that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;Replenishment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Replenishment>> getReplenishmentByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getReplenishmentByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<Replenishment>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search replenishments by filter (asynchronously)
     * Returns the list of replenishments that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReplenishmentByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<Replenishment>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReplenishmentByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Replenishment>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReplenishmentById
     * @param replenishmentId Id of the replenishment to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReplenishmentByIdCall(Integer replenishmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishment/{replenishmentId}"
            .replaceAll("\\{" + "replenishmentId" + "\\}", apiClient.escapeString(replenishmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReplenishmentByIdValidateBeforeCall(Integer replenishmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'replenishmentId' is set
        if (replenishmentId == null) {
            throw new ApiException("Missing the required parameter 'replenishmentId' when calling getReplenishmentById(Async)");
        }
        

        com.squareup.okhttp.Call call = getReplenishmentByIdCall(replenishmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a replenishment by id
     * Returns the replenishment identified by the specified id.
     * @param replenishmentId Id of the replenishment to be returned. (required)
     * @return Replenishment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Replenishment getReplenishmentById(Integer replenishmentId) throws ApiException {
        ApiResponse<Replenishment> resp = getReplenishmentByIdWithHttpInfo(replenishmentId);
        return resp.getData();
    }

    /**
     * Get a replenishment by id
     * Returns the replenishment identified by the specified id.
     * @param replenishmentId Id of the replenishment to be returned. (required)
     * @return ApiResponse&lt;Replenishment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Replenishment> getReplenishmentByIdWithHttpInfo(Integer replenishmentId) throws ApiException {
        com.squareup.okhttp.Call call = getReplenishmentByIdValidateBeforeCall(replenishmentId, null, null);
        Type localVarReturnType = new TypeToken<Replenishment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a replenishment by id (asynchronously)
     * Returns the replenishment identified by the specified id.
     * @param replenishmentId Id of the replenishment to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReplenishmentByIdAsync(Integer replenishmentId, final ApiCallback<Replenishment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReplenishmentByIdValidateBeforeCall(replenishmentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Replenishment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReplenishmentFiles
     * @param replenishmentId Id of the replenishment to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReplenishmentFilesCall(Integer replenishmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishment/{replenishmentId}/file"
            .replaceAll("\\{" + "replenishmentId" + "\\}", apiClient.escapeString(replenishmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReplenishmentFilesValidateBeforeCall(Integer replenishmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'replenishmentId' is set
        if (replenishmentId == null) {
            throw new ApiException("Missing the required parameter 'replenishmentId' when calling getReplenishmentFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getReplenishmentFilesCall(replenishmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a replenishment.
     * Get all existing replenishment files.
     * @param replenishmentId Id of the replenishment to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getReplenishmentFiles(Integer replenishmentId) throws ApiException {
        getReplenishmentFilesWithHttpInfo(replenishmentId);
    }

    /**
     * Get the files for a replenishment.
     * Get all existing replenishment files.
     * @param replenishmentId Id of the replenishment to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getReplenishmentFilesWithHttpInfo(Integer replenishmentId) throws ApiException {
        com.squareup.okhttp.Call call = getReplenishmentFilesValidateBeforeCall(replenishmentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a replenishment. (asynchronously)
     * Get all existing replenishment files.
     * @param replenishmentId Id of the replenishment to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReplenishmentFilesAsync(Integer replenishmentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReplenishmentFilesValidateBeforeCall(replenishmentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getReplenishmentTags
     * @param replenishmentId Id of the replenishment to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReplenishmentTagsCall(Integer replenishmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/replenishment/{replenishmentId}/tag"
            .replaceAll("\\{" + "replenishmentId" + "\\}", apiClient.escapeString(replenishmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReplenishmentTagsValidateBeforeCall(Integer replenishmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'replenishmentId' is set
        if (replenishmentId == null) {
            throw new ApiException("Missing the required parameter 'replenishmentId' when calling getReplenishmentTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getReplenishmentTagsCall(replenishmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a replenishment.
     * Get all existing replenishment tags.
     * @param replenishmentId Id of the replenishment to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getReplenishmentTags(Integer replenishmentId) throws ApiException {
        getReplenishmentTagsWithHttpInfo(replenishmentId);
    }

    /**
     * Get the tags for a replenishment.
     * Get all existing replenishment tags.
     * @param replenishmentId Id of the replenishment to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getReplenishmentTagsWithHttpInfo(Integer replenishmentId) throws ApiException {
        com.squareup.okhttp.Call call = getReplenishmentTagsValidateBeforeCall(replenishmentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a replenishment. (asynchronously)
     * Get all existing replenishment tags.
     * @param replenishmentId Id of the replenishment to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReplenishmentTagsAsync(Integer replenishmentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReplenishmentTagsValidateBeforeCall(replenishmentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateReplenishmentCustomFields
     * @param body Replenishment to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateReplenishmentCustomFieldsCall(Replenishment body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/replenishment/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateReplenishmentCustomFieldsValidateBeforeCall(Replenishment body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateReplenishmentCustomFields(Async)");
        }
        

        com.squareup.okhttp.Call call = updateReplenishmentCustomFieldsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a replenishment custom fields
     * Updates an existing replenishment custom fields using the specified data.
     * @param body Replenishment to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateReplenishmentCustomFields(Replenishment body) throws ApiException {
        updateReplenishmentCustomFieldsWithHttpInfo(body);
    }

    /**
     * Update a replenishment custom fields
     * Updates an existing replenishment custom fields using the specified data.
     * @param body Replenishment to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateReplenishmentCustomFieldsWithHttpInfo(Replenishment body) throws ApiException {
        com.squareup.okhttp.Call call = updateReplenishmentCustomFieldsValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a replenishment custom fields (asynchronously)
     * Updates an existing replenishment custom fields using the specified data.
     * @param body Replenishment to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateReplenishmentCustomFieldsAsync(Replenishment body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateReplenishmentCustomFieldsValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
