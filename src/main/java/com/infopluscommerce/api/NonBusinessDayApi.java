/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.NonBusinessDay;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NonBusinessDayApi {
    private ApiClient apiClient;

    public NonBusinessDayApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NonBusinessDayApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addNonBusinessDay
     * @param body NonBusinessDay to be inserted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addNonBusinessDayCall(NonBusinessDay body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/nonBusinessDay";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addNonBusinessDayValidateBeforeCall(NonBusinessDay body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addNonBusinessDay(Async)");
        }
        

        com.squareup.okhttp.Call call = addNonBusinessDayCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a nonBusinessDay
     * Inserts a new nonBusinessDay using the specified data.
     * @param body NonBusinessDay to be inserted. (required)
     * @return NonBusinessDay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NonBusinessDay addNonBusinessDay(NonBusinessDay body) throws ApiException {
        ApiResponse<NonBusinessDay> resp = addNonBusinessDayWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a nonBusinessDay
     * Inserts a new nonBusinessDay using the specified data.
     * @param body NonBusinessDay to be inserted. (required)
     * @return ApiResponse&lt;NonBusinessDay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NonBusinessDay> addNonBusinessDayWithHttpInfo(NonBusinessDay body) throws ApiException {
        com.squareup.okhttp.Call call = addNonBusinessDayValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<NonBusinessDay>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a nonBusinessDay (asynchronously)
     * Inserts a new nonBusinessDay using the specified data.
     * @param body NonBusinessDay to be inserted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addNonBusinessDayAsync(NonBusinessDay body, final ApiCallback<NonBusinessDay> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addNonBusinessDayValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NonBusinessDay>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addNonBusinessDayAudit
     * @param nonBusinessDayId Id of the nonBusinessDay to add an audit to (required)
     * @param nonBusinessDayAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addNonBusinessDayAuditCall(Integer nonBusinessDayId, String nonBusinessDayAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}/audit/{nonBusinessDayAudit}"
            .replaceAll("\\{" + "nonBusinessDayId" + "\\}", apiClient.escapeString(nonBusinessDayId.toString()))
            .replaceAll("\\{" + "nonBusinessDayAudit" + "\\}", apiClient.escapeString(nonBusinessDayAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addNonBusinessDayAuditValidateBeforeCall(Integer nonBusinessDayId, String nonBusinessDayAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nonBusinessDayId' is set
        if (nonBusinessDayId == null) {
            throw new ApiException("Missing the required parameter 'nonBusinessDayId' when calling addNonBusinessDayAudit(Async)");
        }
        
        // verify the required parameter 'nonBusinessDayAudit' is set
        if (nonBusinessDayAudit == null) {
            throw new ApiException("Missing the required parameter 'nonBusinessDayAudit' when calling addNonBusinessDayAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addNonBusinessDayAuditCall(nonBusinessDayId, nonBusinessDayAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for a nonBusinessDay
     * Adds an audit to an existing nonBusinessDay.
     * @param nonBusinessDayId Id of the nonBusinessDay to add an audit to (required)
     * @param nonBusinessDayAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addNonBusinessDayAudit(Integer nonBusinessDayId, String nonBusinessDayAudit) throws ApiException {
        addNonBusinessDayAuditWithHttpInfo(nonBusinessDayId, nonBusinessDayAudit);
    }

    /**
     * Add new audit for a nonBusinessDay
     * Adds an audit to an existing nonBusinessDay.
     * @param nonBusinessDayId Id of the nonBusinessDay to add an audit to (required)
     * @param nonBusinessDayAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addNonBusinessDayAuditWithHttpInfo(Integer nonBusinessDayId, String nonBusinessDayAudit) throws ApiException {
        com.squareup.okhttp.Call call = addNonBusinessDayAuditValidateBeforeCall(nonBusinessDayId, nonBusinessDayAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for a nonBusinessDay (asynchronously)
     * Adds an audit to an existing nonBusinessDay.
     * @param nonBusinessDayId Id of the nonBusinessDay to add an audit to (required)
     * @param nonBusinessDayAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addNonBusinessDayAuditAsync(Integer nonBusinessDayId, String nonBusinessDayAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addNonBusinessDayAuditValidateBeforeCall(nonBusinessDayId, nonBusinessDayAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addNonBusinessDayFile
     * @param nonBusinessDayId Id of the nonBusinessDay to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addNonBusinessDayFileCall(Integer nonBusinessDayId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}/file/{fileName}"
            .replaceAll("\\{" + "nonBusinessDayId" + "\\}", apiClient.escapeString(nonBusinessDayId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addNonBusinessDayFileValidateBeforeCall(Integer nonBusinessDayId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nonBusinessDayId' is set
        if (nonBusinessDayId == null) {
            throw new ApiException("Missing the required parameter 'nonBusinessDayId' when calling addNonBusinessDayFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addNonBusinessDayFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addNonBusinessDayFileCall(nonBusinessDayId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a nonBusinessDay
     * Adds a file to an existing nonBusinessDay.
     * @param nonBusinessDayId Id of the nonBusinessDay to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addNonBusinessDayFile(Integer nonBusinessDayId, String fileName) throws ApiException {
        addNonBusinessDayFileWithHttpInfo(nonBusinessDayId, fileName);
    }

    /**
     * Attach a file to a nonBusinessDay
     * Adds a file to an existing nonBusinessDay.
     * @param nonBusinessDayId Id of the nonBusinessDay to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addNonBusinessDayFileWithHttpInfo(Integer nonBusinessDayId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addNonBusinessDayFileValidateBeforeCall(nonBusinessDayId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a nonBusinessDay (asynchronously)
     * Adds a file to an existing nonBusinessDay.
     * @param nonBusinessDayId Id of the nonBusinessDay to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addNonBusinessDayFileAsync(Integer nonBusinessDayId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addNonBusinessDayFileValidateBeforeCall(nonBusinessDayId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addNonBusinessDayFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param nonBusinessDayId Id of the nonBusinessDay to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addNonBusinessDayFileByURLCall(RecordFile body, Integer nonBusinessDayId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}/file"
            .replaceAll("\\{" + "nonBusinessDayId" + "\\}", apiClient.escapeString(nonBusinessDayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addNonBusinessDayFileByURLValidateBeforeCall(RecordFile body, Integer nonBusinessDayId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addNonBusinessDayFileByURL(Async)");
        }
        
        // verify the required parameter 'nonBusinessDayId' is set
        if (nonBusinessDayId == null) {
            throw new ApiException("Missing the required parameter 'nonBusinessDayId' when calling addNonBusinessDayFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addNonBusinessDayFileByURLCall(body, nonBusinessDayId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to a nonBusinessDay by URL.
     * Adds a file to an existing nonBusinessDay by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param nonBusinessDayId Id of the nonBusinessDay to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addNonBusinessDayFileByURL(RecordFile body, Integer nonBusinessDayId) throws ApiException {
        addNonBusinessDayFileByURLWithHttpInfo(body, nonBusinessDayId);
    }

    /**
     * Attach a file to a nonBusinessDay by URL.
     * Adds a file to an existing nonBusinessDay by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param nonBusinessDayId Id of the nonBusinessDay to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addNonBusinessDayFileByURLWithHttpInfo(RecordFile body, Integer nonBusinessDayId) throws ApiException {
        com.squareup.okhttp.Call call = addNonBusinessDayFileByURLValidateBeforeCall(body, nonBusinessDayId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to a nonBusinessDay by URL. (asynchronously)
     * Adds a file to an existing nonBusinessDay by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param nonBusinessDayId Id of the nonBusinessDay to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addNonBusinessDayFileByURLAsync(RecordFile body, Integer nonBusinessDayId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addNonBusinessDayFileByURLValidateBeforeCall(body, nonBusinessDayId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addNonBusinessDayTag
     * @param nonBusinessDayId Id of the nonBusinessDay to add a tag to (required)
     * @param nonBusinessDayTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addNonBusinessDayTagCall(Integer nonBusinessDayId, String nonBusinessDayTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}/tag/{nonBusinessDayTag}"
            .replaceAll("\\{" + "nonBusinessDayId" + "\\}", apiClient.escapeString(nonBusinessDayId.toString()))
            .replaceAll("\\{" + "nonBusinessDayTag" + "\\}", apiClient.escapeString(nonBusinessDayTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addNonBusinessDayTagValidateBeforeCall(Integer nonBusinessDayId, String nonBusinessDayTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nonBusinessDayId' is set
        if (nonBusinessDayId == null) {
            throw new ApiException("Missing the required parameter 'nonBusinessDayId' when calling addNonBusinessDayTag(Async)");
        }
        
        // verify the required parameter 'nonBusinessDayTag' is set
        if (nonBusinessDayTag == null) {
            throw new ApiException("Missing the required parameter 'nonBusinessDayTag' when calling addNonBusinessDayTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addNonBusinessDayTagCall(nonBusinessDayId, nonBusinessDayTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for a nonBusinessDay.
     * Adds a tag to an existing nonBusinessDay.
     * @param nonBusinessDayId Id of the nonBusinessDay to add a tag to (required)
     * @param nonBusinessDayTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addNonBusinessDayTag(Integer nonBusinessDayId, String nonBusinessDayTag) throws ApiException {
        addNonBusinessDayTagWithHttpInfo(nonBusinessDayId, nonBusinessDayTag);
    }

    /**
     * Add new tags for a nonBusinessDay.
     * Adds a tag to an existing nonBusinessDay.
     * @param nonBusinessDayId Id of the nonBusinessDay to add a tag to (required)
     * @param nonBusinessDayTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addNonBusinessDayTagWithHttpInfo(Integer nonBusinessDayId, String nonBusinessDayTag) throws ApiException {
        com.squareup.okhttp.Call call = addNonBusinessDayTagValidateBeforeCall(nonBusinessDayId, nonBusinessDayTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for a nonBusinessDay. (asynchronously)
     * Adds a tag to an existing nonBusinessDay.
     * @param nonBusinessDayId Id of the nonBusinessDay to add a tag to (required)
     * @param nonBusinessDayTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addNonBusinessDayTagAsync(Integer nonBusinessDayId, String nonBusinessDayTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addNonBusinessDayTagValidateBeforeCall(nonBusinessDayId, nonBusinessDayTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNonBusinessDay
     * @param nonBusinessDayId Id of the nonBusinessDay to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNonBusinessDayCall(Integer nonBusinessDayId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}"
            .replaceAll("\\{" + "nonBusinessDayId" + "\\}", apiClient.escapeString(nonBusinessDayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNonBusinessDayValidateBeforeCall(Integer nonBusinessDayId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nonBusinessDayId' is set
        if (nonBusinessDayId == null) {
            throw new ApiException("Missing the required parameter 'nonBusinessDayId' when calling deleteNonBusinessDay(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteNonBusinessDayCall(nonBusinessDayId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a nonBusinessDay
     * Deletes the nonBusinessDay identified by the specified id.
     * @param nonBusinessDayId Id of the nonBusinessDay to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNonBusinessDay(Integer nonBusinessDayId) throws ApiException {
        deleteNonBusinessDayWithHttpInfo(nonBusinessDayId);
    }

    /**
     * Delete a nonBusinessDay
     * Deletes the nonBusinessDay identified by the specified id.
     * @param nonBusinessDayId Id of the nonBusinessDay to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNonBusinessDayWithHttpInfo(Integer nonBusinessDayId) throws ApiException {
        com.squareup.okhttp.Call call = deleteNonBusinessDayValidateBeforeCall(nonBusinessDayId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a nonBusinessDay (asynchronously)
     * Deletes the nonBusinessDay identified by the specified id.
     * @param nonBusinessDayId Id of the nonBusinessDay to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNonBusinessDayAsync(Integer nonBusinessDayId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNonBusinessDayValidateBeforeCall(nonBusinessDayId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNonBusinessDayFile
     * @param nonBusinessDayId Id of the nonBusinessDay to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNonBusinessDayFileCall(Integer nonBusinessDayId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}/file/{fileId}"
            .replaceAll("\\{" + "nonBusinessDayId" + "\\}", apiClient.escapeString(nonBusinessDayId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNonBusinessDayFileValidateBeforeCall(Integer nonBusinessDayId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nonBusinessDayId' is set
        if (nonBusinessDayId == null) {
            throw new ApiException("Missing the required parameter 'nonBusinessDayId' when calling deleteNonBusinessDayFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteNonBusinessDayFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteNonBusinessDayFileCall(nonBusinessDayId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for a nonBusinessDay.
     * Deletes an existing nonBusinessDay file using the specified data.
     * @param nonBusinessDayId Id of the nonBusinessDay to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNonBusinessDayFile(Integer nonBusinessDayId, Integer fileId) throws ApiException {
        deleteNonBusinessDayFileWithHttpInfo(nonBusinessDayId, fileId);
    }

    /**
     * Delete a file for a nonBusinessDay.
     * Deletes an existing nonBusinessDay file using the specified data.
     * @param nonBusinessDayId Id of the nonBusinessDay to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNonBusinessDayFileWithHttpInfo(Integer nonBusinessDayId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteNonBusinessDayFileValidateBeforeCall(nonBusinessDayId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for a nonBusinessDay. (asynchronously)
     * Deletes an existing nonBusinessDay file using the specified data.
     * @param nonBusinessDayId Id of the nonBusinessDay to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNonBusinessDayFileAsync(Integer nonBusinessDayId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNonBusinessDayFileValidateBeforeCall(nonBusinessDayId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNonBusinessDayTag
     * @param nonBusinessDayId Id of the nonBusinessDay to remove tag from (required)
     * @param nonBusinessDayTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNonBusinessDayTagCall(Integer nonBusinessDayId, String nonBusinessDayTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}/tag/{nonBusinessDayTag}"
            .replaceAll("\\{" + "nonBusinessDayId" + "\\}", apiClient.escapeString(nonBusinessDayId.toString()))
            .replaceAll("\\{" + "nonBusinessDayTag" + "\\}", apiClient.escapeString(nonBusinessDayTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNonBusinessDayTagValidateBeforeCall(Integer nonBusinessDayId, String nonBusinessDayTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nonBusinessDayId' is set
        if (nonBusinessDayId == null) {
            throw new ApiException("Missing the required parameter 'nonBusinessDayId' when calling deleteNonBusinessDayTag(Async)");
        }
        
        // verify the required parameter 'nonBusinessDayTag' is set
        if (nonBusinessDayTag == null) {
            throw new ApiException("Missing the required parameter 'nonBusinessDayTag' when calling deleteNonBusinessDayTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteNonBusinessDayTagCall(nonBusinessDayId, nonBusinessDayTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for a nonBusinessDay.
     * Deletes an existing nonBusinessDay tag using the specified data.
     * @param nonBusinessDayId Id of the nonBusinessDay to remove tag from (required)
     * @param nonBusinessDayTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNonBusinessDayTag(Integer nonBusinessDayId, String nonBusinessDayTag) throws ApiException {
        deleteNonBusinessDayTagWithHttpInfo(nonBusinessDayId, nonBusinessDayTag);
    }

    /**
     * Delete a tag for a nonBusinessDay.
     * Deletes an existing nonBusinessDay tag using the specified data.
     * @param nonBusinessDayId Id of the nonBusinessDay to remove tag from (required)
     * @param nonBusinessDayTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNonBusinessDayTagWithHttpInfo(Integer nonBusinessDayId, String nonBusinessDayTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteNonBusinessDayTagValidateBeforeCall(nonBusinessDayId, nonBusinessDayTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for a nonBusinessDay. (asynchronously)
     * Deletes an existing nonBusinessDay tag using the specified data.
     * @param nonBusinessDayId Id of the nonBusinessDay to remove tag from (required)
     * @param nonBusinessDayTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNonBusinessDayTagAsync(Integer nonBusinessDayId, String nonBusinessDayTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNonBusinessDayTagValidateBeforeCall(nonBusinessDayId, nonBusinessDayTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateNonBusinessDayById
     * @param nonBusinessDayId Id of the nonBusinessDay to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateNonBusinessDayByIdCall(Integer nonBusinessDayId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/nonBusinessDay/duplicate/{nonBusinessDayId}"
            .replaceAll("\\{" + "nonBusinessDayId" + "\\}", apiClient.escapeString(nonBusinessDayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateNonBusinessDayByIdValidateBeforeCall(Integer nonBusinessDayId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nonBusinessDayId' is set
        if (nonBusinessDayId == null) {
            throw new ApiException("Missing the required parameter 'nonBusinessDayId' when calling getDuplicateNonBusinessDayById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateNonBusinessDayByIdCall(nonBusinessDayId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated a nonBusinessDay by id
     * Returns a duplicated nonBusinessDay identified by the specified id.
     * @param nonBusinessDayId Id of the nonBusinessDay to be duplicated. (required)
     * @return NonBusinessDay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NonBusinessDay getDuplicateNonBusinessDayById(Integer nonBusinessDayId) throws ApiException {
        ApiResponse<NonBusinessDay> resp = getDuplicateNonBusinessDayByIdWithHttpInfo(nonBusinessDayId);
        return resp.getData();
    }

    /**
     * Get a duplicated a nonBusinessDay by id
     * Returns a duplicated nonBusinessDay identified by the specified id.
     * @param nonBusinessDayId Id of the nonBusinessDay to be duplicated. (required)
     * @return ApiResponse&lt;NonBusinessDay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NonBusinessDay> getDuplicateNonBusinessDayByIdWithHttpInfo(Integer nonBusinessDayId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateNonBusinessDayByIdValidateBeforeCall(nonBusinessDayId, null, null);
        Type localVarReturnType = new TypeToken<NonBusinessDay>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated a nonBusinessDay by id (asynchronously)
     * Returns a duplicated nonBusinessDay identified by the specified id.
     * @param nonBusinessDayId Id of the nonBusinessDay to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateNonBusinessDayByIdAsync(Integer nonBusinessDayId, final ApiCallback<NonBusinessDay> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateNonBusinessDayByIdValidateBeforeCall(nonBusinessDayId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NonBusinessDay>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNonBusinessDayByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNonBusinessDayByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/nonBusinessDay/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNonBusinessDayByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNonBusinessDayByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search nonBusinessDays by filter
     * Returns the list of nonBusinessDays that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;NonBusinessDay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<NonBusinessDay> getNonBusinessDayByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<NonBusinessDay>> resp = getNonBusinessDayByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search nonBusinessDays by filter
     * Returns the list of nonBusinessDays that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;NonBusinessDay&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<NonBusinessDay>> getNonBusinessDayByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getNonBusinessDayByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<NonBusinessDay>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search nonBusinessDays by filter (asynchronously)
     * Returns the list of nonBusinessDays that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNonBusinessDayByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<NonBusinessDay>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNonBusinessDayByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<NonBusinessDay>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNonBusinessDayById
     * @param nonBusinessDayId Id of the nonBusinessDay to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNonBusinessDayByIdCall(Integer nonBusinessDayId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}"
            .replaceAll("\\{" + "nonBusinessDayId" + "\\}", apiClient.escapeString(nonBusinessDayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNonBusinessDayByIdValidateBeforeCall(Integer nonBusinessDayId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nonBusinessDayId' is set
        if (nonBusinessDayId == null) {
            throw new ApiException("Missing the required parameter 'nonBusinessDayId' when calling getNonBusinessDayById(Async)");
        }
        

        com.squareup.okhttp.Call call = getNonBusinessDayByIdCall(nonBusinessDayId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a nonBusinessDay by id
     * Returns the nonBusinessDay identified by the specified id.
     * @param nonBusinessDayId Id of the nonBusinessDay to be returned. (required)
     * @return NonBusinessDay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NonBusinessDay getNonBusinessDayById(Integer nonBusinessDayId) throws ApiException {
        ApiResponse<NonBusinessDay> resp = getNonBusinessDayByIdWithHttpInfo(nonBusinessDayId);
        return resp.getData();
    }

    /**
     * Get a nonBusinessDay by id
     * Returns the nonBusinessDay identified by the specified id.
     * @param nonBusinessDayId Id of the nonBusinessDay to be returned. (required)
     * @return ApiResponse&lt;NonBusinessDay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NonBusinessDay> getNonBusinessDayByIdWithHttpInfo(Integer nonBusinessDayId) throws ApiException {
        com.squareup.okhttp.Call call = getNonBusinessDayByIdValidateBeforeCall(nonBusinessDayId, null, null);
        Type localVarReturnType = new TypeToken<NonBusinessDay>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a nonBusinessDay by id (asynchronously)
     * Returns the nonBusinessDay identified by the specified id.
     * @param nonBusinessDayId Id of the nonBusinessDay to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNonBusinessDayByIdAsync(Integer nonBusinessDayId, final ApiCallback<NonBusinessDay> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNonBusinessDayByIdValidateBeforeCall(nonBusinessDayId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NonBusinessDay>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNonBusinessDayFiles
     * @param nonBusinessDayId Id of the nonBusinessDay to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNonBusinessDayFilesCall(Integer nonBusinessDayId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}/file"
            .replaceAll("\\{" + "nonBusinessDayId" + "\\}", apiClient.escapeString(nonBusinessDayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNonBusinessDayFilesValidateBeforeCall(Integer nonBusinessDayId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nonBusinessDayId' is set
        if (nonBusinessDayId == null) {
            throw new ApiException("Missing the required parameter 'nonBusinessDayId' when calling getNonBusinessDayFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getNonBusinessDayFilesCall(nonBusinessDayId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for a nonBusinessDay.
     * Get all existing nonBusinessDay files.
     * @param nonBusinessDayId Id of the nonBusinessDay to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getNonBusinessDayFiles(Integer nonBusinessDayId) throws ApiException {
        getNonBusinessDayFilesWithHttpInfo(nonBusinessDayId);
    }

    /**
     * Get the files for a nonBusinessDay.
     * Get all existing nonBusinessDay files.
     * @param nonBusinessDayId Id of the nonBusinessDay to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getNonBusinessDayFilesWithHttpInfo(Integer nonBusinessDayId) throws ApiException {
        com.squareup.okhttp.Call call = getNonBusinessDayFilesValidateBeforeCall(nonBusinessDayId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for a nonBusinessDay. (asynchronously)
     * Get all existing nonBusinessDay files.
     * @param nonBusinessDayId Id of the nonBusinessDay to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNonBusinessDayFilesAsync(Integer nonBusinessDayId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNonBusinessDayFilesValidateBeforeCall(nonBusinessDayId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getNonBusinessDayTags
     * @param nonBusinessDayId Id of the nonBusinessDay to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNonBusinessDayTagsCall(Integer nonBusinessDayId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/nonBusinessDay/{nonBusinessDayId}/tag"
            .replaceAll("\\{" + "nonBusinessDayId" + "\\}", apiClient.escapeString(nonBusinessDayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNonBusinessDayTagsValidateBeforeCall(Integer nonBusinessDayId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nonBusinessDayId' is set
        if (nonBusinessDayId == null) {
            throw new ApiException("Missing the required parameter 'nonBusinessDayId' when calling getNonBusinessDayTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getNonBusinessDayTagsCall(nonBusinessDayId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for a nonBusinessDay.
     * Get all existing nonBusinessDay tags.
     * @param nonBusinessDayId Id of the nonBusinessDay to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getNonBusinessDayTags(Integer nonBusinessDayId) throws ApiException {
        getNonBusinessDayTagsWithHttpInfo(nonBusinessDayId);
    }

    /**
     * Get the tags for a nonBusinessDay.
     * Get all existing nonBusinessDay tags.
     * @param nonBusinessDayId Id of the nonBusinessDay to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getNonBusinessDayTagsWithHttpInfo(Integer nonBusinessDayId) throws ApiException {
        com.squareup.okhttp.Call call = getNonBusinessDayTagsValidateBeforeCall(nonBusinessDayId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for a nonBusinessDay. (asynchronously)
     * Get all existing nonBusinessDay tags.
     * @param nonBusinessDayId Id of the nonBusinessDay to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNonBusinessDayTagsAsync(Integer nonBusinessDayId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNonBusinessDayTagsValidateBeforeCall(nonBusinessDayId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateNonBusinessDay
     * @param body NonBusinessDay to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNonBusinessDayCall(NonBusinessDay body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/nonBusinessDay";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNonBusinessDayValidateBeforeCall(NonBusinessDay body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateNonBusinessDay(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNonBusinessDayCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a nonBusinessDay
     * Updates an existing nonBusinessDay using the specified data.
     * @param body NonBusinessDay to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateNonBusinessDay(NonBusinessDay body) throws ApiException {
        updateNonBusinessDayWithHttpInfo(body);
    }

    /**
     * Update a nonBusinessDay
     * Updates an existing nonBusinessDay using the specified data.
     * @param body NonBusinessDay to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateNonBusinessDayWithHttpInfo(NonBusinessDay body) throws ApiException {
        com.squareup.okhttp.Call call = updateNonBusinessDayValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a nonBusinessDay (asynchronously)
     * Updates an existing nonBusinessDay using the specified data.
     * @param body NonBusinessDay to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNonBusinessDayAsync(NonBusinessDay body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNonBusinessDayValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
