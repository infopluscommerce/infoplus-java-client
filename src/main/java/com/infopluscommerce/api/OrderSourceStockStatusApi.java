/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiCallback;
import com.infopluscommerce.ApiClient;
import com.infopluscommerce.ApiException;
import com.infopluscommerce.ApiResponse;
import com.infopluscommerce.Configuration;
import com.infopluscommerce.Pair;
import com.infopluscommerce.ProgressRequestBody;
import com.infopluscommerce.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infopluscommerce.model.OrderSourceStockStatus;
import com.infopluscommerce.model.RecordFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrderSourceStockStatusApi {
    private ApiClient apiClient;

    public OrderSourceStockStatusApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrderSourceStockStatusApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addOrderSourceStockStatusAudit
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to add an audit to (required)
     * @param orderSourceStockStatusAudit The audit to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceStockStatusAuditCall(Integer orderSourceStockStatusId, String orderSourceStockStatusAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceStockStatus/{orderSourceStockStatusId}/audit/{orderSourceStockStatusAudit}"
            .replaceAll("\\{" + "orderSourceStockStatusId" + "\\}", apiClient.escapeString(orderSourceStockStatusId.toString()))
            .replaceAll("\\{" + "orderSourceStockStatusAudit" + "\\}", apiClient.escapeString(orderSourceStockStatusAudit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOrderSourceStockStatusAuditValidateBeforeCall(Integer orderSourceStockStatusId, String orderSourceStockStatusAudit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceStockStatusId' is set
        if (orderSourceStockStatusId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceStockStatusId' when calling addOrderSourceStockStatusAudit(Async)");
        }
        
        // verify the required parameter 'orderSourceStockStatusAudit' is set
        if (orderSourceStockStatusAudit == null) {
            throw new ApiException("Missing the required parameter 'orderSourceStockStatusAudit' when calling addOrderSourceStockStatusAudit(Async)");
        }
        

        com.squareup.okhttp.Call call = addOrderSourceStockStatusAuditCall(orderSourceStockStatusId, orderSourceStockStatusAudit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new audit for an orderSourceStockStatus
     * Adds an audit to an existing orderSourceStockStatus.
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to add an audit to (required)
     * @param orderSourceStockStatusAudit The audit to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOrderSourceStockStatusAudit(Integer orderSourceStockStatusId, String orderSourceStockStatusAudit) throws ApiException {
        addOrderSourceStockStatusAuditWithHttpInfo(orderSourceStockStatusId, orderSourceStockStatusAudit);
    }

    /**
     * Add new audit for an orderSourceStockStatus
     * Adds an audit to an existing orderSourceStockStatus.
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to add an audit to (required)
     * @param orderSourceStockStatusAudit The audit to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOrderSourceStockStatusAuditWithHttpInfo(Integer orderSourceStockStatusId, String orderSourceStockStatusAudit) throws ApiException {
        com.squareup.okhttp.Call call = addOrderSourceStockStatusAuditValidateBeforeCall(orderSourceStockStatusId, orderSourceStockStatusAudit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new audit for an orderSourceStockStatus (asynchronously)
     * Adds an audit to an existing orderSourceStockStatus.
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to add an audit to (required)
     * @param orderSourceStockStatusAudit The audit to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceStockStatusAuditAsync(Integer orderSourceStockStatusId, String orderSourceStockStatusAudit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrderSourceStockStatusAuditValidateBeforeCall(orderSourceStockStatusId, orderSourceStockStatusAudit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addOrderSourceStockStatusFile
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to add a file to (required)
     * @param fileName Name of file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceStockStatusFileCall(Integer orderSourceStockStatusId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceStockStatus/{orderSourceStockStatusId}/file/{fileName}"
            .replaceAll("\\{" + "orderSourceStockStatusId" + "\\}", apiClient.escapeString(orderSourceStockStatusId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOrderSourceStockStatusFileValidateBeforeCall(Integer orderSourceStockStatusId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceStockStatusId' is set
        if (orderSourceStockStatusId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceStockStatusId' when calling addOrderSourceStockStatusFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling addOrderSourceStockStatusFile(Async)");
        }
        

        com.squareup.okhttp.Call call = addOrderSourceStockStatusFileCall(orderSourceStockStatusId, fileName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an orderSourceStockStatus
     * Adds a file to an existing orderSourceStockStatus.
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to add a file to (required)
     * @param fileName Name of file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOrderSourceStockStatusFile(Integer orderSourceStockStatusId, String fileName) throws ApiException {
        addOrderSourceStockStatusFileWithHttpInfo(orderSourceStockStatusId, fileName);
    }

    /**
     * Attach a file to an orderSourceStockStatus
     * Adds a file to an existing orderSourceStockStatus.
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to add a file to (required)
     * @param fileName Name of file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOrderSourceStockStatusFileWithHttpInfo(Integer orderSourceStockStatusId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = addOrderSourceStockStatusFileValidateBeforeCall(orderSourceStockStatusId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an orderSourceStockStatus (asynchronously)
     * Adds a file to an existing orderSourceStockStatus.
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to add a file to (required)
     * @param fileName Name of file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceStockStatusFileAsync(Integer orderSourceStockStatusId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrderSourceStockStatusFileValidateBeforeCall(orderSourceStockStatusId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addOrderSourceStockStatusFileByURL
     * @param body The url and optionly fileName to be used. (required)
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to add an file to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceStockStatusFileByURLCall(RecordFile body, Integer orderSourceStockStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/beta/orderSourceStockStatus/{orderSourceStockStatusId}/file"
            .replaceAll("\\{" + "orderSourceStockStatusId" + "\\}", apiClient.escapeString(orderSourceStockStatusId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOrderSourceStockStatusFileByURLValidateBeforeCall(RecordFile body, Integer orderSourceStockStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addOrderSourceStockStatusFileByURL(Async)");
        }
        
        // verify the required parameter 'orderSourceStockStatusId' is set
        if (orderSourceStockStatusId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceStockStatusId' when calling addOrderSourceStockStatusFileByURL(Async)");
        }
        

        com.squareup.okhttp.Call call = addOrderSourceStockStatusFileByURLCall(body, orderSourceStockStatusId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach a file to an orderSourceStockStatus by URL.
     * Adds a file to an existing orderSourceStockStatus by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to add an file to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOrderSourceStockStatusFileByURL(RecordFile body, Integer orderSourceStockStatusId) throws ApiException {
        addOrderSourceStockStatusFileByURLWithHttpInfo(body, orderSourceStockStatusId);
    }

    /**
     * Attach a file to an orderSourceStockStatus by URL.
     * Adds a file to an existing orderSourceStockStatus by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to add an file to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOrderSourceStockStatusFileByURLWithHttpInfo(RecordFile body, Integer orderSourceStockStatusId) throws ApiException {
        com.squareup.okhttp.Call call = addOrderSourceStockStatusFileByURLValidateBeforeCall(body, orderSourceStockStatusId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Attach a file to an orderSourceStockStatus by URL. (asynchronously)
     * Adds a file to an existing orderSourceStockStatus by URL.
     * @param body The url and optionly fileName to be used. (required)
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to add an file to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceStockStatusFileByURLAsync(RecordFile body, Integer orderSourceStockStatusId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrderSourceStockStatusFileByURLValidateBeforeCall(body, orderSourceStockStatusId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addOrderSourceStockStatusTag
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to add a tag to (required)
     * @param orderSourceStockStatusTag The tag to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceStockStatusTagCall(Integer orderSourceStockStatusId, String orderSourceStockStatusTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceStockStatus/{orderSourceStockStatusId}/tag/{orderSourceStockStatusTag}"
            .replaceAll("\\{" + "orderSourceStockStatusId" + "\\}", apiClient.escapeString(orderSourceStockStatusId.toString()))
            .replaceAll("\\{" + "orderSourceStockStatusTag" + "\\}", apiClient.escapeString(orderSourceStockStatusTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOrderSourceStockStatusTagValidateBeforeCall(Integer orderSourceStockStatusId, String orderSourceStockStatusTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceStockStatusId' is set
        if (orderSourceStockStatusId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceStockStatusId' when calling addOrderSourceStockStatusTag(Async)");
        }
        
        // verify the required parameter 'orderSourceStockStatusTag' is set
        if (orderSourceStockStatusTag == null) {
            throw new ApiException("Missing the required parameter 'orderSourceStockStatusTag' when calling addOrderSourceStockStatusTag(Async)");
        }
        

        com.squareup.okhttp.Call call = addOrderSourceStockStatusTagCall(orderSourceStockStatusId, orderSourceStockStatusTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new tags for an orderSourceStockStatus.
     * Adds a tag to an existing orderSourceStockStatus.
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to add a tag to (required)
     * @param orderSourceStockStatusTag The tag to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOrderSourceStockStatusTag(Integer orderSourceStockStatusId, String orderSourceStockStatusTag) throws ApiException {
        addOrderSourceStockStatusTagWithHttpInfo(orderSourceStockStatusId, orderSourceStockStatusTag);
    }

    /**
     * Add new tags for an orderSourceStockStatus.
     * Adds a tag to an existing orderSourceStockStatus.
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to add a tag to (required)
     * @param orderSourceStockStatusTag The tag to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOrderSourceStockStatusTagWithHttpInfo(Integer orderSourceStockStatusId, String orderSourceStockStatusTag) throws ApiException {
        com.squareup.okhttp.Call call = addOrderSourceStockStatusTagValidateBeforeCall(orderSourceStockStatusId, orderSourceStockStatusTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add new tags for an orderSourceStockStatus. (asynchronously)
     * Adds a tag to an existing orderSourceStockStatus.
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to add a tag to (required)
     * @param orderSourceStockStatusTag The tag to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrderSourceStockStatusTagAsync(Integer orderSourceStockStatusId, String orderSourceStockStatusTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrderSourceStockStatusTagValidateBeforeCall(orderSourceStockStatusId, orderSourceStockStatusTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteOrderSourceStockStatusFile
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOrderSourceStockStatusFileCall(Integer orderSourceStockStatusId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceStockStatus/{orderSourceStockStatusId}/file/{fileId}"
            .replaceAll("\\{" + "orderSourceStockStatusId" + "\\}", apiClient.escapeString(orderSourceStockStatusId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOrderSourceStockStatusFileValidateBeforeCall(Integer orderSourceStockStatusId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceStockStatusId' is set
        if (orderSourceStockStatusId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceStockStatusId' when calling deleteOrderSourceStockStatusFile(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteOrderSourceStockStatusFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOrderSourceStockStatusFileCall(orderSourceStockStatusId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a file for an orderSourceStockStatus.
     * Deletes an existing orderSourceStockStatus file using the specified data.
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteOrderSourceStockStatusFile(Integer orderSourceStockStatusId, Integer fileId) throws ApiException {
        deleteOrderSourceStockStatusFileWithHttpInfo(orderSourceStockStatusId, fileId);
    }

    /**
     * Delete a file for an orderSourceStockStatus.
     * Deletes an existing orderSourceStockStatus file using the specified data.
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteOrderSourceStockStatusFileWithHttpInfo(Integer orderSourceStockStatusId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteOrderSourceStockStatusFileValidateBeforeCall(orderSourceStockStatusId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a file for an orderSourceStockStatus. (asynchronously)
     * Deletes an existing orderSourceStockStatus file using the specified data.
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to remove file from (required)
     * @param fileId Id of the file to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOrderSourceStockStatusFileAsync(Integer orderSourceStockStatusId, Integer fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOrderSourceStockStatusFileValidateBeforeCall(orderSourceStockStatusId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteOrderSourceStockStatusTag
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to remove tag from (required)
     * @param orderSourceStockStatusTag The tag to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOrderSourceStockStatusTagCall(Integer orderSourceStockStatusId, String orderSourceStockStatusTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceStockStatus/{orderSourceStockStatusId}/tag/{orderSourceStockStatusTag}"
            .replaceAll("\\{" + "orderSourceStockStatusId" + "\\}", apiClient.escapeString(orderSourceStockStatusId.toString()))
            .replaceAll("\\{" + "orderSourceStockStatusTag" + "\\}", apiClient.escapeString(orderSourceStockStatusTag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOrderSourceStockStatusTagValidateBeforeCall(Integer orderSourceStockStatusId, String orderSourceStockStatusTag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceStockStatusId' is set
        if (orderSourceStockStatusId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceStockStatusId' when calling deleteOrderSourceStockStatusTag(Async)");
        }
        
        // verify the required parameter 'orderSourceStockStatusTag' is set
        if (orderSourceStockStatusTag == null) {
            throw new ApiException("Missing the required parameter 'orderSourceStockStatusTag' when calling deleteOrderSourceStockStatusTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOrderSourceStockStatusTagCall(orderSourceStockStatusId, orderSourceStockStatusTag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag for an orderSourceStockStatus.
     * Deletes an existing orderSourceStockStatus tag using the specified data.
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to remove tag from (required)
     * @param orderSourceStockStatusTag The tag to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteOrderSourceStockStatusTag(Integer orderSourceStockStatusId, String orderSourceStockStatusTag) throws ApiException {
        deleteOrderSourceStockStatusTagWithHttpInfo(orderSourceStockStatusId, orderSourceStockStatusTag);
    }

    /**
     * Delete a tag for an orderSourceStockStatus.
     * Deletes an existing orderSourceStockStatus tag using the specified data.
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to remove tag from (required)
     * @param orderSourceStockStatusTag The tag to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteOrderSourceStockStatusTagWithHttpInfo(Integer orderSourceStockStatusId, String orderSourceStockStatusTag) throws ApiException {
        com.squareup.okhttp.Call call = deleteOrderSourceStockStatusTagValidateBeforeCall(orderSourceStockStatusId, orderSourceStockStatusTag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag for an orderSourceStockStatus. (asynchronously)
     * Deletes an existing orderSourceStockStatus tag using the specified data.
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to remove tag from (required)
     * @param orderSourceStockStatusTag The tag to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOrderSourceStockStatusTagAsync(Integer orderSourceStockStatusId, String orderSourceStockStatusTag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOrderSourceStockStatusTagValidateBeforeCall(orderSourceStockStatusId, orderSourceStockStatusTag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDuplicateOrderSourceStockStatusById
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to be duplicated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDuplicateOrderSourceStockStatusByIdCall(Integer orderSourceStockStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceStockStatus/duplicate/{orderSourceStockStatusId}"
            .replaceAll("\\{" + "orderSourceStockStatusId" + "\\}", apiClient.escapeString(orderSourceStockStatusId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDuplicateOrderSourceStockStatusByIdValidateBeforeCall(Integer orderSourceStockStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceStockStatusId' is set
        if (orderSourceStockStatusId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceStockStatusId' when calling getDuplicateOrderSourceStockStatusById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDuplicateOrderSourceStockStatusByIdCall(orderSourceStockStatusId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a duplicated an orderSourceStockStatus by id
     * Returns a duplicated orderSourceStockStatus identified by the specified id.
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to be duplicated. (required)
     * @return OrderSourceStockStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderSourceStockStatus getDuplicateOrderSourceStockStatusById(Integer orderSourceStockStatusId) throws ApiException {
        ApiResponse<OrderSourceStockStatus> resp = getDuplicateOrderSourceStockStatusByIdWithHttpInfo(orderSourceStockStatusId);
        return resp.getData();
    }

    /**
     * Get a duplicated an orderSourceStockStatus by id
     * Returns a duplicated orderSourceStockStatus identified by the specified id.
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to be duplicated. (required)
     * @return ApiResponse&lt;OrderSourceStockStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderSourceStockStatus> getDuplicateOrderSourceStockStatusByIdWithHttpInfo(Integer orderSourceStockStatusId) throws ApiException {
        com.squareup.okhttp.Call call = getDuplicateOrderSourceStockStatusByIdValidateBeforeCall(orderSourceStockStatusId, null, null);
        Type localVarReturnType = new TypeToken<OrderSourceStockStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a duplicated an orderSourceStockStatus by id (asynchronously)
     * Returns a duplicated orderSourceStockStatus identified by the specified id.
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to be duplicated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDuplicateOrderSourceStockStatusByIdAsync(Integer orderSourceStockStatusId, final ApiCallback<OrderSourceStockStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDuplicateOrderSourceStockStatusByIdValidateBeforeCall(orderSourceStockStatusId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderSourceStockStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderSourceStockStatusByFilter
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderSourceStockStatusByFilterCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceStockStatus/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderSourceStockStatusByFilterValidateBeforeCall(String filter, Integer page, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getOrderSourceStockStatusByFilterCall(filter, page, limit, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search orderSourceStockStatuses by filter
     * Returns the list of orderSourceStockStatuses that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return List&lt;OrderSourceStockStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OrderSourceStockStatus> getOrderSourceStockStatusByFilter(String filter, Integer page, Integer limit, String sort) throws ApiException {
        ApiResponse<List<OrderSourceStockStatus>> resp = getOrderSourceStockStatusByFilterWithHttpInfo(filter, page, limit, sort);
        return resp.getData();
    }

    /**
     * Search orderSourceStockStatuses by filter
     * Returns the list of orderSourceStockStatuses that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @return ApiResponse&lt;List&lt;OrderSourceStockStatus&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OrderSourceStockStatus>> getOrderSourceStockStatusByFilterWithHttpInfo(String filter, Integer page, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getOrderSourceStockStatusByFilterValidateBeforeCall(filter, page, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<List<OrderSourceStockStatus>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search orderSourceStockStatuses by filter (asynchronously)
     * Returns the list of orderSourceStockStatuses that match the given filter.
     * @param filter Query string, used to filter results. (optional)
     * @param page Result page number.  Defaults to 1. (optional)
     * @param limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param sort Sort results by specified field. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderSourceStockStatusByFilterAsync(String filter, Integer page, Integer limit, String sort, final ApiCallback<List<OrderSourceStockStatus>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderSourceStockStatusByFilterValidateBeforeCall(filter, page, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OrderSourceStockStatus>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderSourceStockStatusById
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderSourceStockStatusByIdCall(Integer orderSourceStockStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceStockStatus/{orderSourceStockStatusId}"
            .replaceAll("\\{" + "orderSourceStockStatusId" + "\\}", apiClient.escapeString(orderSourceStockStatusId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderSourceStockStatusByIdValidateBeforeCall(Integer orderSourceStockStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceStockStatusId' is set
        if (orderSourceStockStatusId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceStockStatusId' when calling getOrderSourceStockStatusById(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderSourceStockStatusByIdCall(orderSourceStockStatusId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an orderSourceStockStatus by id
     * Returns the orderSourceStockStatus identified by the specified id.
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to be returned. (required)
     * @return OrderSourceStockStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderSourceStockStatus getOrderSourceStockStatusById(Integer orderSourceStockStatusId) throws ApiException {
        ApiResponse<OrderSourceStockStatus> resp = getOrderSourceStockStatusByIdWithHttpInfo(orderSourceStockStatusId);
        return resp.getData();
    }

    /**
     * Get an orderSourceStockStatus by id
     * Returns the orderSourceStockStatus identified by the specified id.
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to be returned. (required)
     * @return ApiResponse&lt;OrderSourceStockStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderSourceStockStatus> getOrderSourceStockStatusByIdWithHttpInfo(Integer orderSourceStockStatusId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderSourceStockStatusByIdValidateBeforeCall(orderSourceStockStatusId, null, null);
        Type localVarReturnType = new TypeToken<OrderSourceStockStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an orderSourceStockStatus by id (asynchronously)
     * Returns the orderSourceStockStatus identified by the specified id.
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderSourceStockStatusByIdAsync(Integer orderSourceStockStatusId, final ApiCallback<OrderSourceStockStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderSourceStockStatusByIdValidateBeforeCall(orderSourceStockStatusId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderSourceStockStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderSourceStockStatusFiles
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to get files for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderSourceStockStatusFilesCall(Integer orderSourceStockStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceStockStatus/{orderSourceStockStatusId}/file"
            .replaceAll("\\{" + "orderSourceStockStatusId" + "\\}", apiClient.escapeString(orderSourceStockStatusId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderSourceStockStatusFilesValidateBeforeCall(Integer orderSourceStockStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceStockStatusId' is set
        if (orderSourceStockStatusId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceStockStatusId' when calling getOrderSourceStockStatusFiles(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderSourceStockStatusFilesCall(orderSourceStockStatusId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the files for an orderSourceStockStatus.
     * Get all existing orderSourceStockStatus files.
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to get files for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getOrderSourceStockStatusFiles(Integer orderSourceStockStatusId) throws ApiException {
        getOrderSourceStockStatusFilesWithHttpInfo(orderSourceStockStatusId);
    }

    /**
     * Get the files for an orderSourceStockStatus.
     * Get all existing orderSourceStockStatus files.
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to get files for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getOrderSourceStockStatusFilesWithHttpInfo(Integer orderSourceStockStatusId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderSourceStockStatusFilesValidateBeforeCall(orderSourceStockStatusId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the files for an orderSourceStockStatus. (asynchronously)
     * Get all existing orderSourceStockStatus files.
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to get files for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderSourceStockStatusFilesAsync(Integer orderSourceStockStatusId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderSourceStockStatusFilesValidateBeforeCall(orderSourceStockStatusId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getOrderSourceStockStatusTags
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to get tags for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderSourceStockStatusTagsCall(Integer orderSourceStockStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/beta/orderSourceStockStatus/{orderSourceStockStatusId}/tag"
            .replaceAll("\\{" + "orderSourceStockStatusId" + "\\}", apiClient.escapeString(orderSourceStockStatusId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderSourceStockStatusTagsValidateBeforeCall(Integer orderSourceStockStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderSourceStockStatusId' is set
        if (orderSourceStockStatusId == null) {
            throw new ApiException("Missing the required parameter 'orderSourceStockStatusId' when calling getOrderSourceStockStatusTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderSourceStockStatusTagsCall(orderSourceStockStatusId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tags for an orderSourceStockStatus.
     * Get all existing orderSourceStockStatus tags.
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to get tags for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getOrderSourceStockStatusTags(Integer orderSourceStockStatusId) throws ApiException {
        getOrderSourceStockStatusTagsWithHttpInfo(orderSourceStockStatusId);
    }

    /**
     * Get the tags for an orderSourceStockStatus.
     * Get all existing orderSourceStockStatus tags.
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to get tags for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getOrderSourceStockStatusTagsWithHttpInfo(Integer orderSourceStockStatusId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderSourceStockStatusTagsValidateBeforeCall(orderSourceStockStatusId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the tags for an orderSourceStockStatus. (asynchronously)
     * Get all existing orderSourceStockStatus tags.
     * @param orderSourceStockStatusId Id of the orderSourceStockStatus to get tags for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderSourceStockStatusTagsAsync(Integer orderSourceStockStatusId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderSourceStockStatusTagsValidateBeforeCall(orderSourceStockStatusId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
