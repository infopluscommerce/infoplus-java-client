/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.LoggedTime;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LoggedTimeApi
 */
@Ignore
public class LoggedTimeApiTest {

    private final LoggedTimeApi api = new LoggedTimeApi();

    
    /**
     * Add new audit for a loggedTime
     *
     * Adds an audit to an existing loggedTime.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addLoggedTimeAuditTest() throws ApiException {
        Integer loggedTimeId = null;
        String loggedTimeAudit = null;
        api.addLoggedTimeAudit(loggedTimeId, loggedTimeAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a loggedTime
     *
     * Adds a file to an existing loggedTime.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addLoggedTimeFileTest() throws ApiException {
        Integer loggedTimeId = null;
        String fileName = null;
        api.addLoggedTimeFile(loggedTimeId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a loggedTime by URL.
     *
     * Adds a file to an existing loggedTime by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addLoggedTimeFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer loggedTimeId = null;
        api.addLoggedTimeFileByURL(body, loggedTimeId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for a loggedTime.
     *
     * Adds a tag to an existing loggedTime.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addLoggedTimeTagTest() throws ApiException {
        Integer loggedTimeId = null;
        String loggedTimeTag = null;
        api.addLoggedTimeTag(loggedTimeId, loggedTimeTag);

        // TODO: test validations
    }
    
    /**
     * Delete a file for a loggedTime.
     *
     * Deletes an existing loggedTime file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLoggedTimeFileTest() throws ApiException {
        Integer loggedTimeId = null;
        Integer fileId = null;
        api.deleteLoggedTimeFile(loggedTimeId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for a loggedTime.
     *
     * Deletes an existing loggedTime tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLoggedTimeTagTest() throws ApiException {
        Integer loggedTimeId = null;
        String loggedTimeTag = null;
        api.deleteLoggedTimeTag(loggedTimeId, loggedTimeTag);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated a loggedTime by id
     *
     * Returns a duplicated loggedTime identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateLoggedTimeByIdTest() throws ApiException {
        Integer loggedTimeId = null;
        LoggedTime response = api.getDuplicateLoggedTimeById(loggedTimeId);

        // TODO: test validations
    }
    
    /**
     * Search loggedTimes by filter
     *
     * Returns the list of loggedTimes that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoggedTimeByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<LoggedTime> response = api.getLoggedTimeByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get a loggedTime by id
     *
     * Returns the loggedTime identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoggedTimeByIdTest() throws ApiException {
        Integer loggedTimeId = null;
        LoggedTime response = api.getLoggedTimeById(loggedTimeId);

        // TODO: test validations
    }
    
    /**
     * Get the files for a loggedTime.
     *
     * Get all existing loggedTime files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoggedTimeFilesTest() throws ApiException {
        Integer loggedTimeId = null;
        api.getLoggedTimeFiles(loggedTimeId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for a loggedTime.
     *
     * Get all existing loggedTime tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoggedTimeTagsTest() throws ApiException {
        Integer loggedTimeId = null;
        api.getLoggedTimeTags(loggedTimeId);

        // TODO: test validations
    }
    
    /**
     * Update a loggedTime custom fields
     *
     * Updates an existing loggedTime custom fields using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLoggedTimeCustomFieldsTest() throws ApiException {
        LoggedTime body = null;
        api.updateLoggedTimeCustomFields(body);

        // TODO: test validations
    }
    
}
