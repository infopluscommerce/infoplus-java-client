/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.ExecuteQuickAdjustmentInputAPIModel;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.ProcessOutputAPIModel;
import com.infopluscommerce.model.QuickAdjustment;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QuickAdjustmentApi
 */
@Ignore
public class QuickAdjustmentApiTest {

    private final QuickAdjustmentApi api = new QuickAdjustmentApi();

    
    /**
     * Create a quickAdjustment
     *
     * Inserts a new quickAdjustment using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addQuickAdjustmentTest() throws ApiException {
        QuickAdjustment body = null;
        QuickAdjustment response = api.addQuickAdjustment(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for a quickAdjustment
     *
     * Adds an audit to an existing quickAdjustment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addQuickAdjustmentAuditTest() throws ApiException {
        Integer quickAdjustmentId = null;
        String quickAdjustmentAudit = null;
        api.addQuickAdjustmentAudit(quickAdjustmentId, quickAdjustmentAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a quickAdjustment
     *
     * Adds a file to an existing quickAdjustment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addQuickAdjustmentFileTest() throws ApiException {
        Integer quickAdjustmentId = null;
        String fileName = null;
        api.addQuickAdjustmentFile(quickAdjustmentId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a quickAdjustment by URL.
     *
     * Adds a file to an existing quickAdjustment by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addQuickAdjustmentFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer quickAdjustmentId = null;
        api.addQuickAdjustmentFileByURL(body, quickAdjustmentId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for a quickAdjustment.
     *
     * Adds a tag to an existing quickAdjustment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addQuickAdjustmentTagTest() throws ApiException {
        Integer quickAdjustmentId = null;
        String quickAdjustmentTag = null;
        api.addQuickAdjustmentTag(quickAdjustmentId, quickAdjustmentTag);

        // TODO: test validations
    }
    
    /**
     * Delete a quickAdjustment
     *
     * Deletes the quickAdjustment identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteQuickAdjustmentTest() throws ApiException {
        Integer quickAdjustmentId = null;
        api.deleteQuickAdjustment(quickAdjustmentId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for a quickAdjustment.
     *
     * Deletes an existing quickAdjustment file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteQuickAdjustmentFileTest() throws ApiException {
        Integer quickAdjustmentId = null;
        Integer fileId = null;
        api.deleteQuickAdjustmentFile(quickAdjustmentId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for a quickAdjustment.
     *
     * Deletes an existing quickAdjustment tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteQuickAdjustmentTagTest() throws ApiException {
        Integer quickAdjustmentId = null;
        String quickAdjustmentTag = null;
        api.deleteQuickAdjustmentTag(quickAdjustmentId, quickAdjustmentTag);

        // TODO: test validations
    }
    
    /**
     * Run the ExecuteQuickAdjustment process.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executeQuickAdjustmentTest() throws ApiException {
        ExecuteQuickAdjustmentInputAPIModel body = null;
        List<ProcessOutputAPIModel> response = api.executeQuickAdjustment(body);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated a quickAdjustment by id
     *
     * Returns a duplicated quickAdjustment identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateQuickAdjustmentByIdTest() throws ApiException {
        Integer quickAdjustmentId = null;
        QuickAdjustment response = api.getDuplicateQuickAdjustmentById(quickAdjustmentId);

        // TODO: test validations
    }
    
    /**
     * Search quickAdjustments by filter
     *
     * Returns the list of quickAdjustments that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQuickAdjustmentByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<QuickAdjustment> response = api.getQuickAdjustmentByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get a quickAdjustment by id
     *
     * Returns the quickAdjustment identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQuickAdjustmentByIdTest() throws ApiException {
        Integer quickAdjustmentId = null;
        QuickAdjustment response = api.getQuickAdjustmentById(quickAdjustmentId);

        // TODO: test validations
    }
    
    /**
     * Get the files for a quickAdjustment.
     *
     * Get all existing quickAdjustment files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQuickAdjustmentFilesTest() throws ApiException {
        Integer quickAdjustmentId = null;
        api.getQuickAdjustmentFiles(quickAdjustmentId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for a quickAdjustment.
     *
     * Get all existing quickAdjustment tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQuickAdjustmentTagsTest() throws ApiException {
        Integer quickAdjustmentId = null;
        api.getQuickAdjustmentTags(quickAdjustmentId);

        // TODO: test validations
    }
    
    /**
     * Update a quickAdjustment
     *
     * Updates an existing quickAdjustment using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateQuickAdjustmentTest() throws ApiException {
        QuickAdjustment body = null;
        api.updateQuickAdjustment(body);

        // TODO: test validations
    }
    
    /**
     * Update a quickAdjustment custom fields
     *
     * Updates an existing quickAdjustment custom fields using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateQuickAdjustmentCustomFieldsTest() throws ApiException {
        QuickAdjustment body = null;
        api.updateQuickAdjustmentCustomFields(body);

        // TODO: test validations
    }
    
}
