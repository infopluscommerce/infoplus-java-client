/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.OrderSource;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrderSourceApi
 */
@Ignore
public class OrderSourceApiTest {

    private final OrderSourceApi api = new OrderSourceApi();

    
    /**
     * Create an orderSource
     *
     * Inserts a new orderSource using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addOrderSourceTest() throws ApiException {
        OrderSource body = null;
        OrderSource response = api.addOrderSource(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for an orderSource
     *
     * Adds an audit to an existing orderSource.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addOrderSourceAuditTest() throws ApiException {
        Integer orderSourceId = null;
        String orderSourceAudit = null;
        api.addOrderSourceAudit(orderSourceId, orderSourceAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to an orderSource
     *
     * Adds a file to an existing orderSource.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addOrderSourceFileTest() throws ApiException {
        Integer orderSourceId = null;
        String fileName = null;
        api.addOrderSourceFile(orderSourceId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to an orderSource by URL.
     *
     * Adds a file to an existing orderSource by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addOrderSourceFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer orderSourceId = null;
        api.addOrderSourceFileByURL(body, orderSourceId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for an orderSource.
     *
     * Adds a tag to an existing orderSource.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addOrderSourceTagTest() throws ApiException {
        Integer orderSourceId = null;
        String orderSourceTag = null;
        api.addOrderSourceTag(orderSourceId, orderSourceTag);

        // TODO: test validations
    }
    
    /**
     * Delete an orderSource
     *
     * Deletes the orderSource identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOrderSourceTest() throws ApiException {
        Integer orderSourceId = null;
        api.deleteOrderSource(orderSourceId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for an orderSource.
     *
     * Deletes an existing orderSource file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOrderSourceFileTest() throws ApiException {
        Integer orderSourceId = null;
        Integer fileId = null;
        api.deleteOrderSourceFile(orderSourceId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for an orderSource.
     *
     * Deletes an existing orderSource tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOrderSourceTagTest() throws ApiException {
        Integer orderSourceId = null;
        String orderSourceTag = null;
        api.deleteOrderSourceTag(orderSourceId, orderSourceTag);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated an orderSource by id
     *
     * Returns a duplicated orderSource identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateOrderSourceByIdTest() throws ApiException {
        Integer orderSourceId = null;
        OrderSource response = api.getDuplicateOrderSourceById(orderSourceId);

        // TODO: test validations
    }
    
    /**
     * Search orderSources by filter
     *
     * Returns the list of orderSources that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderSourceByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<OrderSource> response = api.getOrderSourceByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get an orderSource by id
     *
     * Returns the orderSource identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderSourceByIdTest() throws ApiException {
        Integer orderSourceId = null;
        OrderSource response = api.getOrderSourceById(orderSourceId);

        // TODO: test validations
    }
    
    /**
     * Get the files for an orderSource.
     *
     * Get all existing orderSource files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderSourceFilesTest() throws ApiException {
        Integer orderSourceId = null;
        api.getOrderSourceFiles(orderSourceId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for an orderSource.
     *
     * Get all existing orderSource tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderSourceTagsTest() throws ApiException {
        Integer orderSourceId = null;
        api.getOrderSourceTags(orderSourceId);

        // TODO: test validations
    }
    
    /**
     * Update an orderSource
     *
     * Updates an existing orderSource using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOrderSourceTest() throws ApiException {
        OrderSource body = null;
        api.updateOrderSource(body);

        // TODO: test validations
    }
    
    /**
     * Update an orderSource custom fields
     *
     * Updates an existing orderSource custom fields using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOrderSourceCustomFieldsTest() throws ApiException {
        OrderSource body = null;
        api.updateOrderSourceCustomFields(body);

        // TODO: test validations
    }
    
}
