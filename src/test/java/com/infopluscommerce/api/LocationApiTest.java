/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.Location;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LocationApi
 */
@Ignore
public class LocationApiTest {

    private final LocationApi api = new LocationApi();

    
    /**
     * Create a location
     *
     * Inserts a new location using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addLocationTest() throws ApiException {
        Location body = null;
        Location response = api.addLocation(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for a location
     *
     * Adds an audit to an existing location.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addLocationAuditTest() throws ApiException {
        Integer locationId = null;
        String locationAudit = null;
        api.addLocationAudit(locationId, locationAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a location
     *
     * Adds a file to an existing location.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addLocationFileTest() throws ApiException {
        Integer locationId = null;
        String fileName = null;
        api.addLocationFile(locationId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a location by URL.
     *
     * Adds a file to an existing location by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addLocationFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer locationId = null;
        api.addLocationFileByURL(body, locationId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for a location.
     *
     * Adds a tag to an existing location.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addLocationTagTest() throws ApiException {
        Integer locationId = null;
        String locationTag = null;
        api.addLocationTag(locationId, locationTag);

        // TODO: test validations
    }
    
    /**
     * Delete a location
     *
     * Deletes the location identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLocationTest() throws ApiException {
        Integer locationId = null;
        api.deleteLocation(locationId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for a location.
     *
     * Deletes an existing location file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLocationFileTest() throws ApiException {
        Integer locationId = null;
        Integer fileId = null;
        api.deleteLocationFile(locationId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for a location.
     *
     * Deletes an existing location tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLocationTagTest() throws ApiException {
        Integer locationId = null;
        String locationTag = null;
        api.deleteLocationTag(locationId, locationTag);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated a location by id
     *
     * Returns a duplicated location identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateLocationByIdTest() throws ApiException {
        Integer locationId = null;
        Location response = api.getDuplicateLocationById(locationId);

        // TODO: test validations
    }
    
    /**
     * Search locations by filter
     *
     * Returns the list of locations that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLocationByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<Location> response = api.getLocationByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get a location by id
     *
     * Returns the location identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLocationByIdTest() throws ApiException {
        Integer locationId = null;
        Location response = api.getLocationById(locationId);

        // TODO: test validations
    }
    
    /**
     * Get the files for a location.
     *
     * Get all existing location files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLocationFilesTest() throws ApiException {
        Integer locationId = null;
        api.getLocationFiles(locationId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for a location.
     *
     * Get all existing location tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLocationTagsTest() throws ApiException {
        Integer locationId = null;
        api.getLocationTags(locationId);

        // TODO: test validations
    }
    
    /**
     * Update a location
     *
     * Updates an existing location using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLocationTest() throws ApiException {
        Location body = null;
        api.updateLocation(body);

        // TODO: test validations
    }
    
    /**
     * Update a location custom fields
     *
     * Updates an existing location custom fields using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLocationCustomFieldsTest() throws ApiException {
        Location body = null;
        api.updateLocationCustomFields(body);

        // TODO: test validations
    }
    
}
