/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.ExternalShipment;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExternalShipmentApi
 */
@Ignore
public class ExternalShipmentApiTest {

    private final ExternalShipmentApi api = new ExternalShipmentApi();

    
    /**
     * Create an externalShipment
     *
     * Inserts a new externalShipment using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addExternalShipmentTest() throws ApiException {
        ExternalShipment body = null;
        ExternalShipment response = api.addExternalShipment(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for an externalShipment
     *
     * Adds an audit to an existing externalShipment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addExternalShipmentAuditTest() throws ApiException {
        Integer externalShipmentId = null;
        String externalShipmentAudit = null;
        api.addExternalShipmentAudit(externalShipmentId, externalShipmentAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to an externalShipment
     *
     * Adds a file to an existing externalShipment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addExternalShipmentFileTest() throws ApiException {
        Integer externalShipmentId = null;
        String fileName = null;
        api.addExternalShipmentFile(externalShipmentId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to an externalShipment by URL.
     *
     * Adds a file to an existing externalShipment by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addExternalShipmentFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer externalShipmentId = null;
        api.addExternalShipmentFileByURL(body, externalShipmentId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for an externalShipment.
     *
     * Adds a tag to an existing externalShipment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addExternalShipmentTagTest() throws ApiException {
        Integer externalShipmentId = null;
        String externalShipmentTag = null;
        api.addExternalShipmentTag(externalShipmentId, externalShipmentTag);

        // TODO: test validations
    }
    
    /**
     * Delete an externalShipment
     *
     * Deletes the externalShipment identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExternalShipmentTest() throws ApiException {
        Integer externalShipmentId = null;
        api.deleteExternalShipment(externalShipmentId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for an externalShipment.
     *
     * Deletes an existing externalShipment file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExternalShipmentFileTest() throws ApiException {
        Integer externalShipmentId = null;
        Integer fileId = null;
        api.deleteExternalShipmentFile(externalShipmentId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for an externalShipment.
     *
     * Deletes an existing externalShipment tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExternalShipmentTagTest() throws ApiException {
        Integer externalShipmentId = null;
        String externalShipmentTag = null;
        api.deleteExternalShipmentTag(externalShipmentId, externalShipmentTag);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated an externalShipment by id
     *
     * Returns a duplicated externalShipment identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateExternalShipmentByIdTest() throws ApiException {
        Integer externalShipmentId = null;
        ExternalShipment response = api.getDuplicateExternalShipmentById(externalShipmentId);

        // TODO: test validations
    }
    
    /**
     * Search externalShipments by filter
     *
     * Returns the list of externalShipments that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExternalShipmentByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<ExternalShipment> response = api.getExternalShipmentByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get an externalShipment by id
     *
     * Returns the externalShipment identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExternalShipmentByIdTest() throws ApiException {
        Integer externalShipmentId = null;
        ExternalShipment response = api.getExternalShipmentById(externalShipmentId);

        // TODO: test validations
    }
    
    /**
     * Get the files for an externalShipment.
     *
     * Get all existing externalShipment files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExternalShipmentFilesTest() throws ApiException {
        Integer externalShipmentId = null;
        api.getExternalShipmentFiles(externalShipmentId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for an externalShipment.
     *
     * Get all existing externalShipment tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExternalShipmentTagsTest() throws ApiException {
        Integer externalShipmentId = null;
        api.getExternalShipmentTags(externalShipmentId);

        // TODO: test validations
    }
    
    /**
     * Update an externalShipment
     *
     * Updates an existing externalShipment using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateExternalShipmentTest() throws ApiException {
        ExternalShipment body = null;
        api.updateExternalShipment(body);

        // TODO: test validations
    }
    
    /**
     * Update an externalShipment custom fields
     *
     * Updates an existing externalShipment custom fields using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateExternalShipmentCustomFieldsTest() throws ApiException {
        ExternalShipment body = null;
        api.updateExternalShipmentCustomFields(body);

        // TODO: test validations
    }
    
}
