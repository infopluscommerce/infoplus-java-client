/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.ProductionLot;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductionLotApi
 */
@Ignore
public class ProductionLotApiTest {

    private final ProductionLotApi api = new ProductionLotApi();

    
    /**
     * Create a productionLot
     *
     * Inserts a new productionLot using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addProductionLotTest() throws ApiException {
        ProductionLot body = null;
        ProductionLot response = api.addProductionLot(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for a productionLot
     *
     * Adds an audit to an existing productionLot.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addProductionLotAuditTest() throws ApiException {
        Integer productionLotId = null;
        String productionLotAudit = null;
        api.addProductionLotAudit(productionLotId, productionLotAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a productionLot
     *
     * Adds a file to an existing productionLot.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addProductionLotFileTest() throws ApiException {
        Integer productionLotId = null;
        String fileName = null;
        api.addProductionLotFile(productionLotId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a productionLot by URL.
     *
     * Adds a file to an existing productionLot by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addProductionLotFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer productionLotId = null;
        api.addProductionLotFileByURL(body, productionLotId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for a productionLot.
     *
     * Adds a tag to an existing productionLot.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addProductionLotTagTest() throws ApiException {
        Integer productionLotId = null;
        String productionLotTag = null;
        api.addProductionLotTag(productionLotId, productionLotTag);

        // TODO: test validations
    }
    
    /**
     * Delete a productionLot
     *
     * Deletes the productionLot identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProductionLotTest() throws ApiException {
        Integer productionLotId = null;
        api.deleteProductionLot(productionLotId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for a productionLot.
     *
     * Deletes an existing productionLot file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProductionLotFileTest() throws ApiException {
        Integer productionLotId = null;
        Integer fileId = null;
        api.deleteProductionLotFile(productionLotId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for a productionLot.
     *
     * Deletes an existing productionLot tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProductionLotTagTest() throws ApiException {
        Integer productionLotId = null;
        String productionLotTag = null;
        api.deleteProductionLotTag(productionLotId, productionLotTag);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated a productionLot by id
     *
     * Returns a duplicated productionLot identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateProductionLotByIdTest() throws ApiException {
        Integer productionLotId = null;
        ProductionLot response = api.getDuplicateProductionLotById(productionLotId);

        // TODO: test validations
    }
    
    /**
     * Search productionLots by filter
     *
     * Returns the list of productionLots that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductionLotByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<ProductionLot> response = api.getProductionLotByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get a productionLot by id
     *
     * Returns the productionLot identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductionLotByIdTest() throws ApiException {
        Integer productionLotId = null;
        ProductionLot response = api.getProductionLotById(productionLotId);

        // TODO: test validations
    }
    
    /**
     * Get the files for a productionLot.
     *
     * Get all existing productionLot files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductionLotFilesTest() throws ApiException {
        Integer productionLotId = null;
        api.getProductionLotFiles(productionLotId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for a productionLot.
     *
     * Get all existing productionLot tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductionLotTagsTest() throws ApiException {
        Integer productionLotId = null;
        api.getProductionLotTags(productionLotId);

        // TODO: test validations
    }
    
    /**
     * Update a productionLot
     *
     * Updates an existing productionLot using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProductionLotTest() throws ApiException {
        ProductionLot body = null;
        api.updateProductionLot(body);

        // TODO: test validations
    }
    
    /**
     * Update a productionLot custom fields
     *
     * Updates an existing productionLot custom fields using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProductionLotCustomFieldsTest() throws ApiException {
        ProductionLot body = null;
        api.updateProductionLotCustomFields(body);

        // TODO: test validations
    }
    
}
