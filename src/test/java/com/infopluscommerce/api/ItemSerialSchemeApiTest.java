/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.ItemSerialScheme;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ItemSerialSchemeApi
 */
@Ignore
public class ItemSerialSchemeApiTest {

    private final ItemSerialSchemeApi api = new ItemSerialSchemeApi();

    
    /**
     * Create an itemSerialScheme
     *
     * Inserts a new itemSerialScheme using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemSerialSchemeTest() throws ApiException {
        ItemSerialScheme body = null;
        ItemSerialScheme response = api.addItemSerialScheme(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for an itemSerialScheme
     *
     * Adds an audit to an existing itemSerialScheme.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemSerialSchemeAuditTest() throws ApiException {
        Integer itemSerialSchemeId = null;
        String itemSerialSchemeAudit = null;
        api.addItemSerialSchemeAudit(itemSerialSchemeId, itemSerialSchemeAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to an itemSerialScheme
     *
     * Adds a file to an existing itemSerialScheme.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemSerialSchemeFileTest() throws ApiException {
        Integer itemSerialSchemeId = null;
        String fileName = null;
        api.addItemSerialSchemeFile(itemSerialSchemeId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to an itemSerialScheme by URL.
     *
     * Adds a file to an existing itemSerialScheme by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemSerialSchemeFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer itemSerialSchemeId = null;
        api.addItemSerialSchemeFileByURL(body, itemSerialSchemeId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for an itemSerialScheme.
     *
     * Adds a tag to an existing itemSerialScheme.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemSerialSchemeTagTest() throws ApiException {
        Integer itemSerialSchemeId = null;
        String itemSerialSchemeTag = null;
        api.addItemSerialSchemeTag(itemSerialSchemeId, itemSerialSchemeTag);

        // TODO: test validations
    }
    
    /**
     * Delete an itemSerialScheme
     *
     * Deletes the itemSerialScheme identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemSerialSchemeTest() throws ApiException {
        Integer itemSerialSchemeId = null;
        api.deleteItemSerialScheme(itemSerialSchemeId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for an itemSerialScheme.
     *
     * Deletes an existing itemSerialScheme file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemSerialSchemeFileTest() throws ApiException {
        Integer itemSerialSchemeId = null;
        Integer fileId = null;
        api.deleteItemSerialSchemeFile(itemSerialSchemeId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for an itemSerialScheme.
     *
     * Deletes an existing itemSerialScheme tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemSerialSchemeTagTest() throws ApiException {
        Integer itemSerialSchemeId = null;
        String itemSerialSchemeTag = null;
        api.deleteItemSerialSchemeTag(itemSerialSchemeId, itemSerialSchemeTag);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated an itemSerialScheme by id
     *
     * Returns a duplicated itemSerialScheme identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateItemSerialSchemeByIdTest() throws ApiException {
        Integer itemSerialSchemeId = null;
        ItemSerialScheme response = api.getDuplicateItemSerialSchemeById(itemSerialSchemeId);

        // TODO: test validations
    }
    
    /**
     * Search itemSerialSchemes by filter
     *
     * Returns the list of itemSerialSchemes that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemSerialSchemeByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<ItemSerialScheme> response = api.getItemSerialSchemeByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get an itemSerialScheme by id
     *
     * Returns the itemSerialScheme identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemSerialSchemeByIdTest() throws ApiException {
        Integer itemSerialSchemeId = null;
        ItemSerialScheme response = api.getItemSerialSchemeById(itemSerialSchemeId);

        // TODO: test validations
    }
    
    /**
     * Get the files for an itemSerialScheme.
     *
     * Get all existing itemSerialScheme files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemSerialSchemeFilesTest() throws ApiException {
        Integer itemSerialSchemeId = null;
        api.getItemSerialSchemeFiles(itemSerialSchemeId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for an itemSerialScheme.
     *
     * Get all existing itemSerialScheme tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemSerialSchemeTagsTest() throws ApiException {
        Integer itemSerialSchemeId = null;
        api.getItemSerialSchemeTags(itemSerialSchemeId);

        // TODO: test validations
    }
    
    /**
     * Update an itemSerialScheme
     *
     * Updates an existing itemSerialScheme using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateItemSerialSchemeTest() throws ApiException {
        ItemSerialScheme body = null;
        api.updateItemSerialScheme(body);

        // TODO: test validations
    }
    
}
