/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.Asn;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AsnApi
 */
@Ignore
public class AsnApiTest {

    private final AsnApi api = new AsnApi();

    
    /**
     * Create an asn
     *
     * Inserts a new asn using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addAsnTest() throws ApiException {
        Asn body = null;
        Asn response = api.addAsn(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for an asn
     *
     * Adds an audit to an existing asn.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addAsnAuditTest() throws ApiException {
        Integer asnId = null;
        String asnAudit = null;
        api.addAsnAudit(asnId, asnAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to an asn
     *
     * Adds a file to an existing asn.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addAsnFileTest() throws ApiException {
        Integer asnId = null;
        String fileName = null;
        api.addAsnFile(asnId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to an asn by URL.
     *
     * Adds a file to an existing asn by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addAsnFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer asnId = null;
        api.addAsnFileByURL(body, asnId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for an asn.
     *
     * Adds a tag to an existing asn.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addAsnTagTest() throws ApiException {
        Integer asnId = null;
        String asnTag = null;
        api.addAsnTag(asnId, asnTag);

        // TODO: test validations
    }
    
    /**
     * Delete an asn
     *
     * Deletes the asn identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAsnTest() throws ApiException {
        Integer asnId = null;
        api.deleteAsn(asnId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for an asn.
     *
     * Deletes an existing asn file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAsnFileTest() throws ApiException {
        Integer asnId = null;
        Integer fileId = null;
        api.deleteAsnFile(asnId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for an asn.
     *
     * Deletes an existing asn tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAsnTagTest() throws ApiException {
        Integer asnId = null;
        String asnTag = null;
        api.deleteAsnTag(asnId, asnTag);

        // TODO: test validations
    }
    
    /**
     * Search asns by filter
     *
     * Returns the list of asns that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAsnByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<Asn> response = api.getAsnByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get an asn by id
     *
     * Returns the asn identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAsnByIdTest() throws ApiException {
        Integer asnId = null;
        Asn response = api.getAsnById(asnId);

        // TODO: test validations
    }
    
    /**
     * Get the files for an asn.
     *
     * Get all existing asn files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAsnFilesTest() throws ApiException {
        Integer asnId = null;
        api.getAsnFiles(asnId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for an asn.
     *
     * Get all existing asn tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAsnTagsTest() throws ApiException {
        Integer asnId = null;
        api.getAsnTags(asnId);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated an asn by id
     *
     * Returns a duplicated asn identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateAsnByIdTest() throws ApiException {
        Integer asnId = null;
        Asn response = api.getDuplicateAsnById(asnId);

        // TODO: test validations
    }
    
    /**
     * Update an asn
     *
     * Updates an existing asn using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAsnTest() throws ApiException {
        Asn body = null;
        api.updateAsn(body);

        // TODO: test validations
    }
    
    /**
     * Update an asn custom fields
     *
     * Updates an existing asn custom fields using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAsnCustomFieldsTest() throws ApiException {
        Asn body = null;
        api.updateAsnCustomFields(body);

        // TODO: test validations
    }
    
}
