/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.Item;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ItemApi
 */
@Ignore
public class ItemApiTest {

    private final ItemApi api = new ItemApi();

    
    /**
     * Create an item
     *
     * Inserts a new item using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemTest() throws ApiException {
        Item body = null;
        Item response = api.addItem(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for an item
     *
     * Adds an audit to an existing item.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemAuditTest() throws ApiException {
        Integer itemId = null;
        String itemAudit = null;
        api.addItemAudit(itemId, itemAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to an item
     *
     * Adds a file to an existing item.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemFileTest() throws ApiException {
        Integer itemId = null;
        String fileName = null;
        api.addItemFile(itemId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to an item by URL.
     *
     * Adds a file to an existing item by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer itemId = null;
        api.addItemFileByURL(body, itemId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for an item.
     *
     * Adds a tag to an existing item.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemTagTest() throws ApiException {
        Integer itemId = null;
        String itemTag = null;
        api.addItemTag(itemId, itemTag);

        // TODO: test validations
    }
    
    /**
     * Delete an item
     *
     * Deletes the item identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemTest() throws ApiException {
        Integer itemId = null;
        api.deleteItem(itemId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for an item.
     *
     * Deletes an existing item file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemFileTest() throws ApiException {
        Integer itemId = null;
        Integer fileId = null;
        api.deleteItemFile(itemId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for an item.
     *
     * Deletes an existing item tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemTagTest() throws ApiException {
        Integer itemId = null;
        String itemTag = null;
        api.deleteItemTag(itemId, itemTag);

        // TODO: test validations
    }
    
    /**
     * Get an item by SKU
     *
     * Returns the item identified by the specified parameters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBySKUTest() throws ApiException {
        Integer lobId = null;
        String sku = null;
        Item response = api.getBySKU(lobId, sku);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated an item by id
     *
     * Returns a duplicated item identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateItemByIdTest() throws ApiException {
        Integer itemId = null;
        Item response = api.getDuplicateItemById(itemId);

        // TODO: test validations
    }
    
    /**
     * Search items by filter
     *
     * Returns the list of items that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<Item> response = api.getItemByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get an item by id
     *
     * Returns the item identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemByIdTest() throws ApiException {
        Integer itemId = null;
        Item response = api.getItemById(itemId);

        // TODO: test validations
    }
    
    /**
     * Get the files for an item.
     *
     * Get all existing item files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemFilesTest() throws ApiException {
        Integer itemId = null;
        api.getItemFiles(itemId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for an item.
     *
     * Get all existing item tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemTagsTest() throws ApiException {
        Integer itemId = null;
        api.getItemTags(itemId);

        // TODO: test validations
    }
    
    /**
     * Update an item
     *
     * Updates an existing item using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateItemTest() throws ApiException {
        Item body = null;
        api.updateItem(body);

        // TODO: test validations
    }
    
    /**
     * Update an item custom fields
     *
     * Updates an existing item custom fields using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateItemCustomFieldsTest() throws ApiException {
        Item body = null;
        api.updateItemCustomFields(body);

        // TODO: test validations
    }
    
}
