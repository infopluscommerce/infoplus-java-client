/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.ExecuteJobInputAPIModel;
import com.infopluscommerce.model.Job;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.ProcessOutputAPIModel;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JobApi
 */
@Ignore
public class JobApiTest {

    private final JobApi api = new JobApi();

    
    /**
     * Create a job
     *
     * Inserts a new job using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addJobTest() throws ApiException {
        Job body = null;
        Job response = api.addJob(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for a job
     *
     * Adds an audit to an existing job.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addJobAuditTest() throws ApiException {
        Integer jobId = null;
        String jobAudit = null;
        api.addJobAudit(jobId, jobAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a job
     *
     * Adds a file to an existing job.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addJobFileTest() throws ApiException {
        Integer jobId = null;
        String fileName = null;
        api.addJobFile(jobId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a job by URL.
     *
     * Adds a file to an existing job by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addJobFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer jobId = null;
        api.addJobFileByURL(body, jobId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for a job.
     *
     * Adds a tag to an existing job.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addJobTagTest() throws ApiException {
        Integer jobId = null;
        String jobTag = null;
        api.addJobTag(jobId, jobTag);

        // TODO: test validations
    }
    
    /**
     * Delete a job
     *
     * Deletes the job identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteJobTest() throws ApiException {
        Integer jobId = null;
        api.deleteJob(jobId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for a job.
     *
     * Deletes an existing job file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteJobFileTest() throws ApiException {
        Integer jobId = null;
        Integer fileId = null;
        api.deleteJobFile(jobId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for a job.
     *
     * Deletes an existing job tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteJobTagTest() throws ApiException {
        Integer jobId = null;
        String jobTag = null;
        api.deleteJobTag(jobId, jobTag);

        // TODO: test validations
    }
    
    /**
     * Run the ExecuteJob process.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executeJobTest() throws ApiException {
        ExecuteJobInputAPIModel body = null;
        List<ProcessOutputAPIModel> response = api.executeJob(body);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated a job by id
     *
     * Returns a duplicated job identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateJobByIdTest() throws ApiException {
        Integer jobId = null;
        Job response = api.getDuplicateJobById(jobId);

        // TODO: test validations
    }
    
    /**
     * Search jobs by filter
     *
     * Returns the list of jobs that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<Job> response = api.getJobByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get a job by id
     *
     * Returns the job identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobByIdTest() throws ApiException {
        Integer jobId = null;
        Job response = api.getJobById(jobId);

        // TODO: test validations
    }
    
    /**
     * Get the files for a job.
     *
     * Get all existing job files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobFilesTest() throws ApiException {
        Integer jobId = null;
        api.getJobFiles(jobId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for a job.
     *
     * Get all existing job tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobTagsTest() throws ApiException {
        Integer jobId = null;
        api.getJobTags(jobId);

        // TODO: test validations
    }
    
    /**
     * Update a job
     *
     * Updates an existing job using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateJobTest() throws ApiException {
        Job body = null;
        api.updateJob(body);

        // TODO: test validations
    }
    
    /**
     * Update a job custom fields
     *
     * Updates an existing job custom fields using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateJobCustomFieldsTest() throws ApiException {
        Job body = null;
        api.updateJobCustomFields(body);

        // TODO: test validations
    }
    
}
