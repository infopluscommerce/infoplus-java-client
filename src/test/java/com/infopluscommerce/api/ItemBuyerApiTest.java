/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.ItemBuyer;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ItemBuyerApi
 */
@Ignore
public class ItemBuyerApiTest {

    private final ItemBuyerApi api = new ItemBuyerApi();

    
    /**
     * Create an itemBuyer
     *
     * Inserts a new itemBuyer using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemBuyerTest() throws ApiException {
        ItemBuyer body = null;
        ItemBuyer response = api.addItemBuyer(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for an itemBuyer
     *
     * Adds an audit to an existing itemBuyer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemBuyerAuditTest() throws ApiException {
        Integer itemBuyerId = null;
        String itemBuyerAudit = null;
        api.addItemBuyerAudit(itemBuyerId, itemBuyerAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to an itemBuyer
     *
     * Adds a file to an existing itemBuyer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemBuyerFileTest() throws ApiException {
        Integer itemBuyerId = null;
        String fileName = null;
        api.addItemBuyerFile(itemBuyerId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to an itemBuyer by URL.
     *
     * Adds a file to an existing itemBuyer by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemBuyerFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer itemBuyerId = null;
        api.addItemBuyerFileByURL(body, itemBuyerId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for an itemBuyer.
     *
     * Adds a tag to an existing itemBuyer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemBuyerTagTest() throws ApiException {
        Integer itemBuyerId = null;
        String itemBuyerTag = null;
        api.addItemBuyerTag(itemBuyerId, itemBuyerTag);

        // TODO: test validations
    }
    
    /**
     * Delete an itemBuyer
     *
     * Deletes the itemBuyer identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemBuyerTest() throws ApiException {
        Integer itemBuyerId = null;
        api.deleteItemBuyer(itemBuyerId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for an itemBuyer.
     *
     * Deletes an existing itemBuyer file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemBuyerFileTest() throws ApiException {
        Integer itemBuyerId = null;
        Integer fileId = null;
        api.deleteItemBuyerFile(itemBuyerId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for an itemBuyer.
     *
     * Deletes an existing itemBuyer tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemBuyerTagTest() throws ApiException {
        Integer itemBuyerId = null;
        String itemBuyerTag = null;
        api.deleteItemBuyerTag(itemBuyerId, itemBuyerTag);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated an itemBuyer by id
     *
     * Returns a duplicated itemBuyer identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateItemBuyerByIdTest() throws ApiException {
        Integer itemBuyerId = null;
        ItemBuyer response = api.getDuplicateItemBuyerById(itemBuyerId);

        // TODO: test validations
    }
    
    /**
     * Search itemBuyers by filter
     *
     * Returns the list of itemBuyers that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemBuyerByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<ItemBuyer> response = api.getItemBuyerByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get an itemBuyer by id
     *
     * Returns the itemBuyer identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemBuyerByIdTest() throws ApiException {
        Integer itemBuyerId = null;
        ItemBuyer response = api.getItemBuyerById(itemBuyerId);

        // TODO: test validations
    }
    
    /**
     * Get the files for an itemBuyer.
     *
     * Get all existing itemBuyer files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemBuyerFilesTest() throws ApiException {
        Integer itemBuyerId = null;
        api.getItemBuyerFiles(itemBuyerId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for an itemBuyer.
     *
     * Get all existing itemBuyer tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemBuyerTagsTest() throws ApiException {
        Integer itemBuyerId = null;
        api.getItemBuyerTags(itemBuyerId);

        // TODO: test validations
    }
    
    /**
     * Update an itemBuyer
     *
     * Updates an existing itemBuyer using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateItemBuyerTest() throws ApiException {
        ItemBuyer body = null;
        api.updateItemBuyer(body);

        // TODO: test validations
    }
    
}
