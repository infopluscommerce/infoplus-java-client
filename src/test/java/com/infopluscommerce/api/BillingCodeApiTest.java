/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.BillingCode;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BillingCodeApi
 */
@Ignore
public class BillingCodeApiTest {

    private final BillingCodeApi api = new BillingCodeApi();

    
    /**
     * Create a billingCode
     *
     * Inserts a new billingCode using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBillingCodeTest() throws ApiException {
        BillingCode body = null;
        BillingCode response = api.addBillingCode(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for a billingCode
     *
     * Adds an audit to an existing billingCode.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBillingCodeAuditTest() throws ApiException {
        Integer billingCodeId = null;
        String billingCodeAudit = null;
        api.addBillingCodeAudit(billingCodeId, billingCodeAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a billingCode
     *
     * Adds a file to an existing billingCode.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBillingCodeFileTest() throws ApiException {
        Integer billingCodeId = null;
        String fileName = null;
        api.addBillingCodeFile(billingCodeId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a billingCode by URL.
     *
     * Adds a file to an existing billingCode by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBillingCodeFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer billingCodeId = null;
        api.addBillingCodeFileByURL(body, billingCodeId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for a billingCode.
     *
     * Adds a tag to an existing billingCode.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBillingCodeTagTest() throws ApiException {
        Integer billingCodeId = null;
        String billingCodeTag = null;
        api.addBillingCodeTag(billingCodeId, billingCodeTag);

        // TODO: test validations
    }
    
    /**
     * Delete a billingCode
     *
     * Deletes the billingCode identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBillingCodeTest() throws ApiException {
        Integer billingCodeId = null;
        api.deleteBillingCode(billingCodeId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for a billingCode.
     *
     * Deletes an existing billingCode file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBillingCodeFileTest() throws ApiException {
        Integer billingCodeId = null;
        Integer fileId = null;
        api.deleteBillingCodeFile(billingCodeId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for a billingCode.
     *
     * Deletes an existing billingCode tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBillingCodeTagTest() throws ApiException {
        Integer billingCodeId = null;
        String billingCodeTag = null;
        api.deleteBillingCodeTag(billingCodeId, billingCodeTag);

        // TODO: test validations
    }
    
    /**
     * Search billingCodes by filter
     *
     * Returns the list of billingCodes that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBillingCodeByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<BillingCode> response = api.getBillingCodeByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get a billingCode by id
     *
     * Returns the billingCode identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBillingCodeByIdTest() throws ApiException {
        Integer billingCodeId = null;
        BillingCode response = api.getBillingCodeById(billingCodeId);

        // TODO: test validations
    }
    
    /**
     * Get the files for a billingCode.
     *
     * Get all existing billingCode files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBillingCodeFilesTest() throws ApiException {
        Integer billingCodeId = null;
        api.getBillingCodeFiles(billingCodeId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for a billingCode.
     *
     * Get all existing billingCode tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBillingCodeTagsTest() throws ApiException {
        Integer billingCodeId = null;
        api.getBillingCodeTags(billingCodeId);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated a billingCode by id
     *
     * Returns a duplicated billingCode identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateBillingCodeByIdTest() throws ApiException {
        Integer billingCodeId = null;
        BillingCode response = api.getDuplicateBillingCodeById(billingCodeId);

        // TODO: test validations
    }
    
    /**
     * Update a billingCode
     *
     * Updates an existing billingCode using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBillingCodeTest() throws ApiException {
        BillingCode body = null;
        api.updateBillingCode(body);

        // TODO: test validations
    }
    
    /**
     * Update a billingCode custom fields
     *
     * Updates an existing billingCode custom fields using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBillingCodeCustomFieldsTest() throws ApiException {
        BillingCode body = null;
        api.updateBillingCodeCustomFields(body);

        // TODO: test validations
    }
    
}
