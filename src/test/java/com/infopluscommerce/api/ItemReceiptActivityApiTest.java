/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.ItemReceiptActivity;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ItemReceiptActivityApi
 */
@Ignore
public class ItemReceiptActivityApiTest {

    private final ItemReceiptActivityApi api = new ItemReceiptActivityApi();

    
    /**
     * Create an itemReceiptActivity
     *
     * Inserts a new itemReceiptActivity using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemReceiptActivityTest() throws ApiException {
        ItemReceiptActivity body = null;
        ItemReceiptActivity response = api.addItemReceiptActivity(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for an itemReceiptActivity
     *
     * Adds an audit to an existing itemReceiptActivity.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemReceiptActivityAuditTest() throws ApiException {
        Integer itemReceiptActivityId = null;
        String itemReceiptActivityAudit = null;
        api.addItemReceiptActivityAudit(itemReceiptActivityId, itemReceiptActivityAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to an itemReceiptActivity
     *
     * Adds a file to an existing itemReceiptActivity.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemReceiptActivityFileTest() throws ApiException {
        Integer itemReceiptActivityId = null;
        String fileName = null;
        api.addItemReceiptActivityFile(itemReceiptActivityId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to an itemReceiptActivity by URL.
     *
     * Adds a file to an existing itemReceiptActivity by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemReceiptActivityFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer itemReceiptActivityId = null;
        api.addItemReceiptActivityFileByURL(body, itemReceiptActivityId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for an itemReceiptActivity.
     *
     * Adds a tag to an existing itemReceiptActivity.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemReceiptActivityTagTest() throws ApiException {
        Integer itemReceiptActivityId = null;
        String itemReceiptActivityTag = null;
        api.addItemReceiptActivityTag(itemReceiptActivityId, itemReceiptActivityTag);

        // TODO: test validations
    }
    
    /**
     * Delete an itemReceiptActivity
     *
     * Deletes the itemReceiptActivity identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemReceiptActivityTest() throws ApiException {
        Integer itemReceiptActivityId = null;
        api.deleteItemReceiptActivity(itemReceiptActivityId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for an itemReceiptActivity.
     *
     * Deletes an existing itemReceiptActivity file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemReceiptActivityFileTest() throws ApiException {
        Integer itemReceiptActivityId = null;
        Integer fileId = null;
        api.deleteItemReceiptActivityFile(itemReceiptActivityId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for an itemReceiptActivity.
     *
     * Deletes an existing itemReceiptActivity tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemReceiptActivityTagTest() throws ApiException {
        Integer itemReceiptActivityId = null;
        String itemReceiptActivityTag = null;
        api.deleteItemReceiptActivityTag(itemReceiptActivityId, itemReceiptActivityTag);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated an itemReceiptActivity by id
     *
     * Returns a duplicated itemReceiptActivity identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateItemReceiptActivityByIdTest() throws ApiException {
        Integer itemReceiptActivityId = null;
        ItemReceiptActivity response = api.getDuplicateItemReceiptActivityById(itemReceiptActivityId);

        // TODO: test validations
    }
    
    /**
     * Search itemReceiptActivitys by filter
     *
     * Returns the list of itemReceiptActivitys that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemReceiptActivityByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<ItemReceiptActivity> response = api.getItemReceiptActivityByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get an itemReceiptActivity by id
     *
     * Returns the itemReceiptActivity identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemReceiptActivityByIdTest() throws ApiException {
        Integer itemReceiptActivityId = null;
        ItemReceiptActivity response = api.getItemReceiptActivityById(itemReceiptActivityId);

        // TODO: test validations
    }
    
    /**
     * Get the files for an itemReceiptActivity.
     *
     * Get all existing itemReceiptActivity files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemReceiptActivityFilesTest() throws ApiException {
        Integer itemReceiptActivityId = null;
        api.getItemReceiptActivityFiles(itemReceiptActivityId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for an itemReceiptActivity.
     *
     * Get all existing itemReceiptActivity tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemReceiptActivityTagsTest() throws ApiException {
        Integer itemReceiptActivityId = null;
        api.getItemReceiptActivityTags(itemReceiptActivityId);

        // TODO: test validations
    }
    
    /**
     * Update an itemReceiptActivity
     *
     * Updates an existing itemReceiptActivity using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateItemReceiptActivityTest() throws ApiException {
        ItemReceiptActivity body = null;
        api.updateItemReceiptActivity(body);

        // TODO: test validations
    }
    
}
