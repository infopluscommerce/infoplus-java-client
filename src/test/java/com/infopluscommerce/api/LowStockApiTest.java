/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.LowStock;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LowStockApi
 */
@Ignore
public class LowStockApiTest {

    private final LowStockApi api = new LowStockApi();

    
    /**
     * Add new audit for a lowStock
     *
     * Adds an audit to an existing lowStock.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addLowStockAuditTest() throws ApiException {
        Integer lowStockId = null;
        String lowStockAudit = null;
        api.addLowStockAudit(lowStockId, lowStockAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a lowStock
     *
     * Adds a file to an existing lowStock.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addLowStockFileTest() throws ApiException {
        Integer lowStockId = null;
        String fileName = null;
        api.addLowStockFile(lowStockId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a lowStock by URL.
     *
     * Adds a file to an existing lowStock by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addLowStockFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer lowStockId = null;
        api.addLowStockFileByURL(body, lowStockId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for a lowStock.
     *
     * Adds a tag to an existing lowStock.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addLowStockTagTest() throws ApiException {
        Integer lowStockId = null;
        String lowStockTag = null;
        api.addLowStockTag(lowStockId, lowStockTag);

        // TODO: test validations
    }
    
    /**
     * Delete a file for a lowStock.
     *
     * Deletes an existing lowStock file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLowStockFileTest() throws ApiException {
        Integer lowStockId = null;
        Integer fileId = null;
        api.deleteLowStockFile(lowStockId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for a lowStock.
     *
     * Deletes an existing lowStock tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLowStockTagTest() throws ApiException {
        Integer lowStockId = null;
        String lowStockTag = null;
        api.deleteLowStockTag(lowStockId, lowStockTag);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated a lowStock by id
     *
     * Returns a duplicated lowStock identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateLowStockByIdTest() throws ApiException {
        Integer lowStockId = null;
        LowStock response = api.getDuplicateLowStockById(lowStockId);

        // TODO: test validations
    }
    
    /**
     * Search lowStocks by filter
     *
     * Returns the list of lowStocks that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLowStockByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<LowStock> response = api.getLowStockByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get a lowStock by id
     *
     * Returns the lowStock identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLowStockByIdTest() throws ApiException {
        Integer lowStockId = null;
        LowStock response = api.getLowStockById(lowStockId);

        // TODO: test validations
    }
    
    /**
     * Get the files for a lowStock.
     *
     * Get all existing lowStock files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLowStockFilesTest() throws ApiException {
        Integer lowStockId = null;
        api.getLowStockFiles(lowStockId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for a lowStock.
     *
     * Get all existing lowStock tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLowStockTagsTest() throws ApiException {
        Integer lowStockId = null;
        api.getLowStockTags(lowStockId);

        // TODO: test validations
    }
    
}
