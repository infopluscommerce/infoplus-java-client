/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.ExecuteQuickReceiptInputAPIModel;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.ProcessOutputAPIModel;
import com.infopluscommerce.model.QuickReceipt;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QuickReceiptApi
 */
@Ignore
public class QuickReceiptApiTest {

    private final QuickReceiptApi api = new QuickReceiptApi();

    
    /**
     * Create a quickReceipt
     *
     * Inserts a new quickReceipt using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addQuickReceiptTest() throws ApiException {
        QuickReceipt body = null;
        QuickReceipt response = api.addQuickReceipt(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for a quickReceipt
     *
     * Adds an audit to an existing quickReceipt.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addQuickReceiptAuditTest() throws ApiException {
        Integer quickReceiptId = null;
        String quickReceiptAudit = null;
        api.addQuickReceiptAudit(quickReceiptId, quickReceiptAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a quickReceipt
     *
     * Adds a file to an existing quickReceipt.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addQuickReceiptFileTest() throws ApiException {
        Integer quickReceiptId = null;
        String fileName = null;
        api.addQuickReceiptFile(quickReceiptId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a quickReceipt by URL.
     *
     * Adds a file to an existing quickReceipt by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addQuickReceiptFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer quickReceiptId = null;
        api.addQuickReceiptFileByURL(body, quickReceiptId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for a quickReceipt.
     *
     * Adds a tag to an existing quickReceipt.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addQuickReceiptTagTest() throws ApiException {
        Integer quickReceiptId = null;
        String quickReceiptTag = null;
        api.addQuickReceiptTag(quickReceiptId, quickReceiptTag);

        // TODO: test validations
    }
    
    /**
     * Delete a quickReceipt
     *
     * Deletes the quickReceipt identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteQuickReceiptTest() throws ApiException {
        Integer quickReceiptId = null;
        api.deleteQuickReceipt(quickReceiptId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for a quickReceipt.
     *
     * Deletes an existing quickReceipt file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteQuickReceiptFileTest() throws ApiException {
        Integer quickReceiptId = null;
        Integer fileId = null;
        api.deleteQuickReceiptFile(quickReceiptId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for a quickReceipt.
     *
     * Deletes an existing quickReceipt tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteQuickReceiptTagTest() throws ApiException {
        Integer quickReceiptId = null;
        String quickReceiptTag = null;
        api.deleteQuickReceiptTag(quickReceiptId, quickReceiptTag);

        // TODO: test validations
    }
    
    /**
     * Run the ExecuteQuickReceipt process.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executeQuickReceiptTest() throws ApiException {
        ExecuteQuickReceiptInputAPIModel body = null;
        List<ProcessOutputAPIModel> response = api.executeQuickReceipt(body);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated a quickReceipt by id
     *
     * Returns a duplicated quickReceipt identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateQuickReceiptByIdTest() throws ApiException {
        Integer quickReceiptId = null;
        QuickReceipt response = api.getDuplicateQuickReceiptById(quickReceiptId);

        // TODO: test validations
    }
    
    /**
     * Search quickReceipts by filter
     *
     * Returns the list of quickReceipts that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQuickReceiptByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<QuickReceipt> response = api.getQuickReceiptByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get a quickReceipt by id
     *
     * Returns the quickReceipt identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQuickReceiptByIdTest() throws ApiException {
        Integer quickReceiptId = null;
        QuickReceipt response = api.getQuickReceiptById(quickReceiptId);

        // TODO: test validations
    }
    
    /**
     * Get the files for a quickReceipt.
     *
     * Get all existing quickReceipt files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQuickReceiptFilesTest() throws ApiException {
        Integer quickReceiptId = null;
        api.getQuickReceiptFiles(quickReceiptId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for a quickReceipt.
     *
     * Get all existing quickReceipt tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQuickReceiptTagsTest() throws ApiException {
        Integer quickReceiptId = null;
        api.getQuickReceiptTags(quickReceiptId);

        // TODO: test validations
    }
    
    /**
     * Update a quickReceipt
     *
     * Updates an existing quickReceipt using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateQuickReceiptTest() throws ApiException {
        QuickReceipt body = null;
        api.updateQuickReceipt(body);

        // TODO: test validations
    }
    
    /**
     * Update a quickReceipt custom fields
     *
     * Updates an existing quickReceipt custom fields using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateQuickReceiptCustomFieldsTest() throws ApiException {
        QuickReceipt body = null;
        api.updateQuickReceiptCustomFields(body);

        // TODO: test validations
    }
    
}
