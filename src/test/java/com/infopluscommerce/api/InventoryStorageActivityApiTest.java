/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.InventoryStorageActivity;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InventoryStorageActivityApi
 */
@Ignore
public class InventoryStorageActivityApiTest {

    private final InventoryStorageActivityApi api = new InventoryStorageActivityApi();

    
    /**
     * Create an inventoryStorageActivity
     *
     * Inserts a new inventoryStorageActivity using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInventoryStorageActivityTest() throws ApiException {
        InventoryStorageActivity body = null;
        InventoryStorageActivity response = api.addInventoryStorageActivity(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for an inventoryStorageActivity
     *
     * Adds an audit to an existing inventoryStorageActivity.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInventoryStorageActivityAuditTest() throws ApiException {
        Integer inventoryStorageActivityId = null;
        String inventoryStorageActivityAudit = null;
        api.addInventoryStorageActivityAudit(inventoryStorageActivityId, inventoryStorageActivityAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to an inventoryStorageActivity
     *
     * Adds a file to an existing inventoryStorageActivity.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInventoryStorageActivityFileTest() throws ApiException {
        Integer inventoryStorageActivityId = null;
        String fileName = null;
        api.addInventoryStorageActivityFile(inventoryStorageActivityId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to an inventoryStorageActivity by URL.
     *
     * Adds a file to an existing inventoryStorageActivity by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInventoryStorageActivityFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer inventoryStorageActivityId = null;
        api.addInventoryStorageActivityFileByURL(body, inventoryStorageActivityId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for an inventoryStorageActivity.
     *
     * Adds a tag to an existing inventoryStorageActivity.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInventoryStorageActivityTagTest() throws ApiException {
        Integer inventoryStorageActivityId = null;
        String inventoryStorageActivityTag = null;
        api.addInventoryStorageActivityTag(inventoryStorageActivityId, inventoryStorageActivityTag);

        // TODO: test validations
    }
    
    /**
     * Delete an inventoryStorageActivity
     *
     * Deletes the inventoryStorageActivity identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInventoryStorageActivityTest() throws ApiException {
        Integer inventoryStorageActivityId = null;
        api.deleteInventoryStorageActivity(inventoryStorageActivityId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for an inventoryStorageActivity.
     *
     * Deletes an existing inventoryStorageActivity file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInventoryStorageActivityFileTest() throws ApiException {
        Integer inventoryStorageActivityId = null;
        Integer fileId = null;
        api.deleteInventoryStorageActivityFile(inventoryStorageActivityId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for an inventoryStorageActivity.
     *
     * Deletes an existing inventoryStorageActivity tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInventoryStorageActivityTagTest() throws ApiException {
        Integer inventoryStorageActivityId = null;
        String inventoryStorageActivityTag = null;
        api.deleteInventoryStorageActivityTag(inventoryStorageActivityId, inventoryStorageActivityTag);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated an inventoryStorageActivity by id
     *
     * Returns a duplicated inventoryStorageActivity identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateInventoryStorageActivityByIdTest() throws ApiException {
        Integer inventoryStorageActivityId = null;
        InventoryStorageActivity response = api.getDuplicateInventoryStorageActivityById(inventoryStorageActivityId);

        // TODO: test validations
    }
    
    /**
     * Search inventoryStorageActivitys by filter
     *
     * Returns the list of inventoryStorageActivitys that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInventoryStorageActivityByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<InventoryStorageActivity> response = api.getInventoryStorageActivityByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get an inventoryStorageActivity by id
     *
     * Returns the inventoryStorageActivity identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInventoryStorageActivityByIdTest() throws ApiException {
        Integer inventoryStorageActivityId = null;
        InventoryStorageActivity response = api.getInventoryStorageActivityById(inventoryStorageActivityId);

        // TODO: test validations
    }
    
    /**
     * Get the files for an inventoryStorageActivity.
     *
     * Get all existing inventoryStorageActivity files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInventoryStorageActivityFilesTest() throws ApiException {
        Integer inventoryStorageActivityId = null;
        api.getInventoryStorageActivityFiles(inventoryStorageActivityId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for an inventoryStorageActivity.
     *
     * Get all existing inventoryStorageActivity tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInventoryStorageActivityTagsTest() throws ApiException {
        Integer inventoryStorageActivityId = null;
        api.getInventoryStorageActivityTags(inventoryStorageActivityId);

        // TODO: test validations
    }
    
    /**
     * Update an inventoryStorageActivity
     *
     * Updates an existing inventoryStorageActivity using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInventoryStorageActivityTest() throws ApiException {
        InventoryStorageActivity body = null;
        api.updateInventoryStorageActivity(body);

        // TODO: test validations
    }
    
}
