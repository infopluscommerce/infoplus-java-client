/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;
import com.infopluscommerce.model.Vendor;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VendorApi
 */
@Ignore
public class VendorApiTest {

    private final VendorApi api = new VendorApi();

    
    /**
     * Create a vendor
     *
     * Inserts a new vendor using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addVendorTest() throws ApiException {
        Vendor body = null;
        Vendor response = api.addVendor(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for a vendor
     *
     * Adds an audit to an existing vendor.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addVendorAuditTest() throws ApiException {
        Integer vendorId = null;
        String vendorAudit = null;
        api.addVendorAudit(vendorId, vendorAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a vendor
     *
     * Adds a file to an existing vendor.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addVendorFileTest() throws ApiException {
        Integer vendorId = null;
        String fileName = null;
        api.addVendorFile(vendorId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a vendor by URL.
     *
     * Adds a file to an existing vendor by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addVendorFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer vendorId = null;
        api.addVendorFileByURL(body, vendorId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for a vendor.
     *
     * Adds a tag to an existing vendor.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addVendorTagTest() throws ApiException {
        Integer vendorId = null;
        String vendorTag = null;
        api.addVendorTag(vendorId, vendorTag);

        // TODO: test validations
    }
    
    /**
     * Delete a vendor
     *
     * Deletes the vendor identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteVendorTest() throws ApiException {
        Integer vendorId = null;
        api.deleteVendor(vendorId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for a vendor.
     *
     * Deletes an existing vendor file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteVendorFileTest() throws ApiException {
        Integer vendorId = null;
        Integer fileId = null;
        api.deleteVendorFile(vendorId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for a vendor.
     *
     * Deletes an existing vendor tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteVendorTagTest() throws ApiException {
        Integer vendorId = null;
        String vendorTag = null;
        api.deleteVendorTag(vendorId, vendorTag);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated a vendor by id
     *
     * Returns a duplicated vendor identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateVendorByIdTest() throws ApiException {
        Integer vendorId = null;
        Vendor response = api.getDuplicateVendorById(vendorId);

        // TODO: test validations
    }
    
    /**
     * Search vendors by filter
     *
     * Returns the list of vendors that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVendorByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<Vendor> response = api.getVendorByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get a vendor by id
     *
     * Returns the vendor identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVendorByIdTest() throws ApiException {
        Integer vendorId = null;
        Vendor response = api.getVendorById(vendorId);

        // TODO: test validations
    }
    
    /**
     * Get the files for a vendor.
     *
     * Get all existing vendor files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVendorFilesTest() throws ApiException {
        Integer vendorId = null;
        api.getVendorFiles(vendorId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for a vendor.
     *
     * Get all existing vendor tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVendorTagsTest() throws ApiException {
        Integer vendorId = null;
        api.getVendorTags(vendorId);

        // TODO: test validations
    }
    
    /**
     * Update a vendor
     *
     * Updates an existing vendor using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateVendorTest() throws ApiException {
        Vendor body = null;
        api.updateVendor(body);

        // TODO: test validations
    }
    
    /**
     * Update a vendor custom fields
     *
     * Updates an existing vendor custom fields using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateVendorCustomFieldsTest() throws ApiException {
        Vendor body = null;
        api.updateVendorCustomFields(body);

        // TODO: test validations
    }
    
}
