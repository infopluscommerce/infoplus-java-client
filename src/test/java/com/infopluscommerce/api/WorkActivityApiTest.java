/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;
import com.infopluscommerce.model.WorkActivity;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WorkActivityApi
 */
@Ignore
public class WorkActivityApiTest {

    private final WorkActivityApi api = new WorkActivityApi();

    
    /**
     * Create a workActivity
     *
     * Inserts a new workActivity using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addWorkActivityTest() throws ApiException {
        WorkActivity body = null;
        WorkActivity response = api.addWorkActivity(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for a workActivity
     *
     * Adds an audit to an existing workActivity.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addWorkActivityAuditTest() throws ApiException {
        Integer workActivityId = null;
        String workActivityAudit = null;
        api.addWorkActivityAudit(workActivityId, workActivityAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a workActivity
     *
     * Adds a file to an existing workActivity.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addWorkActivityFileTest() throws ApiException {
        Integer workActivityId = null;
        String fileName = null;
        api.addWorkActivityFile(workActivityId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a workActivity by URL.
     *
     * Adds a file to an existing workActivity by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addWorkActivityFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer workActivityId = null;
        api.addWorkActivityFileByURL(body, workActivityId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for a workActivity.
     *
     * Adds a tag to an existing workActivity.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addWorkActivityTagTest() throws ApiException {
        Integer workActivityId = null;
        String workActivityTag = null;
        api.addWorkActivityTag(workActivityId, workActivityTag);

        // TODO: test validations
    }
    
    /**
     * Delete a workActivity
     *
     * Deletes the workActivity identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWorkActivityTest() throws ApiException {
        Integer workActivityId = null;
        api.deleteWorkActivity(workActivityId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for a workActivity.
     *
     * Deletes an existing workActivity file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWorkActivityFileTest() throws ApiException {
        Integer workActivityId = null;
        Integer fileId = null;
        api.deleteWorkActivityFile(workActivityId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for a workActivity.
     *
     * Deletes an existing workActivity tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWorkActivityTagTest() throws ApiException {
        Integer workActivityId = null;
        String workActivityTag = null;
        api.deleteWorkActivityTag(workActivityId, workActivityTag);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated a workActivity by id
     *
     * Returns a duplicated workActivity identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateWorkActivityByIdTest() throws ApiException {
        Integer workActivityId = null;
        WorkActivity response = api.getDuplicateWorkActivityById(workActivityId);

        // TODO: test validations
    }
    
    /**
     * Search workActivitys by filter
     *
     * Returns the list of workActivitys that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWorkActivityByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<WorkActivity> response = api.getWorkActivityByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get a workActivity by id
     *
     * Returns the workActivity identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWorkActivityByIdTest() throws ApiException {
        Integer workActivityId = null;
        WorkActivity response = api.getWorkActivityById(workActivityId);

        // TODO: test validations
    }
    
    /**
     * Get the files for a workActivity.
     *
     * Get all existing workActivity files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWorkActivityFilesTest() throws ApiException {
        Integer workActivityId = null;
        api.getWorkActivityFiles(workActivityId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for a workActivity.
     *
     * Get all existing workActivity tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWorkActivityTagsTest() throws ApiException {
        Integer workActivityId = null;
        api.getWorkActivityTags(workActivityId);

        // TODO: test validations
    }
    
    /**
     * Update a workActivity
     *
     * Updates an existing workActivity using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWorkActivityTest() throws ApiException {
        WorkActivity body = null;
        api.updateWorkActivity(body);

        // TODO: test validations
    }
    
}
