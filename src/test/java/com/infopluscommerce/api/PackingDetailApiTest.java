/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.PackingDetail;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PackingDetailApi
 */
@Ignore
public class PackingDetailApiTest {

    private final PackingDetailApi api = new PackingDetailApi();

    
    /**
     * Add new audit for a packingDetail
     *
     * Adds an audit to an existing packingDetail.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPackingDetailAuditTest() throws ApiException {
        Integer packingDetailId = null;
        String packingDetailAudit = null;
        api.addPackingDetailAudit(packingDetailId, packingDetailAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a packingDetail
     *
     * Adds a file to an existing packingDetail.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPackingDetailFileTest() throws ApiException {
        Integer packingDetailId = null;
        String fileName = null;
        api.addPackingDetailFile(packingDetailId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a packingDetail by URL.
     *
     * Adds a file to an existing packingDetail by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPackingDetailFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer packingDetailId = null;
        api.addPackingDetailFileByURL(body, packingDetailId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for a packingDetail.
     *
     * Adds a tag to an existing packingDetail.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPackingDetailTagTest() throws ApiException {
        Integer packingDetailId = null;
        String packingDetailTag = null;
        api.addPackingDetailTag(packingDetailId, packingDetailTag);

        // TODO: test validations
    }
    
    /**
     * Delete a file for a packingDetail.
     *
     * Deletes an existing packingDetail file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePackingDetailFileTest() throws ApiException {
        Integer packingDetailId = null;
        Integer fileId = null;
        api.deletePackingDetailFile(packingDetailId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for a packingDetail.
     *
     * Deletes an existing packingDetail tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePackingDetailTagTest() throws ApiException {
        Integer packingDetailId = null;
        String packingDetailTag = null;
        api.deletePackingDetailTag(packingDetailId, packingDetailTag);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated a packingDetail by id
     *
     * Returns a duplicated packingDetail identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicatePackingDetailByIdTest() throws ApiException {
        Integer packingDetailId = null;
        PackingDetail response = api.getDuplicatePackingDetailById(packingDetailId);

        // TODO: test validations
    }
    
    /**
     * Search packingDetails by filter
     *
     * Returns the list of packingDetails that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPackingDetailByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<PackingDetail> response = api.getPackingDetailByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get a packingDetail by id
     *
     * Returns the packingDetail identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPackingDetailByIdTest() throws ApiException {
        Integer packingDetailId = null;
        PackingDetail response = api.getPackingDetailById(packingDetailId);

        // TODO: test validations
    }
    
    /**
     * Get the files for a packingDetail.
     *
     * Get all existing packingDetail files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPackingDetailFilesTest() throws ApiException {
        Integer packingDetailId = null;
        api.getPackingDetailFiles(packingDetailId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for a packingDetail.
     *
     * Get all existing packingDetail tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPackingDetailTagsTest() throws ApiException {
        Integer packingDetailId = null;
        api.getPackingDetailTags(packingDetailId);

        // TODO: test validations
    }
    
    /**
     * Update a packingDetail custom fields
     *
     * Updates an existing packingDetail custom fields using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePackingDetailCustomFieldsTest() throws ApiException {
        PackingDetail body = null;
        api.updatePackingDetailCustomFields(body);

        // TODO: test validations
    }
    
}
