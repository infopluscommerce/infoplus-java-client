/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.ItemSector;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ItemSectorApi
 */
@Ignore
public class ItemSectorApiTest {

    private final ItemSectorApi api = new ItemSectorApi();

    
    /**
     * Create an itemSector
     *
     * Inserts a new itemSector using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemSectorTest() throws ApiException {
        ItemSector body = null;
        ItemSector response = api.addItemSector(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for an itemSector
     *
     * Adds an audit to an existing itemSector.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemSectorAuditTest() throws ApiException {
        Integer itemSectorId = null;
        String itemSectorAudit = null;
        api.addItemSectorAudit(itemSectorId, itemSectorAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to an itemSector
     *
     * Adds a file to an existing itemSector.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemSectorFileTest() throws ApiException {
        Integer itemSectorId = null;
        String fileName = null;
        api.addItemSectorFile(itemSectorId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to an itemSector by URL.
     *
     * Adds a file to an existing itemSector by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemSectorFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer itemSectorId = null;
        api.addItemSectorFileByURL(body, itemSectorId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for an itemSector.
     *
     * Adds a tag to an existing itemSector.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemSectorTagTest() throws ApiException {
        Integer itemSectorId = null;
        String itemSectorTag = null;
        api.addItemSectorTag(itemSectorId, itemSectorTag);

        // TODO: test validations
    }
    
    /**
     * Delete an itemSector
     *
     * Deletes the itemSector identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemSectorTest() throws ApiException {
        Integer itemSectorId = null;
        api.deleteItemSector(itemSectorId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for an itemSector.
     *
     * Deletes an existing itemSector file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemSectorFileTest() throws ApiException {
        Integer itemSectorId = null;
        Integer fileId = null;
        api.deleteItemSectorFile(itemSectorId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for an itemSector.
     *
     * Deletes an existing itemSector tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemSectorTagTest() throws ApiException {
        Integer itemSectorId = null;
        String itemSectorTag = null;
        api.deleteItemSectorTag(itemSectorId, itemSectorTag);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated an itemSector by id
     *
     * Returns a duplicated itemSector identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateItemSectorByIdTest() throws ApiException {
        Integer itemSectorId = null;
        ItemSector response = api.getDuplicateItemSectorById(itemSectorId);

        // TODO: test validations
    }
    
    /**
     * Search itemSectors by filter
     *
     * Returns the list of itemSectors that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemSectorByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<ItemSector> response = api.getItemSectorByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get an itemSector by id
     *
     * Returns the itemSector identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemSectorByIdTest() throws ApiException {
        Integer itemSectorId = null;
        ItemSector response = api.getItemSectorById(itemSectorId);

        // TODO: test validations
    }
    
    /**
     * Get the files for an itemSector.
     *
     * Get all existing itemSector files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemSectorFilesTest() throws ApiException {
        Integer itemSectorId = null;
        api.getItemSectorFiles(itemSectorId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for an itemSector.
     *
     * Get all existing itemSector tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemSectorTagsTest() throws ApiException {
        Integer itemSectorId = null;
        api.getItemSectorTags(itemSectorId);

        // TODO: test validations
    }
    
    /**
     * Update an itemSector
     *
     * Updates an existing itemSector using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateItemSectorTest() throws ApiException {
        ItemSector body = null;
        api.updateItemSector(body);

        // TODO: test validations
    }
    
}
