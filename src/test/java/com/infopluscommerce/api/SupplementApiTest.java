/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;
import com.infopluscommerce.model.Supplement;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SupplementApi
 */
@Ignore
public class SupplementApiTest {

    private final SupplementApi api = new SupplementApi();

    
    /**
     * Create a supplement
     *
     * Inserts a new supplement using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addSupplementTest() throws ApiException {
        Supplement body = null;
        Supplement response = api.addSupplement(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for a supplement
     *
     * Adds an audit to an existing supplement.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addSupplementAuditTest() throws ApiException {
        Integer supplementId = null;
        String supplementAudit = null;
        api.addSupplementAudit(supplementId, supplementAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a supplement
     *
     * Adds a file to an existing supplement.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addSupplementFileTest() throws ApiException {
        Integer supplementId = null;
        String fileName = null;
        api.addSupplementFile(supplementId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a supplement by URL.
     *
     * Adds a file to an existing supplement by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addSupplementFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer supplementId = null;
        api.addSupplementFileByURL(body, supplementId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for a supplement.
     *
     * Adds a tag to an existing supplement.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addSupplementTagTest() throws ApiException {
        Integer supplementId = null;
        String supplementTag = null;
        api.addSupplementTag(supplementId, supplementTag);

        // TODO: test validations
    }
    
    /**
     * Delete a supplement
     *
     * Deletes the supplement identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSupplementTest() throws ApiException {
        Integer supplementId = null;
        api.deleteSupplement(supplementId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for a supplement.
     *
     * Deletes an existing supplement file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSupplementFileTest() throws ApiException {
        Integer supplementId = null;
        Integer fileId = null;
        api.deleteSupplementFile(supplementId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for a supplement.
     *
     * Deletes an existing supplement tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSupplementTagTest() throws ApiException {
        Integer supplementId = null;
        String supplementTag = null;
        api.deleteSupplementTag(supplementId, supplementTag);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated a supplement by id
     *
     * Returns a duplicated supplement identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateSupplementByIdTest() throws ApiException {
        Integer supplementId = null;
        Supplement response = api.getDuplicateSupplementById(supplementId);

        // TODO: test validations
    }
    
    /**
     * Search supplements by filter
     *
     * Returns the list of supplements that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSupplementByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<Supplement> response = api.getSupplementByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get a supplement by id
     *
     * Returns the supplement identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSupplementByIdTest() throws ApiException {
        Integer supplementId = null;
        Supplement response = api.getSupplementById(supplementId);

        // TODO: test validations
    }
    
    /**
     * Get the files for a supplement.
     *
     * Get all existing supplement files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSupplementFilesTest() throws ApiException {
        Integer supplementId = null;
        api.getSupplementFiles(supplementId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for a supplement.
     *
     * Get all existing supplement tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSupplementTagsTest() throws ApiException {
        Integer supplementId = null;
        api.getSupplementTags(supplementId);

        // TODO: test validations
    }
    
    /**
     * Update a supplement
     *
     * Updates an existing supplement using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSupplementTest() throws ApiException {
        Supplement body = null;
        api.updateSupplement(body);

        // TODO: test validations
    }
    
    /**
     * Update a supplement custom fields
     *
     * Updates an existing supplement custom fields using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSupplementCustomFieldsTest() throws ApiException {
        Supplement body = null;
        api.updateSupplementCustomFields(body);

        // TODO: test validations
    }
    
}
