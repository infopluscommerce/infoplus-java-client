/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.PickFaceAssignment;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PickFaceAssignmentApi
 */
@Ignore
public class PickFaceAssignmentApiTest {

    private final PickFaceAssignmentApi api = new PickFaceAssignmentApi();

    
    /**
     * Create a pickFaceAssignment
     *
     * Inserts a new pickFaceAssignment using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPickFaceAssignmentTest() throws ApiException {
        PickFaceAssignment body = null;
        PickFaceAssignment response = api.addPickFaceAssignment(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for a pickFaceAssignment
     *
     * Adds an audit to an existing pickFaceAssignment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPickFaceAssignmentAuditTest() throws ApiException {
        Integer pickFaceAssignmentId = null;
        String pickFaceAssignmentAudit = null;
        api.addPickFaceAssignmentAudit(pickFaceAssignmentId, pickFaceAssignmentAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a pickFaceAssignment
     *
     * Adds a file to an existing pickFaceAssignment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPickFaceAssignmentFileTest() throws ApiException {
        Integer pickFaceAssignmentId = null;
        String fileName = null;
        api.addPickFaceAssignmentFile(pickFaceAssignmentId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a pickFaceAssignment by URL.
     *
     * Adds a file to an existing pickFaceAssignment by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPickFaceAssignmentFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer pickFaceAssignmentId = null;
        api.addPickFaceAssignmentFileByURL(body, pickFaceAssignmentId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for a pickFaceAssignment.
     *
     * Adds a tag to an existing pickFaceAssignment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPickFaceAssignmentTagTest() throws ApiException {
        Integer pickFaceAssignmentId = null;
        String pickFaceAssignmentTag = null;
        api.addPickFaceAssignmentTag(pickFaceAssignmentId, pickFaceAssignmentTag);

        // TODO: test validations
    }
    
    /**
     * Delete a pickFaceAssignment
     *
     * Deletes the pickFaceAssignment identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePickFaceAssignmentTest() throws ApiException {
        Integer pickFaceAssignmentId = null;
        api.deletePickFaceAssignment(pickFaceAssignmentId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for a pickFaceAssignment.
     *
     * Deletes an existing pickFaceAssignment file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePickFaceAssignmentFileTest() throws ApiException {
        Integer pickFaceAssignmentId = null;
        Integer fileId = null;
        api.deletePickFaceAssignmentFile(pickFaceAssignmentId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for a pickFaceAssignment.
     *
     * Deletes an existing pickFaceAssignment tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePickFaceAssignmentTagTest() throws ApiException {
        Integer pickFaceAssignmentId = null;
        String pickFaceAssignmentTag = null;
        api.deletePickFaceAssignmentTag(pickFaceAssignmentId, pickFaceAssignmentTag);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated a pickFaceAssignment by id
     *
     * Returns a duplicated pickFaceAssignment identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicatePickFaceAssignmentByIdTest() throws ApiException {
        Integer pickFaceAssignmentId = null;
        PickFaceAssignment response = api.getDuplicatePickFaceAssignmentById(pickFaceAssignmentId);

        // TODO: test validations
    }
    
    /**
     * Search pickFaceAssignments by filter
     *
     * Returns the list of pickFaceAssignments that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPickFaceAssignmentByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<PickFaceAssignment> response = api.getPickFaceAssignmentByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get a pickFaceAssignment by id
     *
     * Returns the pickFaceAssignment identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPickFaceAssignmentByIdTest() throws ApiException {
        Integer pickFaceAssignmentId = null;
        PickFaceAssignment response = api.getPickFaceAssignmentById(pickFaceAssignmentId);

        // TODO: test validations
    }
    
    /**
     * Get the files for a pickFaceAssignment.
     *
     * Get all existing pickFaceAssignment files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPickFaceAssignmentFilesTest() throws ApiException {
        Integer pickFaceAssignmentId = null;
        api.getPickFaceAssignmentFiles(pickFaceAssignmentId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for a pickFaceAssignment.
     *
     * Get all existing pickFaceAssignment tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPickFaceAssignmentTagsTest() throws ApiException {
        Integer pickFaceAssignmentId = null;
        api.getPickFaceAssignmentTags(pickFaceAssignmentId);

        // TODO: test validations
    }
    
    /**
     * Update a pickFaceAssignment
     *
     * Updates an existing pickFaceAssignment using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePickFaceAssignmentTest() throws ApiException {
        PickFaceAssignment body = null;
        api.updatePickFaceAssignment(body);

        // TODO: test validations
    }
    
    /**
     * Update a pickFaceAssignment custom fields
     *
     * Updates an existing pickFaceAssignment custom fields using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePickFaceAssignmentCustomFieldsTest() throws ApiException {
        PickFaceAssignment body = null;
        api.updatePickFaceAssignmentCustomFields(body);

        // TODO: test validations
    }
    
}
