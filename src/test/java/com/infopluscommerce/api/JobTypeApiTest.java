/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.JobType;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JobTypeApi
 */
@Ignore
public class JobTypeApiTest {

    private final JobTypeApi api = new JobTypeApi();

    
    /**
     * Create a jobType
     *
     * Inserts a new jobType using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addJobTypeTest() throws ApiException {
        JobType body = null;
        JobType response = api.addJobType(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for a jobType
     *
     * Adds an audit to an existing jobType.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addJobTypeAuditTest() throws ApiException {
        Integer jobTypeId = null;
        String jobTypeAudit = null;
        api.addJobTypeAudit(jobTypeId, jobTypeAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a jobType
     *
     * Adds a file to an existing jobType.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addJobTypeFileTest() throws ApiException {
        Integer jobTypeId = null;
        String fileName = null;
        api.addJobTypeFile(jobTypeId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a jobType by URL.
     *
     * Adds a file to an existing jobType by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addJobTypeFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer jobTypeId = null;
        api.addJobTypeFileByURL(body, jobTypeId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for a jobType.
     *
     * Adds a tag to an existing jobType.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addJobTypeTagTest() throws ApiException {
        Integer jobTypeId = null;
        String jobTypeTag = null;
        api.addJobTypeTag(jobTypeId, jobTypeTag);

        // TODO: test validations
    }
    
    /**
     * Delete a jobType
     *
     * Deletes the jobType identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteJobTypeTest() throws ApiException {
        Integer jobTypeId = null;
        api.deleteJobType(jobTypeId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for a jobType.
     *
     * Deletes an existing jobType file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteJobTypeFileTest() throws ApiException {
        Integer jobTypeId = null;
        Integer fileId = null;
        api.deleteJobTypeFile(jobTypeId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for a jobType.
     *
     * Deletes an existing jobType tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteJobTypeTagTest() throws ApiException {
        Integer jobTypeId = null;
        String jobTypeTag = null;
        api.deleteJobTypeTag(jobTypeId, jobTypeTag);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated a jobType by id
     *
     * Returns a duplicated jobType identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateJobTypeByIdTest() throws ApiException {
        Integer jobTypeId = null;
        JobType response = api.getDuplicateJobTypeById(jobTypeId);

        // TODO: test validations
    }
    
    /**
     * Search jobTypes by filter
     *
     * Returns the list of jobTypes that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobTypeByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<JobType> response = api.getJobTypeByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get a jobType by id
     *
     * Returns the jobType identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobTypeByIdTest() throws ApiException {
        Integer jobTypeId = null;
        JobType response = api.getJobTypeById(jobTypeId);

        // TODO: test validations
    }
    
    /**
     * Get the files for a jobType.
     *
     * Get all existing jobType files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobTypeFilesTest() throws ApiException {
        Integer jobTypeId = null;
        api.getJobTypeFiles(jobTypeId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for a jobType.
     *
     * Get all existing jobType tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobTypeTagsTest() throws ApiException {
        Integer jobTypeId = null;
        api.getJobTypeTags(jobTypeId);

        // TODO: test validations
    }
    
    /**
     * Update a jobType
     *
     * Updates an existing jobType using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateJobTypeTest() throws ApiException {
        JobType body = null;
        api.updateJobType(body);

        // TODO: test validations
    }
    
    /**
     * Update a jobType custom fields
     *
     * Updates an existing jobType custom fields using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateJobTypeCustomFieldsTest() throws ApiException {
        JobType body = null;
        api.updateJobTypeCustomFields(body);

        // TODO: test validations
    }
    
}
