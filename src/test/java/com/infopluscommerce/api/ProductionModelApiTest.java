/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.ProductionModel;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductionModelApi
 */
@Ignore
public class ProductionModelApiTest {

    private final ProductionModelApi api = new ProductionModelApi();

    
    /**
     * Create a productionModel
     *
     * Inserts a new productionModel using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addProductionModelTest() throws ApiException {
        ProductionModel body = null;
        ProductionModel response = api.addProductionModel(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for a productionModel
     *
     * Adds an audit to an existing productionModel.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addProductionModelAuditTest() throws ApiException {
        Integer productionModelId = null;
        String productionModelAudit = null;
        api.addProductionModelAudit(productionModelId, productionModelAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a productionModel
     *
     * Adds a file to an existing productionModel.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addProductionModelFileTest() throws ApiException {
        Integer productionModelId = null;
        String fileName = null;
        api.addProductionModelFile(productionModelId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a productionModel by URL.
     *
     * Adds a file to an existing productionModel by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addProductionModelFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer productionModelId = null;
        api.addProductionModelFileByURL(body, productionModelId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for a productionModel.
     *
     * Adds a tag to an existing productionModel.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addProductionModelTagTest() throws ApiException {
        Integer productionModelId = null;
        String productionModelTag = null;
        api.addProductionModelTag(productionModelId, productionModelTag);

        // TODO: test validations
    }
    
    /**
     * Delete a productionModel
     *
     * Deletes the productionModel identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProductionModelTest() throws ApiException {
        Integer productionModelId = null;
        api.deleteProductionModel(productionModelId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for a productionModel.
     *
     * Deletes an existing productionModel file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProductionModelFileTest() throws ApiException {
        Integer productionModelId = null;
        Integer fileId = null;
        api.deleteProductionModelFile(productionModelId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for a productionModel.
     *
     * Deletes an existing productionModel tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProductionModelTagTest() throws ApiException {
        Integer productionModelId = null;
        String productionModelTag = null;
        api.deleteProductionModelTag(productionModelId, productionModelTag);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated a productionModel by id
     *
     * Returns a duplicated productionModel identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateProductionModelByIdTest() throws ApiException {
        Integer productionModelId = null;
        ProductionModel response = api.getDuplicateProductionModelById(productionModelId);

        // TODO: test validations
    }
    
    /**
     * Search productionModels by filter
     *
     * Returns the list of productionModels that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductionModelByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<ProductionModel> response = api.getProductionModelByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get a productionModel by id
     *
     * Returns the productionModel identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductionModelByIdTest() throws ApiException {
        Integer productionModelId = null;
        ProductionModel response = api.getProductionModelById(productionModelId);

        // TODO: test validations
    }
    
    /**
     * Get the files for a productionModel.
     *
     * Get all existing productionModel files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductionModelFilesTest() throws ApiException {
        Integer productionModelId = null;
        api.getProductionModelFiles(productionModelId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for a productionModel.
     *
     * Get all existing productionModel tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductionModelTagsTest() throws ApiException {
        Integer productionModelId = null;
        api.getProductionModelTags(productionModelId);

        // TODO: test validations
    }
    
    /**
     * Update a productionModel
     *
     * Updates an existing productionModel using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProductionModelTest() throws ApiException {
        ProductionModel body = null;
        api.updateProductionModel(body);

        // TODO: test validations
    }
    
    /**
     * Update a productionModel custom fields
     *
     * Updates an existing productionModel custom fields using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProductionModelCustomFieldsTest() throws ApiException {
        ProductionModel body = null;
        api.updateProductionModelCustomFields(body);

        // TODO: test validations
    }
    
}
