/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.InventorySnapshot;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InventorySnapshotApi
 */
@Ignore
public class InventorySnapshotApiTest {

    private final InventorySnapshotApi api = new InventorySnapshotApi();

    
    /**
     * Add new audit for an inventorySnapshot
     *
     * Adds an audit to an existing inventorySnapshot.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInventorySnapshotAuditTest() throws ApiException {
        Integer inventorySnapshotId = null;
        String inventorySnapshotAudit = null;
        api.addInventorySnapshotAudit(inventorySnapshotId, inventorySnapshotAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to an inventorySnapshot
     *
     * Adds a file to an existing inventorySnapshot.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInventorySnapshotFileTest() throws ApiException {
        Integer inventorySnapshotId = null;
        String fileName = null;
        api.addInventorySnapshotFile(inventorySnapshotId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to an inventorySnapshot by URL.
     *
     * Adds a file to an existing inventorySnapshot by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInventorySnapshotFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer inventorySnapshotId = null;
        api.addInventorySnapshotFileByURL(body, inventorySnapshotId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for an inventorySnapshot.
     *
     * Adds a tag to an existing inventorySnapshot.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInventorySnapshotTagTest() throws ApiException {
        Integer inventorySnapshotId = null;
        String inventorySnapshotTag = null;
        api.addInventorySnapshotTag(inventorySnapshotId, inventorySnapshotTag);

        // TODO: test validations
    }
    
    /**
     * Delete a file for an inventorySnapshot.
     *
     * Deletes an existing inventorySnapshot file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInventorySnapshotFileTest() throws ApiException {
        Integer inventorySnapshotId = null;
        Integer fileId = null;
        api.deleteInventorySnapshotFile(inventorySnapshotId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for an inventorySnapshot.
     *
     * Deletes an existing inventorySnapshot tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInventorySnapshotTagTest() throws ApiException {
        Integer inventorySnapshotId = null;
        String inventorySnapshotTag = null;
        api.deleteInventorySnapshotTag(inventorySnapshotId, inventorySnapshotTag);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated an inventorySnapshot by id
     *
     * Returns a duplicated inventorySnapshot identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateInventorySnapshotByIdTest() throws ApiException {
        Integer inventorySnapshotId = null;
        InventorySnapshot response = api.getDuplicateInventorySnapshotById(inventorySnapshotId);

        // TODO: test validations
    }
    
    /**
     * Search inventorySnapshots by filter
     *
     * Returns the list of inventorySnapshots that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInventorySnapshotByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<InventorySnapshot> response = api.getInventorySnapshotByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get an inventorySnapshot by id
     *
     * Returns the inventorySnapshot identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInventorySnapshotByIdTest() throws ApiException {
        Integer inventorySnapshotId = null;
        InventorySnapshot response = api.getInventorySnapshotById(inventorySnapshotId);

        // TODO: test validations
    }
    
    /**
     * Get the files for an inventorySnapshot.
     *
     * Get all existing inventorySnapshot files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInventorySnapshotFilesTest() throws ApiException {
        Integer inventorySnapshotId = null;
        api.getInventorySnapshotFiles(inventorySnapshotId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for an inventorySnapshot.
     *
     * Get all existing inventorySnapshot tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInventorySnapshotTagsTest() throws ApiException {
        Integer inventorySnapshotId = null;
        api.getInventorySnapshotTags(inventorySnapshotId);

        // TODO: test validations
    }
    
}
