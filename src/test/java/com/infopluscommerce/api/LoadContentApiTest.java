/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.LoadContent;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LoadContentApi
 */
@Ignore
public class LoadContentApiTest {

    private final LoadContentApi api = new LoadContentApi();

    
    /**
     * Add new audit for a loadContent
     *
     * Adds an audit to an existing loadContent.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addLoadContentAuditTest() throws ApiException {
        Integer loadContentId = null;
        String loadContentAudit = null;
        api.addLoadContentAudit(loadContentId, loadContentAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a loadContent
     *
     * Adds a file to an existing loadContent.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addLoadContentFileTest() throws ApiException {
        Integer loadContentId = null;
        String fileName = null;
        api.addLoadContentFile(loadContentId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a loadContent by URL.
     *
     * Adds a file to an existing loadContent by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addLoadContentFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer loadContentId = null;
        api.addLoadContentFileByURL(body, loadContentId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for a loadContent.
     *
     * Adds a tag to an existing loadContent.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addLoadContentTagTest() throws ApiException {
        Integer loadContentId = null;
        String loadContentTag = null;
        api.addLoadContentTag(loadContentId, loadContentTag);

        // TODO: test validations
    }
    
    /**
     * Delete a file for a loadContent.
     *
     * Deletes an existing loadContent file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLoadContentFileTest() throws ApiException {
        Integer loadContentId = null;
        Integer fileId = null;
        api.deleteLoadContentFile(loadContentId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for a loadContent.
     *
     * Deletes an existing loadContent tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLoadContentTagTest() throws ApiException {
        Integer loadContentId = null;
        String loadContentTag = null;
        api.deleteLoadContentTag(loadContentId, loadContentTag);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated a loadContent by id
     *
     * Returns a duplicated loadContent identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateLoadContentByIdTest() throws ApiException {
        Integer loadContentId = null;
        LoadContent response = api.getDuplicateLoadContentById(loadContentId);

        // TODO: test validations
    }
    
    /**
     * Search loadContents by filter
     *
     * Returns the list of loadContents that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoadContentByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<LoadContent> response = api.getLoadContentByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get a loadContent by id
     *
     * Returns the loadContent identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoadContentByIdTest() throws ApiException {
        Integer loadContentId = null;
        LoadContent response = api.getLoadContentById(loadContentId);

        // TODO: test validations
    }
    
    /**
     * Get the files for a loadContent.
     *
     * Get all existing loadContent files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoadContentFilesTest() throws ApiException {
        Integer loadContentId = null;
        api.getLoadContentFiles(loadContentId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for a loadContent.
     *
     * Get all existing loadContent tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoadContentTagsTest() throws ApiException {
        Integer loadContentId = null;
        api.getLoadContentTags(loadContentId);

        // TODO: test validations
    }
    
    /**
     * Update a loadContent custom fields
     *
     * Updates an existing loadContent custom fields using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLoadContentCustomFieldsTest() throws ApiException {
        LoadContent body = null;
        api.updateLoadContentCustomFields(body);

        // TODO: test validations
    }
    
}
