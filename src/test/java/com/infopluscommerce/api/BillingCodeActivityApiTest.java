/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.BillingCodeActivity;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BillingCodeActivityApi
 */
@Ignore
public class BillingCodeActivityApiTest {

    private final BillingCodeActivityApi api = new BillingCodeActivityApi();

    
    /**
     * Create a billingCodeActivity
     *
     * Inserts a new billingCodeActivity using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBillingCodeActivityTest() throws ApiException {
        BillingCodeActivity body = null;
        BillingCodeActivity response = api.addBillingCodeActivity(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for a billingCodeActivity
     *
     * Adds an audit to an existing billingCodeActivity.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBillingCodeActivityAuditTest() throws ApiException {
        Integer billingCodeActivityId = null;
        String billingCodeActivityAudit = null;
        api.addBillingCodeActivityAudit(billingCodeActivityId, billingCodeActivityAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a billingCodeActivity
     *
     * Adds a file to an existing billingCodeActivity.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBillingCodeActivityFileTest() throws ApiException {
        Integer billingCodeActivityId = null;
        String fileName = null;
        api.addBillingCodeActivityFile(billingCodeActivityId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a billingCodeActivity by URL.
     *
     * Adds a file to an existing billingCodeActivity by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBillingCodeActivityFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer billingCodeActivityId = null;
        api.addBillingCodeActivityFileByURL(body, billingCodeActivityId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for a billingCodeActivity.
     *
     * Adds a tag to an existing billingCodeActivity.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBillingCodeActivityTagTest() throws ApiException {
        Integer billingCodeActivityId = null;
        String billingCodeActivityTag = null;
        api.addBillingCodeActivityTag(billingCodeActivityId, billingCodeActivityTag);

        // TODO: test validations
    }
    
    /**
     * Delete a billingCodeActivity
     *
     * Deletes the billingCodeActivity identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBillingCodeActivityTest() throws ApiException {
        Integer billingCodeActivityId = null;
        api.deleteBillingCodeActivity(billingCodeActivityId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for a billingCodeActivity.
     *
     * Deletes an existing billingCodeActivity file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBillingCodeActivityFileTest() throws ApiException {
        Integer billingCodeActivityId = null;
        Integer fileId = null;
        api.deleteBillingCodeActivityFile(billingCodeActivityId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for a billingCodeActivity.
     *
     * Deletes an existing billingCodeActivity tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBillingCodeActivityTagTest() throws ApiException {
        Integer billingCodeActivityId = null;
        String billingCodeActivityTag = null;
        api.deleteBillingCodeActivityTag(billingCodeActivityId, billingCodeActivityTag);

        // TODO: test validations
    }
    
    /**
     * Search billingCodeActivitys by filter
     *
     * Returns the list of billingCodeActivitys that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBillingCodeActivityByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<BillingCodeActivity> response = api.getBillingCodeActivityByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get a billingCodeActivity by id
     *
     * Returns the billingCodeActivity identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBillingCodeActivityByIdTest() throws ApiException {
        Integer billingCodeActivityId = null;
        BillingCodeActivity response = api.getBillingCodeActivityById(billingCodeActivityId);

        // TODO: test validations
    }
    
    /**
     * Get the files for a billingCodeActivity.
     *
     * Get all existing billingCodeActivity files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBillingCodeActivityFilesTest() throws ApiException {
        Integer billingCodeActivityId = null;
        api.getBillingCodeActivityFiles(billingCodeActivityId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for a billingCodeActivity.
     *
     * Get all existing billingCodeActivity tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBillingCodeActivityTagsTest() throws ApiException {
        Integer billingCodeActivityId = null;
        api.getBillingCodeActivityTags(billingCodeActivityId);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated a billingCodeActivity by id
     *
     * Returns a duplicated billingCodeActivity identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateBillingCodeActivityByIdTest() throws ApiException {
        Integer billingCodeActivityId = null;
        BillingCodeActivity response = api.getDuplicateBillingCodeActivityById(billingCodeActivityId);

        // TODO: test validations
    }
    
    /**
     * Update a billingCodeActivity
     *
     * Updates an existing billingCodeActivity using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBillingCodeActivityTest() throws ApiException {
        BillingCodeActivity body = null;
        api.updateBillingCodeActivity(body);

        // TODO: test validations
    }
    
}
