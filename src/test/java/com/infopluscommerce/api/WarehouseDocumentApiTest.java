/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.RecordFile;
import com.infopluscommerce.model.WarehouseDocument;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WarehouseDocumentApi
 */
@Ignore
public class WarehouseDocumentApiTest {

    private final WarehouseDocumentApi api = new WarehouseDocumentApi();

    
    /**
     * Add new audit for a warehouseDocument
     *
     * Adds an audit to an existing warehouseDocument.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addWarehouseDocumentAuditTest() throws ApiException {
        Integer warehouseDocumentId = null;
        String warehouseDocumentAudit = null;
        api.addWarehouseDocumentAudit(warehouseDocumentId, warehouseDocumentAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a warehouseDocument
     *
     * Adds a file to an existing warehouseDocument.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addWarehouseDocumentFileTest() throws ApiException {
        Integer warehouseDocumentId = null;
        String fileName = null;
        api.addWarehouseDocumentFile(warehouseDocumentId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a warehouseDocument by URL.
     *
     * Adds a file to an existing warehouseDocument by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addWarehouseDocumentFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer warehouseDocumentId = null;
        api.addWarehouseDocumentFileByURL(body, warehouseDocumentId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for a warehouseDocument.
     *
     * Adds a tag to an existing warehouseDocument.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addWarehouseDocumentTagTest() throws ApiException {
        Integer warehouseDocumentId = null;
        String warehouseDocumentTag = null;
        api.addWarehouseDocumentTag(warehouseDocumentId, warehouseDocumentTag);

        // TODO: test validations
    }
    
    /**
     * Delete a file for a warehouseDocument.
     *
     * Deletes an existing warehouseDocument file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWarehouseDocumentFileTest() throws ApiException {
        Integer warehouseDocumentId = null;
        Integer fileId = null;
        api.deleteWarehouseDocumentFile(warehouseDocumentId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for a warehouseDocument.
     *
     * Deletes an existing warehouseDocument tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWarehouseDocumentTagTest() throws ApiException {
        Integer warehouseDocumentId = null;
        String warehouseDocumentTag = null;
        api.deleteWarehouseDocumentTag(warehouseDocumentId, warehouseDocumentTag);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated a warehouseDocument by id
     *
     * Returns a duplicated warehouseDocument identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateWarehouseDocumentByIdTest() throws ApiException {
        Integer warehouseDocumentId = null;
        WarehouseDocument response = api.getDuplicateWarehouseDocumentById(warehouseDocumentId);

        // TODO: test validations
    }
    
    /**
     * Search warehouseDocuments by filter
     *
     * Returns the list of warehouseDocuments that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWarehouseDocumentByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<WarehouseDocument> response = api.getWarehouseDocumentByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get a warehouseDocument by id
     *
     * Returns the warehouseDocument identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWarehouseDocumentByIdTest() throws ApiException {
        Integer warehouseDocumentId = null;
        WarehouseDocument response = api.getWarehouseDocumentById(warehouseDocumentId);

        // TODO: test validations
    }
    
    /**
     * Get the files for a warehouseDocument.
     *
     * Get all existing warehouseDocument files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWarehouseDocumentFilesTest() throws ApiException {
        Integer warehouseDocumentId = null;
        api.getWarehouseDocumentFiles(warehouseDocumentId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for a warehouseDocument.
     *
     * Get all existing warehouseDocument tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWarehouseDocumentTagsTest() throws ApiException {
        Integer warehouseDocumentId = null;
        api.getWarehouseDocumentTags(warehouseDocumentId);

        // TODO: test validations
    }
    
    /**
     * Update a warehouseDocument custom fields
     *
     * Updates an existing warehouseDocument custom fields using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWarehouseDocumentCustomFieldsTest() throws ApiException {
        WarehouseDocument body = null;
        api.updateWarehouseDocumentCustomFields(body);

        // TODO: test validations
    }
    
}
