/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.JobRecipe;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JobRecipeApi
 */
@Ignore
public class JobRecipeApiTest {

    private final JobRecipeApi api = new JobRecipeApi();

    
    /**
     * Create a jobRecipe
     *
     * Inserts a new jobRecipe using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addJobRecipeTest() throws ApiException {
        JobRecipe body = null;
        JobRecipe response = api.addJobRecipe(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for a jobRecipe
     *
     * Adds an audit to an existing jobRecipe.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addJobRecipeAuditTest() throws ApiException {
        Integer jobRecipeId = null;
        String jobRecipeAudit = null;
        api.addJobRecipeAudit(jobRecipeId, jobRecipeAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a jobRecipe
     *
     * Adds a file to an existing jobRecipe.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addJobRecipeFileTest() throws ApiException {
        Integer jobRecipeId = null;
        String fileName = null;
        api.addJobRecipeFile(jobRecipeId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a jobRecipe by URL.
     *
     * Adds a file to an existing jobRecipe by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addJobRecipeFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer jobRecipeId = null;
        api.addJobRecipeFileByURL(body, jobRecipeId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for a jobRecipe.
     *
     * Adds a tag to an existing jobRecipe.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addJobRecipeTagTest() throws ApiException {
        Integer jobRecipeId = null;
        String jobRecipeTag = null;
        api.addJobRecipeTag(jobRecipeId, jobRecipeTag);

        // TODO: test validations
    }
    
    /**
     * Delete a jobRecipe
     *
     * Deletes the jobRecipe identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteJobRecipeTest() throws ApiException {
        Integer jobRecipeId = null;
        api.deleteJobRecipe(jobRecipeId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for a jobRecipe.
     *
     * Deletes an existing jobRecipe file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteJobRecipeFileTest() throws ApiException {
        Integer jobRecipeId = null;
        Integer fileId = null;
        api.deleteJobRecipeFile(jobRecipeId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for a jobRecipe.
     *
     * Deletes an existing jobRecipe tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteJobRecipeTagTest() throws ApiException {
        Integer jobRecipeId = null;
        String jobRecipeTag = null;
        api.deleteJobRecipeTag(jobRecipeId, jobRecipeTag);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated a jobRecipe by id
     *
     * Returns a duplicated jobRecipe identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateJobRecipeByIdTest() throws ApiException {
        Integer jobRecipeId = null;
        JobRecipe response = api.getDuplicateJobRecipeById(jobRecipeId);

        // TODO: test validations
    }
    
    /**
     * Search jobRecipes by filter
     *
     * Returns the list of jobRecipes that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobRecipeByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<JobRecipe> response = api.getJobRecipeByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get a jobRecipe by id
     *
     * Returns the jobRecipe identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobRecipeByIdTest() throws ApiException {
        Integer jobRecipeId = null;
        JobRecipe response = api.getJobRecipeById(jobRecipeId);

        // TODO: test validations
    }
    
    /**
     * Get the files for a jobRecipe.
     *
     * Get all existing jobRecipe files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobRecipeFilesTest() throws ApiException {
        Integer jobRecipeId = null;
        api.getJobRecipeFiles(jobRecipeId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for a jobRecipe.
     *
     * Get all existing jobRecipe tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobRecipeTagsTest() throws ApiException {
        Integer jobRecipeId = null;
        api.getJobRecipeTags(jobRecipeId);

        // TODO: test validations
    }
    
    /**
     * Update a jobRecipe
     *
     * Updates an existing jobRecipe using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateJobRecipeTest() throws ApiException {
        JobRecipe body = null;
        api.updateJobRecipe(body);

        // TODO: test validations
    }
    
    /**
     * Update a jobRecipe custom fields
     *
     * Updates an existing jobRecipe custom fields using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateJobRecipeCustomFieldsTest() throws ApiException {
        JobRecipe body = null;
        api.updateJobRecipeCustomFields(body);

        // TODO: test validations
    }
    
}
