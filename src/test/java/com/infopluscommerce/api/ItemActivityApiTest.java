/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.ItemActivity;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ItemActivityApi
 */
@Ignore
public class ItemActivityApiTest {

    private final ItemActivityApi api = new ItemActivityApi();

    
    /**
     * Add new audit for an itemActivity
     *
     * Adds an audit to an existing itemActivity.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemActivityAuditTest() throws ApiException {
        Integer itemActivityId = null;
        String itemActivityAudit = null;
        api.addItemActivityAudit(itemActivityId, itemActivityAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to an itemActivity
     *
     * Adds a file to an existing itemActivity.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemActivityFileTest() throws ApiException {
        Integer itemActivityId = null;
        String fileName = null;
        api.addItemActivityFile(itemActivityId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to an itemActivity by URL.
     *
     * Adds a file to an existing itemActivity by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemActivityFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer itemActivityId = null;
        api.addItemActivityFileByURL(body, itemActivityId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for an itemActivity.
     *
     * Adds a tag to an existing itemActivity.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemActivityTagTest() throws ApiException {
        Integer itemActivityId = null;
        String itemActivityTag = null;
        api.addItemActivityTag(itemActivityId, itemActivityTag);

        // TODO: test validations
    }
    
    /**
     * Delete a file for an itemActivity.
     *
     * Deletes an existing itemActivity file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemActivityFileTest() throws ApiException {
        Integer itemActivityId = null;
        Integer fileId = null;
        api.deleteItemActivityFile(itemActivityId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for an itemActivity.
     *
     * Deletes an existing itemActivity tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemActivityTagTest() throws ApiException {
        Integer itemActivityId = null;
        String itemActivityTag = null;
        api.deleteItemActivityTag(itemActivityId, itemActivityTag);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated an itemActivity by id
     *
     * Returns a duplicated itemActivity identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateItemActivityByIdTest() throws ApiException {
        Integer itemActivityId = null;
        ItemActivity response = api.getDuplicateItemActivityById(itemActivityId);

        // TODO: test validations
    }
    
    /**
     * Search itemActivitys by filter
     *
     * Returns the list of itemActivitys that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemActivityByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<ItemActivity> response = api.getItemActivityByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get an itemActivity by id
     *
     * Returns the itemActivity identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemActivityByIdTest() throws ApiException {
        Integer itemActivityId = null;
        ItemActivity response = api.getItemActivityById(itemActivityId);

        // TODO: test validations
    }
    
    /**
     * Get the files for an itemActivity.
     *
     * Get all existing itemActivity files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemActivityFilesTest() throws ApiException {
        Integer itemActivityId = null;
        api.getItemActivityFiles(itemActivityId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for an itemActivity.
     *
     * Get all existing itemActivity tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemActivityTagsTest() throws ApiException {
        Integer itemActivityId = null;
        api.getItemActivityTags(itemActivityId);

        // TODO: test validations
    }
    
}
