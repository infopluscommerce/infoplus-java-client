/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.PackingPlan;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PackingPlanApi
 */
@Ignore
public class PackingPlanApiTest {

    private final PackingPlanApi api = new PackingPlanApi();

    
    /**
     * Create a packingPlan
     *
     * Inserts a new packingPlan using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPackingPlanTest() throws ApiException {
        PackingPlan body = null;
        PackingPlan response = api.addPackingPlan(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for a packingPlan
     *
     * Adds an audit to an existing packingPlan.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPackingPlanAuditTest() throws ApiException {
        Integer packingPlanId = null;
        String packingPlanAudit = null;
        api.addPackingPlanAudit(packingPlanId, packingPlanAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a packingPlan
     *
     * Adds a file to an existing packingPlan.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPackingPlanFileTest() throws ApiException {
        Integer packingPlanId = null;
        String fileName = null;
        api.addPackingPlanFile(packingPlanId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a packingPlan by URL.
     *
     * Adds a file to an existing packingPlan by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPackingPlanFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer packingPlanId = null;
        api.addPackingPlanFileByURL(body, packingPlanId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for a packingPlan.
     *
     * Adds a tag to an existing packingPlan.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPackingPlanTagTest() throws ApiException {
        Integer packingPlanId = null;
        String packingPlanTag = null;
        api.addPackingPlanTag(packingPlanId, packingPlanTag);

        // TODO: test validations
    }
    
    /**
     * Delete a packingPlan
     *
     * Deletes the packingPlan identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePackingPlanTest() throws ApiException {
        Integer packingPlanId = null;
        api.deletePackingPlan(packingPlanId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for a packingPlan.
     *
     * Deletes an existing packingPlan file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePackingPlanFileTest() throws ApiException {
        Integer packingPlanId = null;
        Integer fileId = null;
        api.deletePackingPlanFile(packingPlanId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for a packingPlan.
     *
     * Deletes an existing packingPlan tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePackingPlanTagTest() throws ApiException {
        Integer packingPlanId = null;
        String packingPlanTag = null;
        api.deletePackingPlanTag(packingPlanId, packingPlanTag);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated a packingPlan by id
     *
     * Returns a duplicated packingPlan identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicatePackingPlanByIdTest() throws ApiException {
        Integer packingPlanId = null;
        PackingPlan response = api.getDuplicatePackingPlanById(packingPlanId);

        // TODO: test validations
    }
    
    /**
     * Search packingPlans by filter
     *
     * Returns the list of packingPlans that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPackingPlanByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<PackingPlan> response = api.getPackingPlanByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get a packingPlan by id
     *
     * Returns the packingPlan identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPackingPlanByIdTest() throws ApiException {
        Integer packingPlanId = null;
        PackingPlan response = api.getPackingPlanById(packingPlanId);

        // TODO: test validations
    }
    
    /**
     * Get the files for a packingPlan.
     *
     * Get all existing packingPlan files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPackingPlanFilesTest() throws ApiException {
        Integer packingPlanId = null;
        api.getPackingPlanFiles(packingPlanId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for a packingPlan.
     *
     * Get all existing packingPlan tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPackingPlanTagsTest() throws ApiException {
        Integer packingPlanId = null;
        api.getPackingPlanTags(packingPlanId);

        // TODO: test validations
    }
    
    /**
     * Update a packingPlan
     *
     * Updates an existing packingPlan using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePackingPlanTest() throws ApiException {
        PackingPlan body = null;
        api.updatePackingPlan(body);

        // TODO: test validations
    }
    
    /**
     * Update a packingPlan custom fields
     *
     * Updates an existing packingPlan custom fields using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePackingPlanCustomFieldsTest() throws ApiException {
        PackingPlan body = null;
        api.updatePackingPlanCustomFields(body);

        // TODO: test validations
    }
    
}
