/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.Building;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BuildingApi
 */
@Ignore
public class BuildingApiTest {

    private final BuildingApi api = new BuildingApi();

    
    /**
     * Create a building
     *
     * Inserts a new building using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBuildingTest() throws ApiException {
        Building body = null;
        Building response = api.addBuilding(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for a building
     *
     * Adds an audit to an existing building.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBuildingAuditTest() throws ApiException {
        Integer buildingId = null;
        String buildingAudit = null;
        api.addBuildingAudit(buildingId, buildingAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a building
     *
     * Adds a file to an existing building.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBuildingFileTest() throws ApiException {
        Integer buildingId = null;
        String fileName = null;
        api.addBuildingFile(buildingId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a building by URL.
     *
     * Adds a file to an existing building by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBuildingFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer buildingId = null;
        api.addBuildingFileByURL(body, buildingId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for a building.
     *
     * Adds a tag to an existing building.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBuildingTagTest() throws ApiException {
        Integer buildingId = null;
        String buildingTag = null;
        api.addBuildingTag(buildingId, buildingTag);

        // TODO: test validations
    }
    
    /**
     * Delete a building
     *
     * Deletes the building identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBuildingTest() throws ApiException {
        Integer buildingId = null;
        api.deleteBuilding(buildingId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for a building.
     *
     * Deletes an existing building file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBuildingFileTest() throws ApiException {
        Integer buildingId = null;
        Integer fileId = null;
        api.deleteBuildingFile(buildingId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for a building.
     *
     * Deletes an existing building tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBuildingTagTest() throws ApiException {
        Integer buildingId = null;
        String buildingTag = null;
        api.deleteBuildingTag(buildingId, buildingTag);

        // TODO: test validations
    }
    
    /**
     * Search buildings by filter
     *
     * Returns the list of buildings that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBuildingByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<Building> response = api.getBuildingByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get a building by id
     *
     * Returns the building identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBuildingByIdTest() throws ApiException {
        Integer buildingId = null;
        Building response = api.getBuildingById(buildingId);

        // TODO: test validations
    }
    
    /**
     * Get the files for a building.
     *
     * Get all existing building files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBuildingFilesTest() throws ApiException {
        Integer buildingId = null;
        api.getBuildingFiles(buildingId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for a building.
     *
     * Get all existing building tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBuildingTagsTest() throws ApiException {
        Integer buildingId = null;
        api.getBuildingTags(buildingId);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated a building by id
     *
     * Returns a duplicated building identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateBuildingByIdTest() throws ApiException {
        Integer buildingId = null;
        Building response = api.getDuplicateBuildingById(buildingId);

        // TODO: test validations
    }
    
    /**
     * Update a building
     *
     * Updates an existing building using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBuildingTest() throws ApiException {
        Building body = null;
        api.updateBuilding(body);

        // TODO: test validations
    }
    
    /**
     * Update a building custom fields
     *
     * Updates an existing building custom fields using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBuildingCustomFieldsTest() throws ApiException {
        Building body = null;
        api.updateBuildingCustomFields(body);

        // TODO: test validations
    }
    
}
