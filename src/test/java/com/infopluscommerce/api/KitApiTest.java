/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.Kit;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for KitApi
 */
@Ignore
public class KitApiTest {

    private final KitApi api = new KitApi();

    
    /**
     * Create a kit
     *
     * Inserts a new kit using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addKitTest() throws ApiException {
        Kit body = null;
        Kit response = api.addKit(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for a kit
     *
     * Adds an audit to an existing kit.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addKitAuditTest() throws ApiException {
        Integer kitId = null;
        String kitAudit = null;
        api.addKitAudit(kitId, kitAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a kit
     *
     * Adds a file to an existing kit.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addKitFileTest() throws ApiException {
        Integer kitId = null;
        String fileName = null;
        api.addKitFile(kitId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a kit by URL.
     *
     * Adds a file to an existing kit by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addKitFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer kitId = null;
        api.addKitFileByURL(body, kitId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for a kit.
     *
     * Adds a tag to an existing kit.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addKitTagTest() throws ApiException {
        Integer kitId = null;
        String kitTag = null;
        api.addKitTag(kitId, kitTag);

        // TODO: test validations
    }
    
    /**
     * Delete a kit
     *
     * Deletes the kit identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteKitTest() throws ApiException {
        Integer kitId = null;
        api.deleteKit(kitId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for a kit.
     *
     * Deletes an existing kit file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteKitFileTest() throws ApiException {
        Integer kitId = null;
        Integer fileId = null;
        api.deleteKitFile(kitId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for a kit.
     *
     * Deletes an existing kit tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteKitTagTest() throws ApiException {
        Integer kitId = null;
        String kitTag = null;
        api.deleteKitTag(kitId, kitTag);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated a kit by id
     *
     * Returns a duplicated kit identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateKitByIdTest() throws ApiException {
        Integer kitId = null;
        Kit response = api.getDuplicateKitById(kitId);

        // TODO: test validations
    }
    
    /**
     * Search kits by filter
     *
     * Returns the list of kits that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getKitByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<Kit> response = api.getKitByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get a kit by id
     *
     * Returns the kit identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getKitByIdTest() throws ApiException {
        Integer kitId = null;
        Kit response = api.getKitById(kitId);

        // TODO: test validations
    }
    
    /**
     * Get the files for a kit.
     *
     * Get all existing kit files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getKitFilesTest() throws ApiException {
        Integer kitId = null;
        api.getKitFiles(kitId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for a kit.
     *
     * Get all existing kit tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getKitTagsTest() throws ApiException {
        Integer kitId = null;
        api.getKitTags(kitId);

        // TODO: test validations
    }
    
    /**
     * Update a kit
     *
     * Updates an existing kit using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateKitTest() throws ApiException {
        Kit body = null;
        api.updateKit(body);

        // TODO: test validations
    }
    
    /**
     * Update a kit custom fields
     *
     * Updates an existing kit custom fields using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateKitCustomFieldsTest() throws ApiException {
        Kit body = null;
        api.updateKitCustomFields(body);

        // TODO: test validations
    }
    
}
