/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.BillingCodeType;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BillingCodeTypeApi
 */
@Ignore
public class BillingCodeTypeApiTest {

    private final BillingCodeTypeApi api = new BillingCodeTypeApi();

    
    /**
     * Create a billingCodeType
     *
     * Inserts a new billingCodeType using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBillingCodeTypeTest() throws ApiException {
        BillingCodeType body = null;
        BillingCodeType response = api.addBillingCodeType(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for a billingCodeType
     *
     * Adds an audit to an existing billingCodeType.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBillingCodeTypeAuditTest() throws ApiException {
        Integer billingCodeTypeId = null;
        String billingCodeTypeAudit = null;
        api.addBillingCodeTypeAudit(billingCodeTypeId, billingCodeTypeAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a billingCodeType
     *
     * Adds a file to an existing billingCodeType.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBillingCodeTypeFileTest() throws ApiException {
        Integer billingCodeTypeId = null;
        String fileName = null;
        api.addBillingCodeTypeFile(billingCodeTypeId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a billingCodeType by URL.
     *
     * Adds a file to an existing billingCodeType by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBillingCodeTypeFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer billingCodeTypeId = null;
        api.addBillingCodeTypeFileByURL(body, billingCodeTypeId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for a billingCodeType.
     *
     * Adds a tag to an existing billingCodeType.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBillingCodeTypeTagTest() throws ApiException {
        Integer billingCodeTypeId = null;
        String billingCodeTypeTag = null;
        api.addBillingCodeTypeTag(billingCodeTypeId, billingCodeTypeTag);

        // TODO: test validations
    }
    
    /**
     * Delete a billingCodeType
     *
     * Deletes the billingCodeType identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBillingCodeTypeTest() throws ApiException {
        Integer billingCodeTypeId = null;
        api.deleteBillingCodeType(billingCodeTypeId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for a billingCodeType.
     *
     * Deletes an existing billingCodeType file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBillingCodeTypeFileTest() throws ApiException {
        Integer billingCodeTypeId = null;
        Integer fileId = null;
        api.deleteBillingCodeTypeFile(billingCodeTypeId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for a billingCodeType.
     *
     * Deletes an existing billingCodeType tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBillingCodeTypeTagTest() throws ApiException {
        Integer billingCodeTypeId = null;
        String billingCodeTypeTag = null;
        api.deleteBillingCodeTypeTag(billingCodeTypeId, billingCodeTypeTag);

        // TODO: test validations
    }
    
    /**
     * Search billingCodeTypes by filter
     *
     * Returns the list of billingCodeTypes that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBillingCodeTypeByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<BillingCodeType> response = api.getBillingCodeTypeByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get a billingCodeType by id
     *
     * Returns the billingCodeType identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBillingCodeTypeByIdTest() throws ApiException {
        Integer billingCodeTypeId = null;
        BillingCodeType response = api.getBillingCodeTypeById(billingCodeTypeId);

        // TODO: test validations
    }
    
    /**
     * Get the files for a billingCodeType.
     *
     * Get all existing billingCodeType files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBillingCodeTypeFilesTest() throws ApiException {
        Integer billingCodeTypeId = null;
        api.getBillingCodeTypeFiles(billingCodeTypeId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for a billingCodeType.
     *
     * Get all existing billingCodeType tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBillingCodeTypeTagsTest() throws ApiException {
        Integer billingCodeTypeId = null;
        api.getBillingCodeTypeTags(billingCodeTypeId);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated a billingCodeType by id
     *
     * Returns a duplicated billingCodeType identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateBillingCodeTypeByIdTest() throws ApiException {
        Integer billingCodeTypeId = null;
        BillingCodeType response = api.getDuplicateBillingCodeTypeById(billingCodeTypeId);

        // TODO: test validations
    }
    
    /**
     * Update a billingCodeType
     *
     * Updates an existing billingCodeType using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBillingCodeTypeTest() throws ApiException {
        BillingCodeType body = null;
        api.updateBillingCodeType(body);

        // TODO: test validations
    }
    
    /**
     * Update a billingCodeType custom fields
     *
     * Updates an existing billingCodeType custom fields using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBillingCodeTypeCustomFieldsTest() throws ApiException {
        BillingCodeType body = null;
        api.updateBillingCodeTypeCustomFields(body);

        // TODO: test validations
    }
    
}
