/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.FulfillmentPlan;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FulfillmentPlanApi
 */
@Ignore
public class FulfillmentPlanApiTest {

    private final FulfillmentPlanApi api = new FulfillmentPlanApi();

    
    /**
     * Create a fulfillmentPlan
     *
     * Inserts a new fulfillmentPlan using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addFulfillmentPlanTest() throws ApiException {
        FulfillmentPlan body = null;
        FulfillmentPlan response = api.addFulfillmentPlan(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for a fulfillmentPlan
     *
     * Adds an audit to an existing fulfillmentPlan.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addFulfillmentPlanAuditTest() throws ApiException {
        Integer fulfillmentPlanId = null;
        String fulfillmentPlanAudit = null;
        api.addFulfillmentPlanAudit(fulfillmentPlanId, fulfillmentPlanAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a fulfillmentPlan
     *
     * Adds a file to an existing fulfillmentPlan.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addFulfillmentPlanFileTest() throws ApiException {
        Integer fulfillmentPlanId = null;
        String fileName = null;
        api.addFulfillmentPlanFile(fulfillmentPlanId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to a fulfillmentPlan by URL.
     *
     * Adds a file to an existing fulfillmentPlan by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addFulfillmentPlanFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer fulfillmentPlanId = null;
        api.addFulfillmentPlanFileByURL(body, fulfillmentPlanId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for a fulfillmentPlan.
     *
     * Adds a tag to an existing fulfillmentPlan.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addFulfillmentPlanTagTest() throws ApiException {
        Integer fulfillmentPlanId = null;
        String fulfillmentPlanTag = null;
        api.addFulfillmentPlanTag(fulfillmentPlanId, fulfillmentPlanTag);

        // TODO: test validations
    }
    
    /**
     * Delete a fulfillmentPlan
     *
     * Deletes the fulfillmentPlan identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFulfillmentPlanTest() throws ApiException {
        Integer fulfillmentPlanId = null;
        api.deleteFulfillmentPlan(fulfillmentPlanId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for a fulfillmentPlan.
     *
     * Deletes an existing fulfillmentPlan file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFulfillmentPlanFileTest() throws ApiException {
        Integer fulfillmentPlanId = null;
        Integer fileId = null;
        api.deleteFulfillmentPlanFile(fulfillmentPlanId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for a fulfillmentPlan.
     *
     * Deletes an existing fulfillmentPlan tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFulfillmentPlanTagTest() throws ApiException {
        Integer fulfillmentPlanId = null;
        String fulfillmentPlanTag = null;
        api.deleteFulfillmentPlanTag(fulfillmentPlanId, fulfillmentPlanTag);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated a fulfillmentPlan by id
     *
     * Returns a duplicated fulfillmentPlan identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateFulfillmentPlanByIdTest() throws ApiException {
        Integer fulfillmentPlanId = null;
        FulfillmentPlan response = api.getDuplicateFulfillmentPlanById(fulfillmentPlanId);

        // TODO: test validations
    }
    
    /**
     * Search fulfillmentPlans by filter
     *
     * Returns the list of fulfillmentPlans that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFulfillmentPlanByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<FulfillmentPlan> response = api.getFulfillmentPlanByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get a fulfillmentPlan by id
     *
     * Returns the fulfillmentPlan identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFulfillmentPlanByIdTest() throws ApiException {
        Integer fulfillmentPlanId = null;
        FulfillmentPlan response = api.getFulfillmentPlanById(fulfillmentPlanId);

        // TODO: test validations
    }
    
    /**
     * Get the files for a fulfillmentPlan.
     *
     * Get all existing fulfillmentPlan files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFulfillmentPlanFilesTest() throws ApiException {
        Integer fulfillmentPlanId = null;
        api.getFulfillmentPlanFiles(fulfillmentPlanId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for a fulfillmentPlan.
     *
     * Get all existing fulfillmentPlan tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFulfillmentPlanTagsTest() throws ApiException {
        Integer fulfillmentPlanId = null;
        api.getFulfillmentPlanTags(fulfillmentPlanId);

        // TODO: test validations
    }
    
    /**
     * Update a fulfillmentPlan
     *
     * Updates an existing fulfillmentPlan using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFulfillmentPlanTest() throws ApiException {
        FulfillmentPlan body = null;
        api.updateFulfillmentPlan(body);

        // TODO: test validations
    }
    
    /**
     * Update a fulfillmentPlan custom fields
     *
     * Updates an existing fulfillmentPlan custom fields using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFulfillmentPlanCustomFieldsTest() throws ApiException {
        FulfillmentPlan body = null;
        api.updateFulfillmentPlanCustomFields(body);

        // TODO: test validations
    }
    
}
