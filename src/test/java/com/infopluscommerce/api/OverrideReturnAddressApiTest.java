/*
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infopluscommerce.api;

import com.infopluscommerce.ApiException;
import com.infopluscommerce.model.ModelApiResponse;
import com.infopluscommerce.model.OverrideReturnAddress;
import com.infopluscommerce.model.RecordFile;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OverrideReturnAddressApi
 */
@Ignore
public class OverrideReturnAddressApiTest {

    private final OverrideReturnAddressApi api = new OverrideReturnAddressApi();

    
    /**
     * Create an overrideReturnAddress
     *
     * Inserts a new overrideReturnAddress using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addOverrideReturnAddressTest() throws ApiException {
        OverrideReturnAddress body = null;
        OverrideReturnAddress response = api.addOverrideReturnAddress(body);

        // TODO: test validations
    }
    
    /**
     * Add new audit for an overrideReturnAddress
     *
     * Adds an audit to an existing overrideReturnAddress.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addOverrideReturnAddressAuditTest() throws ApiException {
        Integer overrideReturnAddressId = null;
        String overrideReturnAddressAudit = null;
        api.addOverrideReturnAddressAudit(overrideReturnAddressId, overrideReturnAddressAudit);

        // TODO: test validations
    }
    
    /**
     * Attach a file to an overrideReturnAddress
     *
     * Adds a file to an existing overrideReturnAddress.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addOverrideReturnAddressFileTest() throws ApiException {
        Integer overrideReturnAddressId = null;
        String fileName = null;
        api.addOverrideReturnAddressFile(overrideReturnAddressId, fileName);

        // TODO: test validations
    }
    
    /**
     * Attach a file to an overrideReturnAddress by URL.
     *
     * Adds a file to an existing overrideReturnAddress by URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addOverrideReturnAddressFileByURLTest() throws ApiException {
        RecordFile body = null;
        Integer overrideReturnAddressId = null;
        api.addOverrideReturnAddressFileByURL(body, overrideReturnAddressId);

        // TODO: test validations
    }
    
    /**
     * Add new tags for an overrideReturnAddress.
     *
     * Adds a tag to an existing overrideReturnAddress.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addOverrideReturnAddressTagTest() throws ApiException {
        Integer overrideReturnAddressId = null;
        String overrideReturnAddressTag = null;
        api.addOverrideReturnAddressTag(overrideReturnAddressId, overrideReturnAddressTag);

        // TODO: test validations
    }
    
    /**
     * Delete an overrideReturnAddress
     *
     * Deletes the overrideReturnAddress identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOverrideReturnAddressTest() throws ApiException {
        Integer overrideReturnAddressId = null;
        api.deleteOverrideReturnAddress(overrideReturnAddressId);

        // TODO: test validations
    }
    
    /**
     * Delete a file for an overrideReturnAddress.
     *
     * Deletes an existing overrideReturnAddress file using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOverrideReturnAddressFileTest() throws ApiException {
        Integer overrideReturnAddressId = null;
        Integer fileId = null;
        api.deleteOverrideReturnAddressFile(overrideReturnAddressId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a tag for an overrideReturnAddress.
     *
     * Deletes an existing overrideReturnAddress tag using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOverrideReturnAddressTagTest() throws ApiException {
        Integer overrideReturnAddressId = null;
        String overrideReturnAddressTag = null;
        api.deleteOverrideReturnAddressTag(overrideReturnAddressId, overrideReturnAddressTag);

        // TODO: test validations
    }
    
    /**
     * Get a duplicated an overrideReturnAddress by id
     *
     * Returns a duplicated overrideReturnAddress identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDuplicateOverrideReturnAddressByIdTest() throws ApiException {
        Integer overrideReturnAddressId = null;
        OverrideReturnAddress response = api.getDuplicateOverrideReturnAddressById(overrideReturnAddressId);

        // TODO: test validations
    }
    
    /**
     * Search overrideReturnAddresses by filter
     *
     * Returns the list of overrideReturnAddresses that match the given filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOverrideReturnAddressByFilterTest() throws ApiException {
        String filter = null;
        Integer page = null;
        Integer limit = null;
        String sort = null;
        List<OverrideReturnAddress> response = api.getOverrideReturnAddressByFilter(filter, page, limit, sort);

        // TODO: test validations
    }
    
    /**
     * Get an overrideReturnAddress by id
     *
     * Returns the overrideReturnAddress identified by the specified id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOverrideReturnAddressByIdTest() throws ApiException {
        Integer overrideReturnAddressId = null;
        OverrideReturnAddress response = api.getOverrideReturnAddressById(overrideReturnAddressId);

        // TODO: test validations
    }
    
    /**
     * Get the files for an overrideReturnAddress.
     *
     * Get all existing overrideReturnAddress files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOverrideReturnAddressFilesTest() throws ApiException {
        Integer overrideReturnAddressId = null;
        api.getOverrideReturnAddressFiles(overrideReturnAddressId);

        // TODO: test validations
    }
    
    /**
     * Get the tags for an overrideReturnAddress.
     *
     * Get all existing overrideReturnAddress tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOverrideReturnAddressTagsTest() throws ApiException {
        Integer overrideReturnAddressId = null;
        api.getOverrideReturnAddressTags(overrideReturnAddressId);

        // TODO: test validations
    }
    
    /**
     * Update an overrideReturnAddress
     *
     * Updates an existing overrideReturnAddress using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOverrideReturnAddressTest() throws ApiException {
        OverrideReturnAddress body = null;
        api.updateOverrideReturnAddress(body);

        // TODO: test validations
    }
    
    /**
     * Update an overrideReturnAddress custom fields
     *
     * Updates an existing overrideReturnAddress custom fields using the specified data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOverrideReturnAddressCustomFieldsTest() throws ApiException {
        OverrideReturnAddress body = null;
        api.updateOverrideReturnAddressCustomFields(body);

        // TODO: test validations
    }
    
}
